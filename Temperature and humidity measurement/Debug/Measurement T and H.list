
Measurement T and H.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006770  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800687c  0800687c  0000787c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006940  08006940  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  08006940  08006940  00007940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006948  08006948  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006948  08006948  00007948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800694c  0800694c  0000794c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006950  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  2000005c  080069ac  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  080069ac  000082f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b075  00000000  00000000  00008085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cf2  00000000  00000000  000130fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  00014df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007d0  00000000  00000000  000157f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017528  00000000  00000000  00015fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d690  00000000  00000000  0002d4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084987  00000000  00000000  0003ab80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bf507  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f6c  00000000  00000000  000bf54c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000c24b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08006864 	.word	0x08006864

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08006864 	.word	0x08006864

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_fmul>:
 800015c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000160:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000164:	bf1e      	ittt	ne
 8000166:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016a:	ea92 0f0c 	teqne	r2, ip
 800016e:	ea93 0f0c 	teqne	r3, ip
 8000172:	d06f      	beq.n	8000254 <__aeabi_fmul+0xf8>
 8000174:	441a      	add	r2, r3
 8000176:	ea80 0c01 	eor.w	ip, r0, r1
 800017a:	0240      	lsls	r0, r0, #9
 800017c:	bf18      	it	ne
 800017e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000182:	d01e      	beq.n	80001c2 <__aeabi_fmul+0x66>
 8000184:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000188:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800018c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000190:	fba0 3101 	umull	r3, r1, r0, r1
 8000194:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000198:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800019c:	bf3e      	ittt	cc
 800019e:	0049      	lslcc	r1, r1, #1
 80001a0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a4:	005b      	lslcc	r3, r3, #1
 80001a6:	ea40 0001 	orr.w	r0, r0, r1
 80001aa:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001ae:	2afd      	cmp	r2, #253	@ 0xfd
 80001b0:	d81d      	bhi.n	80001ee <__aeabi_fmul+0x92>
 80001b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001b6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ba:	bf08      	it	eq
 80001bc:	f020 0001 	biceq.w	r0, r0, #1
 80001c0:	4770      	bx	lr
 80001c2:	f090 0f00 	teq	r0, #0
 80001c6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ca:	bf08      	it	eq
 80001cc:	0249      	lsleq	r1, r1, #9
 80001ce:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001d6:	3a7f      	subs	r2, #127	@ 0x7f
 80001d8:	bfc2      	ittt	gt
 80001da:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001de:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e2:	4770      	bxgt	lr
 80001e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001e8:	f04f 0300 	mov.w	r3, #0
 80001ec:	3a01      	subs	r2, #1
 80001ee:	dc5d      	bgt.n	80002ac <__aeabi_fmul+0x150>
 80001f0:	f112 0f19 	cmn.w	r2, #25
 80001f4:	bfdc      	itt	le
 80001f6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fa:	4770      	bxle	lr
 80001fc:	f1c2 0200 	rsb	r2, r2, #0
 8000200:	0041      	lsls	r1, r0, #1
 8000202:	fa21 f102 	lsr.w	r1, r1, r2
 8000206:	f1c2 0220 	rsb	r2, r2, #32
 800020a:	fa00 fc02 	lsl.w	ip, r0, r2
 800020e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000212:	f140 0000 	adc.w	r0, r0, #0
 8000216:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021a:	bf08      	it	eq
 800021c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000220:	4770      	bx	lr
 8000222:	f092 0f00 	teq	r2, #0
 8000226:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022a:	bf02      	ittt	eq
 800022c:	0040      	lsleq	r0, r0, #1
 800022e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000232:	3a01      	subeq	r2, #1
 8000234:	d0f9      	beq.n	800022a <__aeabi_fmul+0xce>
 8000236:	ea40 000c 	orr.w	r0, r0, ip
 800023a:	f093 0f00 	teq	r3, #0
 800023e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000242:	bf02      	ittt	eq
 8000244:	0049      	lsleq	r1, r1, #1
 8000246:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024a:	3b01      	subeq	r3, #1
 800024c:	d0f9      	beq.n	8000242 <__aeabi_fmul+0xe6>
 800024e:	ea41 010c 	orr.w	r1, r1, ip
 8000252:	e78f      	b.n	8000174 <__aeabi_fmul+0x18>
 8000254:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000258:	ea92 0f0c 	teq	r2, ip
 800025c:	bf18      	it	ne
 800025e:	ea93 0f0c 	teqne	r3, ip
 8000262:	d00a      	beq.n	800027a <__aeabi_fmul+0x11e>
 8000264:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000268:	bf18      	it	ne
 800026a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800026e:	d1d8      	bne.n	8000222 <__aeabi_fmul+0xc6>
 8000270:	ea80 0001 	eor.w	r0, r0, r1
 8000274:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000278:	4770      	bx	lr
 800027a:	f090 0f00 	teq	r0, #0
 800027e:	bf17      	itett	ne
 8000280:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000284:	4608      	moveq	r0, r1
 8000286:	f091 0f00 	teqne	r1, #0
 800028a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800028e:	d014      	beq.n	80002ba <__aeabi_fmul+0x15e>
 8000290:	ea92 0f0c 	teq	r2, ip
 8000294:	d101      	bne.n	800029a <__aeabi_fmul+0x13e>
 8000296:	0242      	lsls	r2, r0, #9
 8000298:	d10f      	bne.n	80002ba <__aeabi_fmul+0x15e>
 800029a:	ea93 0f0c 	teq	r3, ip
 800029e:	d103      	bne.n	80002a8 <__aeabi_fmul+0x14c>
 80002a0:	024b      	lsls	r3, r1, #9
 80002a2:	bf18      	it	ne
 80002a4:	4608      	movne	r0, r1
 80002a6:	d108      	bne.n	80002ba <__aeabi_fmul+0x15e>
 80002a8:	ea80 0001 	eor.w	r0, r0, r1
 80002ac:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002b8:	4770      	bx	lr
 80002ba:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002be:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c2:	4770      	bx	lr

080002c4 <__aeabi_drsub>:
 80002c4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c8:	e002      	b.n	80002d0 <__adddf3>
 80002ca:	bf00      	nop

080002cc <__aeabi_dsub>:
 80002cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d0 <__adddf3>:
 80002d0:	b530      	push	{r4, r5, lr}
 80002d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002da:	ea94 0f05 	teq	r4, r5
 80002de:	bf08      	it	eq
 80002e0:	ea90 0f02 	teqeq	r0, r2
 80002e4:	bf1f      	itttt	ne
 80002e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f6:	f000 80e2 	beq.w	80004be <__adddf3+0x1ee>
 80002fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000302:	bfb8      	it	lt
 8000304:	426d      	neglt	r5, r5
 8000306:	dd0c      	ble.n	8000322 <__adddf3+0x52>
 8000308:	442c      	add	r4, r5
 800030a:	ea80 0202 	eor.w	r2, r0, r2
 800030e:	ea81 0303 	eor.w	r3, r1, r3
 8000312:	ea82 0000 	eor.w	r0, r2, r0
 8000316:	ea83 0101 	eor.w	r1, r3, r1
 800031a:	ea80 0202 	eor.w	r2, r0, r2
 800031e:	ea81 0303 	eor.w	r3, r1, r3
 8000322:	2d36      	cmp	r5, #54	@ 0x36
 8000324:	bf88      	it	hi
 8000326:	bd30      	pophi	{r4, r5, pc}
 8000328:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800032c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000330:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000334:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x70>
 800033a:	4240      	negs	r0, r0
 800033c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000340:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000344:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000348:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800034c:	d002      	beq.n	8000354 <__adddf3+0x84>
 800034e:	4252      	negs	r2, r2
 8000350:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000354:	ea94 0f05 	teq	r4, r5
 8000358:	f000 80a7 	beq.w	80004aa <__adddf3+0x1da>
 800035c:	f1a4 0401 	sub.w	r4, r4, #1
 8000360:	f1d5 0e20 	rsbs	lr, r5, #32
 8000364:	db0d      	blt.n	8000382 <__adddf3+0xb2>
 8000366:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036a:	fa22 f205 	lsr.w	r2, r2, r5
 800036e:	1880      	adds	r0, r0, r2
 8000370:	f141 0100 	adc.w	r1, r1, #0
 8000374:	fa03 f20e 	lsl.w	r2, r3, lr
 8000378:	1880      	adds	r0, r0, r2
 800037a:	fa43 f305 	asr.w	r3, r3, r5
 800037e:	4159      	adcs	r1, r3
 8000380:	e00e      	b.n	80003a0 <__adddf3+0xd0>
 8000382:	f1a5 0520 	sub.w	r5, r5, #32
 8000386:	f10e 0e20 	add.w	lr, lr, #32
 800038a:	2a01      	cmp	r2, #1
 800038c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000390:	bf28      	it	cs
 8000392:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	18c0      	adds	r0, r0, r3
 800039c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a4:	d507      	bpl.n	80003b6 <__adddf3+0xe6>
 80003a6:	f04f 0e00 	mov.w	lr, #0
 80003aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003ba:	d31b      	bcc.n	80003f4 <__adddf3+0x124>
 80003bc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c0:	d30c      	bcc.n	80003dc <__adddf3+0x10c>
 80003c2:	0849      	lsrs	r1, r1, #1
 80003c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003cc:	f104 0401 	add.w	r4, r4, #1
 80003d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d8:	f080 809a 	bcs.w	8000510 <__adddf3+0x240>
 80003dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e0:	bf08      	it	eq
 80003e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e6:	f150 0000 	adcs.w	r0, r0, #0
 80003ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ee:	ea41 0105 	orr.w	r1, r1, r5
 80003f2:	bd30      	pop	{r4, r5, pc}
 80003f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f8:	4140      	adcs	r0, r0
 80003fa:	eb41 0101 	adc.w	r1, r1, r1
 80003fe:	3c01      	subs	r4, #1
 8000400:	bf28      	it	cs
 8000402:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000406:	d2e9      	bcs.n	80003dc <__adddf3+0x10c>
 8000408:	f091 0f00 	teq	r1, #0
 800040c:	bf04      	itt	eq
 800040e:	4601      	moveq	r1, r0
 8000410:	2000      	moveq	r0, #0
 8000412:	fab1 f381 	clz	r3, r1
 8000416:	bf08      	it	eq
 8000418:	3320      	addeq	r3, #32
 800041a:	f1a3 030b 	sub.w	r3, r3, #11
 800041e:	f1b3 0220 	subs.w	r2, r3, #32
 8000422:	da0c      	bge.n	800043e <__adddf3+0x16e>
 8000424:	320c      	adds	r2, #12
 8000426:	dd08      	ble.n	800043a <__adddf3+0x16a>
 8000428:	f102 0c14 	add.w	ip, r2, #20
 800042c:	f1c2 020c 	rsb	r2, r2, #12
 8000430:	fa01 f00c 	lsl.w	r0, r1, ip
 8000434:	fa21 f102 	lsr.w	r1, r1, r2
 8000438:	e00c      	b.n	8000454 <__adddf3+0x184>
 800043a:	f102 0214 	add.w	r2, r2, #20
 800043e:	bfd8      	it	le
 8000440:	f1c2 0c20 	rsble	ip, r2, #32
 8000444:	fa01 f102 	lsl.w	r1, r1, r2
 8000448:	fa20 fc0c 	lsr.w	ip, r0, ip
 800044c:	bfdc      	itt	le
 800044e:	ea41 010c 	orrle.w	r1, r1, ip
 8000452:	4090      	lslle	r0, r2
 8000454:	1ae4      	subs	r4, r4, r3
 8000456:	bfa2      	ittt	ge
 8000458:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800045c:	4329      	orrge	r1, r5
 800045e:	bd30      	popge	{r4, r5, pc}
 8000460:	ea6f 0404 	mvn.w	r4, r4
 8000464:	3c1f      	subs	r4, #31
 8000466:	da1c      	bge.n	80004a2 <__adddf3+0x1d2>
 8000468:	340c      	adds	r4, #12
 800046a:	dc0e      	bgt.n	800048a <__adddf3+0x1ba>
 800046c:	f104 0414 	add.w	r4, r4, #20
 8000470:	f1c4 0220 	rsb	r2, r4, #32
 8000474:	fa20 f004 	lsr.w	r0, r0, r4
 8000478:	fa01 f302 	lsl.w	r3, r1, r2
 800047c:	ea40 0003 	orr.w	r0, r0, r3
 8000480:	fa21 f304 	lsr.w	r3, r1, r4
 8000484:	ea45 0103 	orr.w	r1, r5, r3
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	f1c4 040c 	rsb	r4, r4, #12
 800048e:	f1c4 0220 	rsb	r2, r4, #32
 8000492:	fa20 f002 	lsr.w	r0, r0, r2
 8000496:	fa01 f304 	lsl.w	r3, r1, r4
 800049a:	ea40 0003 	orr.w	r0, r0, r3
 800049e:	4629      	mov	r1, r5
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	fa21 f004 	lsr.w	r0, r1, r4
 80004a6:	4629      	mov	r1, r5
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	f094 0f00 	teq	r4, #0
 80004ae:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b2:	bf06      	itte	eq
 80004b4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b8:	3401      	addeq	r4, #1
 80004ba:	3d01      	subne	r5, #1
 80004bc:	e74e      	b.n	800035c <__adddf3+0x8c>
 80004be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c2:	bf18      	it	ne
 80004c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c8:	d029      	beq.n	800051e <__adddf3+0x24e>
 80004ca:	ea94 0f05 	teq	r4, r5
 80004ce:	bf08      	it	eq
 80004d0:	ea90 0f02 	teqeq	r0, r2
 80004d4:	d005      	beq.n	80004e2 <__adddf3+0x212>
 80004d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004da:	bf04      	itt	eq
 80004dc:	4619      	moveq	r1, r3
 80004de:	4610      	moveq	r0, r2
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea91 0f03 	teq	r1, r3
 80004e6:	bf1e      	ittt	ne
 80004e8:	2100      	movne	r1, #0
 80004ea:	2000      	movne	r0, #0
 80004ec:	bd30      	popne	{r4, r5, pc}
 80004ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f2:	d105      	bne.n	8000500 <__adddf3+0x230>
 80004f4:	0040      	lsls	r0, r0, #1
 80004f6:	4149      	adcs	r1, r1
 80004f8:	bf28      	it	cs
 80004fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fe:	bd30      	pop	{r4, r5, pc}
 8000500:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000504:	bf3c      	itt	cc
 8000506:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050a:	bd30      	popcc	{r4, r5, pc}
 800050c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000510:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000514:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000518:	f04f 0000 	mov.w	r0, #0
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000522:	bf1a      	itte	ne
 8000524:	4619      	movne	r1, r3
 8000526:	4610      	movne	r0, r2
 8000528:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800052c:	bf1c      	itt	ne
 800052e:	460b      	movne	r3, r1
 8000530:	4602      	movne	r2, r0
 8000532:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000536:	bf06      	itte	eq
 8000538:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800053c:	ea91 0f03 	teqeq	r1, r3
 8000540:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	bf00      	nop

08000548 <__aeabi_ui2d>:
 8000548:	f090 0f00 	teq	r0, #0
 800054c:	bf04      	itt	eq
 800054e:	2100      	moveq	r1, #0
 8000550:	4770      	bxeq	lr
 8000552:	b530      	push	{r4, r5, lr}
 8000554:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000558:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800055c:	f04f 0500 	mov.w	r5, #0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e750      	b.n	8000408 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_i2d>:
 8000568:	f090 0f00 	teq	r0, #0
 800056c:	bf04      	itt	eq
 800056e:	2100      	moveq	r1, #0
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000578:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800057c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000580:	bf48      	it	mi
 8000582:	4240      	negmi	r0, r0
 8000584:	f04f 0100 	mov.w	r1, #0
 8000588:	e73e      	b.n	8000408 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_f2d>:
 800058c:	0042      	lsls	r2, r0, #1
 800058e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000592:	ea4f 0131 	mov.w	r1, r1, rrx
 8000596:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059a:	bf1f      	itttt	ne
 800059c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a8:	4770      	bxne	lr
 80005aa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ae:	bf08      	it	eq
 80005b0:	4770      	bxeq	lr
 80005b2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b6:	bf04      	itt	eq
 80005b8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005cc:	e71c      	b.n	8000408 <__adddf3+0x138>
 80005ce:	bf00      	nop

080005d0 <__aeabi_ul2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f04f 0500 	mov.w	r5, #0
 80005de:	e00a      	b.n	80005f6 <__aeabi_l2d+0x16>

080005e0 <__aeabi_l2d>:
 80005e0:	ea50 0201 	orrs.w	r2, r0, r1
 80005e4:	bf08      	it	eq
 80005e6:	4770      	bxeq	lr
 80005e8:	b530      	push	{r4, r5, lr}
 80005ea:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ee:	d502      	bpl.n	80005f6 <__aeabi_l2d+0x16>
 80005f0:	4240      	negs	r0, r0
 80005f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000602:	f43f aed8 	beq.w	80003b6 <__adddf3+0xe6>
 8000606:	f04f 0203 	mov.w	r2, #3
 800060a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060e:	bf18      	it	ne
 8000610:	3203      	addne	r2, #3
 8000612:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000616:	bf18      	it	ne
 8000618:	3203      	addne	r2, #3
 800061a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061e:	f1c2 0320 	rsb	r3, r2, #32
 8000622:	fa00 fc03 	lsl.w	ip, r0, r3
 8000626:	fa20 f002 	lsr.w	r0, r0, r2
 800062a:	fa01 fe03 	lsl.w	lr, r1, r3
 800062e:	ea40 000e 	orr.w	r0, r0, lr
 8000632:	fa21 f102 	lsr.w	r1, r1, r2
 8000636:	4414      	add	r4, r2
 8000638:	e6bd      	b.n	80003b6 <__adddf3+0xe6>
 800063a:	bf00      	nop

0800063c <__aeabi_dmul>:
 800063c:	b570      	push	{r4, r5, r6, lr}
 800063e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000642:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000646:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064a:	bf1d      	ittte	ne
 800064c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000650:	ea94 0f0c 	teqne	r4, ip
 8000654:	ea95 0f0c 	teqne	r5, ip
 8000658:	f000 f8de 	bleq	8000818 <__aeabi_dmul+0x1dc>
 800065c:	442c      	add	r4, r5
 800065e:	ea81 0603 	eor.w	r6, r1, r3
 8000662:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000666:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066e:	bf18      	it	ne
 8000670:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000678:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800067c:	d038      	beq.n	80006f0 <__aeabi_dmul+0xb4>
 800067e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000682:	f04f 0500 	mov.w	r5, #0
 8000686:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000692:	f04f 0600 	mov.w	r6, #0
 8000696:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069a:	f09c 0f00 	teq	ip, #0
 800069e:	bf18      	it	ne
 80006a0:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006ac:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b0:	d204      	bcs.n	80006bc <__aeabi_dmul+0x80>
 80006b2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b6:	416d      	adcs	r5, r5
 80006b8:	eb46 0606 	adc.w	r6, r6, r6
 80006bc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006cc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d4:	bf88      	it	hi
 80006d6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006da:	d81e      	bhi.n	800071a <__aeabi_dmul+0xde>
 80006dc:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e0:	bf08      	it	eq
 80006e2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e6:	f150 0000 	adcs.w	r0, r0, #0
 80006ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f4:	ea46 0101 	orr.w	r1, r6, r1
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000704:	bfc2      	ittt	gt
 8000706:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070e:	bd70      	popgt	{r4, r5, r6, pc}
 8000710:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000714:	f04f 0e00 	mov.w	lr, #0
 8000718:	3c01      	subs	r4, #1
 800071a:	f300 80ab 	bgt.w	8000874 <__aeabi_dmul+0x238>
 800071e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000722:	bfde      	ittt	le
 8000724:	2000      	movle	r0, #0
 8000726:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072a:	bd70      	pople	{r4, r5, r6, pc}
 800072c:	f1c4 0400 	rsb	r4, r4, #0
 8000730:	3c20      	subs	r4, #32
 8000732:	da35      	bge.n	80007a0 <__aeabi_dmul+0x164>
 8000734:	340c      	adds	r4, #12
 8000736:	dc1b      	bgt.n	8000770 <__aeabi_dmul+0x134>
 8000738:	f104 0414 	add.w	r4, r4, #20
 800073c:	f1c4 0520 	rsb	r5, r4, #32
 8000740:	fa00 f305 	lsl.w	r3, r0, r5
 8000744:	fa20 f004 	lsr.w	r0, r0, r4
 8000748:	fa01 f205 	lsl.w	r2, r1, r5
 800074c:	ea40 0002 	orr.w	r0, r0, r2
 8000750:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000754:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	fa21 f604 	lsr.w	r6, r1, r4
 8000760:	eb42 0106 	adc.w	r1, r2, r6
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 040c 	rsb	r4, r4, #12
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f304 	lsl.w	r3, r0, r4
 800077c:	fa20 f005 	lsr.w	r0, r0, r5
 8000780:	fa01 f204 	lsl.w	r2, r1, r4
 8000784:	ea40 0002 	orr.w	r0, r0, r2
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000790:	f141 0100 	adc.w	r1, r1, #0
 8000794:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000798:	bf08      	it	eq
 800079a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079e:	bd70      	pop	{r4, r5, r6, pc}
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f205 	lsl.w	r2, r0, r5
 80007a8:	ea4e 0e02 	orr.w	lr, lr, r2
 80007ac:	fa20 f304 	lsr.w	r3, r0, r4
 80007b0:	fa01 f205 	lsl.w	r2, r1, r5
 80007b4:	ea43 0302 	orr.w	r3, r3, r2
 80007b8:	fa21 f004 	lsr.w	r0, r1, r4
 80007bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c0:	fa21 f204 	lsr.w	r2, r1, r4
 80007c4:	ea20 0002 	bic.w	r0, r0, r2
 80007c8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d0:	bf08      	it	eq
 80007d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d6:	bd70      	pop	{r4, r5, r6, pc}
 80007d8:	f094 0f00 	teq	r4, #0
 80007dc:	d10f      	bne.n	80007fe <__aeabi_dmul+0x1c2>
 80007de:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e2:	0040      	lsls	r0, r0, #1
 80007e4:	eb41 0101 	adc.w	r1, r1, r1
 80007e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007ec:	bf08      	it	eq
 80007ee:	3c01      	subeq	r4, #1
 80007f0:	d0f7      	beq.n	80007e2 <__aeabi_dmul+0x1a6>
 80007f2:	ea41 0106 	orr.w	r1, r1, r6
 80007f6:	f095 0f00 	teq	r5, #0
 80007fa:	bf18      	it	ne
 80007fc:	4770      	bxne	lr
 80007fe:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000802:	0052      	lsls	r2, r2, #1
 8000804:	eb43 0303 	adc.w	r3, r3, r3
 8000808:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800080c:	bf08      	it	eq
 800080e:	3d01      	subeq	r5, #1
 8000810:	d0f7      	beq.n	8000802 <__aeabi_dmul+0x1c6>
 8000812:	ea43 0306 	orr.w	r3, r3, r6
 8000816:	4770      	bx	lr
 8000818:	ea94 0f0c 	teq	r4, ip
 800081c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000820:	bf18      	it	ne
 8000822:	ea95 0f0c 	teqne	r5, ip
 8000826:	d00c      	beq.n	8000842 <__aeabi_dmul+0x206>
 8000828:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800082c:	bf18      	it	ne
 800082e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000832:	d1d1      	bne.n	80007d8 <__aeabi_dmul+0x19c>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000846:	bf06      	itte	eq
 8000848:	4610      	moveq	r0, r2
 800084a:	4619      	moveq	r1, r3
 800084c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000850:	d019      	beq.n	8000886 <__aeabi_dmul+0x24a>
 8000852:	ea94 0f0c 	teq	r4, ip
 8000856:	d102      	bne.n	800085e <__aeabi_dmul+0x222>
 8000858:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800085c:	d113      	bne.n	8000886 <__aeabi_dmul+0x24a>
 800085e:	ea95 0f0c 	teq	r5, ip
 8000862:	d105      	bne.n	8000870 <__aeabi_dmul+0x234>
 8000864:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000868:	bf1c      	itt	ne
 800086a:	4610      	movne	r0, r2
 800086c:	4619      	movne	r1, r3
 800086e:	d10a      	bne.n	8000886 <__aeabi_dmul+0x24a>
 8000870:	ea81 0103 	eor.w	r1, r1, r3
 8000874:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000878:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800087c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000880:	f04f 0000 	mov.w	r0, #0
 8000884:	bd70      	pop	{r4, r5, r6, pc}
 8000886:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088e:	bd70      	pop	{r4, r5, r6, pc}

08000890 <__aeabi_ddiv>:
 8000890:	b570      	push	{r4, r5, r6, lr}
 8000892:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000896:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089e:	bf1d      	ittte	ne
 80008a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a4:	ea94 0f0c 	teqne	r4, ip
 80008a8:	ea95 0f0c 	teqne	r5, ip
 80008ac:	f000 f8a7 	bleq	80009fe <__aeabi_ddiv+0x16e>
 80008b0:	eba4 0405 	sub.w	r4, r4, r5
 80008b4:	ea81 0e03 	eor.w	lr, r1, r3
 80008b8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c0:	f000 8088 	beq.w	80009d4 <__aeabi_ddiv+0x144>
 80008c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c8:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008cc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008dc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e4:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e8:	429d      	cmp	r5, r3
 80008ea:	bf08      	it	eq
 80008ec:	4296      	cmpeq	r6, r2
 80008ee:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f6:	d202      	bcs.n	80008fe <__aeabi_ddiv+0x6e>
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	1ab6      	subs	r6, r6, r2
 8000900:	eb65 0503 	sbc.w	r5, r5, r3
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090e:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 000c 	orrcs.w	r0, r0, ip
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800093c:	085b      	lsrs	r3, r3, #1
 800093e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000942:	ebb6 0e02 	subs.w	lr, r6, r2
 8000946:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094a:	bf22      	ittt	cs
 800094c:	1ab6      	subcs	r6, r6, r2
 800094e:	4675      	movcs	r5, lr
 8000950:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000954:	085b      	lsrs	r3, r3, #1
 8000956:	ea4f 0232 	mov.w	r2, r2, rrx
 800095a:	ebb6 0e02 	subs.w	lr, r6, r2
 800095e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000962:	bf22      	ittt	cs
 8000964:	1ab6      	subcs	r6, r6, r2
 8000966:	4675      	movcs	r5, lr
 8000968:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800096c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000970:	d018      	beq.n	80009a4 <__aeabi_ddiv+0x114>
 8000972:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000976:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000982:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000986:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098e:	d1c0      	bne.n	8000912 <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	d10b      	bne.n	80009ae <__aeabi_ddiv+0x11e>
 8000996:	ea41 0100 	orr.w	r1, r1, r0
 800099a:	f04f 0000 	mov.w	r0, #0
 800099e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a2:	e7b6      	b.n	8000912 <__aeabi_ddiv+0x82>
 80009a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a8:	bf04      	itt	eq
 80009aa:	4301      	orreq	r1, r0
 80009ac:	2000      	moveq	r0, #0
 80009ae:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b2:	bf88      	it	hi
 80009b4:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b8:	f63f aeaf 	bhi.w	800071a <__aeabi_dmul+0xde>
 80009bc:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c0:	bf04      	itt	eq
 80009c2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ca:	f150 0000 	adcs.w	r0, r0, #0
 80009ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d2:	bd70      	pop	{r4, r5, r6, pc}
 80009d4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009dc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e0:	bfc2      	ittt	gt
 80009e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ea:	bd70      	popgt	{r4, r5, r6, pc}
 80009ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f0:	f04f 0e00 	mov.w	lr, #0
 80009f4:	3c01      	subs	r4, #1
 80009f6:	e690      	b.n	800071a <__aeabi_dmul+0xde>
 80009f8:	ea45 0e06 	orr.w	lr, r5, r6
 80009fc:	e68d      	b.n	800071a <__aeabi_dmul+0xde>
 80009fe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a02:	ea94 0f0c 	teq	r4, ip
 8000a06:	bf08      	it	eq
 8000a08:	ea95 0f0c 	teqeq	r5, ip
 8000a0c:	f43f af3b 	beq.w	8000886 <__aeabi_dmul+0x24a>
 8000a10:	ea94 0f0c 	teq	r4, ip
 8000a14:	d10a      	bne.n	8000a2c <__aeabi_ddiv+0x19c>
 8000a16:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1a:	f47f af34 	bne.w	8000886 <__aeabi_dmul+0x24a>
 8000a1e:	ea95 0f0c 	teq	r5, ip
 8000a22:	f47f af25 	bne.w	8000870 <__aeabi_dmul+0x234>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e72c      	b.n	8000886 <__aeabi_dmul+0x24a>
 8000a2c:	ea95 0f0c 	teq	r5, ip
 8000a30:	d106      	bne.n	8000a40 <__aeabi_ddiv+0x1b0>
 8000a32:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a36:	f43f aefd 	beq.w	8000834 <__aeabi_dmul+0x1f8>
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	e722      	b.n	8000886 <__aeabi_dmul+0x24a>
 8000a40:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a44:	bf18      	it	ne
 8000a46:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4a:	f47f aec5 	bne.w	80007d8 <__aeabi_dmul+0x19c>
 8000a4e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a52:	f47f af0d 	bne.w	8000870 <__aeabi_dmul+0x234>
 8000a56:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5a:	f47f aeeb 	bne.w	8000834 <__aeabi_dmul+0x1f8>
 8000a5e:	e712      	b.n	8000886 <__aeabi_dmul+0x24a>

08000a60 <__aeabi_d2f>:
 8000a60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a68:	bf24      	itt	cs
 8000a6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a72:	d90d      	bls.n	8000a90 <__aeabi_d2f+0x30>
 8000a74:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a80:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a88:	bf08      	it	eq
 8000a8a:	f020 0001 	biceq.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a94:	d121      	bne.n	8000ada <__aeabi_d2f+0x7a>
 8000a96:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a9a:	bfbc      	itt	lt
 8000a9c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000aa0:	4770      	bxlt	lr
 8000aa2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aa6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aaa:	f1c2 0218 	rsb	r2, r2, #24
 8000aae:	f1c2 0c20 	rsb	ip, r2, #32
 8000ab2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab6:	fa20 f002 	lsr.w	r0, r0, r2
 8000aba:	bf18      	it	ne
 8000abc:	f040 0001 	orrne.w	r0, r0, #1
 8000ac0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000acc:	ea40 000c 	orr.w	r0, r0, ip
 8000ad0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad8:	e7cc      	b.n	8000a74 <__aeabi_d2f+0x14>
 8000ada:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ade:	d107      	bne.n	8000af0 <__aeabi_d2f+0x90>
 8000ae0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae4:	bf1e      	ittt	ne
 8000ae6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000aea:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aee:	4770      	bxne	lr
 8000af0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000af4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000af8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_frsub>:
 8000b00:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b04:	e002      	b.n	8000b0c <__addsf3>
 8000b06:	bf00      	nop

08000b08 <__aeabi_fsub>:
 8000b08:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b0c <__addsf3>:
 8000b0c:	0042      	lsls	r2, r0, #1
 8000b0e:	bf1f      	itttt	ne
 8000b10:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b14:	ea92 0f03 	teqne	r2, r3
 8000b18:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b1c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b20:	d06a      	beq.n	8000bf8 <__addsf3+0xec>
 8000b22:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b26:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b2a:	bfc1      	itttt	gt
 8000b2c:	18d2      	addgt	r2, r2, r3
 8000b2e:	4041      	eorgt	r1, r0
 8000b30:	4048      	eorgt	r0, r1
 8000b32:	4041      	eorgt	r1, r0
 8000b34:	bfb8      	it	lt
 8000b36:	425b      	neglt	r3, r3
 8000b38:	2b19      	cmp	r3, #25
 8000b3a:	bf88      	it	hi
 8000b3c:	4770      	bxhi	lr
 8000b3e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b42:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b46:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b4a:	bf18      	it	ne
 8000b4c:	4240      	negne	r0, r0
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b52:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b56:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b5a:	bf18      	it	ne
 8000b5c:	4249      	negne	r1, r1
 8000b5e:	ea92 0f03 	teq	r2, r3
 8000b62:	d03f      	beq.n	8000be4 <__addsf3+0xd8>
 8000b64:	f1a2 0201 	sub.w	r2, r2, #1
 8000b68:	fa41 fc03 	asr.w	ip, r1, r3
 8000b6c:	eb10 000c 	adds.w	r0, r0, ip
 8000b70:	f1c3 0320 	rsb	r3, r3, #32
 8000b74:	fa01 f103 	lsl.w	r1, r1, r3
 8000b78:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b7c:	d502      	bpl.n	8000b84 <__addsf3+0x78>
 8000b7e:	4249      	negs	r1, r1
 8000b80:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b84:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b88:	d313      	bcc.n	8000bb2 <__addsf3+0xa6>
 8000b8a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b8e:	d306      	bcc.n	8000b9e <__addsf3+0x92>
 8000b90:	0840      	lsrs	r0, r0, #1
 8000b92:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b96:	f102 0201 	add.w	r2, r2, #1
 8000b9a:	2afe      	cmp	r2, #254	@ 0xfe
 8000b9c:	d251      	bcs.n	8000c42 <__addsf3+0x136>
 8000b9e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000ba2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ba6:	bf08      	it	eq
 8000ba8:	f020 0001 	biceq.w	r0, r0, #1
 8000bac:	ea40 0003 	orr.w	r0, r0, r3
 8000bb0:	4770      	bx	lr
 8000bb2:	0049      	lsls	r1, r1, #1
 8000bb4:	eb40 0000 	adc.w	r0, r0, r0
 8000bb8:	3a01      	subs	r2, #1
 8000bba:	bf28      	it	cs
 8000bbc:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bc0:	d2ed      	bcs.n	8000b9e <__addsf3+0x92>
 8000bc2:	fab0 fc80 	clz	ip, r0
 8000bc6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bca:	ebb2 020c 	subs.w	r2, r2, ip
 8000bce:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bd2:	bfaa      	itet	ge
 8000bd4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bd8:	4252      	neglt	r2, r2
 8000bda:	4318      	orrge	r0, r3
 8000bdc:	bfbc      	itt	lt
 8000bde:	40d0      	lsrlt	r0, r2
 8000be0:	4318      	orrlt	r0, r3
 8000be2:	4770      	bx	lr
 8000be4:	f092 0f00 	teq	r2, #0
 8000be8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bec:	bf06      	itte	eq
 8000bee:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bf2:	3201      	addeq	r2, #1
 8000bf4:	3b01      	subne	r3, #1
 8000bf6:	e7b5      	b.n	8000b64 <__addsf3+0x58>
 8000bf8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bfc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c00:	bf18      	it	ne
 8000c02:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c06:	d021      	beq.n	8000c4c <__addsf3+0x140>
 8000c08:	ea92 0f03 	teq	r2, r3
 8000c0c:	d004      	beq.n	8000c18 <__addsf3+0x10c>
 8000c0e:	f092 0f00 	teq	r2, #0
 8000c12:	bf08      	it	eq
 8000c14:	4608      	moveq	r0, r1
 8000c16:	4770      	bx	lr
 8000c18:	ea90 0f01 	teq	r0, r1
 8000c1c:	bf1c      	itt	ne
 8000c1e:	2000      	movne	r0, #0
 8000c20:	4770      	bxne	lr
 8000c22:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c26:	d104      	bne.n	8000c32 <__addsf3+0x126>
 8000c28:	0040      	lsls	r0, r0, #1
 8000c2a:	bf28      	it	cs
 8000c2c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c30:	4770      	bx	lr
 8000c32:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c36:	bf3c      	itt	cc
 8000c38:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c3c:	4770      	bxcc	lr
 8000c3e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c42:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c46:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c4a:	4770      	bx	lr
 8000c4c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c50:	bf16      	itet	ne
 8000c52:	4608      	movne	r0, r1
 8000c54:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c58:	4601      	movne	r1, r0
 8000c5a:	0242      	lsls	r2, r0, #9
 8000c5c:	bf06      	itte	eq
 8000c5e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c62:	ea90 0f01 	teqeq	r0, r1
 8000c66:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c6a:	4770      	bx	lr

08000c6c <__aeabi_ui2f>:
 8000c6c:	f04f 0300 	mov.w	r3, #0
 8000c70:	e004      	b.n	8000c7c <__aeabi_i2f+0x8>
 8000c72:	bf00      	nop

08000c74 <__aeabi_i2f>:
 8000c74:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c78:	bf48      	it	mi
 8000c7a:	4240      	negmi	r0, r0
 8000c7c:	ea5f 0c00 	movs.w	ip, r0
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c88:	4601      	mov	r1, r0
 8000c8a:	f04f 0000 	mov.w	r0, #0
 8000c8e:	e01c      	b.n	8000cca <__aeabi_l2f+0x2a>

08000c90 <__aeabi_ul2f>:
 8000c90:	ea50 0201 	orrs.w	r2, r0, r1
 8000c94:	bf08      	it	eq
 8000c96:	4770      	bxeq	lr
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	e00a      	b.n	8000cb4 <__aeabi_l2f+0x14>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_l2f>:
 8000ca0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cac:	d502      	bpl.n	8000cb4 <__aeabi_l2f+0x14>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	ea5f 0c01 	movs.w	ip, r1
 8000cb8:	bf02      	ittt	eq
 8000cba:	4684      	moveq	ip, r0
 8000cbc:	4601      	moveq	r1, r0
 8000cbe:	2000      	moveq	r0, #0
 8000cc0:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cc4:	bf08      	it	eq
 8000cc6:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cca:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cce:	fabc f28c 	clz	r2, ip
 8000cd2:	3a08      	subs	r2, #8
 8000cd4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cd8:	db10      	blt.n	8000cfc <__aeabi_l2f+0x5c>
 8000cda:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cde:	4463      	add	r3, ip
 8000ce0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ce4:	f1c2 0220 	rsb	r2, r2, #32
 8000ce8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cec:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf0:	eb43 0002 	adc.w	r0, r3, r2
 8000cf4:	bf08      	it	eq
 8000cf6:	f020 0001 	biceq.w	r0, r0, #1
 8000cfa:	4770      	bx	lr
 8000cfc:	f102 0220 	add.w	r2, r2, #32
 8000d00:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d04:	f1c2 0220 	rsb	r2, r2, #32
 8000d08:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d0c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d10:	eb43 0002 	adc.w	r0, r3, r2
 8000d14:	bf08      	it	eq
 8000d16:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d1a:	4770      	bx	lr

08000d1c <__aeabi_f2iz>:
 8000d1c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d20:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000d24:	d30f      	bcc.n	8000d46 <__aeabi_f2iz+0x2a>
 8000d26:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000d2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d2e:	d90d      	bls.n	8000d4c <__aeabi_f2iz+0x30>
 8000d30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d34:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000d38:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d3c:	fa23 f002 	lsr.w	r0, r3, r2
 8000d40:	bf18      	it	ne
 8000d42:	4240      	negne	r0, r0
 8000d44:	4770      	bx	lr
 8000d46:	f04f 0000 	mov.w	r0, #0
 8000d4a:	4770      	bx	lr
 8000d4c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000d50:	d101      	bne.n	8000d56 <__aeabi_f2iz+0x3a>
 8000d52:	0242      	lsls	r2, r0, #9
 8000d54:	d105      	bne.n	8000d62 <__aeabi_f2iz+0x46>
 8000d56:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000d5a:	bf08      	it	eq
 8000d5c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000d60:	4770      	bx	lr
 8000d62:	f04f 0000 	mov.w	r0, #0
 8000d66:	4770      	bx	lr

08000d68 <AHT10_Init>:
#include "stm32f1xx_hal.h"

extern UART_HandleTypeDef huart1;


void AHT10_Init(AHT10_HandleTypeDef *dev) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af02      	add	r7, sp, #8
 8000d6e:	6078      	str	r0, [r7, #4]
    uint8_t cmd[3] = {0xE1, 0x08, 0x00};
 8000d70:	4a0e      	ldr	r2, [pc, #56]	@ (8000dac <AHT10_Init+0x44>)
 8000d72:	f107 030c 	add.w	r3, r7, #12
 8000d76:	6812      	ldr	r2, [r2, #0]
 8000d78:	4611      	mov	r1, r2
 8000d7a:	8019      	strh	r1, [r3, #0]
 8000d7c:	3302      	adds	r3, #2
 8000d7e:	0c12      	lsrs	r2, r2, #16
 8000d80:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(dev->hi2c, dev->address, cmd, 3, HAL_MAX_DELAY);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6818      	ldr	r0, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	791b      	ldrb	r3, [r3, #4]
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	f107 020c 	add.w	r2, r7, #12
 8000d90:	f04f 33ff 	mov.w	r3, #4294967295
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	2303      	movs	r3, #3
 8000d98:	f001 faaa 	bl	80022f0 <HAL_I2C_Master_Transmit>
    HAL_Delay(20);
 8000d9c:	2014      	movs	r0, #20
 8000d9e:	f000 fdd9 	bl	8001954 <HAL_Delay>
}
 8000da2:	bf00      	nop
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	0800687c 	.word	0x0800687c

08000db0 <AHT10_ReadRaw>:

uint8_t AHT10_ReadRaw(AHT10_HandleTypeDef *dev, uint32_t *humidity_raw, uint32_t *temperature_raw) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08a      	sub	sp, #40	@ 0x28
 8000db4:	af02      	add	r7, sp, #8
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
	uint8_t data[6];
	uint8_t cmd[3] = {0xAC, 0x33, 0x00}; // chuẩn AHT10 command
 8000dbc:	4a25      	ldr	r2, [pc, #148]	@ (8000e54 <AHT10_ReadRaw+0xa4>)
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	6812      	ldr	r2, [r2, #0]
 8000dc4:	4611      	mov	r1, r2
 8000dc6:	8019      	strh	r1, [r3, #0]
 8000dc8:	3302      	adds	r3, #2
 8000dca:	0c12      	lsrs	r2, r2, #16
 8000dcc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(dev->hi2c, dev->address, cmd, 3, HAL_MAX_DELAY);
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	6818      	ldr	r0, [r3, #0]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	791b      	ldrb	r3, [r3, #4]
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	f107 0214 	add.w	r2, r7, #20
 8000ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	2303      	movs	r3, #3
 8000de4:	f001 fa84 	bl	80022f0 <HAL_I2C_Master_Transmit>
	HAL_Delay(80);
 8000de8:	2050      	movs	r0, #80	@ 0x50
 8000dea:	f000 fdb3 	bl	8001954 <HAL_Delay>

	if (HAL_I2C_Master_Receive(dev->hi2c, dev->address, data, 6, HAL_MAX_DELAY) != HAL_OK)
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	6818      	ldr	r0, [r3, #0]
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	791b      	ldrb	r3, [r3, #4]
 8000df6:	4619      	mov	r1, r3
 8000df8:	f107 0218 	add.w	r2, r7, #24
 8000dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	2306      	movs	r3, #6
 8000e04:	f001 fb72 	bl	80024ec <HAL_I2C_Master_Receive>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <AHT10_ReadRaw+0x62>
	    return 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e01c      	b.n	8000e4c <AHT10_ReadRaw+0x9c>
//	char buf[64];
//	sprintf(buf, "Raw bytes: %02X %02X %02X %02X %02X %02X\r\n",
//	        data[0], data[1], data[2], data[3], data[4], data[5]);
//	HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);

	if (data[0] & 0x80)
 8000e12:	7e3b      	ldrb	r3, [r7, #24]
 8000e14:	b25b      	sxtb	r3, r3
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	da01      	bge.n	8000e1e <AHT10_ReadRaw+0x6e>
	    return 0;  // still busy, không đọc được
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e016      	b.n	8000e4c <AHT10_ReadRaw+0x9c>

	*humidity_raw = ((uint32_t)(data[1]) << 12) | ((uint32_t)(data[2]) << 4) | (data[3] >> 4);
 8000e1e:	7e7b      	ldrb	r3, [r7, #25]
 8000e20:	031a      	lsls	r2, r3, #12
 8000e22:	7ebb      	ldrb	r3, [r7, #26]
 8000e24:	011b      	lsls	r3, r3, #4
 8000e26:	4313      	orrs	r3, r2
 8000e28:	7efa      	ldrb	r2, [r7, #27]
 8000e2a:	0912      	lsrs	r2, r2, #4
 8000e2c:	b2d2      	uxtb	r2, r2
 8000e2e:	431a      	orrs	r2, r3
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	601a      	str	r2, [r3, #0]
	*temperature_raw = (((uint32_t)(data[3] & 0x0F)) << 16) | ((uint32_t)(data[4]) << 8) | (data[5]);
 8000e34:	7efb      	ldrb	r3, [r7, #27]
 8000e36:	041b      	lsls	r3, r3, #16
 8000e38:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 8000e3c:	7f3b      	ldrb	r3, [r7, #28]
 8000e3e:	021b      	lsls	r3, r3, #8
 8000e40:	4313      	orrs	r3, r2
 8000e42:	7f7a      	ldrb	r2, [r7, #29]
 8000e44:	431a      	orrs	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	601a      	str	r2, [r3, #0]
	return 1;
 8000e4a:	2301      	movs	r3, #1
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3720      	adds	r7, #32
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	08006880 	.word	0x08006880

08000e58 <AHT10_ReadTemperature>:


float AHT10_ReadTemperature(uint32_t temp_raw) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
    return ((float)temp_raw / 1048576.0) * 200.0 - 50.0;
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f7ff ff03 	bl	8000c6c <__aeabi_ui2f>
 8000e66:	4603      	mov	r3, r0
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fb8f 	bl	800058c <__aeabi_f2d>
 8000e6e:	f04f 0200 	mov.w	r2, #0
 8000e72:	4b10      	ldr	r3, [pc, #64]	@ (8000eb4 <AHT10_ReadTemperature+0x5c>)
 8000e74:	f7ff fd0c 	bl	8000890 <__aeabi_ddiv>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	4619      	mov	r1, r3
 8000e80:	f04f 0200 	mov.w	r2, #0
 8000e84:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb8 <AHT10_ReadTemperature+0x60>)
 8000e86:	f7ff fbd9 	bl	800063c <__aeabi_dmul>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	4610      	mov	r0, r2
 8000e90:	4619      	mov	r1, r3
 8000e92:	f04f 0200 	mov.w	r2, #0
 8000e96:	4b09      	ldr	r3, [pc, #36]	@ (8000ebc <AHT10_ReadTemperature+0x64>)
 8000e98:	f7ff fa18 	bl	80002cc <__aeabi_dsub>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	f7ff fddc 	bl	8000a60 <__aeabi_d2f>
 8000ea8:	4603      	mov	r3, r0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	41300000 	.word	0x41300000
 8000eb8:	40690000 	.word	0x40690000
 8000ebc:	40490000 	.word	0x40490000

08000ec0 <AHT10_ReadHumidity>:

float AHT10_ReadHumidity(uint32_t hum_raw) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
    return ((float)hum_raw / 1048576.0) * 100.0;
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff fecf 	bl	8000c6c <__aeabi_ui2f>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff fb5b 	bl	800058c <__aeabi_f2d>
 8000ed6:	f04f 0200 	mov.w	r2, #0
 8000eda:	4b0b      	ldr	r3, [pc, #44]	@ (8000f08 <AHT10_ReadHumidity+0x48>)
 8000edc:	f7ff fcd8 	bl	8000890 <__aeabi_ddiv>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	4610      	mov	r0, r2
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	f04f 0200 	mov.w	r2, #0
 8000eec:	4b07      	ldr	r3, [pc, #28]	@ (8000f0c <AHT10_ReadHumidity+0x4c>)
 8000eee:	f7ff fba5 	bl	800063c <__aeabi_dmul>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	4610      	mov	r0, r2
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f7ff fdb1 	bl	8000a60 <__aeabi_d2f>
 8000efe:	4603      	mov	r3, r0
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	41300000 	.word	0x41300000
 8000f0c:	40590000 	.word	0x40590000

08000f10 <lcd_send_cmd>:
 * @param  lcd: Pointer to the LCD handle
 * @param  cmd: Command byte to send
 * @retval None
 */
void lcd_send_cmd(I2C_LCD_HandleTypeDef *lcd, char cmd)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af02      	add	r7, sp, #8
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	460b      	mov	r3, r1
 8000f1a:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (cmd & 0xF0);            // Extract upper nibble
 8000f1c:	78fb      	ldrb	r3, [r7, #3]
 8000f1e:	f023 030f 	bic.w	r3, r3, #15
 8000f22:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((cmd << 4) & 0xF0);     // Extract lower nibble
 8000f24:	78fb      	ldrb	r3, [r7, #3]
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0C;  // en=1, rs=0
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	f043 030c 	orr.w	r3, r3, #12
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x08;  // en=0, rs=0
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	f043 0308 	orr.w	r3, r3, #8
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0C;  // en=1, rs=0
 8000f3e:	7bbb      	ldrb	r3, [r7, #14]
 8000f40:	f043 030c 	orr.w	r3, r3, #12
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x08;  // en=0, rs=0
 8000f48:	7bbb      	ldrb	r3, [r7, #14]
 8000f4a:	f043 0308 	orr.w	r3, r3, #8
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6818      	ldr	r0, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	791b      	ldrb	r3, [r3, #4]
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	f107 0208 	add.w	r2, r7, #8
 8000f60:	2364      	movs	r3, #100	@ 0x64
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	2304      	movs	r3, #4
 8000f66:	f001 f9c3 	bl	80022f0 <HAL_I2C_Master_Transmit>
}
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <lcd_send_data>:
 * @param  lcd: Pointer to the LCD handle
 * @param  data: Data byte to send
 * @retval None
 */
void lcd_send_data(I2C_LCD_HandleTypeDef *lcd, char data)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b086      	sub	sp, #24
 8000f76:	af02      	add	r7, sp, #8
 8000f78:	6078      	str	r0, [r7, #4]
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (data & 0xF0);            // Extract upper nibble
 8000f7e:	78fb      	ldrb	r3, [r7, #3]
 8000f80:	f023 030f 	bic.w	r3, r3, #15
 8000f84:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((data << 4) & 0xF0);     // Extract lower nibble
 8000f86:	78fb      	ldrb	r3, [r7, #3]
 8000f88:	011b      	lsls	r3, r3, #4
 8000f8a:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0D;  // en=1, rs=1
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	f043 030d 	orr.w	r3, r3, #13
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x09;  // en=0, rs=1
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
 8000f98:	f043 0309 	orr.w	r3, r3, #9
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0D;  // en=1, rs=1
 8000fa0:	7bbb      	ldrb	r3, [r7, #14]
 8000fa2:	f043 030d 	orr.w	r3, r3, #13
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x09;  // en=0, rs=1
 8000faa:	7bbb      	ldrb	r3, [r7, #14]
 8000fac:	f043 0309 	orr.w	r3, r3, #9
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6818      	ldr	r0, [r3, #0]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	791b      	ldrb	r3, [r3, #4]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f107 0208 	add.w	r2, r7, #8
 8000fc2:	2364      	movs	r3, #100	@ 0x64
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	2304      	movs	r3, #4
 8000fc8:	f001 f992 	bl	80022f0 <HAL_I2C_Master_Transmit>
}
 8000fcc:	bf00      	nop
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <lcd_clear>:
 * @brief  Clears the LCD display.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_clear(I2C_LCD_HandleTypeDef *lcd)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
    lcd_send_cmd(lcd, 0x80);  // Move cursor to the home position
 8000fdc:	2180      	movs	r1, #128	@ 0x80
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff ff96 	bl	8000f10 <lcd_send_cmd>
    // Clear all characters
    // 16x4 = 64 characters
    // 20x4 = 80 characters
    // So 80 character clearing is enough for both 16x2, 16x4, 20x2 and 20x5 displays
    for (int i = 0; i < 80; i++)
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	e006      	b.n	8000ff8 <lcd_clear+0x24>
    {
        lcd_send_data(lcd, ' ');  // Write a space on each position
 8000fea:	2120      	movs	r1, #32
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff ffc0 	bl	8000f72 <lcd_send_data>
    for (int i = 0; i < 80; i++)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2b4f      	cmp	r3, #79	@ 0x4f
 8000ffc:	ddf5      	ble.n	8000fea <lcd_clear+0x16>
    }
}
 8000ffe:	bf00      	nop
 8001000:	bf00      	nop
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <lcd_gotoxy>:
 * @param  col: Column number (0-15)
 * @param  row: Row number (0 or 1)
 * @retval None
 */
void lcd_gotoxy(I2C_LCD_HandleTypeDef *lcd, int col, int row)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
    uint8_t address;

    switch (row)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b03      	cmp	r3, #3
 8001018:	d824      	bhi.n	8001064 <lcd_gotoxy+0x5c>
 800101a:	a201      	add	r2, pc, #4	@ (adr r2, 8001020 <lcd_gotoxy+0x18>)
 800101c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001020:	08001031 	.word	0x08001031
 8001024:	0800103b 	.word	0x0800103b
 8001028:	08001045 	.word	0x08001045
 800102c:	0800104f 	.word	0x0800104f
    {
        case 0: address = 0x80 + col; break;  // First row
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	3b80      	subs	r3, #128	@ 0x80
 8001036:	75fb      	strb	r3, [r7, #23]
 8001038:	e00e      	b.n	8001058 <lcd_gotoxy+0x50>
        case 1: address = 0xC0 + col; break;  // Second row
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	b2db      	uxtb	r3, r3
 800103e:	3b40      	subs	r3, #64	@ 0x40
 8001040:	75fb      	strb	r3, [r7, #23]
 8001042:	e009      	b.n	8001058 <lcd_gotoxy+0x50>
        case 2: address = 0x94 + col; break;  // Third row
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	b2db      	uxtb	r3, r3
 8001048:	3b6c      	subs	r3, #108	@ 0x6c
 800104a:	75fb      	strb	r3, [r7, #23]
 800104c:	e004      	b.n	8001058 <lcd_gotoxy+0x50>
        case 3: address = 0xD4 + col; break;  // Fourth row
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	b2db      	uxtb	r3, r3
 8001052:	3b2c      	subs	r3, #44	@ 0x2c
 8001054:	75fb      	strb	r3, [r7, #23]
 8001056:	bf00      	nop
        default: return;  // Ignore invalid row numbers
    }

    lcd_send_cmd(lcd, address);  // Send command to move the cursor
 8001058:	7dfb      	ldrb	r3, [r7, #23]
 800105a:	4619      	mov	r1, r3
 800105c:	68f8      	ldr	r0, [r7, #12]
 800105e:	f7ff ff57 	bl	8000f10 <lcd_send_cmd>
 8001062:	e000      	b.n	8001066 <lcd_gotoxy+0x5e>
        default: return;  // Ignore invalid row numbers
 8001064:	bf00      	nop
}
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <lcd_init>:
 * @brief  Initializes the LCD in 4-bit mode.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_init(I2C_LCD_HandleTypeDef *lcd)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
    HAL_Delay(50);  // Wait for LCD power-up
 8001074:	2032      	movs	r0, #50	@ 0x32
 8001076:	f000 fc6d 	bl	8001954 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 800107a:	2130      	movs	r1, #48	@ 0x30
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ff47 	bl	8000f10 <lcd_send_cmd>
    HAL_Delay(5);
 8001082:	2005      	movs	r0, #5
 8001084:	f000 fc66 	bl	8001954 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8001088:	2130      	movs	r1, #48	@ 0x30
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f7ff ff40 	bl	8000f10 <lcd_send_cmd>
    HAL_Delay(1);
 8001090:	2001      	movs	r0, #1
 8001092:	f000 fc5f 	bl	8001954 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8001096:	2130      	movs	r1, #48	@ 0x30
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ff39 	bl	8000f10 <lcd_send_cmd>
    HAL_Delay(10);
 800109e:	200a      	movs	r0, #10
 80010a0:	f000 fc58 	bl	8001954 <HAL_Delay>
    lcd_send_cmd(lcd, 0x20);  // Set to 4-bit mode
 80010a4:	2120      	movs	r1, #32
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff ff32 	bl	8000f10 <lcd_send_cmd>
    HAL_Delay(10);
 80010ac:	200a      	movs	r0, #10
 80010ae:	f000 fc51 	bl	8001954 <HAL_Delay>

    // LCD configuration commands
    lcd_send_cmd(lcd, 0x28);  // 4-bit mode, 2 lines, 5x8 font
 80010b2:	2128      	movs	r1, #40	@ 0x28
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff ff2b 	bl	8000f10 <lcd_send_cmd>
    HAL_Delay(1);
 80010ba:	2001      	movs	r0, #1
 80010bc:	f000 fc4a 	bl	8001954 <HAL_Delay>
    lcd_send_cmd(lcd, 0x08);  // Display off, cursor off, blink off
 80010c0:	2108      	movs	r1, #8
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff ff24 	bl	8000f10 <lcd_send_cmd>
    HAL_Delay(1);
 80010c8:	2001      	movs	r0, #1
 80010ca:	f000 fc43 	bl	8001954 <HAL_Delay>
    lcd_send_cmd(lcd, 0x01);  // Clear display
 80010ce:	2101      	movs	r1, #1
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ff1d 	bl	8000f10 <lcd_send_cmd>
    HAL_Delay(2);
 80010d6:	2002      	movs	r0, #2
 80010d8:	f000 fc3c 	bl	8001954 <HAL_Delay>
    lcd_send_cmd(lcd, 0x06);  // Entry mode: cursor moves right
 80010dc:	2106      	movs	r1, #6
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff ff16 	bl	8000f10 <lcd_send_cmd>
    HAL_Delay(1);
 80010e4:	2001      	movs	r0, #1
 80010e6:	f000 fc35 	bl	8001954 <HAL_Delay>
    lcd_send_cmd(lcd, 0x0C);  // Display on, cursor off, blink off
 80010ea:	210c      	movs	r1, #12
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff ff0f 	bl	8000f10 <lcd_send_cmd>
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <lcd_puts>:
 * @param  lcd: Pointer to the LCD handle
 * @param  str: Null-terminated string to display
 * @retval None
 */
void lcd_puts(I2C_LCD_HandleTypeDef *lcd, char *str)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
 8001102:	6039      	str	r1, [r7, #0]
    while (*str) lcd_send_data(lcd, *str++);  // Send each character in the string
 8001104:	e007      	b.n	8001116 <lcd_puts+0x1c>
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	1c5a      	adds	r2, r3, #1
 800110a:	603a      	str	r2, [r7, #0]
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	4619      	mov	r1, r3
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff ff2e 	bl	8000f72 <lcd_send_data>
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1f3      	bne.n	8001106 <lcd_puts+0xc>
}
 800111e:	bf00      	nop
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001128:	b590      	push	{r4, r7, lr}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800112e:	f000 fbaf 	bl	8001890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001132:	f000 f8e3 	bl	80012fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001136:	f000 f9a5 	bl	8001484 <MX_GPIO_Init>
  MX_I2C1_Init();
 800113a:	f000 f91b 	bl	8001374 <MX_I2C1_Init>
  MX_I2C2_Init();
 800113e:	f000 f947 	bl	80013d0 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8001142:	f000 f973 	bl	800142c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //Init LCD
  lcd.hi2c = &hi2c1;
 8001146:	4b5d      	ldr	r3, [pc, #372]	@ (80012bc <main+0x194>)
 8001148:	4a5d      	ldr	r2, [pc, #372]	@ (80012c0 <main+0x198>)
 800114a:	601a      	str	r2, [r3, #0]
  lcd.address = 0x4E;
 800114c:	4b5b      	ldr	r3, [pc, #364]	@ (80012bc <main+0x194>)
 800114e:	224e      	movs	r2, #78	@ 0x4e
 8001150:	711a      	strb	r2, [r3, #4]
  lcd_init(&lcd);
 8001152:	485a      	ldr	r0, [pc, #360]	@ (80012bc <main+0x194>)
 8001154:	f7ff ff8a 	bl	800106c <lcd_init>
  lcd_clear(&lcd);
 8001158:	4858      	ldr	r0, [pc, #352]	@ (80012bc <main+0x194>)
 800115a:	f7ff ff3b 	bl	8000fd4 <lcd_clear>

  //Init AHT10
  aht10.hi2c = &hi2c2;
 800115e:	4b59      	ldr	r3, [pc, #356]	@ (80012c4 <main+0x19c>)
 8001160:	4a59      	ldr	r2, [pc, #356]	@ (80012c8 <main+0x1a0>)
 8001162:	601a      	str	r2, [r3, #0]
  aht10.address = 0x38<<1; //AHT10 default address << 1 = 0x38 << 1 = 0x70
 8001164:	4b57      	ldr	r3, [pc, #348]	@ (80012c4 <main+0x19c>)
 8001166:	2270      	movs	r2, #112	@ 0x70
 8001168:	711a      	strb	r2, [r3, #4]
  AHT10_Init(&aht10);
 800116a:	4856      	ldr	r0, [pc, #344]	@ (80012c4 <main+0x19c>)
 800116c:	f7ff fdfc 	bl	8000d68 <AHT10_Init>
  HAL_Delay(50);
 8001170:	2032      	movs	r0, #50	@ 0x32
 8001172:	f000 fbef 	bl	8001954 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (AHT10_ReadRaw(&aht10, &hum_raw, &temp_raw)) {
 8001176:	4a55      	ldr	r2, [pc, #340]	@ (80012cc <main+0x1a4>)
 8001178:	4955      	ldr	r1, [pc, #340]	@ (80012d0 <main+0x1a8>)
 800117a:	4852      	ldr	r0, [pc, #328]	@ (80012c4 <main+0x19c>)
 800117c:	f7ff fe18 	bl	8000db0 <AHT10_ReadRaw>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	f000 8089 	beq.w	800129a <main+0x172>
	              temperature = AHT10_ReadTemperature(temp_raw);
 8001188:	4b50      	ldr	r3, [pc, #320]	@ (80012cc <main+0x1a4>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff fe63 	bl	8000e58 <AHT10_ReadTemperature>
 8001192:	4603      	mov	r3, r0
 8001194:	4a4f      	ldr	r2, [pc, #316]	@ (80012d4 <main+0x1ac>)
 8001196:	6013      	str	r3, [r2, #0]
	              humidity = AHT10_ReadHumidity(hum_raw);
 8001198:	4b4d      	ldr	r3, [pc, #308]	@ (80012d0 <main+0x1a8>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff fe8f 	bl	8000ec0 <AHT10_ReadHumidity>
 80011a2:	4603      	mov	r3, r0
 80011a4:	4a4c      	ldr	r2, [pc, #304]	@ (80012d8 <main+0x1b0>)
 80011a6:	6013      	str	r3, [r2, #0]

	              int temp_int = (int)temperature;
 80011a8:	4b4a      	ldr	r3, [pc, #296]	@ (80012d4 <main+0x1ac>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff fdb5 	bl	8000d1c <__aeabi_f2iz>
 80011b2:	4603      	mov	r3, r0
 80011b4:	60fb      	str	r3, [r7, #12]
	              int temp_frac = (int)((temperature - temp_int) * 10);
 80011b6:	4b47      	ldr	r3, [pc, #284]	@ (80012d4 <main+0x1ac>)
 80011b8:	681c      	ldr	r4, [r3, #0]
 80011ba:	68f8      	ldr	r0, [r7, #12]
 80011bc:	f7ff fd5a 	bl	8000c74 <__aeabi_i2f>
 80011c0:	4603      	mov	r3, r0
 80011c2:	4619      	mov	r1, r3
 80011c4:	4620      	mov	r0, r4
 80011c6:	f7ff fc9f 	bl	8000b08 <__aeabi_fsub>
 80011ca:	4603      	mov	r3, r0
 80011cc:	4943      	ldr	r1, [pc, #268]	@ (80012dc <main+0x1b4>)
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7fe ffc4 	bl	800015c <__aeabi_fmul>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff fda0 	bl	8000d1c <__aeabi_f2iz>
 80011dc:	4603      	mov	r3, r0
 80011de:	60bb      	str	r3, [r7, #8]

	              int hum_int = (int)humidity;
 80011e0:	4b3d      	ldr	r3, [pc, #244]	@ (80012d8 <main+0x1b0>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff fd99 	bl	8000d1c <__aeabi_f2iz>
 80011ea:	4603      	mov	r3, r0
 80011ec:	607b      	str	r3, [r7, #4]
	              int hum_frac = (int)((humidity - hum_int) * 10);
 80011ee:	4b3a      	ldr	r3, [pc, #232]	@ (80012d8 <main+0x1b0>)
 80011f0:	681c      	ldr	r4, [r3, #0]
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff fd3e 	bl	8000c74 <__aeabi_i2f>
 80011f8:	4603      	mov	r3, r0
 80011fa:	4619      	mov	r1, r3
 80011fc:	4620      	mov	r0, r4
 80011fe:	f7ff fc83 	bl	8000b08 <__aeabi_fsub>
 8001202:	4603      	mov	r3, r0
 8001204:	4935      	ldr	r1, [pc, #212]	@ (80012dc <main+0x1b4>)
 8001206:	4618      	mov	r0, r3
 8001208:	f7fe ffa8 	bl	800015c <__aeabi_fmul>
 800120c:	4603      	mov	r3, r0
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fd84 	bl	8000d1c <__aeabi_f2iz>
 8001214:	4603      	mov	r3, r0
 8001216:	603b      	str	r3, [r7, #0]

	              // In nhiệt độ ra UART
	              sprintf(buffer, "Temperature: %d.%d C\r\n", temp_int,temp_frac);
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	4930      	ldr	r1, [pc, #192]	@ (80012e0 <main+0x1b8>)
 800121e:	4831      	ldr	r0, [pc, #196]	@ (80012e4 <main+0x1bc>)
 8001220:	f004 fe70 	bl	8005f04 <siprintf>
	              HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001224:	482f      	ldr	r0, [pc, #188]	@ (80012e4 <main+0x1bc>)
 8001226:	f7fe ff91 	bl	800014c <strlen>
 800122a:	4603      	mov	r3, r0
 800122c:	b29a      	uxth	r2, r3
 800122e:	f04f 33ff 	mov.w	r3, #4294967295
 8001232:	492c      	ldr	r1, [pc, #176]	@ (80012e4 <main+0x1bc>)
 8001234:	482c      	ldr	r0, [pc, #176]	@ (80012e8 <main+0x1c0>)
 8001236:	f004 f8a0 	bl	800537a <HAL_UART_Transmit>
	              //In độ ẩm ra UART
	              sprintf(buffer, "Humidity: %d.%d C\r\n", hum_int,hum_frac);
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	492b      	ldr	r1, [pc, #172]	@ (80012ec <main+0x1c4>)
 8001240:	4828      	ldr	r0, [pc, #160]	@ (80012e4 <main+0x1bc>)
 8001242:	f004 fe5f 	bl	8005f04 <siprintf>
	              HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001246:	4827      	ldr	r0, [pc, #156]	@ (80012e4 <main+0x1bc>)
 8001248:	f7fe ff80 	bl	800014c <strlen>
 800124c:	4603      	mov	r3, r0
 800124e:	b29a      	uxth	r2, r3
 8001250:	f04f 33ff 	mov.w	r3, #4294967295
 8001254:	4923      	ldr	r1, [pc, #140]	@ (80012e4 <main+0x1bc>)
 8001256:	4824      	ldr	r0, [pc, #144]	@ (80012e8 <main+0x1c0>)
 8001258:	f004 f88f 	bl	800537a <HAL_UART_Transmit>

	              sprintf(buffer, "Temp: %d.%d C", temp_int, temp_frac);
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	4923      	ldr	r1, [pc, #140]	@ (80012f0 <main+0x1c8>)
 8001262:	4820      	ldr	r0, [pc, #128]	@ (80012e4 <main+0x1bc>)
 8001264:	f004 fe4e 	bl	8005f04 <siprintf>
	              lcd_gotoxy(&lcd, 0, 0);
 8001268:	2200      	movs	r2, #0
 800126a:	2100      	movs	r1, #0
 800126c:	4813      	ldr	r0, [pc, #76]	@ (80012bc <main+0x194>)
 800126e:	f7ff fecb 	bl	8001008 <lcd_gotoxy>
	              lcd_puts(&lcd, buffer);
 8001272:	491c      	ldr	r1, [pc, #112]	@ (80012e4 <main+0x1bc>)
 8001274:	4811      	ldr	r0, [pc, #68]	@ (80012bc <main+0x194>)
 8001276:	f7ff ff40 	bl	80010fa <lcd_puts>

	              sprintf(buffer, "Hum:  %d.%d %%", hum_int, hum_frac);
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	491d      	ldr	r1, [pc, #116]	@ (80012f4 <main+0x1cc>)
 8001280:	4818      	ldr	r0, [pc, #96]	@ (80012e4 <main+0x1bc>)
 8001282:	f004 fe3f 	bl	8005f04 <siprintf>
	              lcd_gotoxy(&lcd, 0, 1);
 8001286:	2201      	movs	r2, #1
 8001288:	2100      	movs	r1, #0
 800128a:	480c      	ldr	r0, [pc, #48]	@ (80012bc <main+0x194>)
 800128c:	f7ff febc 	bl	8001008 <lcd_gotoxy>
	              lcd_puts(&lcd, buffer);
 8001290:	4914      	ldr	r1, [pc, #80]	@ (80012e4 <main+0x1bc>)
 8001292:	480a      	ldr	r0, [pc, #40]	@ (80012bc <main+0x194>)
 8001294:	f7ff ff31 	bl	80010fa <lcd_puts>
 8001298:	e00b      	b.n	80012b2 <main+0x18a>
	          } else {
	        	  lcd_gotoxy(&lcd,0,0);
 800129a:	2200      	movs	r2, #0
 800129c:	2100      	movs	r1, #0
 800129e:	4807      	ldr	r0, [pc, #28]	@ (80012bc <main+0x194>)
 80012a0:	f7ff feb2 	bl	8001008 <lcd_gotoxy>
	              HAL_UART_Transmit(&huart1, (uint8_t*)"AHT10 Error\r\n", 13, HAL_MAX_DELAY);
 80012a4:	f04f 33ff 	mov.w	r3, #4294967295
 80012a8:	220d      	movs	r2, #13
 80012aa:	4913      	ldr	r1, [pc, #76]	@ (80012f8 <main+0x1d0>)
 80012ac:	480e      	ldr	r0, [pc, #56]	@ (80012e8 <main+0x1c0>)
 80012ae:	f004 f864 	bl	800537a <HAL_UART_Transmit>
	          }

	          HAL_Delay(1000); // Đọc mỗi giây
 80012b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012b6:	f000 fb4d 	bl	8001954 <HAL_Delay>
	  if (AHT10_ReadRaw(&aht10, &hum_raw, &temp_raw)) {
 80012ba:	e75c      	b.n	8001176 <main+0x4e>
 80012bc:	20000170 	.word	0x20000170
 80012c0:	20000078 	.word	0x20000078
 80012c4:	20000168 	.word	0x20000168
 80012c8:	200000cc 	.word	0x200000cc
 80012cc:	20000198 	.word	0x20000198
 80012d0:	2000019c 	.word	0x2000019c
 80012d4:	200001a0 	.word	0x200001a0
 80012d8:	200001a4 	.word	0x200001a4
 80012dc:	41200000 	.word	0x41200000
 80012e0:	08006884 	.word	0x08006884
 80012e4:	20000178 	.word	0x20000178
 80012e8:	20000120 	.word	0x20000120
 80012ec:	0800689c 	.word	0x0800689c
 80012f0:	080068b0 	.word	0x080068b0
 80012f4:	080068c0 	.word	0x080068c0
 80012f8:	080068d0 	.word	0x080068d0

080012fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b090      	sub	sp, #64	@ 0x40
 8001300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001302:	f107 0318 	add.w	r3, r7, #24
 8001306:	2228      	movs	r2, #40	@ 0x28
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f004 fe1a 	bl	8005f44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
 800131c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800131e:	2302      	movs	r3, #2
 8001320:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001322:	2301      	movs	r3, #1
 8001324:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001326:	2310      	movs	r3, #16
 8001328:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800132a:	2300      	movs	r3, #0
 800132c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800132e:	f107 0318 	add.w	r3, r7, #24
 8001332:	4618      	mov	r0, r3
 8001334:	f003 fb9e 	bl	8004a74 <HAL_RCC_OscConfig>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800133e:	f000 f8cf 	bl	80014e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001342:	230f      	movs	r3, #15
 8001344:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001346:	2300      	movs	r3, #0
 8001348:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800134a:	2300      	movs	r3, #0
 800134c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800134e:	2300      	movs	r3, #0
 8001350:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	2100      	movs	r1, #0
 800135a:	4618      	mov	r0, r3
 800135c:	f003 fe0c 	bl	8004f78 <HAL_RCC_ClockConfig>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001366:	f000 f8bb 	bl	80014e0 <Error_Handler>
  }
}
 800136a:	bf00      	nop
 800136c:	3740      	adds	r7, #64	@ 0x40
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001378:	4b12      	ldr	r3, [pc, #72]	@ (80013c4 <MX_I2C1_Init+0x50>)
 800137a:	4a13      	ldr	r2, [pc, #76]	@ (80013c8 <MX_I2C1_Init+0x54>)
 800137c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800137e:	4b11      	ldr	r3, [pc, #68]	@ (80013c4 <MX_I2C1_Init+0x50>)
 8001380:	4a12      	ldr	r2, [pc, #72]	@ (80013cc <MX_I2C1_Init+0x58>)
 8001382:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001384:	4b0f      	ldr	r3, [pc, #60]	@ (80013c4 <MX_I2C1_Init+0x50>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800138a:	4b0e      	ldr	r3, [pc, #56]	@ (80013c4 <MX_I2C1_Init+0x50>)
 800138c:	2200      	movs	r2, #0
 800138e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001390:	4b0c      	ldr	r3, [pc, #48]	@ (80013c4 <MX_I2C1_Init+0x50>)
 8001392:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001396:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001398:	4b0a      	ldr	r3, [pc, #40]	@ (80013c4 <MX_I2C1_Init+0x50>)
 800139a:	2200      	movs	r2, #0
 800139c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800139e:	4b09      	ldr	r3, [pc, #36]	@ (80013c4 <MX_I2C1_Init+0x50>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013a4:	4b07      	ldr	r3, [pc, #28]	@ (80013c4 <MX_I2C1_Init+0x50>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013aa:	4b06      	ldr	r3, [pc, #24]	@ (80013c4 <MX_I2C1_Init+0x50>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013b0:	4804      	ldr	r0, [pc, #16]	@ (80013c4 <MX_I2C1_Init+0x50>)
 80013b2:	f000 fe45 	bl	8002040 <HAL_I2C_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013bc:	f000 f890 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000078 	.word	0x20000078
 80013c8:	40005400 	.word	0x40005400
 80013cc:	000186a0 	.word	0x000186a0

080013d0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013d4:	4b12      	ldr	r3, [pc, #72]	@ (8001420 <MX_I2C2_Init+0x50>)
 80013d6:	4a13      	ldr	r2, [pc, #76]	@ (8001424 <MX_I2C2_Init+0x54>)
 80013d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80013da:	4b11      	ldr	r3, [pc, #68]	@ (8001420 <MX_I2C2_Init+0x50>)
 80013dc:	4a12      	ldr	r2, [pc, #72]	@ (8001428 <MX_I2C2_Init+0x58>)
 80013de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001420 <MX_I2C2_Init+0x50>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80013e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001420 <MX_I2C2_Init+0x50>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001420 <MX_I2C2_Init+0x50>)
 80013ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013f2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001420 <MX_I2C2_Init+0x50>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80013fa:	4b09      	ldr	r3, [pc, #36]	@ (8001420 <MX_I2C2_Init+0x50>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001400:	4b07      	ldr	r3, [pc, #28]	@ (8001420 <MX_I2C2_Init+0x50>)
 8001402:	2200      	movs	r2, #0
 8001404:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001406:	4b06      	ldr	r3, [pc, #24]	@ (8001420 <MX_I2C2_Init+0x50>)
 8001408:	2200      	movs	r2, #0
 800140a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800140c:	4804      	ldr	r0, [pc, #16]	@ (8001420 <MX_I2C2_Init+0x50>)
 800140e:	f000 fe17 	bl	8002040 <HAL_I2C_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001418:	f000 f862 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}
 8001420:	200000cc 	.word	0x200000cc
 8001424:	40005800 	.word	0x40005800
 8001428:	000186a0 	.word	0x000186a0

0800142c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001430:	4b12      	ldr	r3, [pc, #72]	@ (800147c <MX_USART1_UART_Init+0x50>)
 8001432:	4a13      	ldr	r2, [pc, #76]	@ (8001480 <MX_USART1_UART_Init+0x54>)
 8001434:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001436:	4b11      	ldr	r3, [pc, #68]	@ (800147c <MX_USART1_UART_Init+0x50>)
 8001438:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800143c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800143e:	4b0f      	ldr	r3, [pc, #60]	@ (800147c <MX_USART1_UART_Init+0x50>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001444:	4b0d      	ldr	r3, [pc, #52]	@ (800147c <MX_USART1_UART_Init+0x50>)
 8001446:	2200      	movs	r2, #0
 8001448:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800144a:	4b0c      	ldr	r3, [pc, #48]	@ (800147c <MX_USART1_UART_Init+0x50>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001450:	4b0a      	ldr	r3, [pc, #40]	@ (800147c <MX_USART1_UART_Init+0x50>)
 8001452:	220c      	movs	r2, #12
 8001454:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001456:	4b09      	ldr	r3, [pc, #36]	@ (800147c <MX_USART1_UART_Init+0x50>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800145c:	4b07      	ldr	r3, [pc, #28]	@ (800147c <MX_USART1_UART_Init+0x50>)
 800145e:	2200      	movs	r2, #0
 8001460:	61da      	str	r2, [r3, #28]
  if (HAL_MultiProcessor_Init(&huart1, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8001462:	2200      	movs	r2, #0
 8001464:	2100      	movs	r1, #0
 8001466:	4805      	ldr	r0, [pc, #20]	@ (800147c <MX_USART1_UART_Init+0x50>)
 8001468:	f003 ff14 	bl	8005294 <HAL_MultiProcessor_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8001472:	f000 f835 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000120 	.word	0x20000120
 8001480:	40013800 	.word	0x40013800

08001484 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800148a:	4b14      	ldr	r3, [pc, #80]	@ (80014dc <MX_GPIO_Init+0x58>)
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	4a13      	ldr	r2, [pc, #76]	@ (80014dc <MX_GPIO_Init+0x58>)
 8001490:	f043 0320 	orr.w	r3, r3, #32
 8001494:	6193      	str	r3, [r2, #24]
 8001496:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <MX_GPIO_Init+0x58>)
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	f003 0320 	and.w	r3, r3, #32
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a2:	4b0e      	ldr	r3, [pc, #56]	@ (80014dc <MX_GPIO_Init+0x58>)
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	4a0d      	ldr	r2, [pc, #52]	@ (80014dc <MX_GPIO_Init+0x58>)
 80014a8:	f043 0308 	orr.w	r3, r3, #8
 80014ac:	6193      	str	r3, [r2, #24]
 80014ae:	4b0b      	ldr	r3, [pc, #44]	@ (80014dc <MX_GPIO_Init+0x58>)
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	f003 0308 	and.w	r3, r3, #8
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ba:	4b08      	ldr	r3, [pc, #32]	@ (80014dc <MX_GPIO_Init+0x58>)
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	4a07      	ldr	r2, [pc, #28]	@ (80014dc <MX_GPIO_Init+0x58>)
 80014c0:	f043 0304 	orr.w	r3, r3, #4
 80014c4:	6193      	str	r3, [r2, #24]
 80014c6:	4b05      	ldr	r3, [pc, #20]	@ (80014dc <MX_GPIO_Init+0x58>)
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	f003 0304 	and.w	r3, r3, #4
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014d2:	bf00      	nop
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr
 80014dc:	40021000 	.word	0x40021000

080014e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e4:	b672      	cpsid	i
}
 80014e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <Error_Handler+0x8>

080014ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014f2:	4b15      	ldr	r3, [pc, #84]	@ (8001548 <HAL_MspInit+0x5c>)
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	4a14      	ldr	r2, [pc, #80]	@ (8001548 <HAL_MspInit+0x5c>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6193      	str	r3, [r2, #24]
 80014fe:	4b12      	ldr	r3, [pc, #72]	@ (8001548 <HAL_MspInit+0x5c>)
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800150a:	4b0f      	ldr	r3, [pc, #60]	@ (8001548 <HAL_MspInit+0x5c>)
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	4a0e      	ldr	r2, [pc, #56]	@ (8001548 <HAL_MspInit+0x5c>)
 8001510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001514:	61d3      	str	r3, [r2, #28]
 8001516:	4b0c      	ldr	r3, [pc, #48]	@ (8001548 <HAL_MspInit+0x5c>)
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001522:	4b0a      	ldr	r3, [pc, #40]	@ (800154c <HAL_MspInit+0x60>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	4a04      	ldr	r2, [pc, #16]	@ (800154c <HAL_MspInit+0x60>)
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800153e:	bf00      	nop
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr
 8001548:	40021000 	.word	0x40021000
 800154c:	40010000 	.word	0x40010000

08001550 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	@ 0x28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 0318 	add.w	r3, r7, #24
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a3b      	ldr	r2, [pc, #236]	@ (8001658 <HAL_I2C_MspInit+0x108>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d134      	bne.n	80015da <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001570:	4b3a      	ldr	r3, [pc, #232]	@ (800165c <HAL_I2C_MspInit+0x10c>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	4a39      	ldr	r2, [pc, #228]	@ (800165c <HAL_I2C_MspInit+0x10c>)
 8001576:	f043 0308 	orr.w	r3, r3, #8
 800157a:	6193      	str	r3, [r2, #24]
 800157c:	4b37      	ldr	r3, [pc, #220]	@ (800165c <HAL_I2C_MspInit+0x10c>)
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	f003 0308 	and.w	r3, r3, #8
 8001584:	617b      	str	r3, [r7, #20]
 8001586:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001588:	23c0      	movs	r3, #192	@ 0xc0
 800158a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800158c:	2312      	movs	r3, #18
 800158e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001590:	2303      	movs	r3, #3
 8001592:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001594:	f107 0318 	add.w	r3, r7, #24
 8001598:	4619      	mov	r1, r3
 800159a:	4831      	ldr	r0, [pc, #196]	@ (8001660 <HAL_I2C_MspInit+0x110>)
 800159c:	f000 fbcc 	bl	8001d38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015a0:	4b2e      	ldr	r3, [pc, #184]	@ (800165c <HAL_I2C_MspInit+0x10c>)
 80015a2:	69db      	ldr	r3, [r3, #28]
 80015a4:	4a2d      	ldr	r2, [pc, #180]	@ (800165c <HAL_I2C_MspInit+0x10c>)
 80015a6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015aa:	61d3      	str	r3, [r2, #28]
 80015ac:	4b2b      	ldr	r3, [pc, #172]	@ (800165c <HAL_I2C_MspInit+0x10c>)
 80015ae:	69db      	ldr	r3, [r3, #28]
 80015b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80015b8:	2200      	movs	r2, #0
 80015ba:	2100      	movs	r1, #0
 80015bc:	201f      	movs	r0, #31
 80015be:	f000 fac4 	bl	8001b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80015c2:	201f      	movs	r0, #31
 80015c4:	f000 fadd 	bl	8001b82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80015c8:	2200      	movs	r2, #0
 80015ca:	2100      	movs	r1, #0
 80015cc:	2020      	movs	r0, #32
 80015ce:	f000 fabc 	bl	8001b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80015d2:	2020      	movs	r0, #32
 80015d4:	f000 fad5 	bl	8001b82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80015d8:	e039      	b.n	800164e <HAL_I2C_MspInit+0xfe>
  else if(hi2c->Instance==I2C2)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a21      	ldr	r2, [pc, #132]	@ (8001664 <HAL_I2C_MspInit+0x114>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d134      	bne.n	800164e <HAL_I2C_MspInit+0xfe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e4:	4b1d      	ldr	r3, [pc, #116]	@ (800165c <HAL_I2C_MspInit+0x10c>)
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	4a1c      	ldr	r2, [pc, #112]	@ (800165c <HAL_I2C_MspInit+0x10c>)
 80015ea:	f043 0308 	orr.w	r3, r3, #8
 80015ee:	6193      	str	r3, [r2, #24]
 80015f0:	4b1a      	ldr	r3, [pc, #104]	@ (800165c <HAL_I2C_MspInit+0x10c>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	f003 0308 	and.w	r3, r3, #8
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80015fc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001602:	2312      	movs	r3, #18
 8001604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001606:	2303      	movs	r3, #3
 8001608:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160a:	f107 0318 	add.w	r3, r7, #24
 800160e:	4619      	mov	r1, r3
 8001610:	4813      	ldr	r0, [pc, #76]	@ (8001660 <HAL_I2C_MspInit+0x110>)
 8001612:	f000 fb91 	bl	8001d38 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001616:	4b11      	ldr	r3, [pc, #68]	@ (800165c <HAL_I2C_MspInit+0x10c>)
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	4a10      	ldr	r2, [pc, #64]	@ (800165c <HAL_I2C_MspInit+0x10c>)
 800161c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001620:	61d3      	str	r3, [r2, #28]
 8001622:	4b0e      	ldr	r3, [pc, #56]	@ (800165c <HAL_I2C_MspInit+0x10c>)
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800162e:	2200      	movs	r2, #0
 8001630:	2100      	movs	r1, #0
 8001632:	2021      	movs	r0, #33	@ 0x21
 8001634:	f000 fa89 	bl	8001b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001638:	2021      	movs	r0, #33	@ 0x21
 800163a:	f000 faa2 	bl	8001b82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800163e:	2200      	movs	r2, #0
 8001640:	2100      	movs	r1, #0
 8001642:	2022      	movs	r0, #34	@ 0x22
 8001644:	f000 fa81 	bl	8001b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001648:	2022      	movs	r0, #34	@ 0x22
 800164a:	f000 fa9a 	bl	8001b82 <HAL_NVIC_EnableIRQ>
}
 800164e:	bf00      	nop
 8001650:	3728      	adds	r7, #40	@ 0x28
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40005400 	.word	0x40005400
 800165c:	40021000 	.word	0x40021000
 8001660:	40010c00 	.word	0x40010c00
 8001664:	40005800 	.word	0x40005800

08001668 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b088      	sub	sp, #32
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 0310 	add.w	r3, r7, #16
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a20      	ldr	r2, [pc, #128]	@ (8001704 <HAL_UART_MspInit+0x9c>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d139      	bne.n	80016fc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001688:	4b1f      	ldr	r3, [pc, #124]	@ (8001708 <HAL_UART_MspInit+0xa0>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	4a1e      	ldr	r2, [pc, #120]	@ (8001708 <HAL_UART_MspInit+0xa0>)
 800168e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001692:	6193      	str	r3, [r2, #24]
 8001694:	4b1c      	ldr	r3, [pc, #112]	@ (8001708 <HAL_UART_MspInit+0xa0>)
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a0:	4b19      	ldr	r3, [pc, #100]	@ (8001708 <HAL_UART_MspInit+0xa0>)
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	4a18      	ldr	r2, [pc, #96]	@ (8001708 <HAL_UART_MspInit+0xa0>)
 80016a6:	f043 0304 	orr.w	r3, r3, #4
 80016aa:	6193      	str	r3, [r2, #24]
 80016ac:	4b16      	ldr	r3, [pc, #88]	@ (8001708 <HAL_UART_MspInit+0xa0>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016be:	2302      	movs	r3, #2
 80016c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016c2:	2303      	movs	r3, #3
 80016c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c6:	f107 0310 	add.w	r3, r7, #16
 80016ca:	4619      	mov	r1, r3
 80016cc:	480f      	ldr	r0, [pc, #60]	@ (800170c <HAL_UART_MspInit+0xa4>)
 80016ce:	f000 fb33 	bl	8001d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e0:	f107 0310 	add.w	r3, r7, #16
 80016e4:	4619      	mov	r1, r3
 80016e6:	4809      	ldr	r0, [pc, #36]	@ (800170c <HAL_UART_MspInit+0xa4>)
 80016e8:	f000 fb26 	bl	8001d38 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016ec:	2200      	movs	r2, #0
 80016ee:	2100      	movs	r1, #0
 80016f0:	2025      	movs	r0, #37	@ 0x25
 80016f2:	f000 fa2a 	bl	8001b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016f6:	2025      	movs	r0, #37	@ 0x25
 80016f8:	f000 fa43 	bl	8001b82 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80016fc:	bf00      	nop
 80016fe:	3720      	adds	r7, #32
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40013800 	.word	0x40013800
 8001708:	40021000 	.word	0x40021000
 800170c:	40010800 	.word	0x40010800

08001710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001714:	bf00      	nop
 8001716:	e7fd      	b.n	8001714 <NMI_Handler+0x4>

08001718 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800171c:	bf00      	nop
 800171e:	e7fd      	b.n	800171c <HardFault_Handler+0x4>

08001720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001724:	bf00      	nop
 8001726:	e7fd      	b.n	8001724 <MemManage_Handler+0x4>

08001728 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800172c:	bf00      	nop
 800172e:	e7fd      	b.n	800172c <BusFault_Handler+0x4>

08001730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001734:	bf00      	nop
 8001736:	e7fd      	b.n	8001734 <UsageFault_Handler+0x4>

08001738 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr

08001744 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr

08001750 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr

0800175c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001760:	f000 f8dc 	bl	800191c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}

08001768 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800176c:	4802      	ldr	r0, [pc, #8]	@ (8001778 <I2C1_EV_IRQHandler+0x10>)
 800176e:	f001 f929 	bl	80029c4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000078 	.word	0x20000078

0800177c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001780:	4802      	ldr	r0, [pc, #8]	@ (800178c <I2C1_ER_IRQHandler+0x10>)
 8001782:	f001 fa72 	bl	8002c6a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000078 	.word	0x20000078

08001790 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001794:	4802      	ldr	r0, [pc, #8]	@ (80017a0 <I2C2_EV_IRQHandler+0x10>)
 8001796:	f001 f915 	bl	80029c4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200000cc 	.word	0x200000cc

080017a4 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80017a8:	4802      	ldr	r0, [pc, #8]	@ (80017b4 <I2C2_ER_IRQHandler+0x10>)
 80017aa:	f001 fa5e 	bl	8002c6a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	200000cc 	.word	0x200000cc

080017b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017bc:	4802      	ldr	r0, [pc, #8]	@ (80017c8 <USART1_IRQHandler+0x10>)
 80017be:	f003 fe67 	bl	8005490 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000120 	.word	0x20000120

080017cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017d4:	4a14      	ldr	r2, [pc, #80]	@ (8001828 <_sbrk+0x5c>)
 80017d6:	4b15      	ldr	r3, [pc, #84]	@ (800182c <_sbrk+0x60>)
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017e0:	4b13      	ldr	r3, [pc, #76]	@ (8001830 <_sbrk+0x64>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d102      	bne.n	80017ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017e8:	4b11      	ldr	r3, [pc, #68]	@ (8001830 <_sbrk+0x64>)
 80017ea:	4a12      	ldr	r2, [pc, #72]	@ (8001834 <_sbrk+0x68>)
 80017ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ee:	4b10      	ldr	r3, [pc, #64]	@ (8001830 <_sbrk+0x64>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4413      	add	r3, r2
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d207      	bcs.n	800180c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017fc:	f004 fbaa 	bl	8005f54 <__errno>
 8001800:	4603      	mov	r3, r0
 8001802:	220c      	movs	r2, #12
 8001804:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001806:	f04f 33ff 	mov.w	r3, #4294967295
 800180a:	e009      	b.n	8001820 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800180c:	4b08      	ldr	r3, [pc, #32]	@ (8001830 <_sbrk+0x64>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001812:	4b07      	ldr	r3, [pc, #28]	@ (8001830 <_sbrk+0x64>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4413      	add	r3, r2
 800181a:	4a05      	ldr	r2, [pc, #20]	@ (8001830 <_sbrk+0x64>)
 800181c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800181e:	68fb      	ldr	r3, [r7, #12]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20005000 	.word	0x20005000
 800182c:	00000400 	.word	0x00000400
 8001830:	200001a8 	.word	0x200001a8
 8001834:	200002f8 	.word	0x200002f8

08001838 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr

08001844 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001844:	f7ff fff8 	bl	8001838 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001848:	480b      	ldr	r0, [pc, #44]	@ (8001878 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800184a:	490c      	ldr	r1, [pc, #48]	@ (800187c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800184c:	4a0c      	ldr	r2, [pc, #48]	@ (8001880 <LoopFillZerobss+0x16>)
  movs r3, #0
 800184e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001850:	e002      	b.n	8001858 <LoopCopyDataInit>

08001852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001856:	3304      	adds	r3, #4

08001858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800185a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800185c:	d3f9      	bcc.n	8001852 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800185e:	4a09      	ldr	r2, [pc, #36]	@ (8001884 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001860:	4c09      	ldr	r4, [pc, #36]	@ (8001888 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001864:	e001      	b.n	800186a <LoopFillZerobss>

08001866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001868:	3204      	adds	r2, #4

0800186a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800186a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800186c:	d3fb      	bcc.n	8001866 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800186e:	f004 fb77 	bl	8005f60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001872:	f7ff fc59 	bl	8001128 <main>
  bx lr
 8001876:	4770      	bx	lr
  ldr r0, =_sdata
 8001878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800187c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001880:	08006950 	.word	0x08006950
  ldr r2, =_sbss
 8001884:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001888:	200002f8 	.word	0x200002f8

0800188c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800188c:	e7fe      	b.n	800188c <ADC1_2_IRQHandler>
	...

08001890 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001894:	4b08      	ldr	r3, [pc, #32]	@ (80018b8 <HAL_Init+0x28>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a07      	ldr	r2, [pc, #28]	@ (80018b8 <HAL_Init+0x28>)
 800189a:	f043 0310 	orr.w	r3, r3, #16
 800189e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a0:	2003      	movs	r0, #3
 80018a2:	f000 f947 	bl	8001b34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018a6:	200f      	movs	r0, #15
 80018a8:	f000 f808 	bl	80018bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018ac:	f7ff fe1e 	bl	80014ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40022000 	.word	0x40022000

080018bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018c4:	4b12      	ldr	r3, [pc, #72]	@ (8001910 <HAL_InitTick+0x54>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4b12      	ldr	r3, [pc, #72]	@ (8001914 <HAL_InitTick+0x58>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	4619      	mov	r1, r3
 80018ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 f95f 	bl	8001b9e <HAL_SYSTICK_Config>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e00e      	b.n	8001908 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b0f      	cmp	r3, #15
 80018ee:	d80a      	bhi.n	8001906 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018f0:	2200      	movs	r2, #0
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	f04f 30ff 	mov.w	r0, #4294967295
 80018f8:	f000 f927 	bl	8001b4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018fc:	4a06      	ldr	r2, [pc, #24]	@ (8001918 <HAL_InitTick+0x5c>)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001902:	2300      	movs	r3, #0
 8001904:	e000      	b.n	8001908 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
}
 8001908:	4618      	mov	r0, r3
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000000 	.word	0x20000000
 8001914:	20000008 	.word	0x20000008
 8001918:	20000004 	.word	0x20000004

0800191c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001920:	4b05      	ldr	r3, [pc, #20]	@ (8001938 <HAL_IncTick+0x1c>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	461a      	mov	r2, r3
 8001926:	4b05      	ldr	r3, [pc, #20]	@ (800193c <HAL_IncTick+0x20>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4413      	add	r3, r2
 800192c:	4a03      	ldr	r2, [pc, #12]	@ (800193c <HAL_IncTick+0x20>)
 800192e:	6013      	str	r3, [r2, #0]
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr
 8001938:	20000008 	.word	0x20000008
 800193c:	200001ac 	.word	0x200001ac

08001940 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return uwTick;
 8001944:	4b02      	ldr	r3, [pc, #8]	@ (8001950 <HAL_GetTick+0x10>)
 8001946:	681b      	ldr	r3, [r3, #0]
}
 8001948:	4618      	mov	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr
 8001950:	200001ac 	.word	0x200001ac

08001954 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800195c:	f7ff fff0 	bl	8001940 <HAL_GetTick>
 8001960:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800196c:	d005      	beq.n	800197a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800196e:	4b0a      	ldr	r3, [pc, #40]	@ (8001998 <HAL_Delay+0x44>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	461a      	mov	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	4413      	add	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800197a:	bf00      	nop
 800197c:	f7ff ffe0 	bl	8001940 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	429a      	cmp	r2, r3
 800198a:	d8f7      	bhi.n	800197c <HAL_Delay+0x28>
  {
  }
}
 800198c:	bf00      	nop
 800198e:	bf00      	nop
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000008 	.word	0x20000008

0800199c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019ac:	4b0c      	ldr	r3, [pc, #48]	@ (80019e0 <__NVIC_SetPriorityGrouping+0x44>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019b8:	4013      	ands	r3, r2
 80019ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ce:	4a04      	ldr	r2, [pc, #16]	@ (80019e0 <__NVIC_SetPriorityGrouping+0x44>)
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	60d3      	str	r3, [r2, #12]
}
 80019d4:	bf00      	nop
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e8:	4b04      	ldr	r3, [pc, #16]	@ (80019fc <__NVIC_GetPriorityGrouping+0x18>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	0a1b      	lsrs	r3, r3, #8
 80019ee:	f003 0307 	and.w	r3, r3, #7
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	db0b      	blt.n	8001a2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	f003 021f 	and.w	r2, r3, #31
 8001a18:	4906      	ldr	r1, [pc, #24]	@ (8001a34 <__NVIC_EnableIRQ+0x34>)
 8001a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1e:	095b      	lsrs	r3, r3, #5
 8001a20:	2001      	movs	r0, #1
 8001a22:	fa00 f202 	lsl.w	r2, r0, r2
 8001a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr
 8001a34:	e000e100 	.word	0xe000e100

08001a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	6039      	str	r1, [r7, #0]
 8001a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	db0a      	blt.n	8001a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	490c      	ldr	r1, [pc, #48]	@ (8001a84 <__NVIC_SetPriority+0x4c>)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	0112      	lsls	r2, r2, #4
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	440b      	add	r3, r1
 8001a5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a60:	e00a      	b.n	8001a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	4908      	ldr	r1, [pc, #32]	@ (8001a88 <__NVIC_SetPriority+0x50>)
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	3b04      	subs	r3, #4
 8001a70:	0112      	lsls	r2, r2, #4
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	440b      	add	r3, r1
 8001a76:	761a      	strb	r2, [r3, #24]
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	e000e100 	.word	0xe000e100
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b089      	sub	sp, #36	@ 0x24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f1c3 0307 	rsb	r3, r3, #7
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	bf28      	it	cs
 8001aaa:	2304      	movcs	r3, #4
 8001aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	2b06      	cmp	r3, #6
 8001ab4:	d902      	bls.n	8001abc <NVIC_EncodePriority+0x30>
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3b03      	subs	r3, #3
 8001aba:	e000      	b.n	8001abe <NVIC_EncodePriority+0x32>
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43da      	mvns	r2, r3
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	401a      	ands	r2, r3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	fa01 f303 	lsl.w	r3, r1, r3
 8001ade:	43d9      	mvns	r1, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae4:	4313      	orrs	r3, r2
         );
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3724      	adds	r7, #36	@ 0x24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr

08001af0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b00:	d301      	bcc.n	8001b06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b02:	2301      	movs	r3, #1
 8001b04:	e00f      	b.n	8001b26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b06:	4a0a      	ldr	r2, [pc, #40]	@ (8001b30 <SysTick_Config+0x40>)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b0e:	210f      	movs	r1, #15
 8001b10:	f04f 30ff 	mov.w	r0, #4294967295
 8001b14:	f7ff ff90 	bl	8001a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b18:	4b05      	ldr	r3, [pc, #20]	@ (8001b30 <SysTick_Config+0x40>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b1e:	4b04      	ldr	r3, [pc, #16]	@ (8001b30 <SysTick_Config+0x40>)
 8001b20:	2207      	movs	r2, #7
 8001b22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	e000e010 	.word	0xe000e010

08001b34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7ff ff2d 	bl	800199c <__NVIC_SetPriorityGrouping>
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b086      	sub	sp, #24
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	4603      	mov	r3, r0
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	607a      	str	r2, [r7, #4]
 8001b56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b5c:	f7ff ff42 	bl	80019e4 <__NVIC_GetPriorityGrouping>
 8001b60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	68b9      	ldr	r1, [r7, #8]
 8001b66:	6978      	ldr	r0, [r7, #20]
 8001b68:	f7ff ff90 	bl	8001a8c <NVIC_EncodePriority>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b72:	4611      	mov	r1, r2
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff ff5f 	bl	8001a38 <__NVIC_SetPriority>
}
 8001b7a:	bf00      	nop
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	4603      	mov	r3, r0
 8001b8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ff35 	bl	8001a00 <__NVIC_EnableIRQ>
}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff ffa2 	bl	8001af0 <SysTick_Config>
 8001bac:	4603      	mov	r3, r0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b085      	sub	sp, #20
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d008      	beq.n	8001be0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2204      	movs	r2, #4
 8001bd2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e020      	b.n	8001c22 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f022 020e 	bic.w	r2, r2, #14
 8001bee:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f022 0201 	bic.w	r2, r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c08:	2101      	movs	r1, #1
 8001c0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c0e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3714      	adds	r7, #20
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr

08001c2c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c34:	2300      	movs	r3, #0
 8001c36:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d005      	beq.n	8001c50 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2204      	movs	r2, #4
 8001c48:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	73fb      	strb	r3, [r7, #15]
 8001c4e:	e051      	b.n	8001cf4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f022 020e 	bic.w	r2, r2, #14
 8001c5e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 0201 	bic.w	r2, r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a22      	ldr	r2, [pc, #136]	@ (8001d00 <HAL_DMA_Abort_IT+0xd4>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d029      	beq.n	8001cce <HAL_DMA_Abort_IT+0xa2>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a21      	ldr	r2, [pc, #132]	@ (8001d04 <HAL_DMA_Abort_IT+0xd8>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d022      	beq.n	8001cca <HAL_DMA_Abort_IT+0x9e>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a1f      	ldr	r2, [pc, #124]	@ (8001d08 <HAL_DMA_Abort_IT+0xdc>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d01a      	beq.n	8001cc4 <HAL_DMA_Abort_IT+0x98>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a1e      	ldr	r2, [pc, #120]	@ (8001d0c <HAL_DMA_Abort_IT+0xe0>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d012      	beq.n	8001cbe <HAL_DMA_Abort_IT+0x92>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a1c      	ldr	r2, [pc, #112]	@ (8001d10 <HAL_DMA_Abort_IT+0xe4>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d00a      	beq.n	8001cb8 <HAL_DMA_Abort_IT+0x8c>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a1b      	ldr	r2, [pc, #108]	@ (8001d14 <HAL_DMA_Abort_IT+0xe8>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d102      	bne.n	8001cb2 <HAL_DMA_Abort_IT+0x86>
 8001cac:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001cb0:	e00e      	b.n	8001cd0 <HAL_DMA_Abort_IT+0xa4>
 8001cb2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001cb6:	e00b      	b.n	8001cd0 <HAL_DMA_Abort_IT+0xa4>
 8001cb8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001cbc:	e008      	b.n	8001cd0 <HAL_DMA_Abort_IT+0xa4>
 8001cbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cc2:	e005      	b.n	8001cd0 <HAL_DMA_Abort_IT+0xa4>
 8001cc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cc8:	e002      	b.n	8001cd0 <HAL_DMA_Abort_IT+0xa4>
 8001cca:	2310      	movs	r3, #16
 8001ccc:	e000      	b.n	8001cd0 <HAL_DMA_Abort_IT+0xa4>
 8001cce:	2301      	movs	r3, #1
 8001cd0:	4a11      	ldr	r2, [pc, #68]	@ (8001d18 <HAL_DMA_Abort_IT+0xec>)
 8001cd2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	4798      	blx	r3
    } 
  }
  return status;
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40020008 	.word	0x40020008
 8001d04:	4002001c 	.word	0x4002001c
 8001d08:	40020030 	.word	0x40020030
 8001d0c:	40020044 	.word	0x40020044
 8001d10:	40020058 	.word	0x40020058
 8001d14:	4002006c 	.word	0x4002006c
 8001d18:	40020000 	.word	0x40020000

08001d1c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001d2a:	b2db      	uxtb	r3, r3
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr
	...

08001d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b08b      	sub	sp, #44	@ 0x2c
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d42:	2300      	movs	r3, #0
 8001d44:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d46:	2300      	movs	r3, #0
 8001d48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d4a:	e169      	b.n	8002020 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	69fa      	ldr	r2, [r7, #28]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	f040 8158 	bne.w	800201a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	4a9a      	ldr	r2, [pc, #616]	@ (8001fd8 <HAL_GPIO_Init+0x2a0>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d05e      	beq.n	8001e32 <HAL_GPIO_Init+0xfa>
 8001d74:	4a98      	ldr	r2, [pc, #608]	@ (8001fd8 <HAL_GPIO_Init+0x2a0>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d875      	bhi.n	8001e66 <HAL_GPIO_Init+0x12e>
 8001d7a:	4a98      	ldr	r2, [pc, #608]	@ (8001fdc <HAL_GPIO_Init+0x2a4>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d058      	beq.n	8001e32 <HAL_GPIO_Init+0xfa>
 8001d80:	4a96      	ldr	r2, [pc, #600]	@ (8001fdc <HAL_GPIO_Init+0x2a4>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d86f      	bhi.n	8001e66 <HAL_GPIO_Init+0x12e>
 8001d86:	4a96      	ldr	r2, [pc, #600]	@ (8001fe0 <HAL_GPIO_Init+0x2a8>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d052      	beq.n	8001e32 <HAL_GPIO_Init+0xfa>
 8001d8c:	4a94      	ldr	r2, [pc, #592]	@ (8001fe0 <HAL_GPIO_Init+0x2a8>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d869      	bhi.n	8001e66 <HAL_GPIO_Init+0x12e>
 8001d92:	4a94      	ldr	r2, [pc, #592]	@ (8001fe4 <HAL_GPIO_Init+0x2ac>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d04c      	beq.n	8001e32 <HAL_GPIO_Init+0xfa>
 8001d98:	4a92      	ldr	r2, [pc, #584]	@ (8001fe4 <HAL_GPIO_Init+0x2ac>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d863      	bhi.n	8001e66 <HAL_GPIO_Init+0x12e>
 8001d9e:	4a92      	ldr	r2, [pc, #584]	@ (8001fe8 <HAL_GPIO_Init+0x2b0>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d046      	beq.n	8001e32 <HAL_GPIO_Init+0xfa>
 8001da4:	4a90      	ldr	r2, [pc, #576]	@ (8001fe8 <HAL_GPIO_Init+0x2b0>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d85d      	bhi.n	8001e66 <HAL_GPIO_Init+0x12e>
 8001daa:	2b12      	cmp	r3, #18
 8001dac:	d82a      	bhi.n	8001e04 <HAL_GPIO_Init+0xcc>
 8001dae:	2b12      	cmp	r3, #18
 8001db0:	d859      	bhi.n	8001e66 <HAL_GPIO_Init+0x12e>
 8001db2:	a201      	add	r2, pc, #4	@ (adr r2, 8001db8 <HAL_GPIO_Init+0x80>)
 8001db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db8:	08001e33 	.word	0x08001e33
 8001dbc:	08001e0d 	.word	0x08001e0d
 8001dc0:	08001e1f 	.word	0x08001e1f
 8001dc4:	08001e61 	.word	0x08001e61
 8001dc8:	08001e67 	.word	0x08001e67
 8001dcc:	08001e67 	.word	0x08001e67
 8001dd0:	08001e67 	.word	0x08001e67
 8001dd4:	08001e67 	.word	0x08001e67
 8001dd8:	08001e67 	.word	0x08001e67
 8001ddc:	08001e67 	.word	0x08001e67
 8001de0:	08001e67 	.word	0x08001e67
 8001de4:	08001e67 	.word	0x08001e67
 8001de8:	08001e67 	.word	0x08001e67
 8001dec:	08001e67 	.word	0x08001e67
 8001df0:	08001e67 	.word	0x08001e67
 8001df4:	08001e67 	.word	0x08001e67
 8001df8:	08001e67 	.word	0x08001e67
 8001dfc:	08001e15 	.word	0x08001e15
 8001e00:	08001e29 	.word	0x08001e29
 8001e04:	4a79      	ldr	r2, [pc, #484]	@ (8001fec <HAL_GPIO_Init+0x2b4>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d013      	beq.n	8001e32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e0a:	e02c      	b.n	8001e66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	623b      	str	r3, [r7, #32]
          break;
 8001e12:	e029      	b.n	8001e68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	3304      	adds	r3, #4
 8001e1a:	623b      	str	r3, [r7, #32]
          break;
 8001e1c:	e024      	b.n	8001e68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	3308      	adds	r3, #8
 8001e24:	623b      	str	r3, [r7, #32]
          break;
 8001e26:	e01f      	b.n	8001e68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	330c      	adds	r3, #12
 8001e2e:	623b      	str	r3, [r7, #32]
          break;
 8001e30:	e01a      	b.n	8001e68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d102      	bne.n	8001e40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e3a:	2304      	movs	r3, #4
 8001e3c:	623b      	str	r3, [r7, #32]
          break;
 8001e3e:	e013      	b.n	8001e68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d105      	bne.n	8001e54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e48:	2308      	movs	r3, #8
 8001e4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	69fa      	ldr	r2, [r7, #28]
 8001e50:	611a      	str	r2, [r3, #16]
          break;
 8001e52:	e009      	b.n	8001e68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e54:	2308      	movs	r3, #8
 8001e56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69fa      	ldr	r2, [r7, #28]
 8001e5c:	615a      	str	r2, [r3, #20]
          break;
 8001e5e:	e003      	b.n	8001e68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e60:	2300      	movs	r3, #0
 8001e62:	623b      	str	r3, [r7, #32]
          break;
 8001e64:	e000      	b.n	8001e68 <HAL_GPIO_Init+0x130>
          break;
 8001e66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	2bff      	cmp	r3, #255	@ 0xff
 8001e6c:	d801      	bhi.n	8001e72 <HAL_GPIO_Init+0x13a>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	e001      	b.n	8001e76 <HAL_GPIO_Init+0x13e>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	3304      	adds	r3, #4
 8001e76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	2bff      	cmp	r3, #255	@ 0xff
 8001e7c:	d802      	bhi.n	8001e84 <HAL_GPIO_Init+0x14c>
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	e002      	b.n	8001e8a <HAL_GPIO_Init+0x152>
 8001e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e86:	3b08      	subs	r3, #8
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	210f      	movs	r1, #15
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	fa01 f303 	lsl.w	r3, r1, r3
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	401a      	ands	r2, r3
 8001e9c:	6a39      	ldr	r1, [r7, #32]
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f000 80b1 	beq.w	800201a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001eb8:	4b4d      	ldr	r3, [pc, #308]	@ (8001ff0 <HAL_GPIO_Init+0x2b8>)
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	4a4c      	ldr	r2, [pc, #304]	@ (8001ff0 <HAL_GPIO_Init+0x2b8>)
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	6193      	str	r3, [r2, #24]
 8001ec4:	4b4a      	ldr	r3, [pc, #296]	@ (8001ff0 <HAL_GPIO_Init+0x2b8>)
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	60bb      	str	r3, [r7, #8]
 8001ece:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ed0:	4a48      	ldr	r2, [pc, #288]	@ (8001ff4 <HAL_GPIO_Init+0x2bc>)
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed4:	089b      	lsrs	r3, r3, #2
 8001ed6:	3302      	adds	r3, #2
 8001ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001edc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee0:	f003 0303 	and.w	r3, r3, #3
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	220f      	movs	r2, #15
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a40      	ldr	r2, [pc, #256]	@ (8001ff8 <HAL_GPIO_Init+0x2c0>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d013      	beq.n	8001f24 <HAL_GPIO_Init+0x1ec>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a3f      	ldr	r2, [pc, #252]	@ (8001ffc <HAL_GPIO_Init+0x2c4>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d00d      	beq.n	8001f20 <HAL_GPIO_Init+0x1e8>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a3e      	ldr	r2, [pc, #248]	@ (8002000 <HAL_GPIO_Init+0x2c8>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d007      	beq.n	8001f1c <HAL_GPIO_Init+0x1e4>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a3d      	ldr	r2, [pc, #244]	@ (8002004 <HAL_GPIO_Init+0x2cc>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d101      	bne.n	8001f18 <HAL_GPIO_Init+0x1e0>
 8001f14:	2303      	movs	r3, #3
 8001f16:	e006      	b.n	8001f26 <HAL_GPIO_Init+0x1ee>
 8001f18:	2304      	movs	r3, #4
 8001f1a:	e004      	b.n	8001f26 <HAL_GPIO_Init+0x1ee>
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	e002      	b.n	8001f26 <HAL_GPIO_Init+0x1ee>
 8001f20:	2301      	movs	r3, #1
 8001f22:	e000      	b.n	8001f26 <HAL_GPIO_Init+0x1ee>
 8001f24:	2300      	movs	r3, #0
 8001f26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f28:	f002 0203 	and.w	r2, r2, #3
 8001f2c:	0092      	lsls	r2, r2, #2
 8001f2e:	4093      	lsls	r3, r2
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f36:	492f      	ldr	r1, [pc, #188]	@ (8001ff4 <HAL_GPIO_Init+0x2bc>)
 8001f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3a:	089b      	lsrs	r3, r3, #2
 8001f3c:	3302      	adds	r3, #2
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d006      	beq.n	8001f5e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f50:	4b2d      	ldr	r3, [pc, #180]	@ (8002008 <HAL_GPIO_Init+0x2d0>)
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	492c      	ldr	r1, [pc, #176]	@ (8002008 <HAL_GPIO_Init+0x2d0>)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	608b      	str	r3, [r1, #8]
 8001f5c:	e006      	b.n	8001f6c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f5e:	4b2a      	ldr	r3, [pc, #168]	@ (8002008 <HAL_GPIO_Init+0x2d0>)
 8001f60:	689a      	ldr	r2, [r3, #8]
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	43db      	mvns	r3, r3
 8001f66:	4928      	ldr	r1, [pc, #160]	@ (8002008 <HAL_GPIO_Init+0x2d0>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d006      	beq.n	8001f86 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f78:	4b23      	ldr	r3, [pc, #140]	@ (8002008 <HAL_GPIO_Init+0x2d0>)
 8001f7a:	68da      	ldr	r2, [r3, #12]
 8001f7c:	4922      	ldr	r1, [pc, #136]	@ (8002008 <HAL_GPIO_Init+0x2d0>)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	60cb      	str	r3, [r1, #12]
 8001f84:	e006      	b.n	8001f94 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f86:	4b20      	ldr	r3, [pc, #128]	@ (8002008 <HAL_GPIO_Init+0x2d0>)
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	491e      	ldr	r1, [pc, #120]	@ (8002008 <HAL_GPIO_Init+0x2d0>)
 8001f90:	4013      	ands	r3, r2
 8001f92:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d006      	beq.n	8001fae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fa0:	4b19      	ldr	r3, [pc, #100]	@ (8002008 <HAL_GPIO_Init+0x2d0>)
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	4918      	ldr	r1, [pc, #96]	@ (8002008 <HAL_GPIO_Init+0x2d0>)
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	604b      	str	r3, [r1, #4]
 8001fac:	e006      	b.n	8001fbc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fae:	4b16      	ldr	r3, [pc, #88]	@ (8002008 <HAL_GPIO_Init+0x2d0>)
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	4914      	ldr	r1, [pc, #80]	@ (8002008 <HAL_GPIO_Init+0x2d0>)
 8001fb8:	4013      	ands	r3, r2
 8001fba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d021      	beq.n	800200c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8002008 <HAL_GPIO_Init+0x2d0>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	490e      	ldr	r1, [pc, #56]	@ (8002008 <HAL_GPIO_Init+0x2d0>)
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	600b      	str	r3, [r1, #0]
 8001fd4:	e021      	b.n	800201a <HAL_GPIO_Init+0x2e2>
 8001fd6:	bf00      	nop
 8001fd8:	10320000 	.word	0x10320000
 8001fdc:	10310000 	.word	0x10310000
 8001fe0:	10220000 	.word	0x10220000
 8001fe4:	10210000 	.word	0x10210000
 8001fe8:	10120000 	.word	0x10120000
 8001fec:	10110000 	.word	0x10110000
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40010000 	.word	0x40010000
 8001ff8:	40010800 	.word	0x40010800
 8001ffc:	40010c00 	.word	0x40010c00
 8002000:	40011000 	.word	0x40011000
 8002004:	40011400 	.word	0x40011400
 8002008:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800200c:	4b0b      	ldr	r3, [pc, #44]	@ (800203c <HAL_GPIO_Init+0x304>)
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	43db      	mvns	r3, r3
 8002014:	4909      	ldr	r1, [pc, #36]	@ (800203c <HAL_GPIO_Init+0x304>)
 8002016:	4013      	ands	r3, r2
 8002018:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800201a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201c:	3301      	adds	r3, #1
 800201e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002026:	fa22 f303 	lsr.w	r3, r2, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	f47f ae8e 	bne.w	8001d4c <HAL_GPIO_Init+0x14>
  }
}
 8002030:	bf00      	nop
 8002032:	bf00      	nop
 8002034:	372c      	adds	r7, #44	@ 0x2c
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr
 800203c:	40010400 	.word	0x40010400

08002040 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e12b      	b.n	80022aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d106      	bne.n	800206c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7ff fa72 	bl	8001550 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2224      	movs	r2, #36	@ 0x24
 8002070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 0201 	bic.w	r2, r2, #1
 8002082:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002092:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020a4:	f003 f8b0 	bl	8005208 <HAL_RCC_GetPCLK1Freq>
 80020a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	4a81      	ldr	r2, [pc, #516]	@ (80022b4 <HAL_I2C_Init+0x274>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d807      	bhi.n	80020c4 <HAL_I2C_Init+0x84>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4a80      	ldr	r2, [pc, #512]	@ (80022b8 <HAL_I2C_Init+0x278>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	bf94      	ite	ls
 80020bc:	2301      	movls	r3, #1
 80020be:	2300      	movhi	r3, #0
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	e006      	b.n	80020d2 <HAL_I2C_Init+0x92>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4a7d      	ldr	r2, [pc, #500]	@ (80022bc <HAL_I2C_Init+0x27c>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	bf94      	ite	ls
 80020cc:	2301      	movls	r3, #1
 80020ce:	2300      	movhi	r3, #0
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e0e7      	b.n	80022aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	4a78      	ldr	r2, [pc, #480]	@ (80022c0 <HAL_I2C_Init+0x280>)
 80020de:	fba2 2303 	umull	r2, r3, r2, r3
 80020e2:	0c9b      	lsrs	r3, r3, #18
 80020e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68ba      	ldr	r2, [r7, #8]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	4a6a      	ldr	r2, [pc, #424]	@ (80022b4 <HAL_I2C_Init+0x274>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d802      	bhi.n	8002114 <HAL_I2C_Init+0xd4>
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	3301      	adds	r3, #1
 8002112:	e009      	b.n	8002128 <HAL_I2C_Init+0xe8>
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800211a:	fb02 f303 	mul.w	r3, r2, r3
 800211e:	4a69      	ldr	r2, [pc, #420]	@ (80022c4 <HAL_I2C_Init+0x284>)
 8002120:	fba2 2303 	umull	r2, r3, r2, r3
 8002124:	099b      	lsrs	r3, r3, #6
 8002126:	3301      	adds	r3, #1
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6812      	ldr	r2, [r2, #0]
 800212c:	430b      	orrs	r3, r1
 800212e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800213a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	495c      	ldr	r1, [pc, #368]	@ (80022b4 <HAL_I2C_Init+0x274>)
 8002144:	428b      	cmp	r3, r1
 8002146:	d819      	bhi.n	800217c <HAL_I2C_Init+0x13c>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	1e59      	subs	r1, r3, #1
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	fbb1 f3f3 	udiv	r3, r1, r3
 8002156:	1c59      	adds	r1, r3, #1
 8002158:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800215c:	400b      	ands	r3, r1
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00a      	beq.n	8002178 <HAL_I2C_Init+0x138>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	1e59      	subs	r1, r3, #1
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002170:	3301      	adds	r3, #1
 8002172:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002176:	e051      	b.n	800221c <HAL_I2C_Init+0x1dc>
 8002178:	2304      	movs	r3, #4
 800217a:	e04f      	b.n	800221c <HAL_I2C_Init+0x1dc>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d111      	bne.n	80021a8 <HAL_I2C_Init+0x168>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	1e58      	subs	r0, r3, #1
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6859      	ldr	r1, [r3, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	440b      	add	r3, r1
 8002192:	fbb0 f3f3 	udiv	r3, r0, r3
 8002196:	3301      	adds	r3, #1
 8002198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800219c:	2b00      	cmp	r3, #0
 800219e:	bf0c      	ite	eq
 80021a0:	2301      	moveq	r3, #1
 80021a2:	2300      	movne	r3, #0
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	e012      	b.n	80021ce <HAL_I2C_Init+0x18e>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	1e58      	subs	r0, r3, #1
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6859      	ldr	r1, [r3, #4]
 80021b0:	460b      	mov	r3, r1
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	440b      	add	r3, r1
 80021b6:	0099      	lsls	r1, r3, #2
 80021b8:	440b      	add	r3, r1
 80021ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80021be:	3301      	adds	r3, #1
 80021c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	bf0c      	ite	eq
 80021c8:	2301      	moveq	r3, #1
 80021ca:	2300      	movne	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_I2C_Init+0x196>
 80021d2:	2301      	movs	r3, #1
 80021d4:	e022      	b.n	800221c <HAL_I2C_Init+0x1dc>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10e      	bne.n	80021fc <HAL_I2C_Init+0x1bc>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	1e58      	subs	r0, r3, #1
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6859      	ldr	r1, [r3, #4]
 80021e6:	460b      	mov	r3, r1
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	440b      	add	r3, r1
 80021ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80021f0:	3301      	adds	r3, #1
 80021f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021fa:	e00f      	b.n	800221c <HAL_I2C_Init+0x1dc>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	1e58      	subs	r0, r3, #1
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6859      	ldr	r1, [r3, #4]
 8002204:	460b      	mov	r3, r1
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	0099      	lsls	r1, r3, #2
 800220c:	440b      	add	r3, r1
 800220e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002212:	3301      	adds	r3, #1
 8002214:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002218:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	6809      	ldr	r1, [r1, #0]
 8002220:	4313      	orrs	r3, r2
 8002222:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69da      	ldr	r2, [r3, #28]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	430a      	orrs	r2, r1
 800223e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800224a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6911      	ldr	r1, [r2, #16]
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	68d2      	ldr	r2, [r2, #12]
 8002256:	4311      	orrs	r1, r2
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6812      	ldr	r2, [r2, #0]
 800225c:	430b      	orrs	r3, r1
 800225e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	695a      	ldr	r2, [r3, #20]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	430a      	orrs	r2, r1
 800227a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f042 0201 	orr.w	r2, r2, #1
 800228a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2220      	movs	r2, #32
 8002296:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	000186a0 	.word	0x000186a0
 80022b8:	001e847f 	.word	0x001e847f
 80022bc:	003d08ff 	.word	0x003d08ff
 80022c0:	431bde83 	.word	0x431bde83
 80022c4:	10624dd3 	.word	0x10624dd3

080022c8 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022da:	2b80      	cmp	r3, #128	@ 0x80
 80022dc:	d103      	bne.n	80022e6 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2200      	movs	r2, #0
 80022e4:	611a      	str	r2, [r3, #16]
  }
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bc80      	pop	{r7}
 80022ee:	4770      	bx	lr

080022f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b088      	sub	sp, #32
 80022f4:	af02      	add	r7, sp, #8
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	607a      	str	r2, [r7, #4]
 80022fa:	461a      	mov	r2, r3
 80022fc:	460b      	mov	r3, r1
 80022fe:	817b      	strh	r3, [r7, #10]
 8002300:	4613      	mov	r3, r2
 8002302:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002304:	f7ff fb1c 	bl	8001940 <HAL_GetTick>
 8002308:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b20      	cmp	r3, #32
 8002314:	f040 80e0 	bne.w	80024d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	2319      	movs	r3, #25
 800231e:	2201      	movs	r2, #1
 8002320:	4970      	ldr	r1, [pc, #448]	@ (80024e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f002 f924 	bl	8004570 <I2C_WaitOnFlagUntilTimeout>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800232e:	2302      	movs	r3, #2
 8002330:	e0d3      	b.n	80024da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002338:	2b01      	cmp	r3, #1
 800233a:	d101      	bne.n	8002340 <HAL_I2C_Master_Transmit+0x50>
 800233c:	2302      	movs	r3, #2
 800233e:	e0cc      	b.n	80024da <HAL_I2C_Master_Transmit+0x1ea>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b01      	cmp	r3, #1
 8002354:	d007      	beq.n	8002366 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f042 0201 	orr.w	r2, r2, #1
 8002364:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002374:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2221      	movs	r2, #33	@ 0x21
 800237a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2210      	movs	r2, #16
 8002382:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2200      	movs	r2, #0
 800238a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	893a      	ldrh	r2, [r7, #8]
 8002396:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800239c:	b29a      	uxth	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	4a50      	ldr	r2, [pc, #320]	@ (80024e8 <HAL_I2C_Master_Transmit+0x1f8>)
 80023a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80023a8:	8979      	ldrh	r1, [r7, #10]
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	6a3a      	ldr	r2, [r7, #32]
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f001 fee6 	bl	8004180 <I2C_MasterRequestWrite>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e08d      	b.n	80024da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023be:	2300      	movs	r3, #0
 80023c0:	613b      	str	r3, [r7, #16]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	695b      	ldr	r3, [r3, #20]
 80023c8:	613b      	str	r3, [r7, #16]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	613b      	str	r3, [r7, #16]
 80023d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80023d4:	e066      	b.n	80024a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	6a39      	ldr	r1, [r7, #32]
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f002 f9e2 	bl	80047a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00d      	beq.n	8002402 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d107      	bne.n	80023fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e06b      	b.n	80024da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002406:	781a      	ldrb	r2, [r3, #0]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002412:	1c5a      	adds	r2, r3, #1
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800241c:	b29b      	uxth	r3, r3
 800241e:	3b01      	subs	r3, #1
 8002420:	b29a      	uxth	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800242a:	3b01      	subs	r3, #1
 800242c:	b29a      	uxth	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b04      	cmp	r3, #4
 800243e:	d11b      	bne.n	8002478 <HAL_I2C_Master_Transmit+0x188>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002444:	2b00      	cmp	r3, #0
 8002446:	d017      	beq.n	8002478 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244c:	781a      	ldrb	r2, [r3, #0]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002458:	1c5a      	adds	r2, r3, #1
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002462:	b29b      	uxth	r3, r3
 8002464:	3b01      	subs	r3, #1
 8002466:	b29a      	uxth	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002470:	3b01      	subs	r3, #1
 8002472:	b29a      	uxth	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	6a39      	ldr	r1, [r7, #32]
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f002 f9d9 	bl	8004834 <I2C_WaitOnBTFFlagUntilTimeout>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00d      	beq.n	80024a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248c:	2b04      	cmp	r3, #4
 800248e:	d107      	bne.n	80024a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800249e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e01a      	b.n	80024da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d194      	bne.n	80023d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2220      	movs	r2, #32
 80024c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80024d4:	2300      	movs	r3, #0
 80024d6:	e000      	b.n	80024da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80024d8:	2302      	movs	r3, #2
  }
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3718      	adds	r7, #24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	00100002 	.word	0x00100002
 80024e8:	ffff0000 	.word	0xffff0000

080024ec <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b08c      	sub	sp, #48	@ 0x30
 80024f0:	af02      	add	r7, sp, #8
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	607a      	str	r2, [r7, #4]
 80024f6:	461a      	mov	r2, r3
 80024f8:	460b      	mov	r3, r1
 80024fa:	817b      	strh	r3, [r7, #10]
 80024fc:	4613      	mov	r3, r2
 80024fe:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002500:	2300      	movs	r3, #0
 8002502:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002504:	f7ff fa1c 	bl	8001940 <HAL_GetTick>
 8002508:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b20      	cmp	r3, #32
 8002514:	f040 824b 	bne.w	80029ae <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	2319      	movs	r3, #25
 800251e:	2201      	movs	r2, #1
 8002520:	497f      	ldr	r1, [pc, #508]	@ (8002720 <HAL_I2C_Master_Receive+0x234>)
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f002 f824 	bl	8004570 <I2C_WaitOnFlagUntilTimeout>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800252e:	2302      	movs	r3, #2
 8002530:	e23e      	b.n	80029b0 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002538:	2b01      	cmp	r3, #1
 800253a:	d101      	bne.n	8002540 <HAL_I2C_Master_Receive+0x54>
 800253c:	2302      	movs	r3, #2
 800253e:	e237      	b.n	80029b0 <HAL_I2C_Master_Receive+0x4c4>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b01      	cmp	r3, #1
 8002554:	d007      	beq.n	8002566 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f042 0201 	orr.w	r2, r2, #1
 8002564:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002574:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2222      	movs	r2, #34	@ 0x22
 800257a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2210      	movs	r2, #16
 8002582:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	893a      	ldrh	r2, [r7, #8]
 8002596:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800259c:	b29a      	uxth	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	4a5f      	ldr	r2, [pc, #380]	@ (8002724 <HAL_I2C_Master_Receive+0x238>)
 80025a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80025a8:	8979      	ldrh	r1, [r7, #10]
 80025aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f001 fe68 	bl	8004284 <I2C_MasterRequestRead>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e1f8      	b.n	80029b0 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d113      	bne.n	80025ee <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025c6:	2300      	movs	r3, #0
 80025c8:	61fb      	str	r3, [r7, #28]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	61fb      	str	r3, [r7, #28]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	61fb      	str	r3, [r7, #28]
 80025da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	e1cc      	b.n	8002988 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d11e      	bne.n	8002634 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002604:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002606:	b672      	cpsid	i
}
 8002608:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800260a:	2300      	movs	r3, #0
 800260c:	61bb      	str	r3, [r7, #24]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	61bb      	str	r3, [r7, #24]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	61bb      	str	r3, [r7, #24]
 800261e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800262e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002630:	b662      	cpsie	i
}
 8002632:	e035      	b.n	80026a0 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002638:	2b02      	cmp	r3, #2
 800263a:	d11e      	bne.n	800267a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800264a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800264c:	b672      	cpsid	i
}
 800264e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002650:	2300      	movs	r3, #0
 8002652:	617b      	str	r3, [r7, #20]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	617b      	str	r3, [r7, #20]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	617b      	str	r3, [r7, #20]
 8002664:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002674:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002676:	b662      	cpsie	i
}
 8002678:	e012      	b.n	80026a0 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002688:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800268a:	2300      	movs	r3, #0
 800268c:	613b      	str	r3, [r7, #16]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	613b      	str	r3, [r7, #16]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	613b      	str	r3, [r7, #16]
 800269e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80026a0:	e172      	b.n	8002988 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026a6:	2b03      	cmp	r3, #3
 80026a8:	f200 811f 	bhi.w	80028ea <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d123      	bne.n	80026fc <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026b6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f002 f935 	bl	8004928 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e173      	b.n	80029b0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	691a      	ldr	r2, [r3, #16]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026da:	1c5a      	adds	r2, r3, #1
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026e4:	3b01      	subs	r3, #1
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80026fa:	e145      	b.n	8002988 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002700:	2b02      	cmp	r3, #2
 8002702:	d152      	bne.n	80027aa <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800270a:	2200      	movs	r2, #0
 800270c:	4906      	ldr	r1, [pc, #24]	@ (8002728 <HAL_I2C_Master_Receive+0x23c>)
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f001 ff2e 	bl	8004570 <I2C_WaitOnFlagUntilTimeout>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d008      	beq.n	800272c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e148      	b.n	80029b0 <HAL_I2C_Master_Receive+0x4c4>
 800271e:	bf00      	nop
 8002720:	00100002 	.word	0x00100002
 8002724:	ffff0000 	.word	0xffff0000
 8002728:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800272c:	b672      	cpsid	i
}
 800272e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800273e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	691a      	ldr	r2, [r3, #16]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002752:	1c5a      	adds	r2, r3, #1
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800275c:	3b01      	subs	r3, #1
 800275e:	b29a      	uxth	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002768:	b29b      	uxth	r3, r3
 800276a:	3b01      	subs	r3, #1
 800276c:	b29a      	uxth	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002772:	b662      	cpsie	i
}
 8002774:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	691a      	ldr	r2, [r3, #16]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002788:	1c5a      	adds	r2, r3, #1
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002792:	3b01      	subs	r3, #1
 8002794:	b29a      	uxth	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800279e:	b29b      	uxth	r3, r3
 80027a0:	3b01      	subs	r3, #1
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80027a8:	e0ee      	b.n	8002988 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027b0:	2200      	movs	r2, #0
 80027b2:	4981      	ldr	r1, [pc, #516]	@ (80029b8 <HAL_I2C_Master_Receive+0x4cc>)
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f001 fedb 	bl	8004570 <I2C_WaitOnFlagUntilTimeout>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e0f5      	b.n	80029b0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80027d4:	b672      	cpsid	i
}
 80027d6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	691a      	ldr	r2, [r3, #16]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ea:	1c5a      	adds	r2, r3, #1
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027f4:	3b01      	subs	r3, #1
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002800:	b29b      	uxth	r3, r3
 8002802:	3b01      	subs	r3, #1
 8002804:	b29a      	uxth	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800280a:	4b6c      	ldr	r3, [pc, #432]	@ (80029bc <HAL_I2C_Master_Receive+0x4d0>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	08db      	lsrs	r3, r3, #3
 8002810:	4a6b      	ldr	r2, [pc, #428]	@ (80029c0 <HAL_I2C_Master_Receive+0x4d4>)
 8002812:	fba2 2303 	umull	r2, r3, r2, r3
 8002816:	0a1a      	lsrs	r2, r3, #8
 8002818:	4613      	mov	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	00da      	lsls	r2, r3, #3
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002824:	6a3b      	ldr	r3, [r7, #32]
 8002826:	3b01      	subs	r3, #1
 8002828:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800282a:	6a3b      	ldr	r3, [r7, #32]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d118      	bne.n	8002862 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2220      	movs	r2, #32
 800283a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284a:	f043 0220 	orr.w	r2, r3, #32
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002852:	b662      	cpsie	i
}
 8002854:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e0a6      	b.n	80029b0 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b04      	cmp	r3, #4
 800286e:	d1d9      	bne.n	8002824 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800287e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	691a      	ldr	r2, [r3, #16]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002892:	1c5a      	adds	r2, r3, #1
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800289c:	3b01      	subs	r3, #1
 800289e:	b29a      	uxth	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	3b01      	subs	r3, #1
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80028b2:	b662      	cpsie	i
}
 80028b4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	691a      	ldr	r2, [r3, #16]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c8:	1c5a      	adds	r2, r3, #1
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028d2:	3b01      	subs	r3, #1
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028de:	b29b      	uxth	r3, r3
 80028e0:	3b01      	subs	r3, #1
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80028e8:	e04e      	b.n	8002988 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f002 f81a 	bl	8004928 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e058      	b.n	80029b0 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	691a      	ldr	r2, [r3, #16]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002910:	1c5a      	adds	r2, r3, #1
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800291a:	3b01      	subs	r3, #1
 800291c:	b29a      	uxth	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002926:	b29b      	uxth	r3, r3
 8002928:	3b01      	subs	r3, #1
 800292a:	b29a      	uxth	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	f003 0304 	and.w	r3, r3, #4
 800293a:	2b04      	cmp	r3, #4
 800293c:	d124      	bne.n	8002988 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002942:	2b03      	cmp	r3, #3
 8002944:	d107      	bne.n	8002956 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002954:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	691a      	ldr	r2, [r3, #16]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002960:	b2d2      	uxtb	r2, r2
 8002962:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002968:	1c5a      	adds	r2, r3, #1
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002972:	3b01      	subs	r3, #1
 8002974:	b29a      	uxth	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800297e:	b29b      	uxth	r3, r3
 8002980:	3b01      	subs	r3, #1
 8002982:	b29a      	uxth	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800298c:	2b00      	cmp	r3, #0
 800298e:	f47f ae88 	bne.w	80026a2 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2220      	movs	r2, #32
 8002996:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80029aa:	2300      	movs	r3, #0
 80029ac:	e000      	b.n	80029b0 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80029ae:	2302      	movs	r3, #2
  }
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3728      	adds	r7, #40	@ 0x28
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	00010004 	.word	0x00010004
 80029bc:	20000000 	.word	0x20000000
 80029c0:	14f8b589 	.word	0x14f8b589

080029c4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b088      	sub	sp, #32
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029dc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80029e4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029ec:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80029ee:	7bfb      	ldrb	r3, [r7, #15]
 80029f0:	2b10      	cmp	r3, #16
 80029f2:	d003      	beq.n	80029fc <HAL_I2C_EV_IRQHandler+0x38>
 80029f4:	7bfb      	ldrb	r3, [r7, #15]
 80029f6:	2b40      	cmp	r3, #64	@ 0x40
 80029f8:	f040 80b1 	bne.w	8002b5e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10d      	bne.n	8002a32 <HAL_I2C_EV_IRQHandler+0x6e>
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002a1c:	d003      	beq.n	8002a26 <HAL_I2C_EV_IRQHandler+0x62>
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002a24:	d101      	bne.n	8002a2a <HAL_I2C_EV_IRQHandler+0x66>
 8002a26:	2301      	movs	r3, #1
 8002a28:	e000      	b.n	8002a2c <HAL_I2C_EV_IRQHandler+0x68>
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	f000 8114 	beq.w	8002c5a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00b      	beq.n	8002a54 <HAL_I2C_EV_IRQHandler+0x90>
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d006      	beq.n	8002a54 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f001 fff9 	bl	8004a3e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 fd74 	bl	800353a <I2C_Master_SB>
 8002a52:	e083      	b.n	8002b5c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d008      	beq.n	8002a70 <HAL_I2C_EV_IRQHandler+0xac>
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d003      	beq.n	8002a70 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 fdeb 	bl	8003644 <I2C_Master_ADD10>
 8002a6e:	e075      	b.n	8002b5c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d008      	beq.n	8002a8c <HAL_I2C_EV_IRQHandler+0xc8>
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d003      	beq.n	8002a8c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 fe06 	bl	8003696 <I2C_Master_ADDR>
 8002a8a:	e067      	b.n	8002b5c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	f003 0304 	and.w	r3, r3, #4
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d036      	beq.n	8002b04 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002aa0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002aa4:	f000 80db 	beq.w	8002c5e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00d      	beq.n	8002ace <HAL_I2C_EV_IRQHandler+0x10a>
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d008      	beq.n	8002ace <HAL_I2C_EV_IRQHandler+0x10a>
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f003 0304 	and.w	r3, r3, #4
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d103      	bne.n	8002ace <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 f9d4 	bl	8002e74 <I2C_MasterTransmit_TXE>
 8002acc:	e046      	b.n	8002b5c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 80c2 	beq.w	8002c5e <HAL_I2C_EV_IRQHandler+0x29a>
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 80bc 	beq.w	8002c5e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002ae6:	7bbb      	ldrb	r3, [r7, #14]
 8002ae8:	2b21      	cmp	r3, #33	@ 0x21
 8002aea:	d103      	bne.n	8002af4 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 fa5d 	bl	8002fac <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002af2:	e0b4      	b.n	8002c5e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
 8002af6:	2b40      	cmp	r3, #64	@ 0x40
 8002af8:	f040 80b1 	bne.w	8002c5e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 facb 	bl	8003098 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b02:	e0ac      	b.n	8002c5e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b12:	f000 80a4 	beq.w	8002c5e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00d      	beq.n	8002b3c <HAL_I2C_EV_IRQHandler+0x178>
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d008      	beq.n	8002b3c <HAL_I2C_EV_IRQHandler+0x178>
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d103      	bne.n	8002b3c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 fb47 	bl	80031c8 <I2C_MasterReceive_RXNE>
 8002b3a:	e00f      	b.n	8002b5c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	f003 0304 	and.w	r3, r3, #4
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f000 808b 	beq.w	8002c5e <HAL_I2C_EV_IRQHandler+0x29a>
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 8085 	beq.w	8002c5e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 fbff 	bl	8003358 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b5a:	e080      	b.n	8002c5e <HAL_I2C_EV_IRQHandler+0x29a>
 8002b5c:	e07f      	b.n	8002c5e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d004      	beq.n	8002b70 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	61fb      	str	r3, [r7, #28]
 8002b6e:	e007      	b.n	8002b80 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d011      	beq.n	8002bae <HAL_I2C_EV_IRQHandler+0x1ea>
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00c      	beq.n	8002bae <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d003      	beq.n	8002ba4 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002ba4:	69b9      	ldr	r1, [r7, #24]
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 ffcc 	bl	8003b44 <I2C_Slave_ADDR>
 8002bac:	e05a      	b.n	8002c64 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	f003 0310 	and.w	r3, r3, #16
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d008      	beq.n	8002bca <HAL_I2C_EV_IRQHandler+0x206>
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f001 f806 	bl	8003bd4 <I2C_Slave_STOPF>
 8002bc8:	e04c      	b.n	8002c64 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002bca:	7bbb      	ldrb	r3, [r7, #14]
 8002bcc:	2b21      	cmp	r3, #33	@ 0x21
 8002bce:	d002      	beq.n	8002bd6 <HAL_I2C_EV_IRQHandler+0x212>
 8002bd0:	7bbb      	ldrb	r3, [r7, #14]
 8002bd2:	2b29      	cmp	r3, #41	@ 0x29
 8002bd4:	d120      	bne.n	8002c18 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00d      	beq.n	8002bfc <HAL_I2C_EV_IRQHandler+0x238>
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d008      	beq.n	8002bfc <HAL_I2C_EV_IRQHandler+0x238>
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d103      	bne.n	8002bfc <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 fee9 	bl	80039cc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002bfa:	e032      	b.n	8002c62 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d02d      	beq.n	8002c62 <HAL_I2C_EV_IRQHandler+0x29e>
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d028      	beq.n	8002c62 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 ff18 	bl	8003a46 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c16:	e024      	b.n	8002c62 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00d      	beq.n	8002c3e <HAL_I2C_EV_IRQHandler+0x27a>
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d008      	beq.n	8002c3e <HAL_I2C_EV_IRQHandler+0x27a>
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	f003 0304 	and.w	r3, r3, #4
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d103      	bne.n	8002c3e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 ff25 	bl	8003a86 <I2C_SlaveReceive_RXNE>
 8002c3c:	e012      	b.n	8002c64 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00d      	beq.n	8002c64 <HAL_I2C_EV_IRQHandler+0x2a0>
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d008      	beq.n	8002c64 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 ff55 	bl	8003b02 <I2C_SlaveReceive_BTF>
 8002c58:	e004      	b.n	8002c64 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8002c5a:	bf00      	nop
 8002c5c:	e002      	b.n	8002c64 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c5e:	bf00      	nop
 8002c60:	e000      	b.n	8002c64 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c62:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002c64:	3720      	adds	r7, #32
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b08a      	sub	sp, #40	@ 0x28
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002c82:	2300      	movs	r3, #0
 8002c84:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c8c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
 8002c90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d015      	beq.n	8002cc4 <HAL_I2C_ER_IRQHandler+0x5a>
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d010      	beq.n	8002cc4 <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca4:	f043 0301 	orr.w	r3, r3, #1
 8002ca8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002cb2:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002cc2:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002cc4:	6a3b      	ldr	r3, [r7, #32]
 8002cc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00d      	beq.n	8002cea <HAL_I2C_ER_IRQHandler+0x80>
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d008      	beq.n	8002cea <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cda:	f043 0302 	orr.w	r3, r3, #2
 8002cde:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8002ce8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002cea:	6a3b      	ldr	r3, [r7, #32]
 8002cec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d03e      	beq.n	8002d72 <HAL_I2C_ER_IRQHandler+0x108>
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d039      	beq.n	8002d72 <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 8002cfe:	7efb      	ldrb	r3, [r7, #27]
 8002d00:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d10:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d16:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002d18:	7ebb      	ldrb	r3, [r7, #26]
 8002d1a:	2b20      	cmp	r3, #32
 8002d1c:	d112      	bne.n	8002d44 <HAL_I2C_ER_IRQHandler+0xda>
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10f      	bne.n	8002d44 <HAL_I2C_ER_IRQHandler+0xda>
 8002d24:	7cfb      	ldrb	r3, [r7, #19]
 8002d26:	2b21      	cmp	r3, #33	@ 0x21
 8002d28:	d008      	beq.n	8002d3c <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002d2a:	7cfb      	ldrb	r3, [r7, #19]
 8002d2c:	2b29      	cmp	r3, #41	@ 0x29
 8002d2e:	d005      	beq.n	8002d3c <HAL_I2C_ER_IRQHandler+0xd2>
 8002d30:	7cfb      	ldrb	r3, [r7, #19]
 8002d32:	2b28      	cmp	r3, #40	@ 0x28
 8002d34:	d106      	bne.n	8002d44 <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2b21      	cmp	r3, #33	@ 0x21
 8002d3a:	d103      	bne.n	8002d44 <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f001 f879 	bl	8003e34 <I2C_Slave_AF>
 8002d42:	e016      	b.n	8002d72 <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d4c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d50:	f043 0304 	orr.w	r3, r3, #4
 8002d54:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002d56:	7efb      	ldrb	r3, [r7, #27]
 8002d58:	2b10      	cmp	r3, #16
 8002d5a:	d002      	beq.n	8002d62 <HAL_I2C_ER_IRQHandler+0xf8>
 8002d5c:	7efb      	ldrb	r3, [r7, #27]
 8002d5e:	2b40      	cmp	r3, #64	@ 0x40
 8002d60:	d107      	bne.n	8002d72 <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d70:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002d72:	6a3b      	ldr	r3, [r7, #32]
 8002d74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00d      	beq.n	8002d98 <HAL_I2C_ER_IRQHandler+0x12e>
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d008      	beq.n	8002d98 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d88:	f043 0308 	orr.w	r3, r3, #8
 8002d8c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8002d96:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d008      	beq.n	8002db0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da4:	431a      	orrs	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f001 f8b6 	bl	8003f1c <I2C_ITError>
  }
}
 8002db0:	bf00      	nop
 8002db2:	3728      	adds	r7, #40	@ 0x28
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bc80      	pop	{r7}
 8002dc8:	4770      	bx	lr

08002dca <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr

08002ddc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bc80      	pop	{r7}
 8002dec:	4770      	bx	lr

08002dee <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bc80      	pop	{r7}
 8002dfe:	4770      	bx	lr

08002e00 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	70fb      	strb	r3, [r7, #3]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bc80      	pop	{r7}
 8002e18:	4770      	bx	lr

08002e1a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr

08002e2c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bc80      	pop	{r7}
 8002e3c:	4770      	bx	lr

08002e3e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002e46:	bf00      	nop
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc80      	pop	{r7}
 8002e4e:	4770      	bx	lr

08002e50 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bc80      	pop	{r7}
 8002e60:	4770      	bx	lr

08002e62 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bc80      	pop	{r7}
 8002e72:	4770      	bx	lr

08002e74 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e82:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e8a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e90:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d150      	bne.n	8002f3c <I2C_MasterTransmit_TXE+0xc8>
 8002e9a:	7bfb      	ldrb	r3, [r7, #15]
 8002e9c:	2b21      	cmp	r3, #33	@ 0x21
 8002e9e:	d14d      	bne.n	8002f3c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	2b08      	cmp	r3, #8
 8002ea4:	d01d      	beq.n	8002ee2 <I2C_MasterTransmit_TXE+0x6e>
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	2b20      	cmp	r3, #32
 8002eaa:	d01a      	beq.n	8002ee2 <I2C_MasterTransmit_TXE+0x6e>
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002eb2:	d016      	beq.n	8002ee2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002ec2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2211      	movs	r2, #17
 8002ec8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7ff ff6c 	bl	8002db8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ee0:	e060      	b.n	8002fa4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002ef0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f00:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b40      	cmp	r3, #64	@ 0x40
 8002f1a:	d107      	bne.n	8002f2c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f7ff ff81 	bl	8002e2c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f2a:	e03b      	b.n	8002fa4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f7ff ff3f 	bl	8002db8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f3a:	e033      	b.n	8002fa4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002f3c:	7bfb      	ldrb	r3, [r7, #15]
 8002f3e:	2b21      	cmp	r3, #33	@ 0x21
 8002f40:	d005      	beq.n	8002f4e <I2C_MasterTransmit_TXE+0xda>
 8002f42:	7bbb      	ldrb	r3, [r7, #14]
 8002f44:	2b40      	cmp	r3, #64	@ 0x40
 8002f46:	d12d      	bne.n	8002fa4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002f48:	7bfb      	ldrb	r3, [r7, #15]
 8002f4a:	2b22      	cmp	r3, #34	@ 0x22
 8002f4c:	d12a      	bne.n	8002fa4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d108      	bne.n	8002f6a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f66:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002f68:	e01c      	b.n	8002fa4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b40      	cmp	r3, #64	@ 0x40
 8002f74:	d103      	bne.n	8002f7e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f88e 	bl	8003098 <I2C_MemoryTransmit_TXE_BTF>
}
 8002f7c:	e012      	b.n	8002fa4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f82:	781a      	ldrb	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8e:	1c5a      	adds	r2, r3, #1
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002fa2:	e7ff      	b.n	8002fa4 <I2C_MasterTransmit_TXE+0x130>
 8002fa4:	bf00      	nop
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b21      	cmp	r3, #33	@ 0x21
 8002fc4:	d164      	bne.n	8003090 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d012      	beq.n	8002ff6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd4:	781a      	ldrb	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe0:	1c5a      	adds	r2, r3, #1
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	3b01      	subs	r3, #1
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002ff4:	e04c      	b.n	8003090 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2b08      	cmp	r3, #8
 8002ffa:	d01d      	beq.n	8003038 <I2C_MasterTransmit_BTF+0x8c>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2b20      	cmp	r3, #32
 8003000:	d01a      	beq.n	8003038 <I2C_MasterTransmit_BTF+0x8c>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003008:	d016      	beq.n	8003038 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003018:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2211      	movs	r2, #17
 800301e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7ff fec1 	bl	8002db8 <HAL_I2C_MasterTxCpltCallback>
}
 8003036:	e02b      	b.n	8003090 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003046:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003056:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2220      	movs	r2, #32
 8003062:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b40      	cmp	r3, #64	@ 0x40
 8003070:	d107      	bne.n	8003082 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7ff fed6 	bl	8002e2c <HAL_I2C_MemTxCpltCallback>
}
 8003080:	e006      	b.n	8003090 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7ff fe94 	bl	8002db8 <HAL_I2C_MasterTxCpltCallback>
}
 8003090:	bf00      	nop
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030a6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d11d      	bne.n	80030ec <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d10b      	bne.n	80030d0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030bc:	b2da      	uxtb	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030c8:	1c9a      	adds	r2, r3, #2
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80030ce:	e077      	b.n	80031c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	121b      	asrs	r3, r3, #8
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030e4:	1c5a      	adds	r2, r3, #1
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80030ea:	e069      	b.n	80031c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d10b      	bne.n	800310c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003104:	1c5a      	adds	r2, r3, #1
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800310a:	e059      	b.n	80031c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003110:	2b02      	cmp	r3, #2
 8003112:	d152      	bne.n	80031ba <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003114:	7bfb      	ldrb	r3, [r7, #15]
 8003116:	2b22      	cmp	r3, #34	@ 0x22
 8003118:	d10d      	bne.n	8003136 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003128:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800312e:	1c5a      	adds	r2, r3, #1
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003134:	e044      	b.n	80031c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800313a:	b29b      	uxth	r3, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	d015      	beq.n	800316c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003140:	7bfb      	ldrb	r3, [r7, #15]
 8003142:	2b21      	cmp	r3, #33	@ 0x21
 8003144:	d112      	bne.n	800316c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314a:	781a      	ldrb	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003156:	1c5a      	adds	r2, r3, #1
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003160:	b29b      	uxth	r3, r3
 8003162:	3b01      	subs	r3, #1
 8003164:	b29a      	uxth	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800316a:	e029      	b.n	80031c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003170:	b29b      	uxth	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d124      	bne.n	80031c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003176:	7bfb      	ldrb	r3, [r7, #15]
 8003178:	2b21      	cmp	r3, #33	@ 0x21
 800317a:	d121      	bne.n	80031c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800318a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800319a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2220      	movs	r2, #32
 80031a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7ff fe3a 	bl	8002e2c <HAL_I2C_MemTxCpltCallback>
}
 80031b8:	e002      	b.n	80031c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7ff f884 	bl	80022c8 <I2C_Flush_DR>
}
 80031c0:	bf00      	nop
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b22      	cmp	r3, #34	@ 0x22
 80031da:	f040 80b9 	bne.w	8003350 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e2:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	2b03      	cmp	r3, #3
 80031f0:	d921      	bls.n	8003236 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	691a      	ldr	r2, [r3, #16]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fc:	b2d2      	uxtb	r2, r2
 80031fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003204:	1c5a      	adds	r2, r3, #1
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800320e:	b29b      	uxth	r3, r3
 8003210:	3b01      	subs	r3, #1
 8003212:	b29a      	uxth	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800321c:	b29b      	uxth	r3, r3
 800321e:	2b03      	cmp	r3, #3
 8003220:	f040 8096 	bne.w	8003350 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003232:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003234:	e08c      	b.n	8003350 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800323a:	2b02      	cmp	r3, #2
 800323c:	d07f      	beq.n	800333e <I2C_MasterReceive_RXNE+0x176>
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d002      	beq.n	800324a <I2C_MasterReceive_RXNE+0x82>
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d179      	bne.n	800333e <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f001 fb3a 	bl	80048c4 <I2C_WaitOnSTOPRequestThroughIT>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d14c      	bne.n	80032f0 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003264:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003274:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	691a      	ldr	r2, [r3, #16]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003280:	b2d2      	uxtb	r2, r2
 8003282:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003288:	1c5a      	adds	r2, r3, #1
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003292:	b29b      	uxth	r3, r3
 8003294:	3b01      	subs	r3, #1
 8003296:	b29a      	uxth	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2220      	movs	r2, #32
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b40      	cmp	r3, #64	@ 0x40
 80032ae:	d10a      	bne.n	80032c6 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7ff fdbd 	bl	8002e3e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80032c4:	e044      	b.n	8003350 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2b08      	cmp	r3, #8
 80032d2:	d002      	beq.n	80032da <I2C_MasterReceive_RXNE+0x112>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2b20      	cmp	r3, #32
 80032d8:	d103      	bne.n	80032e2 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	631a      	str	r2, [r3, #48]	@ 0x30
 80032e0:	e002      	b.n	80032e8 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2212      	movs	r2, #18
 80032e6:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f7ff fd6e 	bl	8002dca <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80032ee:	e02f      	b.n	8003350 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80032fe:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	691a      	ldr	r2, [r3, #16]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330a:	b2d2      	uxtb	r2, r2
 800330c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003312:	1c5a      	adds	r2, r3, #1
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800331c:	b29b      	uxth	r3, r3
 800331e:	3b01      	subs	r3, #1
 8003320:	b29a      	uxth	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2220      	movs	r2, #32
 800332a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7ff fd8a 	bl	8002e50 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800333c:	e008      	b.n	8003350 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800334c:	605a      	str	r2, [r3, #4]
}
 800334e:	e7ff      	b.n	8003350 <I2C_MasterReceive_RXNE+0x188>
 8003350:	bf00      	nop
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003364:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800336a:	b29b      	uxth	r3, r3
 800336c:	2b04      	cmp	r3, #4
 800336e:	d11b      	bne.n	80033a8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800337e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	691a      	ldr	r2, [r3, #16]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338a:	b2d2      	uxtb	r2, r2
 800338c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003392:	1c5a      	adds	r2, r3, #1
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800339c:	b29b      	uxth	r3, r3
 800339e:	3b01      	subs	r3, #1
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80033a6:	e0c4      	b.n	8003532 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	2b03      	cmp	r3, #3
 80033b0:	d129      	bne.n	8003406 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033c0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d00a      	beq.n	80033de <I2C_MasterReceive_BTF+0x86>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d007      	beq.n	80033de <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033dc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	691a      	ldr	r2, [r3, #16]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e8:	b2d2      	uxtb	r2, r2
 80033ea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f0:	1c5a      	adds	r2, r3, #1
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	3b01      	subs	r3, #1
 80033fe:	b29a      	uxth	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003404:	e095      	b.n	8003532 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800340a:	b29b      	uxth	r3, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d17d      	bne.n	800350c <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d002      	beq.n	800341c <I2C_MasterReceive_BTF+0xc4>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2b10      	cmp	r3, #16
 800341a:	d108      	bne.n	800342e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	e016      	b.n	800345c <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2b04      	cmp	r3, #4
 8003432:	d002      	beq.n	800343a <I2C_MasterReceive_BTF+0xe2>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2b02      	cmp	r3, #2
 8003438:	d108      	bne.n	800344c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	e007      	b.n	800345c <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800345a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	691a      	ldr	r2, [r3, #16]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003466:	b2d2      	uxtb	r2, r2
 8003468:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346e:	1c5a      	adds	r2, r3, #1
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003478:	b29b      	uxth	r3, r3
 800347a:	3b01      	subs	r3, #1
 800347c:	b29a      	uxth	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	691a      	ldr	r2, [r3, #16]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348c:	b2d2      	uxtb	r2, r2
 800348e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003494:	1c5a      	adds	r2, r3, #1
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800349e:	b29b      	uxth	r3, r3
 80034a0:	3b01      	subs	r3, #1
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80034b6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2220      	movs	r2, #32
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b40      	cmp	r3, #64	@ 0x40
 80034ca:	d10a      	bne.n	80034e2 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7ff fcaf 	bl	8002e3e <HAL_I2C_MemRxCpltCallback>
}
 80034e0:	e027      	b.n	8003532 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2b08      	cmp	r3, #8
 80034ee:	d002      	beq.n	80034f6 <I2C_MasterReceive_BTF+0x19e>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2b20      	cmp	r3, #32
 80034f4:	d103      	bne.n	80034fe <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80034fc:	e002      	b.n	8003504 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2212      	movs	r2, #18
 8003502:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f7ff fc60 	bl	8002dca <HAL_I2C_MasterRxCpltCallback>
}
 800350a:	e012      	b.n	8003532 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	691a      	ldr	r2, [r3, #16]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351e:	1c5a      	adds	r2, r3, #1
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003528:	b29b      	uxth	r3, r3
 800352a:	3b01      	subs	r3, #1
 800352c:	b29a      	uxth	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003532:	bf00      	nop
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800353a:	b480      	push	{r7}
 800353c:	b083      	sub	sp, #12
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b40      	cmp	r3, #64	@ 0x40
 800354c:	d117      	bne.n	800357e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003552:	2b00      	cmp	r3, #0
 8003554:	d109      	bne.n	800356a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800355a:	b2db      	uxtb	r3, r3
 800355c:	461a      	mov	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003566:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003568:	e067      	b.n	800363a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800356e:	b2db      	uxtb	r3, r3
 8003570:	f043 0301 	orr.w	r3, r3, #1
 8003574:	b2da      	uxtb	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	611a      	str	r2, [r3, #16]
}
 800357c:	e05d      	b.n	800363a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003586:	d133      	bne.n	80035f0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b21      	cmp	r3, #33	@ 0x21
 8003592:	d109      	bne.n	80035a8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003598:	b2db      	uxtb	r3, r3
 800359a:	461a      	mov	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80035a4:	611a      	str	r2, [r3, #16]
 80035a6:	e008      	b.n	80035ba <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	f043 0301 	orr.w	r3, r3, #1
 80035b2:	b2da      	uxtb	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d004      	beq.n	80035cc <I2C_Master_SB+0x92>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d108      	bne.n	80035de <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d032      	beq.n	800363a <I2C_Master_SB+0x100>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d02d      	beq.n	800363a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035ec:	605a      	str	r2, [r3, #4]
}
 80035ee:	e024      	b.n	800363a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10e      	bne.n	8003616 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	11db      	asrs	r3, r3, #7
 8003600:	b2db      	uxtb	r3, r3
 8003602:	f003 0306 	and.w	r3, r3, #6
 8003606:	b2db      	uxtb	r3, r3
 8003608:	f063 030f 	orn	r3, r3, #15
 800360c:	b2da      	uxtb	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	611a      	str	r2, [r3, #16]
}
 8003614:	e011      	b.n	800363a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800361a:	2b01      	cmp	r3, #1
 800361c:	d10d      	bne.n	800363a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003622:	b29b      	uxth	r3, r3
 8003624:	11db      	asrs	r3, r3, #7
 8003626:	b2db      	uxtb	r3, r3
 8003628:	f003 0306 	and.w	r3, r3, #6
 800362c:	b2db      	uxtb	r3, r3
 800362e:	f063 030e 	orn	r3, r3, #14
 8003632:	b2da      	uxtb	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	611a      	str	r2, [r3, #16]
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	bc80      	pop	{r7}
 8003642:	4770      	bx	lr

08003644 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003650:	b2da      	uxtb	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800365c:	2b00      	cmp	r3, #0
 800365e:	d004      	beq.n	800366a <I2C_Master_ADD10+0x26>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003666:	2b00      	cmp	r3, #0
 8003668:	d108      	bne.n	800367c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00c      	beq.n	800368c <I2C_Master_ADD10+0x48>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003678:	2b00      	cmp	r3, #0
 800367a:	d007      	beq.n	800368c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800368a:	605a      	str	r2, [r3, #4]
  }
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	bc80      	pop	{r7}
 8003694:	4770      	bx	lr

08003696 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003696:	b480      	push	{r7}
 8003698:	b091      	sub	sp, #68	@ 0x44
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80036a4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b22      	cmp	r3, #34	@ 0x22
 80036be:	f040 8174 	bne.w	80039aa <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10f      	bne.n	80036ea <I2C_Master_ADDR+0x54>
 80036ca:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80036ce:	2b40      	cmp	r3, #64	@ 0x40
 80036d0:	d10b      	bne.n	80036ea <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036d2:	2300      	movs	r3, #0
 80036d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80036e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e8:	e16b      	b.n	80039c2 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d11d      	bne.n	800372e <I2C_Master_ADDR+0x98>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80036fa:	d118      	bne.n	800372e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036fc:	2300      	movs	r3, #0
 80036fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003720:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003726:	1c5a      	adds	r2, r3, #1
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	651a      	str	r2, [r3, #80]	@ 0x50
 800372c:	e149      	b.n	80039c2 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003732:	b29b      	uxth	r3, r3
 8003734:	2b00      	cmp	r3, #0
 8003736:	d113      	bne.n	8003760 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003738:	2300      	movs	r3, #0
 800373a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800374c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800375c:	601a      	str	r2, [r3, #0]
 800375e:	e120      	b.n	80039a2 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003764:	b29b      	uxth	r3, r3
 8003766:	2b01      	cmp	r3, #1
 8003768:	f040 808a 	bne.w	8003880 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800376c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800376e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003772:	d137      	bne.n	80037e4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003782:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800378e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003792:	d113      	bne.n	80037bc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037a2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037a4:	2300      	movs	r3, #0
 80037a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80037b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ba:	e0f2      	b.n	80039a2 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037bc:	2300      	movs	r3, #0
 80037be:	623b      	str	r3, [r7, #32]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	623b      	str	r3, [r7, #32]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	623b      	str	r3, [r7, #32]
 80037d0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037e0:	601a      	str	r2, [r3, #0]
 80037e2:	e0de      	b.n	80039a2 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80037e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037e6:	2b08      	cmp	r3, #8
 80037e8:	d02e      	beq.n	8003848 <I2C_Master_ADDR+0x1b2>
 80037ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037ec:	2b20      	cmp	r3, #32
 80037ee:	d02b      	beq.n	8003848 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80037f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037f2:	2b12      	cmp	r3, #18
 80037f4:	d102      	bne.n	80037fc <I2C_Master_ADDR+0x166>
 80037f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d125      	bne.n	8003848 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80037fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037fe:	2b04      	cmp	r3, #4
 8003800:	d00e      	beq.n	8003820 <I2C_Master_ADDR+0x18a>
 8003802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003804:	2b02      	cmp	r3, #2
 8003806:	d00b      	beq.n	8003820 <I2C_Master_ADDR+0x18a>
 8003808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800380a:	2b10      	cmp	r3, #16
 800380c:	d008      	beq.n	8003820 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	e007      	b.n	8003830 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800382e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003830:	2300      	movs	r3, #0
 8003832:	61fb      	str	r3, [r7, #28]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	61fb      	str	r3, [r7, #28]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	61fb      	str	r3, [r7, #28]
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	e0ac      	b.n	80039a2 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003856:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003858:	2300      	movs	r3, #0
 800385a:	61bb      	str	r3, [r7, #24]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	61bb      	str	r3, [r7, #24]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	61bb      	str	r3, [r7, #24]
 800386c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800387c:	601a      	str	r2, [r3, #0]
 800387e:	e090      	b.n	80039a2 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003884:	b29b      	uxth	r3, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d158      	bne.n	800393c <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800388a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800388c:	2b04      	cmp	r3, #4
 800388e:	d021      	beq.n	80038d4 <I2C_Master_ADDR+0x23e>
 8003890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003892:	2b02      	cmp	r3, #2
 8003894:	d01e      	beq.n	80038d4 <I2C_Master_ADDR+0x23e>
 8003896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003898:	2b10      	cmp	r3, #16
 800389a:	d01b      	beq.n	80038d4 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038aa:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ac:	2300      	movs	r3, #0
 80038ae:	617b      	str	r3, [r7, #20]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	617b      	str	r3, [r7, #20]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	617b      	str	r3, [r7, #20]
 80038c0:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	e012      	b.n	80038fa <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80038e2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038e4:	2300      	movs	r3, #0
 80038e6:	613b      	str	r3, [r7, #16]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	613b      	str	r3, [r7, #16]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	613b      	str	r3, [r7, #16]
 80038f8:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003904:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003908:	d14b      	bne.n	80039a2 <I2C_Master_ADDR+0x30c>
 800390a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800390c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003910:	d00b      	beq.n	800392a <I2C_Master_ADDR+0x294>
 8003912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003914:	2b01      	cmp	r3, #1
 8003916:	d008      	beq.n	800392a <I2C_Master_ADDR+0x294>
 8003918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800391a:	2b08      	cmp	r3, #8
 800391c:	d005      	beq.n	800392a <I2C_Master_ADDR+0x294>
 800391e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003920:	2b10      	cmp	r3, #16
 8003922:	d002      	beq.n	800392a <I2C_Master_ADDR+0x294>
 8003924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003926:	2b20      	cmp	r3, #32
 8003928:	d13b      	bne.n	80039a2 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003938:	605a      	str	r2, [r3, #4]
 800393a:	e032      	b.n	80039a2 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800394a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003956:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800395a:	d117      	bne.n	800398c <I2C_Master_ADDR+0x2f6>
 800395c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800395e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003962:	d00b      	beq.n	800397c <I2C_Master_ADDR+0x2e6>
 8003964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003966:	2b01      	cmp	r3, #1
 8003968:	d008      	beq.n	800397c <I2C_Master_ADDR+0x2e6>
 800396a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800396c:	2b08      	cmp	r3, #8
 800396e:	d005      	beq.n	800397c <I2C_Master_ADDR+0x2e6>
 8003970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003972:	2b10      	cmp	r3, #16
 8003974:	d002      	beq.n	800397c <I2C_Master_ADDR+0x2e6>
 8003976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003978:	2b20      	cmp	r3, #32
 800397a:	d107      	bne.n	800398c <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800398a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800398c:	2300      	movs	r3, #0
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	60fb      	str	r3, [r7, #12]
 80039a0:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80039a8:	e00b      	b.n	80039c2 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039aa:	2300      	movs	r3, #0
 80039ac:	60bb      	str	r3, [r7, #8]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	695b      	ldr	r3, [r3, #20]
 80039b4:	60bb      	str	r3, [r7, #8]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	60bb      	str	r3, [r7, #8]
 80039be:	68bb      	ldr	r3, [r7, #8]
}
 80039c0:	e7ff      	b.n	80039c2 <I2C_Master_ADDR+0x32c>
 80039c2:	bf00      	nop
 80039c4:	3744      	adds	r7, #68	@ 0x44
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bc80      	pop	{r7}
 80039ca:	4770      	bx	lr

080039cc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039da:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d02b      	beq.n	8003a3e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ea:	781a      	ldrb	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f6:	1c5a      	adds	r2, r3, #1
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	3b01      	subs	r3, #1
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d114      	bne.n	8003a3e <I2C_SlaveTransmit_TXE+0x72>
 8003a14:	7bfb      	ldrb	r3, [r7, #15]
 8003a16:	2b29      	cmp	r3, #41	@ 0x29
 8003a18:	d111      	bne.n	8003a3e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a28:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2221      	movs	r2, #33	@ 0x21
 8003a2e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2228      	movs	r2, #40	@ 0x28
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f7ff f9cf 	bl	8002ddc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003a3e:	bf00      	nop
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d011      	beq.n	8003a7c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5c:	781a      	ldrb	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a68:	1c5a      	adds	r2, r3, #1
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bc80      	pop	{r7}
 8003a84:	4770      	bx	lr

08003a86 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b084      	sub	sp, #16
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a94:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d02c      	beq.n	8003afa <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	691a      	ldr	r2, [r3, #16]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab2:	1c5a      	adds	r2, r3, #1
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d114      	bne.n	8003afa <I2C_SlaveReceive_RXNE+0x74>
 8003ad0:	7bfb      	ldrb	r3, [r7, #15]
 8003ad2:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ad4:	d111      	bne.n	8003afa <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ae4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2222      	movs	r2, #34	@ 0x22
 8003aea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2228      	movs	r2, #40	@ 0x28
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f7ff f97a 	bl	8002dee <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003afa:	bf00      	nop
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b083      	sub	sp, #12
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d012      	beq.n	8003b3a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	691a      	ldr	r2, [r3, #16]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1e:	b2d2      	uxtb	r2, r2
 8003b20:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b26:	1c5a      	adds	r2, r3, #1
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	3b01      	subs	r3, #1
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bc80      	pop	{r7}
 8003b42:	4770      	bx	lr

08003b44 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003b5e:	2b28      	cmp	r3, #40	@ 0x28
 8003b60:	d125      	bne.n	8003bae <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b70:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d103      	bne.n	8003b92 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	81bb      	strh	r3, [r7, #12]
 8003b90:	e002      	b.n	8003b98 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003ba0:	89ba      	ldrh	r2, [r7, #12]
 8003ba2:	7bfb      	ldrb	r3, [r7, #15]
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f7ff f92a 	bl	8002e00 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003bac:	e00e      	b.n	8003bcc <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bae:	2300      	movs	r3, #0
 8003bb0:	60bb      	str	r3, [r7, #8]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	60bb      	str	r3, [r7, #8]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	60bb      	str	r3, [r7, #8]
 8003bc2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003bcc:	bf00      	nop
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003be2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003bf2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	60bb      	str	r3, [r7, #8]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	60bb      	str	r3, [r7, #8]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 0201 	orr.w	r2, r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]
 8003c10:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c20:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c30:	d172      	bne.n	8003d18 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003c32:	7bfb      	ldrb	r3, [r7, #15]
 8003c34:	2b22      	cmp	r3, #34	@ 0x22
 8003c36:	d002      	beq.n	8003c3e <I2C_Slave_STOPF+0x6a>
 8003c38:	7bfb      	ldrb	r3, [r7, #15]
 8003c3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c3c:	d135      	bne.n	8003caa <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d005      	beq.n	8003c62 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5a:	f043 0204 	orr.w	r2, r3, #4
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c70:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7fe f850 	bl	8001d1c <HAL_DMA_GetState>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d049      	beq.n	8003d16 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c86:	4a69      	ldr	r2, [pc, #420]	@ (8003e2c <I2C_Slave_STOPF+0x258>)
 8003c88:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fd ffcc 	bl	8001c2c <HAL_DMA_Abort_IT>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d03d      	beq.n	8003d16 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003ca4:	4610      	mov	r0, r2
 8003ca6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ca8:	e035      	b.n	8003d16 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d005      	beq.n	8003cce <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc6:	f043 0204 	orr.w	r2, r3, #4
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685a      	ldr	r2, [r3, #4]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cdc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fe f81a 	bl	8001d1c <HAL_DMA_GetState>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d014      	beq.n	8003d18 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cf2:	4a4e      	ldr	r2, [pc, #312]	@ (8003e2c <I2C_Slave_STOPF+0x258>)
 8003cf4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7fd ff96 	bl	8001c2c <HAL_DMA_Abort_IT>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d008      	beq.n	8003d18 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003d10:	4610      	mov	r0, r2
 8003d12:	4798      	blx	r3
 8003d14:	e000      	b.n	8003d18 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d16:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d03e      	beq.n	8003da0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	f003 0304 	and.w	r3, r3, #4
 8003d2c:	2b04      	cmp	r3, #4
 8003d2e:	d112      	bne.n	8003d56 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	691a      	ldr	r2, [r3, #16]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3a:	b2d2      	uxtb	r2, r2
 8003d3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d42:	1c5a      	adds	r2, r3, #1
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d60:	2b40      	cmp	r3, #64	@ 0x40
 8003d62:	d112      	bne.n	8003d8a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	691a      	ldr	r2, [r3, #16]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6e:	b2d2      	uxtb	r2, r2
 8003d70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d76:	1c5a      	adds	r2, r3, #1
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	3b01      	subs	r3, #1
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d005      	beq.n	8003da0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d98:	f043 0204 	orr.w	r2, r3, #4
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d003      	beq.n	8003db0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 f8b7 	bl	8003f1c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003dae:	e039      	b.n	8003e24 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003db0:	7bfb      	ldrb	r3, [r7, #15]
 8003db2:	2b2a      	cmp	r3, #42	@ 0x2a
 8003db4:	d109      	bne.n	8003dca <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2228      	movs	r2, #40	@ 0x28
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f7ff f812 	bl	8002dee <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b28      	cmp	r3, #40	@ 0x28
 8003dd4:	d111      	bne.n	8003dfa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a15      	ldr	r2, [pc, #84]	@ (8003e30 <I2C_Slave_STOPF+0x25c>)
 8003dda:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2220      	movs	r2, #32
 8003de6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7ff f811 	bl	8002e1a <HAL_I2C_ListenCpltCallback>
}
 8003df8:	e014      	b.n	8003e24 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfe:	2b22      	cmp	r3, #34	@ 0x22
 8003e00:	d002      	beq.n	8003e08 <I2C_Slave_STOPF+0x234>
 8003e02:	7bfb      	ldrb	r3, [r7, #15]
 8003e04:	2b22      	cmp	r3, #34	@ 0x22
 8003e06:	d10d      	bne.n	8003e24 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2220      	movs	r2, #32
 8003e12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7fe ffe5 	bl	8002dee <HAL_I2C_SlaveRxCpltCallback>
}
 8003e24:	bf00      	nop
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	08004421 	.word	0x08004421
 8003e30:	ffff0000 	.word	0xffff0000

08003e34 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e42:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e48:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	2b08      	cmp	r3, #8
 8003e4e:	d002      	beq.n	8003e56 <I2C_Slave_AF+0x22>
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	2b20      	cmp	r3, #32
 8003e54:	d129      	bne.n	8003eaa <I2C_Slave_AF+0x76>
 8003e56:	7bfb      	ldrb	r3, [r7, #15]
 8003e58:	2b28      	cmp	r3, #40	@ 0x28
 8003e5a:	d126      	bne.n	8003eaa <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a2e      	ldr	r2, [pc, #184]	@ (8003f18 <I2C_Slave_AF+0xe4>)
 8003e60:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e70:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e7a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e8a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2220      	movs	r2, #32
 8003e96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7fe ffb9 	bl	8002e1a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003ea8:	e031      	b.n	8003f0e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003eaa:	7bfb      	ldrb	r3, [r7, #15]
 8003eac:	2b21      	cmp	r3, #33	@ 0x21
 8003eae:	d129      	bne.n	8003f04 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a19      	ldr	r2, [pc, #100]	@ (8003f18 <I2C_Slave_AF+0xe4>)
 8003eb4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2221      	movs	r2, #33	@ 0x21
 8003eba:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003eda:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ee4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ef4:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7fe f9e6 	bl	80022c8 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f7fe ff6d 	bl	8002ddc <HAL_I2C_SlaveTxCpltCallback>
}
 8003f02:	e004      	b.n	8003f0e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f0c:	615a      	str	r2, [r3, #20]
}
 8003f0e:	bf00      	nop
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	ffff0000 	.word	0xffff0000

08003f1c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f2a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f32:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003f34:	7bbb      	ldrb	r3, [r7, #14]
 8003f36:	2b10      	cmp	r3, #16
 8003f38:	d002      	beq.n	8003f40 <I2C_ITError+0x24>
 8003f3a:	7bbb      	ldrb	r3, [r7, #14]
 8003f3c:	2b40      	cmp	r3, #64	@ 0x40
 8003f3e:	d10a      	bne.n	8003f56 <I2C_ITError+0x3a>
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
 8003f42:	2b22      	cmp	r3, #34	@ 0x22
 8003f44:	d107      	bne.n	8003f56 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f54:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f56:	7bfb      	ldrb	r3, [r7, #15]
 8003f58:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003f5c:	2b28      	cmp	r3, #40	@ 0x28
 8003f5e:	d107      	bne.n	8003f70 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2228      	movs	r2, #40	@ 0x28
 8003f6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003f6e:	e015      	b.n	8003f9c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f7e:	d00a      	beq.n	8003f96 <I2C_ITError+0x7a>
 8003f80:	7bfb      	ldrb	r3, [r7, #15]
 8003f82:	2b60      	cmp	r3, #96	@ 0x60
 8003f84:	d007      	beq.n	8003f96 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fa6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003faa:	d162      	bne.n	8004072 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fba:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fc0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d020      	beq.n	800400c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fce:	4a6a      	ldr	r2, [pc, #424]	@ (8004178 <I2C_ITError+0x25c>)
 8003fd0:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7fd fe28 	bl	8001c2c <HAL_DMA_Abort_IT>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 8089 	beq.w	80040f6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0201 	bic.w	r2, r2, #1
 8003ff2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004000:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004006:	4610      	mov	r0, r2
 8004008:	4798      	blx	r3
 800400a:	e074      	b.n	80040f6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004010:	4a59      	ldr	r2, [pc, #356]	@ (8004178 <I2C_ITError+0x25c>)
 8004012:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004018:	4618      	mov	r0, r3
 800401a:	f7fd fe07 	bl	8001c2c <HAL_DMA_Abort_IT>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d068      	beq.n	80040f6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800402e:	2b40      	cmp	r3, #64	@ 0x40
 8004030:	d10b      	bne.n	800404a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	691a      	ldr	r2, [r3, #16]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403c:	b2d2      	uxtb	r2, r2
 800403e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004044:	1c5a      	adds	r2, r3, #1
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 0201 	bic.w	r2, r2, #1
 8004058:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2220      	movs	r2, #32
 800405e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004066:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800406c:	4610      	mov	r0, r2
 800406e:	4798      	blx	r3
 8004070:	e041      	b.n	80040f6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b60      	cmp	r3, #96	@ 0x60
 800407c:	d125      	bne.n	80040ca <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2220      	movs	r2, #32
 8004082:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004096:	2b40      	cmp	r3, #64	@ 0x40
 8004098:	d10b      	bne.n	80040b2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	691a      	ldr	r2, [r3, #16]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a4:	b2d2      	uxtb	r2, r2
 80040a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ac:	1c5a      	adds	r2, r3, #1
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 0201 	bic.w	r2, r2, #1
 80040c0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7fe fecd 	bl	8002e62 <HAL_I2C_AbortCpltCallback>
 80040c8:	e015      	b.n	80040f6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040d4:	2b40      	cmp	r3, #64	@ 0x40
 80040d6:	d10b      	bne.n	80040f0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	691a      	ldr	r2, [r3, #16]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e2:	b2d2      	uxtb	r2, r2
 80040e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ea:	1c5a      	adds	r2, r3, #1
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f7fe fead 	bl	8002e50 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10e      	bne.n	8004124 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800410c:	2b00      	cmp	r3, #0
 800410e:	d109      	bne.n	8004124 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004116:	2b00      	cmp	r3, #0
 8004118:	d104      	bne.n	8004124 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004120:	2b00      	cmp	r3, #0
 8004122:	d007      	beq.n	8004134 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004132:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800413a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004140:	f003 0304 	and.w	r3, r3, #4
 8004144:	2b04      	cmp	r3, #4
 8004146:	d113      	bne.n	8004170 <I2C_ITError+0x254>
 8004148:	7bfb      	ldrb	r3, [r7, #15]
 800414a:	2b28      	cmp	r3, #40	@ 0x28
 800414c:	d110      	bne.n	8004170 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a0a      	ldr	r2, [pc, #40]	@ (800417c <I2C_ITError+0x260>)
 8004152:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2220      	movs	r2, #32
 800415e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7fe fe55 	bl	8002e1a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004170:	bf00      	nop
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	08004421 	.word	0x08004421
 800417c:	ffff0000 	.word	0xffff0000

08004180 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b088      	sub	sp, #32
 8004184:	af02      	add	r7, sp, #8
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	607a      	str	r2, [r7, #4]
 800418a:	603b      	str	r3, [r7, #0]
 800418c:	460b      	mov	r3, r1
 800418e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004194:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	2b08      	cmp	r3, #8
 800419a:	d006      	beq.n	80041aa <I2C_MasterRequestWrite+0x2a>
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d003      	beq.n	80041aa <I2C_MasterRequestWrite+0x2a>
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80041a8:	d108      	bne.n	80041bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041b8:	601a      	str	r2, [r3, #0]
 80041ba:	e00b      	b.n	80041d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c0:	2b12      	cmp	r3, #18
 80041c2:	d107      	bne.n	80041d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 f9c5 	bl	8004570 <I2C_WaitOnFlagUntilTimeout>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00d      	beq.n	8004208 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041fa:	d103      	bne.n	8004204 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004202:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e035      	b.n	8004274 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004210:	d108      	bne.n	8004224 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004212:	897b      	ldrh	r3, [r7, #10]
 8004214:	b2db      	uxtb	r3, r3
 8004216:	461a      	mov	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004220:	611a      	str	r2, [r3, #16]
 8004222:	e01b      	b.n	800425c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004224:	897b      	ldrh	r3, [r7, #10]
 8004226:	11db      	asrs	r3, r3, #7
 8004228:	b2db      	uxtb	r3, r3
 800422a:	f003 0306 	and.w	r3, r3, #6
 800422e:	b2db      	uxtb	r3, r3
 8004230:	f063 030f 	orn	r3, r3, #15
 8004234:	b2da      	uxtb	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	490e      	ldr	r1, [pc, #56]	@ (800427c <I2C_MasterRequestWrite+0xfc>)
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f000 fa0e 	bl	8004664 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e010      	b.n	8004274 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004252:	897b      	ldrh	r3, [r7, #10]
 8004254:	b2da      	uxtb	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	4907      	ldr	r1, [pc, #28]	@ (8004280 <I2C_MasterRequestWrite+0x100>)
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f000 f9fe 	bl	8004664 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e000      	b.n	8004274 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3718      	adds	r7, #24
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	00010008 	.word	0x00010008
 8004280:	00010002 	.word	0x00010002

08004284 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b088      	sub	sp, #32
 8004288:	af02      	add	r7, sp, #8
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	607a      	str	r2, [r7, #4]
 800428e:	603b      	str	r3, [r7, #0]
 8004290:	460b      	mov	r3, r1
 8004292:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004298:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80042a8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	2b08      	cmp	r3, #8
 80042ae:	d006      	beq.n	80042be <I2C_MasterRequestRead+0x3a>
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d003      	beq.n	80042be <I2C_MasterRequestRead+0x3a>
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80042bc:	d108      	bne.n	80042d0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	e00b      	b.n	80042e8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d4:	2b11      	cmp	r3, #17
 80042d6:	d107      	bne.n	80042e8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	9300      	str	r3, [sp, #0]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	f000 f93b 	bl	8004570 <I2C_WaitOnFlagUntilTimeout>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00d      	beq.n	800431c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800430a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800430e:	d103      	bne.n	8004318 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004316:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e079      	b.n	8004410 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004324:	d108      	bne.n	8004338 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004326:	897b      	ldrh	r3, [r7, #10]
 8004328:	b2db      	uxtb	r3, r3
 800432a:	f043 0301 	orr.w	r3, r3, #1
 800432e:	b2da      	uxtb	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	611a      	str	r2, [r3, #16]
 8004336:	e05f      	b.n	80043f8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004338:	897b      	ldrh	r3, [r7, #10]
 800433a:	11db      	asrs	r3, r3, #7
 800433c:	b2db      	uxtb	r3, r3
 800433e:	f003 0306 	and.w	r3, r3, #6
 8004342:	b2db      	uxtb	r3, r3
 8004344:	f063 030f 	orn	r3, r3, #15
 8004348:	b2da      	uxtb	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	4930      	ldr	r1, [pc, #192]	@ (8004418 <I2C_MasterRequestRead+0x194>)
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f000 f984 	bl	8004664 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e054      	b.n	8004410 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004366:	897b      	ldrh	r3, [r7, #10]
 8004368:	b2da      	uxtb	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	4929      	ldr	r1, [pc, #164]	@ (800441c <I2C_MasterRequestRead+0x198>)
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f000 f974 	bl	8004664 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e044      	b.n	8004410 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004386:	2300      	movs	r3, #0
 8004388:	613b      	str	r3, [r7, #16]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	613b      	str	r3, [r7, #16]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	613b      	str	r3, [r7, #16]
 800439a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043aa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	9300      	str	r3, [sp, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80043b8:	68f8      	ldr	r0, [r7, #12]
 80043ba:	f000 f8d9 	bl	8004570 <I2C_WaitOnFlagUntilTimeout>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00d      	beq.n	80043e0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043d2:	d103      	bne.n	80043dc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043da:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e017      	b.n	8004410 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80043e0:	897b      	ldrh	r3, [r7, #10]
 80043e2:	11db      	asrs	r3, r3, #7
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	f003 0306 	and.w	r3, r3, #6
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	f063 030e 	orn	r3, r3, #14
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	4907      	ldr	r1, [pc, #28]	@ (800441c <I2C_MasterRequestRead+0x198>)
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f000 f930 	bl	8004664 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e000      	b.n	8004410 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3718      	adds	r7, #24
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	00010008 	.word	0x00010008
 800441c:	00010002 	.word	0x00010002

08004420 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004428:	2300      	movs	r3, #0
 800442a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004430:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004438:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800443a:	4b4b      	ldr	r3, [pc, #300]	@ (8004568 <I2C_DMAAbort+0x148>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	08db      	lsrs	r3, r3, #3
 8004440:	4a4a      	ldr	r2, [pc, #296]	@ (800456c <I2C_DMAAbort+0x14c>)
 8004442:	fba2 2303 	umull	r2, r3, r2, r3
 8004446:	0a1a      	lsrs	r2, r3, #8
 8004448:	4613      	mov	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	00da      	lsls	r2, r3, #3
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d106      	bne.n	8004468 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800445e:	f043 0220 	orr.w	r2, r3, #32
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004466:	e00a      	b.n	800447e <I2C_DMAAbort+0x5e>
    }
    count--;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	3b01      	subs	r3, #1
 800446c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004478:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800447c:	d0ea      	beq.n	8004454 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800448a:	2200      	movs	r2, #0
 800448c:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800449a:	2200      	movs	r2, #0
 800449c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044ac:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	2200      	movs	r2, #0
 80044b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044c0:	2200      	movs	r2, #0
 80044c2:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d003      	beq.n	80044d4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044d0:	2200      	movs	r2, #0
 80044d2:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f022 0201 	bic.w	r2, r2, #1
 80044e2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2b60      	cmp	r3, #96	@ 0x60
 80044ee:	d10e      	bne.n	800450e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	2220      	movs	r2, #32
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	2200      	movs	r2, #0
 8004504:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004506:	6978      	ldr	r0, [r7, #20]
 8004508:	f7fe fcab 	bl	8002e62 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800450c:	e027      	b.n	800455e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800450e:	7cfb      	ldrb	r3, [r7, #19]
 8004510:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004514:	2b28      	cmp	r3, #40	@ 0x28
 8004516:	d117      	bne.n	8004548 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f042 0201 	orr.w	r2, r2, #1
 8004526:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004536:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	2200      	movs	r2, #0
 800453c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	2228      	movs	r2, #40	@ 0x28
 8004542:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004546:	e007      	b.n	8004558 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	2220      	movs	r2, #32
 800454c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004558:	6978      	ldr	r0, [r7, #20]
 800455a:	f7fe fc79 	bl	8002e50 <HAL_I2C_ErrorCallback>
}
 800455e:	bf00      	nop
 8004560:	3718      	adds	r7, #24
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	20000000 	.word	0x20000000
 800456c:	14f8b589 	.word	0x14f8b589

08004570 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	603b      	str	r3, [r7, #0]
 800457c:	4613      	mov	r3, r2
 800457e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004580:	e048      	b.n	8004614 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004588:	d044      	beq.n	8004614 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800458a:	f7fd f9d9 	bl	8001940 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	429a      	cmp	r2, r3
 8004598:	d302      	bcc.n	80045a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d139      	bne.n	8004614 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	0c1b      	lsrs	r3, r3, #16
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d10d      	bne.n	80045c6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	43da      	mvns	r2, r3
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	4013      	ands	r3, r2
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	bf0c      	ite	eq
 80045bc:	2301      	moveq	r3, #1
 80045be:	2300      	movne	r3, #0
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	461a      	mov	r2, r3
 80045c4:	e00c      	b.n	80045e0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	43da      	mvns	r2, r3
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	4013      	ands	r3, r2
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	bf0c      	ite	eq
 80045d8:	2301      	moveq	r3, #1
 80045da:	2300      	movne	r3, #0
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	461a      	mov	r2, r3
 80045e0:	79fb      	ldrb	r3, [r7, #7]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d116      	bne.n	8004614 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2220      	movs	r2, #32
 80045f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004600:	f043 0220 	orr.w	r2, r3, #32
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e023      	b.n	800465c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	0c1b      	lsrs	r3, r3, #16
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b01      	cmp	r3, #1
 800461c:	d10d      	bne.n	800463a <I2C_WaitOnFlagUntilTimeout+0xca>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	43da      	mvns	r2, r3
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	4013      	ands	r3, r2
 800462a:	b29b      	uxth	r3, r3
 800462c:	2b00      	cmp	r3, #0
 800462e:	bf0c      	ite	eq
 8004630:	2301      	moveq	r3, #1
 8004632:	2300      	movne	r3, #0
 8004634:	b2db      	uxtb	r3, r3
 8004636:	461a      	mov	r2, r3
 8004638:	e00c      	b.n	8004654 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	43da      	mvns	r2, r3
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	4013      	ands	r3, r2
 8004646:	b29b      	uxth	r3, r3
 8004648:	2b00      	cmp	r3, #0
 800464a:	bf0c      	ite	eq
 800464c:	2301      	moveq	r3, #1
 800464e:	2300      	movne	r3, #0
 8004650:	b2db      	uxtb	r3, r3
 8004652:	461a      	mov	r2, r3
 8004654:	79fb      	ldrb	r3, [r7, #7]
 8004656:	429a      	cmp	r2, r3
 8004658:	d093      	beq.n	8004582 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
 8004670:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004672:	e071      	b.n	8004758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800467e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004682:	d123      	bne.n	80046cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004692:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800469c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2220      	movs	r2, #32
 80046a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b8:	f043 0204 	orr.w	r2, r3, #4
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e067      	b.n	800479c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d2:	d041      	beq.n	8004758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046d4:	f7fd f934 	bl	8001940 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d302      	bcc.n	80046ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d136      	bne.n	8004758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	0c1b      	lsrs	r3, r3, #16
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d10c      	bne.n	800470e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	43da      	mvns	r2, r3
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	4013      	ands	r3, r2
 8004700:	b29b      	uxth	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	bf14      	ite	ne
 8004706:	2301      	movne	r3, #1
 8004708:	2300      	moveq	r3, #0
 800470a:	b2db      	uxtb	r3, r3
 800470c:	e00b      	b.n	8004726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	43da      	mvns	r2, r3
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	4013      	ands	r3, r2
 800471a:	b29b      	uxth	r3, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	bf14      	ite	ne
 8004720:	2301      	movne	r3, #1
 8004722:	2300      	moveq	r3, #0
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d016      	beq.n	8004758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2220      	movs	r2, #32
 8004734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004744:	f043 0220 	orr.w	r2, r3, #32
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e021      	b.n	800479c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	0c1b      	lsrs	r3, r3, #16
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b01      	cmp	r3, #1
 8004760:	d10c      	bne.n	800477c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	43da      	mvns	r2, r3
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	4013      	ands	r3, r2
 800476e:	b29b      	uxth	r3, r3
 8004770:	2b00      	cmp	r3, #0
 8004772:	bf14      	ite	ne
 8004774:	2301      	movne	r3, #1
 8004776:	2300      	moveq	r3, #0
 8004778:	b2db      	uxtb	r3, r3
 800477a:	e00b      	b.n	8004794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	43da      	mvns	r2, r3
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	4013      	ands	r3, r2
 8004788:	b29b      	uxth	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	bf14      	ite	ne
 800478e:	2301      	movne	r3, #1
 8004790:	2300      	moveq	r3, #0
 8004792:	b2db      	uxtb	r3, r3
 8004794:	2b00      	cmp	r3, #0
 8004796:	f47f af6d 	bne.w	8004674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3710      	adds	r7, #16
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047b0:	e034      	b.n	800481c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 f915 	bl	80049e2 <I2C_IsAcknowledgeFailed>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e034      	b.n	800482c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c8:	d028      	beq.n	800481c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ca:	f7fd f8b9 	bl	8001940 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d302      	bcc.n	80047e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d11d      	bne.n	800481c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047ea:	2b80      	cmp	r3, #128	@ 0x80
 80047ec:	d016      	beq.n	800481c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2220      	movs	r2, #32
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004808:	f043 0220 	orr.w	r2, r3, #32
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e007      	b.n	800482c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004826:	2b80      	cmp	r3, #128	@ 0x80
 8004828:	d1c3      	bne.n	80047b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004840:	e034      	b.n	80048ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f000 f8cd 	bl	80049e2 <I2C_IsAcknowledgeFailed>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e034      	b.n	80048bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004858:	d028      	beq.n	80048ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800485a:	f7fd f871 	bl	8001940 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	429a      	cmp	r2, r3
 8004868:	d302      	bcc.n	8004870 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d11d      	bne.n	80048ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	f003 0304 	and.w	r3, r3, #4
 800487a:	2b04      	cmp	r3, #4
 800487c:	d016      	beq.n	80048ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2220      	movs	r2, #32
 8004888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004898:	f043 0220 	orr.w	r2, r3, #32
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e007      	b.n	80048bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	f003 0304 	and.w	r3, r3, #4
 80048b6:	2b04      	cmp	r3, #4
 80048b8:	d1c3      	bne.n	8004842 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3710      	adds	r7, #16
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80048d0:	4b13      	ldr	r3, [pc, #76]	@ (8004920 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	08db      	lsrs	r3, r3, #3
 80048d6:	4a13      	ldr	r2, [pc, #76]	@ (8004924 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80048d8:	fba2 2303 	umull	r2, r3, r2, r3
 80048dc:	0a1a      	lsrs	r2, r3, #8
 80048de:	4613      	mov	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4413      	add	r3, r2
 80048e4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	3b01      	subs	r3, #1
 80048ea:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d107      	bne.n	8004902 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f6:	f043 0220 	orr.w	r2, r3, #32
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e008      	b.n	8004914 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800490c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004910:	d0e9      	beq.n	80048e6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	bc80      	pop	{r7}
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	20000000 	.word	0x20000000
 8004924:	14f8b589 	.word	0x14f8b589

08004928 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004934:	e049      	b.n	80049ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	f003 0310 	and.w	r3, r3, #16
 8004940:	2b10      	cmp	r3, #16
 8004942:	d119      	bne.n	8004978 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f06f 0210 	mvn.w	r2, #16
 800494c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2220      	movs	r2, #32
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e030      	b.n	80049da <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004978:	f7fc ffe2 	bl	8001940 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	429a      	cmp	r2, r3
 8004986:	d302      	bcc.n	800498e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d11d      	bne.n	80049ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	695b      	ldr	r3, [r3, #20]
 8004994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004998:	2b40      	cmp	r3, #64	@ 0x40
 800499a:	d016      	beq.n	80049ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2220      	movs	r2, #32
 80049a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b6:	f043 0220 	orr.w	r2, r3, #32
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e007      	b.n	80049da <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049d4:	2b40      	cmp	r3, #64	@ 0x40
 80049d6:	d1ae      	bne.n	8004936 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b083      	sub	sp, #12
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	695b      	ldr	r3, [r3, #20]
 80049f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049f8:	d11b      	bne.n	8004a32 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a02:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1e:	f043 0204 	orr.w	r2, r3, #4
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e000      	b.n	8004a34 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bc80      	pop	{r7}
 8004a3c:	4770      	bx	lr

08004a3e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a4a:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004a4e:	d103      	bne.n	8004a58 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004a56:	e007      	b.n	8004a68 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a5c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004a60:	d102      	bne.n	8004a68 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2208      	movs	r2, #8
 8004a66:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bc80      	pop	{r7}
 8004a70:	4770      	bx	lr
	...

08004a74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e272      	b.n	8004f6c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f000 8087 	beq.w	8004ba2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a94:	4b92      	ldr	r3, [pc, #584]	@ (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f003 030c 	and.w	r3, r3, #12
 8004a9c:	2b04      	cmp	r3, #4
 8004a9e:	d00c      	beq.n	8004aba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004aa0:	4b8f      	ldr	r3, [pc, #572]	@ (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f003 030c 	and.w	r3, r3, #12
 8004aa8:	2b08      	cmp	r3, #8
 8004aaa:	d112      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x5e>
 8004aac:	4b8c      	ldr	r3, [pc, #560]	@ (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ab4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ab8:	d10b      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aba:	4b89      	ldr	r3, [pc, #548]	@ (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d06c      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x12c>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d168      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e24c      	b.n	8004f6c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ada:	d106      	bne.n	8004aea <HAL_RCC_OscConfig+0x76>
 8004adc:	4b80      	ldr	r3, [pc, #512]	@ (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a7f      	ldr	r2, [pc, #508]	@ (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004ae2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ae6:	6013      	str	r3, [r2, #0]
 8004ae8:	e02e      	b.n	8004b48 <HAL_RCC_OscConfig+0xd4>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10c      	bne.n	8004b0c <HAL_RCC_OscConfig+0x98>
 8004af2:	4b7b      	ldr	r3, [pc, #492]	@ (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a7a      	ldr	r2, [pc, #488]	@ (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004af8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004afc:	6013      	str	r3, [r2, #0]
 8004afe:	4b78      	ldr	r3, [pc, #480]	@ (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a77      	ldr	r2, [pc, #476]	@ (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004b04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b08:	6013      	str	r3, [r2, #0]
 8004b0a:	e01d      	b.n	8004b48 <HAL_RCC_OscConfig+0xd4>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b14:	d10c      	bne.n	8004b30 <HAL_RCC_OscConfig+0xbc>
 8004b16:	4b72      	ldr	r3, [pc, #456]	@ (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a71      	ldr	r2, [pc, #452]	@ (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004b1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b20:	6013      	str	r3, [r2, #0]
 8004b22:	4b6f      	ldr	r3, [pc, #444]	@ (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a6e      	ldr	r2, [pc, #440]	@ (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004b28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b2c:	6013      	str	r3, [r2, #0]
 8004b2e:	e00b      	b.n	8004b48 <HAL_RCC_OscConfig+0xd4>
 8004b30:	4b6b      	ldr	r3, [pc, #428]	@ (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a6a      	ldr	r2, [pc, #424]	@ (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004b36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b3a:	6013      	str	r3, [r2, #0]
 8004b3c:	4b68      	ldr	r3, [pc, #416]	@ (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a67      	ldr	r2, [pc, #412]	@ (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004b42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d013      	beq.n	8004b78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b50:	f7fc fef6 	bl	8001940 <HAL_GetTick>
 8004b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b56:	e008      	b.n	8004b6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b58:	f7fc fef2 	bl	8001940 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b64      	cmp	r3, #100	@ 0x64
 8004b64:	d901      	bls.n	8004b6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e200      	b.n	8004f6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b6a:	4b5d      	ldr	r3, [pc, #372]	@ (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d0f0      	beq.n	8004b58 <HAL_RCC_OscConfig+0xe4>
 8004b76:	e014      	b.n	8004ba2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b78:	f7fc fee2 	bl	8001940 <HAL_GetTick>
 8004b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b7e:	e008      	b.n	8004b92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b80:	f7fc fede 	bl	8001940 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b64      	cmp	r3, #100	@ 0x64
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e1ec      	b.n	8004f6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b92:	4b53      	ldr	r3, [pc, #332]	@ (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1f0      	bne.n	8004b80 <HAL_RCC_OscConfig+0x10c>
 8004b9e:	e000      	b.n	8004ba2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d063      	beq.n	8004c76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bae:	4b4c      	ldr	r3, [pc, #304]	@ (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f003 030c 	and.w	r3, r3, #12
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00b      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004bba:	4b49      	ldr	r3, [pc, #292]	@ (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f003 030c 	and.w	r3, r3, #12
 8004bc2:	2b08      	cmp	r3, #8
 8004bc4:	d11c      	bne.n	8004c00 <HAL_RCC_OscConfig+0x18c>
 8004bc6:	4b46      	ldr	r3, [pc, #280]	@ (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d116      	bne.n	8004c00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bd2:	4b43      	ldr	r3, [pc, #268]	@ (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d005      	beq.n	8004bea <HAL_RCC_OscConfig+0x176>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d001      	beq.n	8004bea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e1c0      	b.n	8004f6c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bea:	4b3d      	ldr	r3, [pc, #244]	@ (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	00db      	lsls	r3, r3, #3
 8004bf8:	4939      	ldr	r1, [pc, #228]	@ (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bfe:	e03a      	b.n	8004c76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d020      	beq.n	8004c4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c08:	4b36      	ldr	r3, [pc, #216]	@ (8004ce4 <HAL_RCC_OscConfig+0x270>)
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c0e:	f7fc fe97 	bl	8001940 <HAL_GetTick>
 8004c12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c14:	e008      	b.n	8004c28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c16:	f7fc fe93 	bl	8001940 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d901      	bls.n	8004c28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e1a1      	b.n	8004f6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c28:	4b2d      	ldr	r3, [pc, #180]	@ (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d0f0      	beq.n	8004c16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c34:	4b2a      	ldr	r3, [pc, #168]	@ (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	00db      	lsls	r3, r3, #3
 8004c42:	4927      	ldr	r1, [pc, #156]	@ (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	600b      	str	r3, [r1, #0]
 8004c48:	e015      	b.n	8004c76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c4a:	4b26      	ldr	r3, [pc, #152]	@ (8004ce4 <HAL_RCC_OscConfig+0x270>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c50:	f7fc fe76 	bl	8001940 <HAL_GetTick>
 8004c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c56:	e008      	b.n	8004c6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c58:	f7fc fe72 	bl	8001940 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e180      	b.n	8004f6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c6a:	4b1d      	ldr	r3, [pc, #116]	@ (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1f0      	bne.n	8004c58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0308 	and.w	r3, r3, #8
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d03a      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d019      	beq.n	8004cbe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c8a:	4b17      	ldr	r3, [pc, #92]	@ (8004ce8 <HAL_RCC_OscConfig+0x274>)
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c90:	f7fc fe56 	bl	8001940 <HAL_GetTick>
 8004c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c96:	e008      	b.n	8004caa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c98:	f7fc fe52 	bl	8001940 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d901      	bls.n	8004caa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e160      	b.n	8004f6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004caa:	4b0d      	ldr	r3, [pc, #52]	@ (8004ce0 <HAL_RCC_OscConfig+0x26c>)
 8004cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d0f0      	beq.n	8004c98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004cb6:	2001      	movs	r0, #1
 8004cb8:	f000 face 	bl	8005258 <RCC_Delay>
 8004cbc:	e01c      	b.n	8004cf8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8004ce8 <HAL_RCC_OscConfig+0x274>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cc4:	f7fc fe3c 	bl	8001940 <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cca:	e00f      	b.n	8004cec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ccc:	f7fc fe38 	bl	8001940 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d908      	bls.n	8004cec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e146      	b.n	8004f6c <HAL_RCC_OscConfig+0x4f8>
 8004cde:	bf00      	nop
 8004ce0:	40021000 	.word	0x40021000
 8004ce4:	42420000 	.word	0x42420000
 8004ce8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cec:	4b92      	ldr	r3, [pc, #584]	@ (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1e9      	bne.n	8004ccc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0304 	and.w	r3, r3, #4
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 80a6 	beq.w	8004e52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d06:	2300      	movs	r3, #0
 8004d08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d0a:	4b8b      	ldr	r3, [pc, #556]	@ (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10d      	bne.n	8004d32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d16:	4b88      	ldr	r3, [pc, #544]	@ (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004d18:	69db      	ldr	r3, [r3, #28]
 8004d1a:	4a87      	ldr	r2, [pc, #540]	@ (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004d1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d20:	61d3      	str	r3, [r2, #28]
 8004d22:	4b85      	ldr	r3, [pc, #532]	@ (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d2a:	60bb      	str	r3, [r7, #8]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d32:	4b82      	ldr	r3, [pc, #520]	@ (8004f3c <HAL_RCC_OscConfig+0x4c8>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d118      	bne.n	8004d70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d3e:	4b7f      	ldr	r3, [pc, #508]	@ (8004f3c <HAL_RCC_OscConfig+0x4c8>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a7e      	ldr	r2, [pc, #504]	@ (8004f3c <HAL_RCC_OscConfig+0x4c8>)
 8004d44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d4a:	f7fc fdf9 	bl	8001940 <HAL_GetTick>
 8004d4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d50:	e008      	b.n	8004d64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d52:	f7fc fdf5 	bl	8001940 <HAL_GetTick>
 8004d56:	4602      	mov	r2, r0
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	2b64      	cmp	r3, #100	@ 0x64
 8004d5e:	d901      	bls.n	8004d64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e103      	b.n	8004f6c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d64:	4b75      	ldr	r3, [pc, #468]	@ (8004f3c <HAL_RCC_OscConfig+0x4c8>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d0f0      	beq.n	8004d52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d106      	bne.n	8004d86 <HAL_RCC_OscConfig+0x312>
 8004d78:	4b6f      	ldr	r3, [pc, #444]	@ (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004d7a:	6a1b      	ldr	r3, [r3, #32]
 8004d7c:	4a6e      	ldr	r2, [pc, #440]	@ (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004d7e:	f043 0301 	orr.w	r3, r3, #1
 8004d82:	6213      	str	r3, [r2, #32]
 8004d84:	e02d      	b.n	8004de2 <HAL_RCC_OscConfig+0x36e>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10c      	bne.n	8004da8 <HAL_RCC_OscConfig+0x334>
 8004d8e:	4b6a      	ldr	r3, [pc, #424]	@ (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	4a69      	ldr	r2, [pc, #420]	@ (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004d94:	f023 0301 	bic.w	r3, r3, #1
 8004d98:	6213      	str	r3, [r2, #32]
 8004d9a:	4b67      	ldr	r3, [pc, #412]	@ (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	4a66      	ldr	r2, [pc, #408]	@ (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004da0:	f023 0304 	bic.w	r3, r3, #4
 8004da4:	6213      	str	r3, [r2, #32]
 8004da6:	e01c      	b.n	8004de2 <HAL_RCC_OscConfig+0x36e>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	2b05      	cmp	r3, #5
 8004dae:	d10c      	bne.n	8004dca <HAL_RCC_OscConfig+0x356>
 8004db0:	4b61      	ldr	r3, [pc, #388]	@ (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	4a60      	ldr	r2, [pc, #384]	@ (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004db6:	f043 0304 	orr.w	r3, r3, #4
 8004dba:	6213      	str	r3, [r2, #32]
 8004dbc:	4b5e      	ldr	r3, [pc, #376]	@ (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	4a5d      	ldr	r2, [pc, #372]	@ (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004dc2:	f043 0301 	orr.w	r3, r3, #1
 8004dc6:	6213      	str	r3, [r2, #32]
 8004dc8:	e00b      	b.n	8004de2 <HAL_RCC_OscConfig+0x36e>
 8004dca:	4b5b      	ldr	r3, [pc, #364]	@ (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	4a5a      	ldr	r2, [pc, #360]	@ (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004dd0:	f023 0301 	bic.w	r3, r3, #1
 8004dd4:	6213      	str	r3, [r2, #32]
 8004dd6:	4b58      	ldr	r3, [pc, #352]	@ (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	4a57      	ldr	r2, [pc, #348]	@ (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004ddc:	f023 0304 	bic.w	r3, r3, #4
 8004de0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d015      	beq.n	8004e16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dea:	f7fc fda9 	bl	8001940 <HAL_GetTick>
 8004dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004df0:	e00a      	b.n	8004e08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004df2:	f7fc fda5 	bl	8001940 <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d901      	bls.n	8004e08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e0b1      	b.n	8004f6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e08:	4b4b      	ldr	r3, [pc, #300]	@ (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d0ee      	beq.n	8004df2 <HAL_RCC_OscConfig+0x37e>
 8004e14:	e014      	b.n	8004e40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e16:	f7fc fd93 	bl	8001940 <HAL_GetTick>
 8004e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e1c:	e00a      	b.n	8004e34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e1e:	f7fc fd8f 	bl	8001940 <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d901      	bls.n	8004e34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e09b      	b.n	8004f6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e34:	4b40      	ldr	r3, [pc, #256]	@ (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004e36:	6a1b      	ldr	r3, [r3, #32]
 8004e38:	f003 0302 	and.w	r3, r3, #2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1ee      	bne.n	8004e1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e40:	7dfb      	ldrb	r3, [r7, #23]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d105      	bne.n	8004e52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e46:	4b3c      	ldr	r3, [pc, #240]	@ (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004e48:	69db      	ldr	r3, [r3, #28]
 8004e4a:	4a3b      	ldr	r2, [pc, #236]	@ (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004e4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	69db      	ldr	r3, [r3, #28]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f000 8087 	beq.w	8004f6a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e5c:	4b36      	ldr	r3, [pc, #216]	@ (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f003 030c 	and.w	r3, r3, #12
 8004e64:	2b08      	cmp	r3, #8
 8004e66:	d061      	beq.n	8004f2c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	69db      	ldr	r3, [r3, #28]
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d146      	bne.n	8004efe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e70:	4b33      	ldr	r3, [pc, #204]	@ (8004f40 <HAL_RCC_OscConfig+0x4cc>)
 8004e72:	2200      	movs	r2, #0
 8004e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e76:	f7fc fd63 	bl	8001940 <HAL_GetTick>
 8004e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e7c:	e008      	b.n	8004e90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e7e:	f7fc fd5f 	bl	8001940 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d901      	bls.n	8004e90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e06d      	b.n	8004f6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e90:	4b29      	ldr	r3, [pc, #164]	@ (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1f0      	bne.n	8004e7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ea4:	d108      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004ea6:	4b24      	ldr	r3, [pc, #144]	@ (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	4921      	ldr	r1, [pc, #132]	@ (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004eb8:	4b1f      	ldr	r3, [pc, #124]	@ (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a19      	ldr	r1, [r3, #32]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec8:	430b      	orrs	r3, r1
 8004eca:	491b      	ldr	r1, [pc, #108]	@ (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ed0:	4b1b      	ldr	r3, [pc, #108]	@ (8004f40 <HAL_RCC_OscConfig+0x4cc>)
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed6:	f7fc fd33 	bl	8001940 <HAL_GetTick>
 8004eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004edc:	e008      	b.n	8004ef0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ede:	f7fc fd2f 	bl	8001940 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d901      	bls.n	8004ef0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e03d      	b.n	8004f6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ef0:	4b11      	ldr	r3, [pc, #68]	@ (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d0f0      	beq.n	8004ede <HAL_RCC_OscConfig+0x46a>
 8004efc:	e035      	b.n	8004f6a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004efe:	4b10      	ldr	r3, [pc, #64]	@ (8004f40 <HAL_RCC_OscConfig+0x4cc>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f04:	f7fc fd1c 	bl	8001940 <HAL_GetTick>
 8004f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f0a:	e008      	b.n	8004f1e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f0c:	f7fc fd18 	bl	8001940 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e026      	b.n	8004f6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f1e:	4b06      	ldr	r3, [pc, #24]	@ (8004f38 <HAL_RCC_OscConfig+0x4c4>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1f0      	bne.n	8004f0c <HAL_RCC_OscConfig+0x498>
 8004f2a:	e01e      	b.n	8004f6a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	69db      	ldr	r3, [r3, #28]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d107      	bne.n	8004f44 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e019      	b.n	8004f6c <HAL_RCC_OscConfig+0x4f8>
 8004f38:	40021000 	.word	0x40021000
 8004f3c:	40007000 	.word	0x40007000
 8004f40:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f44:	4b0b      	ldr	r3, [pc, #44]	@ (8004f74 <HAL_RCC_OscConfig+0x500>)
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d106      	bne.n	8004f66 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d001      	beq.n	8004f6a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e000      	b.n	8004f6c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3718      	adds	r7, #24
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	40021000 	.word	0x40021000

08004f78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d101      	bne.n	8004f8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e0d0      	b.n	800512e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f8c:	4b6a      	ldr	r3, [pc, #424]	@ (8005138 <HAL_RCC_ClockConfig+0x1c0>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0307 	and.w	r3, r3, #7
 8004f94:	683a      	ldr	r2, [r7, #0]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d910      	bls.n	8004fbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f9a:	4b67      	ldr	r3, [pc, #412]	@ (8005138 <HAL_RCC_ClockConfig+0x1c0>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f023 0207 	bic.w	r2, r3, #7
 8004fa2:	4965      	ldr	r1, [pc, #404]	@ (8005138 <HAL_RCC_ClockConfig+0x1c0>)
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004faa:	4b63      	ldr	r3, [pc, #396]	@ (8005138 <HAL_RCC_ClockConfig+0x1c0>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0307 	and.w	r3, r3, #7
 8004fb2:	683a      	ldr	r2, [r7, #0]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d001      	beq.n	8004fbc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e0b8      	b.n	800512e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d020      	beq.n	800500a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0304 	and.w	r3, r3, #4
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d005      	beq.n	8004fe0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fd4:	4b59      	ldr	r3, [pc, #356]	@ (800513c <HAL_RCC_ClockConfig+0x1c4>)
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	4a58      	ldr	r2, [pc, #352]	@ (800513c <HAL_RCC_ClockConfig+0x1c4>)
 8004fda:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004fde:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0308 	and.w	r3, r3, #8
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d005      	beq.n	8004ff8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fec:	4b53      	ldr	r3, [pc, #332]	@ (800513c <HAL_RCC_ClockConfig+0x1c4>)
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	4a52      	ldr	r2, [pc, #328]	@ (800513c <HAL_RCC_ClockConfig+0x1c4>)
 8004ff2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004ff6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ff8:	4b50      	ldr	r3, [pc, #320]	@ (800513c <HAL_RCC_ClockConfig+0x1c4>)
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	494d      	ldr	r1, [pc, #308]	@ (800513c <HAL_RCC_ClockConfig+0x1c4>)
 8005006:	4313      	orrs	r3, r2
 8005008:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	2b00      	cmp	r3, #0
 8005014:	d040      	beq.n	8005098 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	2b01      	cmp	r3, #1
 800501c:	d107      	bne.n	800502e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800501e:	4b47      	ldr	r3, [pc, #284]	@ (800513c <HAL_RCC_ClockConfig+0x1c4>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d115      	bne.n	8005056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e07f      	b.n	800512e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	2b02      	cmp	r3, #2
 8005034:	d107      	bne.n	8005046 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005036:	4b41      	ldr	r3, [pc, #260]	@ (800513c <HAL_RCC_ClockConfig+0x1c4>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d109      	bne.n	8005056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e073      	b.n	800512e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005046:	4b3d      	ldr	r3, [pc, #244]	@ (800513c <HAL_RCC_ClockConfig+0x1c4>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0302 	and.w	r3, r3, #2
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e06b      	b.n	800512e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005056:	4b39      	ldr	r3, [pc, #228]	@ (800513c <HAL_RCC_ClockConfig+0x1c4>)
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f023 0203 	bic.w	r2, r3, #3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	4936      	ldr	r1, [pc, #216]	@ (800513c <HAL_RCC_ClockConfig+0x1c4>)
 8005064:	4313      	orrs	r3, r2
 8005066:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005068:	f7fc fc6a 	bl	8001940 <HAL_GetTick>
 800506c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800506e:	e00a      	b.n	8005086 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005070:	f7fc fc66 	bl	8001940 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800507e:	4293      	cmp	r3, r2
 8005080:	d901      	bls.n	8005086 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e053      	b.n	800512e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005086:	4b2d      	ldr	r3, [pc, #180]	@ (800513c <HAL_RCC_ClockConfig+0x1c4>)
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f003 020c 	and.w	r2, r3, #12
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	429a      	cmp	r2, r3
 8005096:	d1eb      	bne.n	8005070 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005098:	4b27      	ldr	r3, [pc, #156]	@ (8005138 <HAL_RCC_ClockConfig+0x1c0>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0307 	and.w	r3, r3, #7
 80050a0:	683a      	ldr	r2, [r7, #0]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d210      	bcs.n	80050c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050a6:	4b24      	ldr	r3, [pc, #144]	@ (8005138 <HAL_RCC_ClockConfig+0x1c0>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f023 0207 	bic.w	r2, r3, #7
 80050ae:	4922      	ldr	r1, [pc, #136]	@ (8005138 <HAL_RCC_ClockConfig+0x1c0>)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050b6:	4b20      	ldr	r3, [pc, #128]	@ (8005138 <HAL_RCC_ClockConfig+0x1c0>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0307 	and.w	r3, r3, #7
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d001      	beq.n	80050c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e032      	b.n	800512e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0304 	and.w	r3, r3, #4
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d008      	beq.n	80050e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050d4:	4b19      	ldr	r3, [pc, #100]	@ (800513c <HAL_RCC_ClockConfig+0x1c4>)
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	4916      	ldr	r1, [pc, #88]	@ (800513c <HAL_RCC_ClockConfig+0x1c4>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0308 	and.w	r3, r3, #8
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d009      	beq.n	8005106 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80050f2:	4b12      	ldr	r3, [pc, #72]	@ (800513c <HAL_RCC_ClockConfig+0x1c4>)
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	00db      	lsls	r3, r3, #3
 8005100:	490e      	ldr	r1, [pc, #56]	@ (800513c <HAL_RCC_ClockConfig+0x1c4>)
 8005102:	4313      	orrs	r3, r2
 8005104:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005106:	f000 f821 	bl	800514c <HAL_RCC_GetSysClockFreq>
 800510a:	4602      	mov	r2, r0
 800510c:	4b0b      	ldr	r3, [pc, #44]	@ (800513c <HAL_RCC_ClockConfig+0x1c4>)
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	091b      	lsrs	r3, r3, #4
 8005112:	f003 030f 	and.w	r3, r3, #15
 8005116:	490a      	ldr	r1, [pc, #40]	@ (8005140 <HAL_RCC_ClockConfig+0x1c8>)
 8005118:	5ccb      	ldrb	r3, [r1, r3]
 800511a:	fa22 f303 	lsr.w	r3, r2, r3
 800511e:	4a09      	ldr	r2, [pc, #36]	@ (8005144 <HAL_RCC_ClockConfig+0x1cc>)
 8005120:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005122:	4b09      	ldr	r3, [pc, #36]	@ (8005148 <HAL_RCC_ClockConfig+0x1d0>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4618      	mov	r0, r3
 8005128:	f7fc fbc8 	bl	80018bc <HAL_InitTick>

  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3710      	adds	r7, #16
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	40022000 	.word	0x40022000
 800513c:	40021000 	.word	0x40021000
 8005140:	080068e0 	.word	0x080068e0
 8005144:	20000000 	.word	0x20000000
 8005148:	20000004 	.word	0x20000004

0800514c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800514c:	b480      	push	{r7}
 800514e:	b087      	sub	sp, #28
 8005150:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005152:	2300      	movs	r3, #0
 8005154:	60fb      	str	r3, [r7, #12]
 8005156:	2300      	movs	r3, #0
 8005158:	60bb      	str	r3, [r7, #8]
 800515a:	2300      	movs	r3, #0
 800515c:	617b      	str	r3, [r7, #20]
 800515e:	2300      	movs	r3, #0
 8005160:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005162:	2300      	movs	r3, #0
 8005164:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005166:	4b1e      	ldr	r3, [pc, #120]	@ (80051e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f003 030c 	and.w	r3, r3, #12
 8005172:	2b04      	cmp	r3, #4
 8005174:	d002      	beq.n	800517c <HAL_RCC_GetSysClockFreq+0x30>
 8005176:	2b08      	cmp	r3, #8
 8005178:	d003      	beq.n	8005182 <HAL_RCC_GetSysClockFreq+0x36>
 800517a:	e027      	b.n	80051cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800517c:	4b19      	ldr	r3, [pc, #100]	@ (80051e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800517e:	613b      	str	r3, [r7, #16]
      break;
 8005180:	e027      	b.n	80051d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	0c9b      	lsrs	r3, r3, #18
 8005186:	f003 030f 	and.w	r3, r3, #15
 800518a:	4a17      	ldr	r2, [pc, #92]	@ (80051e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800518c:	5cd3      	ldrb	r3, [r2, r3]
 800518e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d010      	beq.n	80051bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800519a:	4b11      	ldr	r3, [pc, #68]	@ (80051e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	0c5b      	lsrs	r3, r3, #17
 80051a0:	f003 0301 	and.w	r3, r3, #1
 80051a4:	4a11      	ldr	r2, [pc, #68]	@ (80051ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80051a6:	5cd3      	ldrb	r3, [r2, r3]
 80051a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a0d      	ldr	r2, [pc, #52]	@ (80051e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80051ae:	fb03 f202 	mul.w	r2, r3, r2
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b8:	617b      	str	r3, [r7, #20]
 80051ba:	e004      	b.n	80051c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a0c      	ldr	r2, [pc, #48]	@ (80051f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80051c0:	fb02 f303 	mul.w	r3, r2, r3
 80051c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	613b      	str	r3, [r7, #16]
      break;
 80051ca:	e002      	b.n	80051d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80051cc:	4b05      	ldr	r3, [pc, #20]	@ (80051e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80051ce:	613b      	str	r3, [r7, #16]
      break;
 80051d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051d2:	693b      	ldr	r3, [r7, #16]
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	371c      	adds	r7, #28
 80051d8:	46bd      	mov	sp, r7
 80051da:	bc80      	pop	{r7}
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	40021000 	.word	0x40021000
 80051e4:	007a1200 	.word	0x007a1200
 80051e8:	080068f8 	.word	0x080068f8
 80051ec:	08006908 	.word	0x08006908
 80051f0:	003d0900 	.word	0x003d0900

080051f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051f4:	b480      	push	{r7}
 80051f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051f8:	4b02      	ldr	r3, [pc, #8]	@ (8005204 <HAL_RCC_GetHCLKFreq+0x10>)
 80051fa:	681b      	ldr	r3, [r3, #0]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	46bd      	mov	sp, r7
 8005200:	bc80      	pop	{r7}
 8005202:	4770      	bx	lr
 8005204:	20000000 	.word	0x20000000

08005208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800520c:	f7ff fff2 	bl	80051f4 <HAL_RCC_GetHCLKFreq>
 8005210:	4602      	mov	r2, r0
 8005212:	4b05      	ldr	r3, [pc, #20]	@ (8005228 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	0a1b      	lsrs	r3, r3, #8
 8005218:	f003 0307 	and.w	r3, r3, #7
 800521c:	4903      	ldr	r1, [pc, #12]	@ (800522c <HAL_RCC_GetPCLK1Freq+0x24>)
 800521e:	5ccb      	ldrb	r3, [r1, r3]
 8005220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005224:	4618      	mov	r0, r3
 8005226:	bd80      	pop	{r7, pc}
 8005228:	40021000 	.word	0x40021000
 800522c:	080068f0 	.word	0x080068f0

08005230 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005234:	f7ff ffde 	bl	80051f4 <HAL_RCC_GetHCLKFreq>
 8005238:	4602      	mov	r2, r0
 800523a:	4b05      	ldr	r3, [pc, #20]	@ (8005250 <HAL_RCC_GetPCLK2Freq+0x20>)
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	0adb      	lsrs	r3, r3, #11
 8005240:	f003 0307 	and.w	r3, r3, #7
 8005244:	4903      	ldr	r1, [pc, #12]	@ (8005254 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005246:	5ccb      	ldrb	r3, [r1, r3]
 8005248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800524c:	4618      	mov	r0, r3
 800524e:	bd80      	pop	{r7, pc}
 8005250:	40021000 	.word	0x40021000
 8005254:	080068f0 	.word	0x080068f0

08005258 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005260:	4b0a      	ldr	r3, [pc, #40]	@ (800528c <RCC_Delay+0x34>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a0a      	ldr	r2, [pc, #40]	@ (8005290 <RCC_Delay+0x38>)
 8005266:	fba2 2303 	umull	r2, r3, r2, r3
 800526a:	0a5b      	lsrs	r3, r3, #9
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	fb02 f303 	mul.w	r3, r2, r3
 8005272:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005274:	bf00      	nop
  }
  while (Delay --);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	1e5a      	subs	r2, r3, #1
 800527a:	60fa      	str	r2, [r7, #12]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1f9      	bne.n	8005274 <RCC_Delay+0x1c>
}
 8005280:	bf00      	nop
 8005282:	bf00      	nop
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	bc80      	pop	{r7}
 800528a:	4770      	bx	lr
 800528c:	20000000 	.word	0x20000000
 8005290:	10624dd3 	.word	0x10624dd3

08005294 <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	460b      	mov	r3, r1
 800529e:	607a      	str	r2, [r7, #4]
 80052a0:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d101      	bne.n	80052ac <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e062      	b.n	8005372 <HAL_MultiProcessor_Init+0xde>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d106      	bne.n	80052c6 <HAL_MultiProcessor_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f7fc f9d1 	bl	8001668 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2224      	movs	r2, #36	@ 0x24
 80052ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68da      	ldr	r2, [r3, #12]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80052dc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f000 fd82 	bl	8005de8 <UART_SetConfig>

  /* In Multi-Processor mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	691a      	ldr	r2, [r3, #16]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80052f2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	695a      	ldr	r2, [r3, #20]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005302:	615a      	str	r2, [r3, #20]

  /* Set the USART address node */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	691a      	ldr	r2, [r3, #16]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f022 020f 	bic.w	r2, r2, #15
 8005312:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, Address);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	6919      	ldr	r1, [r3, #16]
 800531a:	7afa      	ldrb	r2, [r7, #11]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	430a      	orrs	r2, r1
 8005322:	611a      	str	r2, [r3, #16]

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68da      	ldr	r2, [r3, #12]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005332:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68d9      	ldr	r1, [r3, #12]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	430a      	orrs	r2, r1
 8005342:	60da      	str	r2, [r3, #12]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68da      	ldr	r2, [r3, #12]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005352:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2220      	movs	r2, #32
 800535e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2220      	movs	r2, #32
 8005366:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}

0800537a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800537a:	b580      	push	{r7, lr}
 800537c:	b08a      	sub	sp, #40	@ 0x28
 800537e:	af02      	add	r7, sp, #8
 8005380:	60f8      	str	r0, [r7, #12]
 8005382:	60b9      	str	r1, [r7, #8]
 8005384:	603b      	str	r3, [r7, #0]
 8005386:	4613      	mov	r3, r2
 8005388:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800538a:	2300      	movs	r3, #0
 800538c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b20      	cmp	r3, #32
 8005398:	d175      	bne.n	8005486 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d002      	beq.n	80053a6 <HAL_UART_Transmit+0x2c>
 80053a0:	88fb      	ldrh	r3, [r7, #6]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d101      	bne.n	80053aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e06e      	b.n	8005488 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2221      	movs	r2, #33	@ 0x21
 80053b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053b8:	f7fc fac2 	bl	8001940 <HAL_GetTick>
 80053bc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	88fa      	ldrh	r2, [r7, #6]
 80053c2:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	88fa      	ldrh	r2, [r7, #6]
 80053c8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053d2:	d108      	bne.n	80053e6 <HAL_UART_Transmit+0x6c>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d104      	bne.n	80053e6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80053dc:	2300      	movs	r3, #0
 80053de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	61bb      	str	r3, [r7, #24]
 80053e4:	e003      	b.n	80053ee <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053ea:	2300      	movs	r3, #0
 80053ec:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80053ee:	e02e      	b.n	800544e <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	9300      	str	r3, [sp, #0]
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	2200      	movs	r2, #0
 80053f8:	2180      	movs	r1, #128	@ 0x80
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f000 fb00 	bl	8005a00 <UART_WaitOnFlagUntilTimeout>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d005      	beq.n	8005412 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2220      	movs	r2, #32
 800540a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e03a      	b.n	8005488 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10b      	bne.n	8005430 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	881b      	ldrh	r3, [r3, #0]
 800541c:	461a      	mov	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005426:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	3302      	adds	r3, #2
 800542c:	61bb      	str	r3, [r7, #24]
 800542e:	e007      	b.n	8005440 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	781a      	ldrb	r2, [r3, #0]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	3301      	adds	r3, #1
 800543e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005444:	b29b      	uxth	r3, r3
 8005446:	3b01      	subs	r3, #1
 8005448:	b29a      	uxth	r2, r3
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005452:	b29b      	uxth	r3, r3
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1cb      	bne.n	80053f0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	2200      	movs	r2, #0
 8005460:	2140      	movs	r1, #64	@ 0x40
 8005462:	68f8      	ldr	r0, [r7, #12]
 8005464:	f000 facc 	bl	8005a00 <UART_WaitOnFlagUntilTimeout>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d005      	beq.n	800547a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2220      	movs	r2, #32
 8005472:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e006      	b.n	8005488 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2220      	movs	r2, #32
 800547e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005482:	2300      	movs	r3, #0
 8005484:	e000      	b.n	8005488 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005486:	2302      	movs	r3, #2
  }
}
 8005488:	4618      	mov	r0, r3
 800548a:	3720      	adds	r7, #32
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b0ba      	sub	sp, #232	@ 0xe8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80054b6:	2300      	movs	r3, #0
 80054b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80054bc:	2300      	movs	r3, #0
 80054be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80054c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054c6:	f003 030f 	and.w	r3, r3, #15
 80054ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80054ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10f      	bne.n	80054f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054da:	f003 0320 	and.w	r3, r3, #32
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d009      	beq.n	80054f6 <HAL_UART_IRQHandler+0x66>
 80054e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054e6:	f003 0320 	and.w	r3, r3, #32
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d003      	beq.n	80054f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 fbbc 	bl	8005c6c <UART_Receive_IT>
      return;
 80054f4:	e25b      	b.n	80059ae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80054f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f000 80de 	beq.w	80056bc <HAL_UART_IRQHandler+0x22c>
 8005500:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	2b00      	cmp	r3, #0
 800550a:	d106      	bne.n	800551a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800550c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005510:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 80d1 	beq.w	80056bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800551a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00b      	beq.n	800553e <HAL_UART_IRQHandler+0xae>
 8005526:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800552a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800552e:	2b00      	cmp	r3, #0
 8005530:	d005      	beq.n	800553e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005536:	f043 0201 	orr.w	r2, r3, #1
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800553e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005542:	f003 0304 	and.w	r3, r3, #4
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00b      	beq.n	8005562 <HAL_UART_IRQHandler+0xd2>
 800554a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b00      	cmp	r3, #0
 8005554:	d005      	beq.n	8005562 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800555a:	f043 0202 	orr.w	r2, r3, #2
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00b      	beq.n	8005586 <HAL_UART_IRQHandler+0xf6>
 800556e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	2b00      	cmp	r3, #0
 8005578:	d005      	beq.n	8005586 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800557e:	f043 0204 	orr.w	r2, r3, #4
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800558a:	f003 0308 	and.w	r3, r3, #8
 800558e:	2b00      	cmp	r3, #0
 8005590:	d011      	beq.n	80055b6 <HAL_UART_IRQHandler+0x126>
 8005592:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005596:	f003 0320 	and.w	r3, r3, #32
 800559a:	2b00      	cmp	r3, #0
 800559c:	d105      	bne.n	80055aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800559e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d005      	beq.n	80055b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ae:	f043 0208 	orr.w	r2, r3, #8
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	f000 81f2 	beq.w	80059a4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055c4:	f003 0320 	and.w	r3, r3, #32
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d008      	beq.n	80055de <HAL_UART_IRQHandler+0x14e>
 80055cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055d0:	f003 0320 	and.w	r3, r3, #32
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d002      	beq.n	80055de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 fb47 	bl	8005c6c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	bf14      	ite	ne
 80055ec:	2301      	movne	r3, #1
 80055ee:	2300      	moveq	r3, #0
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055fa:	f003 0308 	and.w	r3, r3, #8
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d103      	bne.n	800560a <HAL_UART_IRQHandler+0x17a>
 8005602:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005606:	2b00      	cmp	r3, #0
 8005608:	d04f      	beq.n	80056aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 fa51 	bl	8005ab2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800561a:	2b00      	cmp	r3, #0
 800561c:	d041      	beq.n	80056a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	3314      	adds	r3, #20
 8005624:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005628:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800562c:	e853 3f00 	ldrex	r3, [r3]
 8005630:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005634:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005638:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800563c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	3314      	adds	r3, #20
 8005646:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800564a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800564e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005652:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005656:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800565a:	e841 2300 	strex	r3, r2, [r1]
 800565e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005662:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1d9      	bne.n	800561e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800566e:	2b00      	cmp	r3, #0
 8005670:	d013      	beq.n	800569a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005676:	4a7e      	ldr	r2, [pc, #504]	@ (8005870 <HAL_UART_IRQHandler+0x3e0>)
 8005678:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800567e:	4618      	mov	r0, r3
 8005680:	f7fc fad4 	bl	8001c2c <HAL_DMA_Abort_IT>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d016      	beq.n	80056b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800568e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005694:	4610      	mov	r0, r2
 8005696:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005698:	e00e      	b.n	80056b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 f99c 	bl	80059d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056a0:	e00a      	b.n	80056b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f998 	bl	80059d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056a8:	e006      	b.n	80056b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 f994 	bl	80059d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80056b6:	e175      	b.n	80059a4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056b8:	bf00      	nop
    return;
 80056ba:	e173      	b.n	80059a4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	f040 814f 	bne.w	8005964 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80056c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056ca:	f003 0310 	and.w	r3, r3, #16
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f000 8148 	beq.w	8005964 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80056d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056d8:	f003 0310 	and.w	r3, r3, #16
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f000 8141 	beq.w	8005964 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056e2:	2300      	movs	r3, #0
 80056e4:	60bb      	str	r3, [r7, #8]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	60bb      	str	r3, [r7, #8]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	60bb      	str	r3, [r7, #8]
 80056f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005702:	2b00      	cmp	r3, #0
 8005704:	f000 80b6 	beq.w	8005874 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005714:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 8145 	beq.w	80059a8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005722:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005726:	429a      	cmp	r2, r3
 8005728:	f080 813e 	bcs.w	80059a8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005732:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	2b20      	cmp	r3, #32
 800573c:	f000 8088 	beq.w	8005850 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	330c      	adds	r3, #12
 8005746:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800574e:	e853 3f00 	ldrex	r3, [r3]
 8005752:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005756:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800575a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800575e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	330c      	adds	r3, #12
 8005768:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800576c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005770:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005774:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005778:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800577c:	e841 2300 	strex	r3, r2, [r1]
 8005780:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005784:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1d9      	bne.n	8005740 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	3314      	adds	r3, #20
 8005792:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005794:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005796:	e853 3f00 	ldrex	r3, [r3]
 800579a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800579c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800579e:	f023 0301 	bic.w	r3, r3, #1
 80057a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	3314      	adds	r3, #20
 80057ac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80057b0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80057b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80057b8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80057bc:	e841 2300 	strex	r3, r2, [r1]
 80057c0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80057c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1e1      	bne.n	800578c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	3314      	adds	r3, #20
 80057ce:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80057d2:	e853 3f00 	ldrex	r3, [r3]
 80057d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80057d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80057da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	3314      	adds	r3, #20
 80057e8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80057ec:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80057ee:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80057f2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80057f4:	e841 2300 	strex	r3, r2, [r1]
 80057f8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80057fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1e3      	bne.n	80057c8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2220      	movs	r2, #32
 8005804:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	330c      	adds	r3, #12
 8005814:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005816:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005818:	e853 3f00 	ldrex	r3, [r3]
 800581c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800581e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005820:	f023 0310 	bic.w	r3, r3, #16
 8005824:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	330c      	adds	r3, #12
 800582e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005832:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005834:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005836:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005838:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800583a:	e841 2300 	strex	r3, r2, [r1]
 800583e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005840:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1e3      	bne.n	800580e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800584a:	4618      	mov	r0, r3
 800584c:	f7fc f9b3 	bl	8001bb6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2202      	movs	r2, #2
 8005854:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800585e:	b29b      	uxth	r3, r3
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	b29b      	uxth	r3, r3
 8005864:	4619      	mov	r1, r3
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f8bf 	bl	80059ea <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800586c:	e09c      	b.n	80059a8 <HAL_UART_IRQHandler+0x518>
 800586e:	bf00      	nop
 8005870:	08005b77 	.word	0x08005b77
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800587c:	b29b      	uxth	r3, r3
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005888:	b29b      	uxth	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	f000 808e 	beq.w	80059ac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005890:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005894:	2b00      	cmp	r3, #0
 8005896:	f000 8089 	beq.w	80059ac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	330c      	adds	r3, #12
 80058a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a4:	e853 3f00 	ldrex	r3, [r3]
 80058a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80058aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	330c      	adds	r3, #12
 80058ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80058be:	647a      	str	r2, [r7, #68]	@ 0x44
 80058c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80058c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058c6:	e841 2300 	strex	r3, r2, [r1]
 80058ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80058cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1e3      	bne.n	800589a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	3314      	adds	r3, #20
 80058d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058dc:	e853 3f00 	ldrex	r3, [r3]
 80058e0:	623b      	str	r3, [r7, #32]
   return(result);
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	f023 0301 	bic.w	r3, r3, #1
 80058e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	3314      	adds	r3, #20
 80058f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80058f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80058f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058fe:	e841 2300 	strex	r3, r2, [r1]
 8005902:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1e3      	bne.n	80058d2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2220      	movs	r2, #32
 800590e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	330c      	adds	r3, #12
 800591e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	e853 3f00 	ldrex	r3, [r3]
 8005926:	60fb      	str	r3, [r7, #12]
   return(result);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f023 0310 	bic.w	r3, r3, #16
 800592e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	330c      	adds	r3, #12
 8005938:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800593c:	61fa      	str	r2, [r7, #28]
 800593e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005940:	69b9      	ldr	r1, [r7, #24]
 8005942:	69fa      	ldr	r2, [r7, #28]
 8005944:	e841 2300 	strex	r3, r2, [r1]
 8005948:	617b      	str	r3, [r7, #20]
   return(result);
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1e3      	bne.n	8005918 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2202      	movs	r2, #2
 8005954:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005956:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800595a:	4619      	mov	r1, r3
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 f844 	bl	80059ea <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005962:	e023      	b.n	80059ac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005968:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800596c:	2b00      	cmp	r3, #0
 800596e:	d009      	beq.n	8005984 <HAL_UART_IRQHandler+0x4f4>
 8005970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005974:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005978:	2b00      	cmp	r3, #0
 800597a:	d003      	beq.n	8005984 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 f90e 	bl	8005b9e <UART_Transmit_IT>
    return;
 8005982:	e014      	b.n	80059ae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800598c:	2b00      	cmp	r3, #0
 800598e:	d00e      	beq.n	80059ae <HAL_UART_IRQHandler+0x51e>
 8005990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005998:	2b00      	cmp	r3, #0
 800599a:	d008      	beq.n	80059ae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 f94d 	bl	8005c3c <UART_EndTransmit_IT>
    return;
 80059a2:	e004      	b.n	80059ae <HAL_UART_IRQHandler+0x51e>
    return;
 80059a4:	bf00      	nop
 80059a6:	e002      	b.n	80059ae <HAL_UART_IRQHandler+0x51e>
      return;
 80059a8:	bf00      	nop
 80059aa:	e000      	b.n	80059ae <HAL_UART_IRQHandler+0x51e>
      return;
 80059ac:	bf00      	nop
  }
}
 80059ae:	37e8      	adds	r7, #232	@ 0xe8
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bc80      	pop	{r7}
 80059c4:	4770      	bx	lr

080059c6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80059c6:	b480      	push	{r7}
 80059c8:	b083      	sub	sp, #12
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80059ce:	bf00      	nop
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bc80      	pop	{r7}
 80059d6:	4770      	bx	lr

080059d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bc80      	pop	{r7}
 80059e8:	4770      	bx	lr

080059ea <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059ea:	b480      	push	{r7}
 80059ec:	b083      	sub	sp, #12
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
 80059f2:	460b      	mov	r3, r1
 80059f4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059f6:	bf00      	nop
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bc80      	pop	{r7}
 80059fe:	4770      	bx	lr

08005a00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b086      	sub	sp, #24
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	603b      	str	r3, [r7, #0]
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a10:	e03b      	b.n	8005a8a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a12:	6a3b      	ldr	r3, [r7, #32]
 8005a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a18:	d037      	beq.n	8005a8a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a1a:	f7fb ff91 	bl	8001940 <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	6a3a      	ldr	r2, [r7, #32]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d302      	bcc.n	8005a30 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a2a:	6a3b      	ldr	r3, [r7, #32]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d101      	bne.n	8005a34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e03a      	b.n	8005aaa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	f003 0304 	and.w	r3, r3, #4
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d023      	beq.n	8005a8a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	2b80      	cmp	r3, #128	@ 0x80
 8005a46:	d020      	beq.n	8005a8a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2b40      	cmp	r3, #64	@ 0x40
 8005a4c:	d01d      	beq.n	8005a8a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0308 	and.w	r3, r3, #8
 8005a58:	2b08      	cmp	r3, #8
 8005a5a:	d116      	bne.n	8005a8a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	617b      	str	r3, [r7, #20]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	617b      	str	r3, [r7, #20]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	617b      	str	r3, [r7, #20]
 8005a70:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f000 f81d 	bl	8005ab2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2208      	movs	r2, #8
 8005a7c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e00f      	b.n	8005aaa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	4013      	ands	r3, r2
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	bf0c      	ite	eq
 8005a9a:	2301      	moveq	r3, #1
 8005a9c:	2300      	movne	r3, #0
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	79fb      	ldrb	r3, [r7, #7]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d0b4      	beq.n	8005a12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3718      	adds	r7, #24
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b095      	sub	sp, #84	@ 0x54
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	330c      	adds	r3, #12
 8005ac0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ac4:	e853 3f00 	ldrex	r3, [r3]
 8005ac8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005acc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ad0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	330c      	adds	r3, #12
 8005ad8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ada:	643a      	str	r2, [r7, #64]	@ 0x40
 8005adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ade:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ae0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ae2:	e841 2300 	strex	r3, r2, [r1]
 8005ae6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1e5      	bne.n	8005aba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	3314      	adds	r3, #20
 8005af4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af6:	6a3b      	ldr	r3, [r7, #32]
 8005af8:	e853 3f00 	ldrex	r3, [r3]
 8005afc:	61fb      	str	r3, [r7, #28]
   return(result);
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	f023 0301 	bic.w	r3, r3, #1
 8005b04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	3314      	adds	r3, #20
 8005b0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b16:	e841 2300 	strex	r3, r2, [r1]
 8005b1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1e5      	bne.n	8005aee <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d119      	bne.n	8005b5e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	330c      	adds	r3, #12
 8005b30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	e853 3f00 	ldrex	r3, [r3]
 8005b38:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	f023 0310 	bic.w	r3, r3, #16
 8005b40:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	330c      	adds	r3, #12
 8005b48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b4a:	61ba      	str	r2, [r7, #24]
 8005b4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4e:	6979      	ldr	r1, [r7, #20]
 8005b50:	69ba      	ldr	r2, [r7, #24]
 8005b52:	e841 2300 	strex	r3, r2, [r1]
 8005b56:	613b      	str	r3, [r7, #16]
   return(result);
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1e5      	bne.n	8005b2a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2220      	movs	r2, #32
 8005b62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005b6c:	bf00      	nop
 8005b6e:	3754      	adds	r7, #84	@ 0x54
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bc80      	pop	{r7}
 8005b74:	4770      	bx	lr

08005b76 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b084      	sub	sp, #16
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f7ff ff21 	bl	80059d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b96:	bf00      	nop
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b085      	sub	sp, #20
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	2b21      	cmp	r3, #33	@ 0x21
 8005bb0:	d13e      	bne.n	8005c30 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bba:	d114      	bne.n	8005be6 <UART_Transmit_IT+0x48>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d110      	bne.n	8005be6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a1b      	ldr	r3, [r3, #32]
 8005bc8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	881b      	ldrh	r3, [r3, #0]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bd8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	1c9a      	adds	r2, r3, #2
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	621a      	str	r2, [r3, #32]
 8005be4:	e008      	b.n	8005bf8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	1c59      	adds	r1, r3, #1
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	6211      	str	r1, [r2, #32]
 8005bf0:	781a      	ldrb	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	4619      	mov	r1, r3
 8005c06:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10f      	bne.n	8005c2c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68da      	ldr	r2, [r3, #12]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005c1a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68da      	ldr	r2, [r3, #12]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c2a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	e000      	b.n	8005c32 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c30:	2302      	movs	r3, #2
  }
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3714      	adds	r7, #20
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bc80      	pop	{r7}
 8005c3a:	4770      	bx	lr

08005c3c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68da      	ldr	r2, [r3, #12]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c52:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2220      	movs	r2, #32
 8005c58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f7ff fea9 	bl	80059b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3708      	adds	r7, #8
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b08c      	sub	sp, #48	@ 0x30
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	2b22      	cmp	r3, #34	@ 0x22
 8005c7e:	f040 80ae 	bne.w	8005dde <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c8a:	d117      	bne.n	8005cbc <UART_Receive_IT+0x50>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d113      	bne.n	8005cbc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005c94:	2300      	movs	r3, #0
 8005c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb4:	1c9a      	adds	r2, r3, #2
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	629a      	str	r2, [r3, #40]	@ 0x28
 8005cba:	e026      	b.n	8005d0a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cce:	d007      	beq.n	8005ce0 <UART_Receive_IT+0x74>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d10a      	bne.n	8005cee <UART_Receive_IT+0x82>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d106      	bne.n	8005cee <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	b2da      	uxtb	r2, r3
 8005ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cea:	701a      	strb	r2, [r3, #0]
 8005cec:	e008      	b.n	8005d00 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cfe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d04:	1c5a      	adds	r2, r3, #1
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	3b01      	subs	r3, #1
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	4619      	mov	r1, r3
 8005d18:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d15d      	bne.n	8005dda <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68da      	ldr	r2, [r3, #12]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f022 0220 	bic.w	r2, r2, #32
 8005d2c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68da      	ldr	r2, [r3, #12]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d3c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	695a      	ldr	r2, [r3, #20]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f022 0201 	bic.w	r2, r2, #1
 8005d4c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2220      	movs	r2, #32
 8005d52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d135      	bne.n	8005dd0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	330c      	adds	r3, #12
 8005d70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	e853 3f00 	ldrex	r3, [r3]
 8005d78:	613b      	str	r3, [r7, #16]
   return(result);
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	f023 0310 	bic.w	r3, r3, #16
 8005d80:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	330c      	adds	r3, #12
 8005d88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d8a:	623a      	str	r2, [r7, #32]
 8005d8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8e:	69f9      	ldr	r1, [r7, #28]
 8005d90:	6a3a      	ldr	r2, [r7, #32]
 8005d92:	e841 2300 	strex	r3, r2, [r1]
 8005d96:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1e5      	bne.n	8005d6a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0310 	and.w	r3, r3, #16
 8005da8:	2b10      	cmp	r3, #16
 8005daa:	d10a      	bne.n	8005dc2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005dac:	2300      	movs	r3, #0
 8005dae:	60fb      	str	r3, [r7, #12]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	60fb      	str	r3, [r7, #12]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	60fb      	str	r3, [r7, #12]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f7ff fe0e 	bl	80059ea <HAL_UARTEx_RxEventCallback>
 8005dce:	e002      	b.n	8005dd6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f7ff fdf8 	bl	80059c6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	e002      	b.n	8005de0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	e000      	b.n	8005de0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005dde:	2302      	movs	r3, #2
  }
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3730      	adds	r7, #48	@ 0x30
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68da      	ldr	r2, [r3, #12]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	430a      	orrs	r2, r1
 8005e04:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	689a      	ldr	r2, [r3, #8]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	431a      	orrs	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	695b      	ldr	r3, [r3, #20]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005e22:	f023 030c 	bic.w	r3, r3, #12
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	6812      	ldr	r2, [r2, #0]
 8005e2a:	68b9      	ldr	r1, [r7, #8]
 8005e2c:	430b      	orrs	r3, r1
 8005e2e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	695b      	ldr	r3, [r3, #20]
 8005e36:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	699a      	ldr	r2, [r3, #24]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a2c      	ldr	r2, [pc, #176]	@ (8005efc <UART_SetConfig+0x114>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d103      	bne.n	8005e58 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005e50:	f7ff f9ee 	bl	8005230 <HAL_RCC_GetPCLK2Freq>
 8005e54:	60f8      	str	r0, [r7, #12]
 8005e56:	e002      	b.n	8005e5e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005e58:	f7ff f9d6 	bl	8005208 <HAL_RCC_GetPCLK1Freq>
 8005e5c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	4613      	mov	r3, r2
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	4413      	add	r3, r2
 8005e66:	009a      	lsls	r2, r3, #2
 8005e68:	441a      	add	r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e74:	4a22      	ldr	r2, [pc, #136]	@ (8005f00 <UART_SetConfig+0x118>)
 8005e76:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7a:	095b      	lsrs	r3, r3, #5
 8005e7c:	0119      	lsls	r1, r3, #4
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	4613      	mov	r3, r2
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	4413      	add	r3, r2
 8005e86:	009a      	lsls	r2, r3, #2
 8005e88:	441a      	add	r2, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e94:	4b1a      	ldr	r3, [pc, #104]	@ (8005f00 <UART_SetConfig+0x118>)
 8005e96:	fba3 0302 	umull	r0, r3, r3, r2
 8005e9a:	095b      	lsrs	r3, r3, #5
 8005e9c:	2064      	movs	r0, #100	@ 0x64
 8005e9e:	fb00 f303 	mul.w	r3, r0, r3
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	011b      	lsls	r3, r3, #4
 8005ea6:	3332      	adds	r3, #50	@ 0x32
 8005ea8:	4a15      	ldr	r2, [pc, #84]	@ (8005f00 <UART_SetConfig+0x118>)
 8005eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8005eae:	095b      	lsrs	r3, r3, #5
 8005eb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005eb4:	4419      	add	r1, r3
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	4613      	mov	r3, r2
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	4413      	add	r3, r2
 8005ebe:	009a      	lsls	r2, r3, #2
 8005ec0:	441a      	add	r2, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8005f00 <UART_SetConfig+0x118>)
 8005ece:	fba3 0302 	umull	r0, r3, r3, r2
 8005ed2:	095b      	lsrs	r3, r3, #5
 8005ed4:	2064      	movs	r0, #100	@ 0x64
 8005ed6:	fb00 f303 	mul.w	r3, r0, r3
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	011b      	lsls	r3, r3, #4
 8005ede:	3332      	adds	r3, #50	@ 0x32
 8005ee0:	4a07      	ldr	r2, [pc, #28]	@ (8005f00 <UART_SetConfig+0x118>)
 8005ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee6:	095b      	lsrs	r3, r3, #5
 8005ee8:	f003 020f 	and.w	r2, r3, #15
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	440a      	add	r2, r1
 8005ef2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005ef4:	bf00      	nop
 8005ef6:	3710      	adds	r7, #16
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	40013800 	.word	0x40013800
 8005f00:	51eb851f 	.word	0x51eb851f

08005f04 <siprintf>:
 8005f04:	b40e      	push	{r1, r2, r3}
 8005f06:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005f0a:	b500      	push	{lr}
 8005f0c:	b09c      	sub	sp, #112	@ 0x70
 8005f0e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005f10:	9002      	str	r0, [sp, #8]
 8005f12:	9006      	str	r0, [sp, #24]
 8005f14:	9107      	str	r1, [sp, #28]
 8005f16:	9104      	str	r1, [sp, #16]
 8005f18:	4808      	ldr	r0, [pc, #32]	@ (8005f3c <siprintf+0x38>)
 8005f1a:	4909      	ldr	r1, [pc, #36]	@ (8005f40 <siprintf+0x3c>)
 8005f1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f20:	9105      	str	r1, [sp, #20]
 8005f22:	6800      	ldr	r0, [r0, #0]
 8005f24:	a902      	add	r1, sp, #8
 8005f26:	9301      	str	r3, [sp, #4]
 8005f28:	f000 f992 	bl	8006250 <_svfiprintf_r>
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	9b02      	ldr	r3, [sp, #8]
 8005f30:	701a      	strb	r2, [r3, #0]
 8005f32:	b01c      	add	sp, #112	@ 0x70
 8005f34:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f38:	b003      	add	sp, #12
 8005f3a:	4770      	bx	lr
 8005f3c:	2000000c 	.word	0x2000000c
 8005f40:	ffff0208 	.word	0xffff0208

08005f44 <memset>:
 8005f44:	4603      	mov	r3, r0
 8005f46:	4402      	add	r2, r0
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d100      	bne.n	8005f4e <memset+0xa>
 8005f4c:	4770      	bx	lr
 8005f4e:	f803 1b01 	strb.w	r1, [r3], #1
 8005f52:	e7f9      	b.n	8005f48 <memset+0x4>

08005f54 <__errno>:
 8005f54:	4b01      	ldr	r3, [pc, #4]	@ (8005f5c <__errno+0x8>)
 8005f56:	6818      	ldr	r0, [r3, #0]
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	2000000c 	.word	0x2000000c

08005f60 <__libc_init_array>:
 8005f60:	b570      	push	{r4, r5, r6, lr}
 8005f62:	2600      	movs	r6, #0
 8005f64:	4d0c      	ldr	r5, [pc, #48]	@ (8005f98 <__libc_init_array+0x38>)
 8005f66:	4c0d      	ldr	r4, [pc, #52]	@ (8005f9c <__libc_init_array+0x3c>)
 8005f68:	1b64      	subs	r4, r4, r5
 8005f6a:	10a4      	asrs	r4, r4, #2
 8005f6c:	42a6      	cmp	r6, r4
 8005f6e:	d109      	bne.n	8005f84 <__libc_init_array+0x24>
 8005f70:	f000 fc78 	bl	8006864 <_init>
 8005f74:	2600      	movs	r6, #0
 8005f76:	4d0a      	ldr	r5, [pc, #40]	@ (8005fa0 <__libc_init_array+0x40>)
 8005f78:	4c0a      	ldr	r4, [pc, #40]	@ (8005fa4 <__libc_init_array+0x44>)
 8005f7a:	1b64      	subs	r4, r4, r5
 8005f7c:	10a4      	asrs	r4, r4, #2
 8005f7e:	42a6      	cmp	r6, r4
 8005f80:	d105      	bne.n	8005f8e <__libc_init_array+0x2e>
 8005f82:	bd70      	pop	{r4, r5, r6, pc}
 8005f84:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f88:	4798      	blx	r3
 8005f8a:	3601      	adds	r6, #1
 8005f8c:	e7ee      	b.n	8005f6c <__libc_init_array+0xc>
 8005f8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f92:	4798      	blx	r3
 8005f94:	3601      	adds	r6, #1
 8005f96:	e7f2      	b.n	8005f7e <__libc_init_array+0x1e>
 8005f98:	08006948 	.word	0x08006948
 8005f9c:	08006948 	.word	0x08006948
 8005fa0:	08006948 	.word	0x08006948
 8005fa4:	0800694c 	.word	0x0800694c

08005fa8 <__retarget_lock_acquire_recursive>:
 8005fa8:	4770      	bx	lr

08005faa <__retarget_lock_release_recursive>:
 8005faa:	4770      	bx	lr

08005fac <_free_r>:
 8005fac:	b538      	push	{r3, r4, r5, lr}
 8005fae:	4605      	mov	r5, r0
 8005fb0:	2900      	cmp	r1, #0
 8005fb2:	d040      	beq.n	8006036 <_free_r+0x8a>
 8005fb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fb8:	1f0c      	subs	r4, r1, #4
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	bfb8      	it	lt
 8005fbe:	18e4      	addlt	r4, r4, r3
 8005fc0:	f000 f8de 	bl	8006180 <__malloc_lock>
 8005fc4:	4a1c      	ldr	r2, [pc, #112]	@ (8006038 <_free_r+0x8c>)
 8005fc6:	6813      	ldr	r3, [r2, #0]
 8005fc8:	b933      	cbnz	r3, 8005fd8 <_free_r+0x2c>
 8005fca:	6063      	str	r3, [r4, #4]
 8005fcc:	6014      	str	r4, [r2, #0]
 8005fce:	4628      	mov	r0, r5
 8005fd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fd4:	f000 b8da 	b.w	800618c <__malloc_unlock>
 8005fd8:	42a3      	cmp	r3, r4
 8005fda:	d908      	bls.n	8005fee <_free_r+0x42>
 8005fdc:	6820      	ldr	r0, [r4, #0]
 8005fde:	1821      	adds	r1, r4, r0
 8005fe0:	428b      	cmp	r3, r1
 8005fe2:	bf01      	itttt	eq
 8005fe4:	6819      	ldreq	r1, [r3, #0]
 8005fe6:	685b      	ldreq	r3, [r3, #4]
 8005fe8:	1809      	addeq	r1, r1, r0
 8005fea:	6021      	streq	r1, [r4, #0]
 8005fec:	e7ed      	b.n	8005fca <_free_r+0x1e>
 8005fee:	461a      	mov	r2, r3
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	b10b      	cbz	r3, 8005ff8 <_free_r+0x4c>
 8005ff4:	42a3      	cmp	r3, r4
 8005ff6:	d9fa      	bls.n	8005fee <_free_r+0x42>
 8005ff8:	6811      	ldr	r1, [r2, #0]
 8005ffa:	1850      	adds	r0, r2, r1
 8005ffc:	42a0      	cmp	r0, r4
 8005ffe:	d10b      	bne.n	8006018 <_free_r+0x6c>
 8006000:	6820      	ldr	r0, [r4, #0]
 8006002:	4401      	add	r1, r0
 8006004:	1850      	adds	r0, r2, r1
 8006006:	4283      	cmp	r3, r0
 8006008:	6011      	str	r1, [r2, #0]
 800600a:	d1e0      	bne.n	8005fce <_free_r+0x22>
 800600c:	6818      	ldr	r0, [r3, #0]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	4408      	add	r0, r1
 8006012:	6010      	str	r0, [r2, #0]
 8006014:	6053      	str	r3, [r2, #4]
 8006016:	e7da      	b.n	8005fce <_free_r+0x22>
 8006018:	d902      	bls.n	8006020 <_free_r+0x74>
 800601a:	230c      	movs	r3, #12
 800601c:	602b      	str	r3, [r5, #0]
 800601e:	e7d6      	b.n	8005fce <_free_r+0x22>
 8006020:	6820      	ldr	r0, [r4, #0]
 8006022:	1821      	adds	r1, r4, r0
 8006024:	428b      	cmp	r3, r1
 8006026:	bf01      	itttt	eq
 8006028:	6819      	ldreq	r1, [r3, #0]
 800602a:	685b      	ldreq	r3, [r3, #4]
 800602c:	1809      	addeq	r1, r1, r0
 800602e:	6021      	streq	r1, [r4, #0]
 8006030:	6063      	str	r3, [r4, #4]
 8006032:	6054      	str	r4, [r2, #4]
 8006034:	e7cb      	b.n	8005fce <_free_r+0x22>
 8006036:	bd38      	pop	{r3, r4, r5, pc}
 8006038:	200002f4 	.word	0x200002f4

0800603c <sbrk_aligned>:
 800603c:	b570      	push	{r4, r5, r6, lr}
 800603e:	4e0f      	ldr	r6, [pc, #60]	@ (800607c <sbrk_aligned+0x40>)
 8006040:	460c      	mov	r4, r1
 8006042:	6831      	ldr	r1, [r6, #0]
 8006044:	4605      	mov	r5, r0
 8006046:	b911      	cbnz	r1, 800604e <sbrk_aligned+0x12>
 8006048:	f000 fbaa 	bl	80067a0 <_sbrk_r>
 800604c:	6030      	str	r0, [r6, #0]
 800604e:	4621      	mov	r1, r4
 8006050:	4628      	mov	r0, r5
 8006052:	f000 fba5 	bl	80067a0 <_sbrk_r>
 8006056:	1c43      	adds	r3, r0, #1
 8006058:	d103      	bne.n	8006062 <sbrk_aligned+0x26>
 800605a:	f04f 34ff 	mov.w	r4, #4294967295
 800605e:	4620      	mov	r0, r4
 8006060:	bd70      	pop	{r4, r5, r6, pc}
 8006062:	1cc4      	adds	r4, r0, #3
 8006064:	f024 0403 	bic.w	r4, r4, #3
 8006068:	42a0      	cmp	r0, r4
 800606a:	d0f8      	beq.n	800605e <sbrk_aligned+0x22>
 800606c:	1a21      	subs	r1, r4, r0
 800606e:	4628      	mov	r0, r5
 8006070:	f000 fb96 	bl	80067a0 <_sbrk_r>
 8006074:	3001      	adds	r0, #1
 8006076:	d1f2      	bne.n	800605e <sbrk_aligned+0x22>
 8006078:	e7ef      	b.n	800605a <sbrk_aligned+0x1e>
 800607a:	bf00      	nop
 800607c:	200002f0 	.word	0x200002f0

08006080 <_malloc_r>:
 8006080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006084:	1ccd      	adds	r5, r1, #3
 8006086:	f025 0503 	bic.w	r5, r5, #3
 800608a:	3508      	adds	r5, #8
 800608c:	2d0c      	cmp	r5, #12
 800608e:	bf38      	it	cc
 8006090:	250c      	movcc	r5, #12
 8006092:	2d00      	cmp	r5, #0
 8006094:	4606      	mov	r6, r0
 8006096:	db01      	blt.n	800609c <_malloc_r+0x1c>
 8006098:	42a9      	cmp	r1, r5
 800609a:	d904      	bls.n	80060a6 <_malloc_r+0x26>
 800609c:	230c      	movs	r3, #12
 800609e:	6033      	str	r3, [r6, #0]
 80060a0:	2000      	movs	r0, #0
 80060a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800617c <_malloc_r+0xfc>
 80060aa:	f000 f869 	bl	8006180 <__malloc_lock>
 80060ae:	f8d8 3000 	ldr.w	r3, [r8]
 80060b2:	461c      	mov	r4, r3
 80060b4:	bb44      	cbnz	r4, 8006108 <_malloc_r+0x88>
 80060b6:	4629      	mov	r1, r5
 80060b8:	4630      	mov	r0, r6
 80060ba:	f7ff ffbf 	bl	800603c <sbrk_aligned>
 80060be:	1c43      	adds	r3, r0, #1
 80060c0:	4604      	mov	r4, r0
 80060c2:	d158      	bne.n	8006176 <_malloc_r+0xf6>
 80060c4:	f8d8 4000 	ldr.w	r4, [r8]
 80060c8:	4627      	mov	r7, r4
 80060ca:	2f00      	cmp	r7, #0
 80060cc:	d143      	bne.n	8006156 <_malloc_r+0xd6>
 80060ce:	2c00      	cmp	r4, #0
 80060d0:	d04b      	beq.n	800616a <_malloc_r+0xea>
 80060d2:	6823      	ldr	r3, [r4, #0]
 80060d4:	4639      	mov	r1, r7
 80060d6:	4630      	mov	r0, r6
 80060d8:	eb04 0903 	add.w	r9, r4, r3
 80060dc:	f000 fb60 	bl	80067a0 <_sbrk_r>
 80060e0:	4581      	cmp	r9, r0
 80060e2:	d142      	bne.n	800616a <_malloc_r+0xea>
 80060e4:	6821      	ldr	r1, [r4, #0]
 80060e6:	4630      	mov	r0, r6
 80060e8:	1a6d      	subs	r5, r5, r1
 80060ea:	4629      	mov	r1, r5
 80060ec:	f7ff ffa6 	bl	800603c <sbrk_aligned>
 80060f0:	3001      	adds	r0, #1
 80060f2:	d03a      	beq.n	800616a <_malloc_r+0xea>
 80060f4:	6823      	ldr	r3, [r4, #0]
 80060f6:	442b      	add	r3, r5
 80060f8:	6023      	str	r3, [r4, #0]
 80060fa:	f8d8 3000 	ldr.w	r3, [r8]
 80060fe:	685a      	ldr	r2, [r3, #4]
 8006100:	bb62      	cbnz	r2, 800615c <_malloc_r+0xdc>
 8006102:	f8c8 7000 	str.w	r7, [r8]
 8006106:	e00f      	b.n	8006128 <_malloc_r+0xa8>
 8006108:	6822      	ldr	r2, [r4, #0]
 800610a:	1b52      	subs	r2, r2, r5
 800610c:	d420      	bmi.n	8006150 <_malloc_r+0xd0>
 800610e:	2a0b      	cmp	r2, #11
 8006110:	d917      	bls.n	8006142 <_malloc_r+0xc2>
 8006112:	1961      	adds	r1, r4, r5
 8006114:	42a3      	cmp	r3, r4
 8006116:	6025      	str	r5, [r4, #0]
 8006118:	bf18      	it	ne
 800611a:	6059      	strne	r1, [r3, #4]
 800611c:	6863      	ldr	r3, [r4, #4]
 800611e:	bf08      	it	eq
 8006120:	f8c8 1000 	streq.w	r1, [r8]
 8006124:	5162      	str	r2, [r4, r5]
 8006126:	604b      	str	r3, [r1, #4]
 8006128:	4630      	mov	r0, r6
 800612a:	f000 f82f 	bl	800618c <__malloc_unlock>
 800612e:	f104 000b 	add.w	r0, r4, #11
 8006132:	1d23      	adds	r3, r4, #4
 8006134:	f020 0007 	bic.w	r0, r0, #7
 8006138:	1ac2      	subs	r2, r0, r3
 800613a:	bf1c      	itt	ne
 800613c:	1a1b      	subne	r3, r3, r0
 800613e:	50a3      	strne	r3, [r4, r2]
 8006140:	e7af      	b.n	80060a2 <_malloc_r+0x22>
 8006142:	6862      	ldr	r2, [r4, #4]
 8006144:	42a3      	cmp	r3, r4
 8006146:	bf0c      	ite	eq
 8006148:	f8c8 2000 	streq.w	r2, [r8]
 800614c:	605a      	strne	r2, [r3, #4]
 800614e:	e7eb      	b.n	8006128 <_malloc_r+0xa8>
 8006150:	4623      	mov	r3, r4
 8006152:	6864      	ldr	r4, [r4, #4]
 8006154:	e7ae      	b.n	80060b4 <_malloc_r+0x34>
 8006156:	463c      	mov	r4, r7
 8006158:	687f      	ldr	r7, [r7, #4]
 800615a:	e7b6      	b.n	80060ca <_malloc_r+0x4a>
 800615c:	461a      	mov	r2, r3
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	42a3      	cmp	r3, r4
 8006162:	d1fb      	bne.n	800615c <_malloc_r+0xdc>
 8006164:	2300      	movs	r3, #0
 8006166:	6053      	str	r3, [r2, #4]
 8006168:	e7de      	b.n	8006128 <_malloc_r+0xa8>
 800616a:	230c      	movs	r3, #12
 800616c:	4630      	mov	r0, r6
 800616e:	6033      	str	r3, [r6, #0]
 8006170:	f000 f80c 	bl	800618c <__malloc_unlock>
 8006174:	e794      	b.n	80060a0 <_malloc_r+0x20>
 8006176:	6005      	str	r5, [r0, #0]
 8006178:	e7d6      	b.n	8006128 <_malloc_r+0xa8>
 800617a:	bf00      	nop
 800617c:	200002f4 	.word	0x200002f4

08006180 <__malloc_lock>:
 8006180:	4801      	ldr	r0, [pc, #4]	@ (8006188 <__malloc_lock+0x8>)
 8006182:	f7ff bf11 	b.w	8005fa8 <__retarget_lock_acquire_recursive>
 8006186:	bf00      	nop
 8006188:	200002ec 	.word	0x200002ec

0800618c <__malloc_unlock>:
 800618c:	4801      	ldr	r0, [pc, #4]	@ (8006194 <__malloc_unlock+0x8>)
 800618e:	f7ff bf0c 	b.w	8005faa <__retarget_lock_release_recursive>
 8006192:	bf00      	nop
 8006194:	200002ec 	.word	0x200002ec

08006198 <__ssputs_r>:
 8006198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800619c:	461f      	mov	r7, r3
 800619e:	688e      	ldr	r6, [r1, #8]
 80061a0:	4682      	mov	sl, r0
 80061a2:	42be      	cmp	r6, r7
 80061a4:	460c      	mov	r4, r1
 80061a6:	4690      	mov	r8, r2
 80061a8:	680b      	ldr	r3, [r1, #0]
 80061aa:	d82d      	bhi.n	8006208 <__ssputs_r+0x70>
 80061ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80061b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80061b4:	d026      	beq.n	8006204 <__ssputs_r+0x6c>
 80061b6:	6965      	ldr	r5, [r4, #20]
 80061b8:	6909      	ldr	r1, [r1, #16]
 80061ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061be:	eba3 0901 	sub.w	r9, r3, r1
 80061c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80061c6:	1c7b      	adds	r3, r7, #1
 80061c8:	444b      	add	r3, r9
 80061ca:	106d      	asrs	r5, r5, #1
 80061cc:	429d      	cmp	r5, r3
 80061ce:	bf38      	it	cc
 80061d0:	461d      	movcc	r5, r3
 80061d2:	0553      	lsls	r3, r2, #21
 80061d4:	d527      	bpl.n	8006226 <__ssputs_r+0x8e>
 80061d6:	4629      	mov	r1, r5
 80061d8:	f7ff ff52 	bl	8006080 <_malloc_r>
 80061dc:	4606      	mov	r6, r0
 80061de:	b360      	cbz	r0, 800623a <__ssputs_r+0xa2>
 80061e0:	464a      	mov	r2, r9
 80061e2:	6921      	ldr	r1, [r4, #16]
 80061e4:	f000 fafa 	bl	80067dc <memcpy>
 80061e8:	89a3      	ldrh	r3, [r4, #12]
 80061ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80061ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061f2:	81a3      	strh	r3, [r4, #12]
 80061f4:	6126      	str	r6, [r4, #16]
 80061f6:	444e      	add	r6, r9
 80061f8:	6026      	str	r6, [r4, #0]
 80061fa:	463e      	mov	r6, r7
 80061fc:	6165      	str	r5, [r4, #20]
 80061fe:	eba5 0509 	sub.w	r5, r5, r9
 8006202:	60a5      	str	r5, [r4, #8]
 8006204:	42be      	cmp	r6, r7
 8006206:	d900      	bls.n	800620a <__ssputs_r+0x72>
 8006208:	463e      	mov	r6, r7
 800620a:	4632      	mov	r2, r6
 800620c:	4641      	mov	r1, r8
 800620e:	6820      	ldr	r0, [r4, #0]
 8006210:	f000 faac 	bl	800676c <memmove>
 8006214:	2000      	movs	r0, #0
 8006216:	68a3      	ldr	r3, [r4, #8]
 8006218:	1b9b      	subs	r3, r3, r6
 800621a:	60a3      	str	r3, [r4, #8]
 800621c:	6823      	ldr	r3, [r4, #0]
 800621e:	4433      	add	r3, r6
 8006220:	6023      	str	r3, [r4, #0]
 8006222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006226:	462a      	mov	r2, r5
 8006228:	f000 fae6 	bl	80067f8 <_realloc_r>
 800622c:	4606      	mov	r6, r0
 800622e:	2800      	cmp	r0, #0
 8006230:	d1e0      	bne.n	80061f4 <__ssputs_r+0x5c>
 8006232:	4650      	mov	r0, sl
 8006234:	6921      	ldr	r1, [r4, #16]
 8006236:	f7ff feb9 	bl	8005fac <_free_r>
 800623a:	230c      	movs	r3, #12
 800623c:	f8ca 3000 	str.w	r3, [sl]
 8006240:	89a3      	ldrh	r3, [r4, #12]
 8006242:	f04f 30ff 	mov.w	r0, #4294967295
 8006246:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800624a:	81a3      	strh	r3, [r4, #12]
 800624c:	e7e9      	b.n	8006222 <__ssputs_r+0x8a>
	...

08006250 <_svfiprintf_r>:
 8006250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006254:	4698      	mov	r8, r3
 8006256:	898b      	ldrh	r3, [r1, #12]
 8006258:	4607      	mov	r7, r0
 800625a:	061b      	lsls	r3, r3, #24
 800625c:	460d      	mov	r5, r1
 800625e:	4614      	mov	r4, r2
 8006260:	b09d      	sub	sp, #116	@ 0x74
 8006262:	d510      	bpl.n	8006286 <_svfiprintf_r+0x36>
 8006264:	690b      	ldr	r3, [r1, #16]
 8006266:	b973      	cbnz	r3, 8006286 <_svfiprintf_r+0x36>
 8006268:	2140      	movs	r1, #64	@ 0x40
 800626a:	f7ff ff09 	bl	8006080 <_malloc_r>
 800626e:	6028      	str	r0, [r5, #0]
 8006270:	6128      	str	r0, [r5, #16]
 8006272:	b930      	cbnz	r0, 8006282 <_svfiprintf_r+0x32>
 8006274:	230c      	movs	r3, #12
 8006276:	603b      	str	r3, [r7, #0]
 8006278:	f04f 30ff 	mov.w	r0, #4294967295
 800627c:	b01d      	add	sp, #116	@ 0x74
 800627e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006282:	2340      	movs	r3, #64	@ 0x40
 8006284:	616b      	str	r3, [r5, #20]
 8006286:	2300      	movs	r3, #0
 8006288:	9309      	str	r3, [sp, #36]	@ 0x24
 800628a:	2320      	movs	r3, #32
 800628c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006290:	2330      	movs	r3, #48	@ 0x30
 8006292:	f04f 0901 	mov.w	r9, #1
 8006296:	f8cd 800c 	str.w	r8, [sp, #12]
 800629a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006434 <_svfiprintf_r+0x1e4>
 800629e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80062a2:	4623      	mov	r3, r4
 80062a4:	469a      	mov	sl, r3
 80062a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062aa:	b10a      	cbz	r2, 80062b0 <_svfiprintf_r+0x60>
 80062ac:	2a25      	cmp	r2, #37	@ 0x25
 80062ae:	d1f9      	bne.n	80062a4 <_svfiprintf_r+0x54>
 80062b0:	ebba 0b04 	subs.w	fp, sl, r4
 80062b4:	d00b      	beq.n	80062ce <_svfiprintf_r+0x7e>
 80062b6:	465b      	mov	r3, fp
 80062b8:	4622      	mov	r2, r4
 80062ba:	4629      	mov	r1, r5
 80062bc:	4638      	mov	r0, r7
 80062be:	f7ff ff6b 	bl	8006198 <__ssputs_r>
 80062c2:	3001      	adds	r0, #1
 80062c4:	f000 80a7 	beq.w	8006416 <_svfiprintf_r+0x1c6>
 80062c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062ca:	445a      	add	r2, fp
 80062cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80062ce:	f89a 3000 	ldrb.w	r3, [sl]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	f000 809f 	beq.w	8006416 <_svfiprintf_r+0x1c6>
 80062d8:	2300      	movs	r3, #0
 80062da:	f04f 32ff 	mov.w	r2, #4294967295
 80062de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062e2:	f10a 0a01 	add.w	sl, sl, #1
 80062e6:	9304      	str	r3, [sp, #16]
 80062e8:	9307      	str	r3, [sp, #28]
 80062ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80062ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80062f0:	4654      	mov	r4, sl
 80062f2:	2205      	movs	r2, #5
 80062f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062f8:	484e      	ldr	r0, [pc, #312]	@ (8006434 <_svfiprintf_r+0x1e4>)
 80062fa:	f000 fa61 	bl	80067c0 <memchr>
 80062fe:	9a04      	ldr	r2, [sp, #16]
 8006300:	b9d8      	cbnz	r0, 800633a <_svfiprintf_r+0xea>
 8006302:	06d0      	lsls	r0, r2, #27
 8006304:	bf44      	itt	mi
 8006306:	2320      	movmi	r3, #32
 8006308:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800630c:	0711      	lsls	r1, r2, #28
 800630e:	bf44      	itt	mi
 8006310:	232b      	movmi	r3, #43	@ 0x2b
 8006312:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006316:	f89a 3000 	ldrb.w	r3, [sl]
 800631a:	2b2a      	cmp	r3, #42	@ 0x2a
 800631c:	d015      	beq.n	800634a <_svfiprintf_r+0xfa>
 800631e:	4654      	mov	r4, sl
 8006320:	2000      	movs	r0, #0
 8006322:	f04f 0c0a 	mov.w	ip, #10
 8006326:	9a07      	ldr	r2, [sp, #28]
 8006328:	4621      	mov	r1, r4
 800632a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800632e:	3b30      	subs	r3, #48	@ 0x30
 8006330:	2b09      	cmp	r3, #9
 8006332:	d94b      	bls.n	80063cc <_svfiprintf_r+0x17c>
 8006334:	b1b0      	cbz	r0, 8006364 <_svfiprintf_r+0x114>
 8006336:	9207      	str	r2, [sp, #28]
 8006338:	e014      	b.n	8006364 <_svfiprintf_r+0x114>
 800633a:	eba0 0308 	sub.w	r3, r0, r8
 800633e:	fa09 f303 	lsl.w	r3, r9, r3
 8006342:	4313      	orrs	r3, r2
 8006344:	46a2      	mov	sl, r4
 8006346:	9304      	str	r3, [sp, #16]
 8006348:	e7d2      	b.n	80062f0 <_svfiprintf_r+0xa0>
 800634a:	9b03      	ldr	r3, [sp, #12]
 800634c:	1d19      	adds	r1, r3, #4
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	9103      	str	r1, [sp, #12]
 8006352:	2b00      	cmp	r3, #0
 8006354:	bfbb      	ittet	lt
 8006356:	425b      	neglt	r3, r3
 8006358:	f042 0202 	orrlt.w	r2, r2, #2
 800635c:	9307      	strge	r3, [sp, #28]
 800635e:	9307      	strlt	r3, [sp, #28]
 8006360:	bfb8      	it	lt
 8006362:	9204      	strlt	r2, [sp, #16]
 8006364:	7823      	ldrb	r3, [r4, #0]
 8006366:	2b2e      	cmp	r3, #46	@ 0x2e
 8006368:	d10a      	bne.n	8006380 <_svfiprintf_r+0x130>
 800636a:	7863      	ldrb	r3, [r4, #1]
 800636c:	2b2a      	cmp	r3, #42	@ 0x2a
 800636e:	d132      	bne.n	80063d6 <_svfiprintf_r+0x186>
 8006370:	9b03      	ldr	r3, [sp, #12]
 8006372:	3402      	adds	r4, #2
 8006374:	1d1a      	adds	r2, r3, #4
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	9203      	str	r2, [sp, #12]
 800637a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800637e:	9305      	str	r3, [sp, #20]
 8006380:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006438 <_svfiprintf_r+0x1e8>
 8006384:	2203      	movs	r2, #3
 8006386:	4650      	mov	r0, sl
 8006388:	7821      	ldrb	r1, [r4, #0]
 800638a:	f000 fa19 	bl	80067c0 <memchr>
 800638e:	b138      	cbz	r0, 80063a0 <_svfiprintf_r+0x150>
 8006390:	2240      	movs	r2, #64	@ 0x40
 8006392:	9b04      	ldr	r3, [sp, #16]
 8006394:	eba0 000a 	sub.w	r0, r0, sl
 8006398:	4082      	lsls	r2, r0
 800639a:	4313      	orrs	r3, r2
 800639c:	3401      	adds	r4, #1
 800639e:	9304      	str	r3, [sp, #16]
 80063a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063a4:	2206      	movs	r2, #6
 80063a6:	4825      	ldr	r0, [pc, #148]	@ (800643c <_svfiprintf_r+0x1ec>)
 80063a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80063ac:	f000 fa08 	bl	80067c0 <memchr>
 80063b0:	2800      	cmp	r0, #0
 80063b2:	d036      	beq.n	8006422 <_svfiprintf_r+0x1d2>
 80063b4:	4b22      	ldr	r3, [pc, #136]	@ (8006440 <_svfiprintf_r+0x1f0>)
 80063b6:	bb1b      	cbnz	r3, 8006400 <_svfiprintf_r+0x1b0>
 80063b8:	9b03      	ldr	r3, [sp, #12]
 80063ba:	3307      	adds	r3, #7
 80063bc:	f023 0307 	bic.w	r3, r3, #7
 80063c0:	3308      	adds	r3, #8
 80063c2:	9303      	str	r3, [sp, #12]
 80063c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063c6:	4433      	add	r3, r6
 80063c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80063ca:	e76a      	b.n	80062a2 <_svfiprintf_r+0x52>
 80063cc:	460c      	mov	r4, r1
 80063ce:	2001      	movs	r0, #1
 80063d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80063d4:	e7a8      	b.n	8006328 <_svfiprintf_r+0xd8>
 80063d6:	2300      	movs	r3, #0
 80063d8:	f04f 0c0a 	mov.w	ip, #10
 80063dc:	4619      	mov	r1, r3
 80063de:	3401      	adds	r4, #1
 80063e0:	9305      	str	r3, [sp, #20]
 80063e2:	4620      	mov	r0, r4
 80063e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063e8:	3a30      	subs	r2, #48	@ 0x30
 80063ea:	2a09      	cmp	r2, #9
 80063ec:	d903      	bls.n	80063f6 <_svfiprintf_r+0x1a6>
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d0c6      	beq.n	8006380 <_svfiprintf_r+0x130>
 80063f2:	9105      	str	r1, [sp, #20]
 80063f4:	e7c4      	b.n	8006380 <_svfiprintf_r+0x130>
 80063f6:	4604      	mov	r4, r0
 80063f8:	2301      	movs	r3, #1
 80063fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80063fe:	e7f0      	b.n	80063e2 <_svfiprintf_r+0x192>
 8006400:	ab03      	add	r3, sp, #12
 8006402:	9300      	str	r3, [sp, #0]
 8006404:	462a      	mov	r2, r5
 8006406:	4638      	mov	r0, r7
 8006408:	4b0e      	ldr	r3, [pc, #56]	@ (8006444 <_svfiprintf_r+0x1f4>)
 800640a:	a904      	add	r1, sp, #16
 800640c:	f3af 8000 	nop.w
 8006410:	1c42      	adds	r2, r0, #1
 8006412:	4606      	mov	r6, r0
 8006414:	d1d6      	bne.n	80063c4 <_svfiprintf_r+0x174>
 8006416:	89ab      	ldrh	r3, [r5, #12]
 8006418:	065b      	lsls	r3, r3, #25
 800641a:	f53f af2d 	bmi.w	8006278 <_svfiprintf_r+0x28>
 800641e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006420:	e72c      	b.n	800627c <_svfiprintf_r+0x2c>
 8006422:	ab03      	add	r3, sp, #12
 8006424:	9300      	str	r3, [sp, #0]
 8006426:	462a      	mov	r2, r5
 8006428:	4638      	mov	r0, r7
 800642a:	4b06      	ldr	r3, [pc, #24]	@ (8006444 <_svfiprintf_r+0x1f4>)
 800642c:	a904      	add	r1, sp, #16
 800642e:	f000 f87d 	bl	800652c <_printf_i>
 8006432:	e7ed      	b.n	8006410 <_svfiprintf_r+0x1c0>
 8006434:	0800690a 	.word	0x0800690a
 8006438:	08006910 	.word	0x08006910
 800643c:	08006914 	.word	0x08006914
 8006440:	00000000 	.word	0x00000000
 8006444:	08006199 	.word	0x08006199

08006448 <_printf_common>:
 8006448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800644c:	4616      	mov	r6, r2
 800644e:	4698      	mov	r8, r3
 8006450:	688a      	ldr	r2, [r1, #8]
 8006452:	690b      	ldr	r3, [r1, #16]
 8006454:	4607      	mov	r7, r0
 8006456:	4293      	cmp	r3, r2
 8006458:	bfb8      	it	lt
 800645a:	4613      	movlt	r3, r2
 800645c:	6033      	str	r3, [r6, #0]
 800645e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006462:	460c      	mov	r4, r1
 8006464:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006468:	b10a      	cbz	r2, 800646e <_printf_common+0x26>
 800646a:	3301      	adds	r3, #1
 800646c:	6033      	str	r3, [r6, #0]
 800646e:	6823      	ldr	r3, [r4, #0]
 8006470:	0699      	lsls	r1, r3, #26
 8006472:	bf42      	ittt	mi
 8006474:	6833      	ldrmi	r3, [r6, #0]
 8006476:	3302      	addmi	r3, #2
 8006478:	6033      	strmi	r3, [r6, #0]
 800647a:	6825      	ldr	r5, [r4, #0]
 800647c:	f015 0506 	ands.w	r5, r5, #6
 8006480:	d106      	bne.n	8006490 <_printf_common+0x48>
 8006482:	f104 0a19 	add.w	sl, r4, #25
 8006486:	68e3      	ldr	r3, [r4, #12]
 8006488:	6832      	ldr	r2, [r6, #0]
 800648a:	1a9b      	subs	r3, r3, r2
 800648c:	42ab      	cmp	r3, r5
 800648e:	dc2b      	bgt.n	80064e8 <_printf_common+0xa0>
 8006490:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006494:	6822      	ldr	r2, [r4, #0]
 8006496:	3b00      	subs	r3, #0
 8006498:	bf18      	it	ne
 800649a:	2301      	movne	r3, #1
 800649c:	0692      	lsls	r2, r2, #26
 800649e:	d430      	bmi.n	8006502 <_printf_common+0xba>
 80064a0:	4641      	mov	r1, r8
 80064a2:	4638      	mov	r0, r7
 80064a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80064a8:	47c8      	blx	r9
 80064aa:	3001      	adds	r0, #1
 80064ac:	d023      	beq.n	80064f6 <_printf_common+0xae>
 80064ae:	6823      	ldr	r3, [r4, #0]
 80064b0:	6922      	ldr	r2, [r4, #16]
 80064b2:	f003 0306 	and.w	r3, r3, #6
 80064b6:	2b04      	cmp	r3, #4
 80064b8:	bf14      	ite	ne
 80064ba:	2500      	movne	r5, #0
 80064bc:	6833      	ldreq	r3, [r6, #0]
 80064be:	f04f 0600 	mov.w	r6, #0
 80064c2:	bf08      	it	eq
 80064c4:	68e5      	ldreq	r5, [r4, #12]
 80064c6:	f104 041a 	add.w	r4, r4, #26
 80064ca:	bf08      	it	eq
 80064cc:	1aed      	subeq	r5, r5, r3
 80064ce:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80064d2:	bf08      	it	eq
 80064d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064d8:	4293      	cmp	r3, r2
 80064da:	bfc4      	itt	gt
 80064dc:	1a9b      	subgt	r3, r3, r2
 80064de:	18ed      	addgt	r5, r5, r3
 80064e0:	42b5      	cmp	r5, r6
 80064e2:	d11a      	bne.n	800651a <_printf_common+0xd2>
 80064e4:	2000      	movs	r0, #0
 80064e6:	e008      	b.n	80064fa <_printf_common+0xb2>
 80064e8:	2301      	movs	r3, #1
 80064ea:	4652      	mov	r2, sl
 80064ec:	4641      	mov	r1, r8
 80064ee:	4638      	mov	r0, r7
 80064f0:	47c8      	blx	r9
 80064f2:	3001      	adds	r0, #1
 80064f4:	d103      	bne.n	80064fe <_printf_common+0xb6>
 80064f6:	f04f 30ff 	mov.w	r0, #4294967295
 80064fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064fe:	3501      	adds	r5, #1
 8006500:	e7c1      	b.n	8006486 <_printf_common+0x3e>
 8006502:	2030      	movs	r0, #48	@ 0x30
 8006504:	18e1      	adds	r1, r4, r3
 8006506:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800650a:	1c5a      	adds	r2, r3, #1
 800650c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006510:	4422      	add	r2, r4
 8006512:	3302      	adds	r3, #2
 8006514:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006518:	e7c2      	b.n	80064a0 <_printf_common+0x58>
 800651a:	2301      	movs	r3, #1
 800651c:	4622      	mov	r2, r4
 800651e:	4641      	mov	r1, r8
 8006520:	4638      	mov	r0, r7
 8006522:	47c8      	blx	r9
 8006524:	3001      	adds	r0, #1
 8006526:	d0e6      	beq.n	80064f6 <_printf_common+0xae>
 8006528:	3601      	adds	r6, #1
 800652a:	e7d9      	b.n	80064e0 <_printf_common+0x98>

0800652c <_printf_i>:
 800652c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006530:	7e0f      	ldrb	r7, [r1, #24]
 8006532:	4691      	mov	r9, r2
 8006534:	2f78      	cmp	r7, #120	@ 0x78
 8006536:	4680      	mov	r8, r0
 8006538:	460c      	mov	r4, r1
 800653a:	469a      	mov	sl, r3
 800653c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800653e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006542:	d807      	bhi.n	8006554 <_printf_i+0x28>
 8006544:	2f62      	cmp	r7, #98	@ 0x62
 8006546:	d80a      	bhi.n	800655e <_printf_i+0x32>
 8006548:	2f00      	cmp	r7, #0
 800654a:	f000 80d3 	beq.w	80066f4 <_printf_i+0x1c8>
 800654e:	2f58      	cmp	r7, #88	@ 0x58
 8006550:	f000 80ba 	beq.w	80066c8 <_printf_i+0x19c>
 8006554:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006558:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800655c:	e03a      	b.n	80065d4 <_printf_i+0xa8>
 800655e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006562:	2b15      	cmp	r3, #21
 8006564:	d8f6      	bhi.n	8006554 <_printf_i+0x28>
 8006566:	a101      	add	r1, pc, #4	@ (adr r1, 800656c <_printf_i+0x40>)
 8006568:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800656c:	080065c5 	.word	0x080065c5
 8006570:	080065d9 	.word	0x080065d9
 8006574:	08006555 	.word	0x08006555
 8006578:	08006555 	.word	0x08006555
 800657c:	08006555 	.word	0x08006555
 8006580:	08006555 	.word	0x08006555
 8006584:	080065d9 	.word	0x080065d9
 8006588:	08006555 	.word	0x08006555
 800658c:	08006555 	.word	0x08006555
 8006590:	08006555 	.word	0x08006555
 8006594:	08006555 	.word	0x08006555
 8006598:	080066db 	.word	0x080066db
 800659c:	08006603 	.word	0x08006603
 80065a0:	08006695 	.word	0x08006695
 80065a4:	08006555 	.word	0x08006555
 80065a8:	08006555 	.word	0x08006555
 80065ac:	080066fd 	.word	0x080066fd
 80065b0:	08006555 	.word	0x08006555
 80065b4:	08006603 	.word	0x08006603
 80065b8:	08006555 	.word	0x08006555
 80065bc:	08006555 	.word	0x08006555
 80065c0:	0800669d 	.word	0x0800669d
 80065c4:	6833      	ldr	r3, [r6, #0]
 80065c6:	1d1a      	adds	r2, r3, #4
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	6032      	str	r2, [r6, #0]
 80065cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80065d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80065d4:	2301      	movs	r3, #1
 80065d6:	e09e      	b.n	8006716 <_printf_i+0x1ea>
 80065d8:	6833      	ldr	r3, [r6, #0]
 80065da:	6820      	ldr	r0, [r4, #0]
 80065dc:	1d19      	adds	r1, r3, #4
 80065de:	6031      	str	r1, [r6, #0]
 80065e0:	0606      	lsls	r6, r0, #24
 80065e2:	d501      	bpl.n	80065e8 <_printf_i+0xbc>
 80065e4:	681d      	ldr	r5, [r3, #0]
 80065e6:	e003      	b.n	80065f0 <_printf_i+0xc4>
 80065e8:	0645      	lsls	r5, r0, #25
 80065ea:	d5fb      	bpl.n	80065e4 <_printf_i+0xb8>
 80065ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80065f0:	2d00      	cmp	r5, #0
 80065f2:	da03      	bge.n	80065fc <_printf_i+0xd0>
 80065f4:	232d      	movs	r3, #45	@ 0x2d
 80065f6:	426d      	negs	r5, r5
 80065f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065fc:	230a      	movs	r3, #10
 80065fe:	4859      	ldr	r0, [pc, #356]	@ (8006764 <_printf_i+0x238>)
 8006600:	e011      	b.n	8006626 <_printf_i+0xfa>
 8006602:	6821      	ldr	r1, [r4, #0]
 8006604:	6833      	ldr	r3, [r6, #0]
 8006606:	0608      	lsls	r0, r1, #24
 8006608:	f853 5b04 	ldr.w	r5, [r3], #4
 800660c:	d402      	bmi.n	8006614 <_printf_i+0xe8>
 800660e:	0649      	lsls	r1, r1, #25
 8006610:	bf48      	it	mi
 8006612:	b2ad      	uxthmi	r5, r5
 8006614:	2f6f      	cmp	r7, #111	@ 0x6f
 8006616:	6033      	str	r3, [r6, #0]
 8006618:	bf14      	ite	ne
 800661a:	230a      	movne	r3, #10
 800661c:	2308      	moveq	r3, #8
 800661e:	4851      	ldr	r0, [pc, #324]	@ (8006764 <_printf_i+0x238>)
 8006620:	2100      	movs	r1, #0
 8006622:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006626:	6866      	ldr	r6, [r4, #4]
 8006628:	2e00      	cmp	r6, #0
 800662a:	bfa8      	it	ge
 800662c:	6821      	ldrge	r1, [r4, #0]
 800662e:	60a6      	str	r6, [r4, #8]
 8006630:	bfa4      	itt	ge
 8006632:	f021 0104 	bicge.w	r1, r1, #4
 8006636:	6021      	strge	r1, [r4, #0]
 8006638:	b90d      	cbnz	r5, 800663e <_printf_i+0x112>
 800663a:	2e00      	cmp	r6, #0
 800663c:	d04b      	beq.n	80066d6 <_printf_i+0x1aa>
 800663e:	4616      	mov	r6, r2
 8006640:	fbb5 f1f3 	udiv	r1, r5, r3
 8006644:	fb03 5711 	mls	r7, r3, r1, r5
 8006648:	5dc7      	ldrb	r7, [r0, r7]
 800664a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800664e:	462f      	mov	r7, r5
 8006650:	42bb      	cmp	r3, r7
 8006652:	460d      	mov	r5, r1
 8006654:	d9f4      	bls.n	8006640 <_printf_i+0x114>
 8006656:	2b08      	cmp	r3, #8
 8006658:	d10b      	bne.n	8006672 <_printf_i+0x146>
 800665a:	6823      	ldr	r3, [r4, #0]
 800665c:	07df      	lsls	r7, r3, #31
 800665e:	d508      	bpl.n	8006672 <_printf_i+0x146>
 8006660:	6923      	ldr	r3, [r4, #16]
 8006662:	6861      	ldr	r1, [r4, #4]
 8006664:	4299      	cmp	r1, r3
 8006666:	bfde      	ittt	le
 8006668:	2330      	movle	r3, #48	@ 0x30
 800666a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800666e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006672:	1b92      	subs	r2, r2, r6
 8006674:	6122      	str	r2, [r4, #16]
 8006676:	464b      	mov	r3, r9
 8006678:	4621      	mov	r1, r4
 800667a:	4640      	mov	r0, r8
 800667c:	f8cd a000 	str.w	sl, [sp]
 8006680:	aa03      	add	r2, sp, #12
 8006682:	f7ff fee1 	bl	8006448 <_printf_common>
 8006686:	3001      	adds	r0, #1
 8006688:	d14a      	bne.n	8006720 <_printf_i+0x1f4>
 800668a:	f04f 30ff 	mov.w	r0, #4294967295
 800668e:	b004      	add	sp, #16
 8006690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006694:	6823      	ldr	r3, [r4, #0]
 8006696:	f043 0320 	orr.w	r3, r3, #32
 800669a:	6023      	str	r3, [r4, #0]
 800669c:	2778      	movs	r7, #120	@ 0x78
 800669e:	4832      	ldr	r0, [pc, #200]	@ (8006768 <_printf_i+0x23c>)
 80066a0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80066a4:	6823      	ldr	r3, [r4, #0]
 80066a6:	6831      	ldr	r1, [r6, #0]
 80066a8:	061f      	lsls	r7, r3, #24
 80066aa:	f851 5b04 	ldr.w	r5, [r1], #4
 80066ae:	d402      	bmi.n	80066b6 <_printf_i+0x18a>
 80066b0:	065f      	lsls	r7, r3, #25
 80066b2:	bf48      	it	mi
 80066b4:	b2ad      	uxthmi	r5, r5
 80066b6:	6031      	str	r1, [r6, #0]
 80066b8:	07d9      	lsls	r1, r3, #31
 80066ba:	bf44      	itt	mi
 80066bc:	f043 0320 	orrmi.w	r3, r3, #32
 80066c0:	6023      	strmi	r3, [r4, #0]
 80066c2:	b11d      	cbz	r5, 80066cc <_printf_i+0x1a0>
 80066c4:	2310      	movs	r3, #16
 80066c6:	e7ab      	b.n	8006620 <_printf_i+0xf4>
 80066c8:	4826      	ldr	r0, [pc, #152]	@ (8006764 <_printf_i+0x238>)
 80066ca:	e7e9      	b.n	80066a0 <_printf_i+0x174>
 80066cc:	6823      	ldr	r3, [r4, #0]
 80066ce:	f023 0320 	bic.w	r3, r3, #32
 80066d2:	6023      	str	r3, [r4, #0]
 80066d4:	e7f6      	b.n	80066c4 <_printf_i+0x198>
 80066d6:	4616      	mov	r6, r2
 80066d8:	e7bd      	b.n	8006656 <_printf_i+0x12a>
 80066da:	6833      	ldr	r3, [r6, #0]
 80066dc:	6825      	ldr	r5, [r4, #0]
 80066de:	1d18      	adds	r0, r3, #4
 80066e0:	6961      	ldr	r1, [r4, #20]
 80066e2:	6030      	str	r0, [r6, #0]
 80066e4:	062e      	lsls	r6, r5, #24
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	d501      	bpl.n	80066ee <_printf_i+0x1c2>
 80066ea:	6019      	str	r1, [r3, #0]
 80066ec:	e002      	b.n	80066f4 <_printf_i+0x1c8>
 80066ee:	0668      	lsls	r0, r5, #25
 80066f0:	d5fb      	bpl.n	80066ea <_printf_i+0x1be>
 80066f2:	8019      	strh	r1, [r3, #0]
 80066f4:	2300      	movs	r3, #0
 80066f6:	4616      	mov	r6, r2
 80066f8:	6123      	str	r3, [r4, #16]
 80066fa:	e7bc      	b.n	8006676 <_printf_i+0x14a>
 80066fc:	6833      	ldr	r3, [r6, #0]
 80066fe:	2100      	movs	r1, #0
 8006700:	1d1a      	adds	r2, r3, #4
 8006702:	6032      	str	r2, [r6, #0]
 8006704:	681e      	ldr	r6, [r3, #0]
 8006706:	6862      	ldr	r2, [r4, #4]
 8006708:	4630      	mov	r0, r6
 800670a:	f000 f859 	bl	80067c0 <memchr>
 800670e:	b108      	cbz	r0, 8006714 <_printf_i+0x1e8>
 8006710:	1b80      	subs	r0, r0, r6
 8006712:	6060      	str	r0, [r4, #4]
 8006714:	6863      	ldr	r3, [r4, #4]
 8006716:	6123      	str	r3, [r4, #16]
 8006718:	2300      	movs	r3, #0
 800671a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800671e:	e7aa      	b.n	8006676 <_printf_i+0x14a>
 8006720:	4632      	mov	r2, r6
 8006722:	4649      	mov	r1, r9
 8006724:	4640      	mov	r0, r8
 8006726:	6923      	ldr	r3, [r4, #16]
 8006728:	47d0      	blx	sl
 800672a:	3001      	adds	r0, #1
 800672c:	d0ad      	beq.n	800668a <_printf_i+0x15e>
 800672e:	6823      	ldr	r3, [r4, #0]
 8006730:	079b      	lsls	r3, r3, #30
 8006732:	d413      	bmi.n	800675c <_printf_i+0x230>
 8006734:	68e0      	ldr	r0, [r4, #12]
 8006736:	9b03      	ldr	r3, [sp, #12]
 8006738:	4298      	cmp	r0, r3
 800673a:	bfb8      	it	lt
 800673c:	4618      	movlt	r0, r3
 800673e:	e7a6      	b.n	800668e <_printf_i+0x162>
 8006740:	2301      	movs	r3, #1
 8006742:	4632      	mov	r2, r6
 8006744:	4649      	mov	r1, r9
 8006746:	4640      	mov	r0, r8
 8006748:	47d0      	blx	sl
 800674a:	3001      	adds	r0, #1
 800674c:	d09d      	beq.n	800668a <_printf_i+0x15e>
 800674e:	3501      	adds	r5, #1
 8006750:	68e3      	ldr	r3, [r4, #12]
 8006752:	9903      	ldr	r1, [sp, #12]
 8006754:	1a5b      	subs	r3, r3, r1
 8006756:	42ab      	cmp	r3, r5
 8006758:	dcf2      	bgt.n	8006740 <_printf_i+0x214>
 800675a:	e7eb      	b.n	8006734 <_printf_i+0x208>
 800675c:	2500      	movs	r5, #0
 800675e:	f104 0619 	add.w	r6, r4, #25
 8006762:	e7f5      	b.n	8006750 <_printf_i+0x224>
 8006764:	0800691b 	.word	0x0800691b
 8006768:	0800692c 	.word	0x0800692c

0800676c <memmove>:
 800676c:	4288      	cmp	r0, r1
 800676e:	b510      	push	{r4, lr}
 8006770:	eb01 0402 	add.w	r4, r1, r2
 8006774:	d902      	bls.n	800677c <memmove+0x10>
 8006776:	4284      	cmp	r4, r0
 8006778:	4623      	mov	r3, r4
 800677a:	d807      	bhi.n	800678c <memmove+0x20>
 800677c:	1e43      	subs	r3, r0, #1
 800677e:	42a1      	cmp	r1, r4
 8006780:	d008      	beq.n	8006794 <memmove+0x28>
 8006782:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006786:	f803 2f01 	strb.w	r2, [r3, #1]!
 800678a:	e7f8      	b.n	800677e <memmove+0x12>
 800678c:	4601      	mov	r1, r0
 800678e:	4402      	add	r2, r0
 8006790:	428a      	cmp	r2, r1
 8006792:	d100      	bne.n	8006796 <memmove+0x2a>
 8006794:	bd10      	pop	{r4, pc}
 8006796:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800679a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800679e:	e7f7      	b.n	8006790 <memmove+0x24>

080067a0 <_sbrk_r>:
 80067a0:	b538      	push	{r3, r4, r5, lr}
 80067a2:	2300      	movs	r3, #0
 80067a4:	4d05      	ldr	r5, [pc, #20]	@ (80067bc <_sbrk_r+0x1c>)
 80067a6:	4604      	mov	r4, r0
 80067a8:	4608      	mov	r0, r1
 80067aa:	602b      	str	r3, [r5, #0]
 80067ac:	f7fb f80e 	bl	80017cc <_sbrk>
 80067b0:	1c43      	adds	r3, r0, #1
 80067b2:	d102      	bne.n	80067ba <_sbrk_r+0x1a>
 80067b4:	682b      	ldr	r3, [r5, #0]
 80067b6:	b103      	cbz	r3, 80067ba <_sbrk_r+0x1a>
 80067b8:	6023      	str	r3, [r4, #0]
 80067ba:	bd38      	pop	{r3, r4, r5, pc}
 80067bc:	200002e8 	.word	0x200002e8

080067c0 <memchr>:
 80067c0:	4603      	mov	r3, r0
 80067c2:	b510      	push	{r4, lr}
 80067c4:	b2c9      	uxtb	r1, r1
 80067c6:	4402      	add	r2, r0
 80067c8:	4293      	cmp	r3, r2
 80067ca:	4618      	mov	r0, r3
 80067cc:	d101      	bne.n	80067d2 <memchr+0x12>
 80067ce:	2000      	movs	r0, #0
 80067d0:	e003      	b.n	80067da <memchr+0x1a>
 80067d2:	7804      	ldrb	r4, [r0, #0]
 80067d4:	3301      	adds	r3, #1
 80067d6:	428c      	cmp	r4, r1
 80067d8:	d1f6      	bne.n	80067c8 <memchr+0x8>
 80067da:	bd10      	pop	{r4, pc}

080067dc <memcpy>:
 80067dc:	440a      	add	r2, r1
 80067de:	4291      	cmp	r1, r2
 80067e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80067e4:	d100      	bne.n	80067e8 <memcpy+0xc>
 80067e6:	4770      	bx	lr
 80067e8:	b510      	push	{r4, lr}
 80067ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067ee:	4291      	cmp	r1, r2
 80067f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067f4:	d1f9      	bne.n	80067ea <memcpy+0xe>
 80067f6:	bd10      	pop	{r4, pc}

080067f8 <_realloc_r>:
 80067f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067fc:	4680      	mov	r8, r0
 80067fe:	4615      	mov	r5, r2
 8006800:	460c      	mov	r4, r1
 8006802:	b921      	cbnz	r1, 800680e <_realloc_r+0x16>
 8006804:	4611      	mov	r1, r2
 8006806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800680a:	f7ff bc39 	b.w	8006080 <_malloc_r>
 800680e:	b92a      	cbnz	r2, 800681c <_realloc_r+0x24>
 8006810:	f7ff fbcc 	bl	8005fac <_free_r>
 8006814:	2400      	movs	r4, #0
 8006816:	4620      	mov	r0, r4
 8006818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800681c:	f000 f81a 	bl	8006854 <_malloc_usable_size_r>
 8006820:	4285      	cmp	r5, r0
 8006822:	4606      	mov	r6, r0
 8006824:	d802      	bhi.n	800682c <_realloc_r+0x34>
 8006826:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800682a:	d8f4      	bhi.n	8006816 <_realloc_r+0x1e>
 800682c:	4629      	mov	r1, r5
 800682e:	4640      	mov	r0, r8
 8006830:	f7ff fc26 	bl	8006080 <_malloc_r>
 8006834:	4607      	mov	r7, r0
 8006836:	2800      	cmp	r0, #0
 8006838:	d0ec      	beq.n	8006814 <_realloc_r+0x1c>
 800683a:	42b5      	cmp	r5, r6
 800683c:	462a      	mov	r2, r5
 800683e:	4621      	mov	r1, r4
 8006840:	bf28      	it	cs
 8006842:	4632      	movcs	r2, r6
 8006844:	f7ff ffca 	bl	80067dc <memcpy>
 8006848:	4621      	mov	r1, r4
 800684a:	4640      	mov	r0, r8
 800684c:	f7ff fbae 	bl	8005fac <_free_r>
 8006850:	463c      	mov	r4, r7
 8006852:	e7e0      	b.n	8006816 <_realloc_r+0x1e>

08006854 <_malloc_usable_size_r>:
 8006854:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006858:	1f18      	subs	r0, r3, #4
 800685a:	2b00      	cmp	r3, #0
 800685c:	bfbc      	itt	lt
 800685e:	580b      	ldrlt	r3, [r1, r0]
 8006860:	18c0      	addlt	r0, r0, r3
 8006862:	4770      	bx	lr

08006864 <_init>:
 8006864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006866:	bf00      	nop
 8006868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800686a:	bc08      	pop	{r3}
 800686c:	469e      	mov	lr, r3
 800686e:	4770      	bx	lr

08006870 <_fini>:
 8006870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006872:	bf00      	nop
 8006874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006876:	bc08      	pop	{r3}
 8006878:	469e      	mov	lr, r3
 800687a:	4770      	bx	lr
