
Demo_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003424  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08003530  08003530  00004530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800363c  0800363c  00005068  2**0
                  CONTENTS
  4 .ARM          00000000  0800363c  0800363c  00005068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800363c  0800363c  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800363c  0800363c  0000463c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003640  08003640  00004640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003644  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  20000068  080036ac  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  080036ac  00005258  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007970  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000185f  00000000  00000000  0000ca01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000750  00000000  00000000  0000e260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000058b  00000000  00000000  0000e9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179a5  00000000  00000000  0000ef3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000091e9  00000000  00000000  000268e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083d18  00000000  00000000  0002fac9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b37e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002438  00000000  00000000  000b3824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  000b5c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08003518 	.word	0x08003518

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08003518 	.word	0x08003518

0800014c <__io_putchar>:
uint8_t rxIndex = 0; // Chỉ số bộ đệm
uint8_t rxChar; // Biến lưu ký tự nhận được

//Truyền kí tự ch qua Uart
int __io_putchar(int ch)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY); //(uint8_t*)&ch : ép kiểu sang con trỏ byte, vì UART cần địa chỉ byte để gửi
 8000154:	1d39      	adds	r1, r7, #4
 8000156:	f04f 33ff 	mov.w	r3, #4294967295
 800015a:	2201      	movs	r2, #1
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <__io_putchar+0x20>)
 800015e:	f001 fc12 	bl	8001986 <HAL_UART_Transmit>
  return ch;
 8000162:	687b      	ldr	r3, [r7, #4]
}
 8000164:	4618      	mov	r0, r3
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	20000084 	.word	0x20000084

08000170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000174:	f000 fb8a 	bl	800088c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000178:	f000 f89c 	bl	80002b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800017c:	f000 f902 	bl	8000384 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000180:	f000 f8d4 	bl	800032c <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &rxChar, 1); // Bắt đầu nhận ký tự đầu tiên
 8000184:	2201      	movs	r2, #1
 8000186:	4941      	ldr	r1, [pc, #260]	@ (800028c <main+0x11c>)
 8000188:	4841      	ldr	r0, [pc, #260]	@ (8000290 <main+0x120>)
 800018a:	f001 fc87 	bl	8001a9c <HAL_UART_Receive_IT>
  printf("STM32 Ready\r\n");
 800018e:	4841      	ldr	r0, [pc, #260]	@ (8000294 <main+0x124>)
 8000190:	f002 fb3e 	bl	8002810 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Nút 1
	      if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET)
 8000194:	2102      	movs	r1, #2
 8000196:	4840      	ldr	r0, [pc, #256]	@ (8000298 <main+0x128>)
 8000198:	f000 ff42 	bl	8001020 <HAL_GPIO_ReadPin>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d135      	bne.n	800020e <main+0x9e>
	      {
	        HAL_Delay(50); // Chống dội phím đơn giản
 80001a2:	2032      	movs	r0, #50	@ 0x32
 80001a4:	f000 fbd4 	bl	8000950 <HAL_Delay>
	        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET)  // Kiểm tra lại lần nữa
 80001a8:	2102      	movs	r1, #2
 80001aa:	483b      	ldr	r0, [pc, #236]	@ (8000298 <main+0x128>)
 80001ac:	f000 ff38 	bl	8001020 <HAL_GPIO_ReadPin>
 80001b0:	4603      	mov	r3, r0
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d12b      	bne.n	800020e <main+0x9e>
	        {
	          led1_state = !led1_state; // Đảo trạng thái
 80001b6:	4b39      	ldr	r3, [pc, #228]	@ (800029c <main+0x12c>)
 80001b8:	781b      	ldrb	r3, [r3, #0]
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	bf0c      	ite	eq
 80001be:	2301      	moveq	r3, #1
 80001c0:	2300      	movne	r3, #0
 80001c2:	b2db      	uxtb	r3, r3
 80001c4:	461a      	mov	r2, r3
 80001c6:	4b35      	ldr	r3, [pc, #212]	@ (800029c <main+0x12c>)
 80001c8:	701a      	strb	r2, [r3, #0]
	          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, led1_state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80001ca:	4b34      	ldr	r3, [pc, #208]	@ (800029c <main+0x12c>)
 80001cc:	781b      	ldrb	r3, [r3, #0]
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	bf14      	ite	ne
 80001d2:	2301      	movne	r3, #1
 80001d4:	2300      	moveq	r3, #0
 80001d6:	b2db      	uxtb	r3, r3
 80001d8:	461a      	mov	r2, r3
 80001da:	2120      	movs	r1, #32
 80001dc:	482e      	ldr	r0, [pc, #184]	@ (8000298 <main+0x128>)
 80001de:	f000 ff36 	bl	800104e <HAL_GPIO_WritePin>

	          if (led1_state)
 80001e2:	4b2e      	ldr	r3, [pc, #184]	@ (800029c <main+0x12c>)
 80001e4:	781b      	ldrb	r3, [r3, #0]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d003      	beq.n	80001f2 <main+0x82>
	            printf("LED1 ON\r\n");
 80001ea:	482d      	ldr	r0, [pc, #180]	@ (80002a0 <main+0x130>)
 80001ec:	f002 fb10 	bl	8002810 <puts>
 80001f0:	e002      	b.n	80001f8 <main+0x88>
	          else
	            printf("LED1 OFF\r\n");
 80001f2:	482c      	ldr	r0, [pc, #176]	@ (80002a4 <main+0x134>)
 80001f4:	f002 fb0c 	bl	8002810 <puts>

	          // Chờ đến khi nhả nút
	          while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET);
 80001f8:	bf00      	nop
 80001fa:	2102      	movs	r1, #2
 80001fc:	4826      	ldr	r0, [pc, #152]	@ (8000298 <main+0x128>)
 80001fe:	f000 ff0f 	bl	8001020 <HAL_GPIO_ReadPin>
 8000202:	4603      	mov	r3, r0
 8000204:	2b00      	cmp	r3, #0
 8000206:	d0f8      	beq.n	80001fa <main+0x8a>
	          HAL_Delay(50);  // Chống dội lần nhả
 8000208:	2032      	movs	r0, #50	@ 0x32
 800020a:	f000 fba1 	bl	8000950 <HAL_Delay>
	        }
	      }

	      // Nút 2
	      if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET)
 800020e:	2104      	movs	r1, #4
 8000210:	4821      	ldr	r0, [pc, #132]	@ (8000298 <main+0x128>)
 8000212:	f000 ff05 	bl	8001020 <HAL_GPIO_ReadPin>
 8000216:	4603      	mov	r3, r0
 8000218:	2b00      	cmp	r3, #0
 800021a:	d1bb      	bne.n	8000194 <main+0x24>
	      {
	        HAL_Delay(50);
 800021c:	2032      	movs	r0, #50	@ 0x32
 800021e:	f000 fb97 	bl	8000950 <HAL_Delay>
	        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET)
 8000222:	2104      	movs	r1, #4
 8000224:	481c      	ldr	r0, [pc, #112]	@ (8000298 <main+0x128>)
 8000226:	f000 fefb 	bl	8001020 <HAL_GPIO_ReadPin>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d1b1      	bne.n	8000194 <main+0x24>
	        {
	          led2_state = !led2_state;
 8000230:	4b1d      	ldr	r3, [pc, #116]	@ (80002a8 <main+0x138>)
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	2b00      	cmp	r3, #0
 8000236:	bf0c      	ite	eq
 8000238:	2301      	moveq	r3, #1
 800023a:	2300      	movne	r3, #0
 800023c:	b2db      	uxtb	r3, r3
 800023e:	461a      	mov	r2, r3
 8000240:	4b19      	ldr	r3, [pc, #100]	@ (80002a8 <main+0x138>)
 8000242:	701a      	strb	r2, [r3, #0]
	          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, led2_state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000244:	4b18      	ldr	r3, [pc, #96]	@ (80002a8 <main+0x138>)
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	2b00      	cmp	r3, #0
 800024a:	bf14      	ite	ne
 800024c:	2301      	movne	r3, #1
 800024e:	2300      	moveq	r3, #0
 8000250:	b2db      	uxtb	r3, r3
 8000252:	461a      	mov	r2, r3
 8000254:	2140      	movs	r1, #64	@ 0x40
 8000256:	4810      	ldr	r0, [pc, #64]	@ (8000298 <main+0x128>)
 8000258:	f000 fef9 	bl	800104e <HAL_GPIO_WritePin>

	          if (led2_state)
 800025c:	4b12      	ldr	r3, [pc, #72]	@ (80002a8 <main+0x138>)
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d003      	beq.n	800026c <main+0xfc>
	            printf("LED2 ON\r\n");
 8000264:	4811      	ldr	r0, [pc, #68]	@ (80002ac <main+0x13c>)
 8000266:	f002 fad3 	bl	8002810 <puts>
 800026a:	e002      	b.n	8000272 <main+0x102>
	          else
	            printf("LED2 OFF\r\n");
 800026c:	4810      	ldr	r0, [pc, #64]	@ (80002b0 <main+0x140>)
 800026e:	f002 facf 	bl	8002810 <puts>

	          while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET);
 8000272:	bf00      	nop
 8000274:	2104      	movs	r1, #4
 8000276:	4808      	ldr	r0, [pc, #32]	@ (8000298 <main+0x128>)
 8000278:	f000 fed2 	bl	8001020 <HAL_GPIO_ReadPin>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d0f8      	beq.n	8000274 <main+0x104>
	          HAL_Delay(50);
 8000282:	2032      	movs	r0, #50	@ 0x32
 8000284:	f000 fb64 	bl	8000950 <HAL_Delay>
	      if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET)
 8000288:	e784      	b.n	8000194 <main+0x24>
 800028a:	bf00      	nop
 800028c:	20000103 	.word	0x20000103
 8000290:	20000084 	.word	0x20000084
 8000294:	08003530 	.word	0x08003530
 8000298:	40010800 	.word	0x40010800
 800029c:	200000cc 	.word	0x200000cc
 80002a0:	08003540 	.word	0x08003540
 80002a4:	0800354c 	.word	0x0800354c
 80002a8:	200000cd 	.word	0x200000cd
 80002ac:	08003558 	.word	0x08003558
 80002b0:	08003564 	.word	0x08003564

080002b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b090      	sub	sp, #64	@ 0x40
 80002b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ba:	f107 0318 	add.w	r3, r7, #24
 80002be:	2228      	movs	r2, #40	@ 0x28
 80002c0:	2100      	movs	r1, #0
 80002c2:	4618      	mov	r0, r3
 80002c4:	f002 fb84 	bl	80029d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c8:	1d3b      	adds	r3, r7, #4
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
 80002d2:	60da      	str	r2, [r3, #12]
 80002d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002d6:	2302      	movs	r3, #2
 80002d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002da:	2301      	movs	r3, #1
 80002dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002de:	2310      	movs	r3, #16
 80002e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002e2:	2300      	movs	r3, #0
 80002e4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e6:	f107 0318 	add.w	r3, r7, #24
 80002ea:	4618      	mov	r0, r3
 80002ec:	f000 fec8 	bl	8001080 <HAL_RCC_OscConfig>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002f6:	f000 f93b 	bl	8000570 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fa:	230f      	movs	r3, #15
 80002fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002fe:	2300      	movs	r3, #0
 8000300:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000302:	2300      	movs	r3, #0
 8000304:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000306:	2300      	movs	r3, #0
 8000308:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800030a:	2300      	movs	r3, #0
 800030c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	2100      	movs	r1, #0
 8000312:	4618      	mov	r0, r3
 8000314:	f001 f936 	bl	8001584 <HAL_RCC_ClockConfig>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800031e:	f000 f927 	bl	8000570 <Error_Handler>
  }
}
 8000322:	bf00      	nop
 8000324:	3740      	adds	r7, #64	@ 0x40
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
	...

0800032c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000330:	4b12      	ldr	r3, [pc, #72]	@ (800037c <MX_USART1_UART_Init+0x50>)
 8000332:	4a13      	ldr	r2, [pc, #76]	@ (8000380 <MX_USART1_UART_Init+0x54>)
 8000334:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000336:	4b11      	ldr	r3, [pc, #68]	@ (800037c <MX_USART1_UART_Init+0x50>)
 8000338:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800033c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800033e:	4b0f      	ldr	r3, [pc, #60]	@ (800037c <MX_USART1_UART_Init+0x50>)
 8000340:	2200      	movs	r2, #0
 8000342:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000344:	4b0d      	ldr	r3, [pc, #52]	@ (800037c <MX_USART1_UART_Init+0x50>)
 8000346:	2200      	movs	r2, #0
 8000348:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800034a:	4b0c      	ldr	r3, [pc, #48]	@ (800037c <MX_USART1_UART_Init+0x50>)
 800034c:	2200      	movs	r2, #0
 800034e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000350:	4b0a      	ldr	r3, [pc, #40]	@ (800037c <MX_USART1_UART_Init+0x50>)
 8000352:	220c      	movs	r2, #12
 8000354:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000356:	4b09      	ldr	r3, [pc, #36]	@ (800037c <MX_USART1_UART_Init+0x50>)
 8000358:	2200      	movs	r2, #0
 800035a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800035c:	4b07      	ldr	r3, [pc, #28]	@ (800037c <MX_USART1_UART_Init+0x50>)
 800035e:	2200      	movs	r2, #0
 8000360:	61da      	str	r2, [r3, #28]
  if (HAL_MultiProcessor_Init(&huart1, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8000362:	2200      	movs	r2, #0
 8000364:	2100      	movs	r1, #0
 8000366:	4805      	ldr	r0, [pc, #20]	@ (800037c <MX_USART1_UART_Init+0x50>)
 8000368:	f001 fa9a 	bl	80018a0 <HAL_MultiProcessor_Init>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8000372:	f000 f8fd 	bl	8000570 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000376:	bf00      	nop
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	20000084 	.word	0x20000084
 8000380:	40013800 	.word	0x40013800

08000384 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b086      	sub	sp, #24
 8000388:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038a:	f107 0308 	add.w	r3, r7, #8
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	605a      	str	r2, [r3, #4]
 8000394:	609a      	str	r2, [r3, #8]
 8000396:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000398:	4b1d      	ldr	r3, [pc, #116]	@ (8000410 <MX_GPIO_Init+0x8c>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	4a1c      	ldr	r2, [pc, #112]	@ (8000410 <MX_GPIO_Init+0x8c>)
 800039e:	f043 0320 	orr.w	r3, r3, #32
 80003a2:	6193      	str	r3, [r2, #24]
 80003a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000410 <MX_GPIO_Init+0x8c>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	f003 0320 	and.w	r3, r3, #32
 80003ac:	607b      	str	r3, [r7, #4]
 80003ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b0:	4b17      	ldr	r3, [pc, #92]	@ (8000410 <MX_GPIO_Init+0x8c>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	4a16      	ldr	r2, [pc, #88]	@ (8000410 <MX_GPIO_Init+0x8c>)
 80003b6:	f043 0304 	orr.w	r3, r3, #4
 80003ba:	6193      	str	r3, [r2, #24]
 80003bc:	4b14      	ldr	r3, [pc, #80]	@ (8000410 <MX_GPIO_Init+0x8c>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	f003 0304 	and.w	r3, r3, #4
 80003c4:	603b      	str	r3, [r7, #0]
 80003c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80003c8:	2200      	movs	r2, #0
 80003ca:	2160      	movs	r1, #96	@ 0x60
 80003cc:	4811      	ldr	r0, [pc, #68]	@ (8000414 <MX_GPIO_Init+0x90>)
 80003ce:	f000 fe3e 	bl	800104e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80003d2:	2306      	movs	r3, #6
 80003d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003d6:	2300      	movs	r3, #0
 80003d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003da:	2301      	movs	r3, #1
 80003dc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003de:	f107 0308 	add.w	r3, r7, #8
 80003e2:	4619      	mov	r1, r3
 80003e4:	480b      	ldr	r0, [pc, #44]	@ (8000414 <MX_GPIO_Init+0x90>)
 80003e6:	f000 fc97 	bl	8000d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80003ea:	2360      	movs	r3, #96	@ 0x60
 80003ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ee:	2301      	movs	r3, #1
 80003f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f2:	2300      	movs	r3, #0
 80003f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f6:	2302      	movs	r3, #2
 80003f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003fa:	f107 0308 	add.w	r3, r7, #8
 80003fe:	4619      	mov	r1, r3
 8000400:	4804      	ldr	r0, [pc, #16]	@ (8000414 <MX_GPIO_Init+0x90>)
 8000402:	f000 fc89 	bl	8000d18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000406:	bf00      	nop
 8000408:	3718      	adds	r7, #24
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	40021000 	.word	0x40021000
 8000414:	40010800 	.word	0x40010800

08000418 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1) 	//kiểm tra module uart
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a40      	ldr	r2, [pc, #256]	@ (8000528 <HAL_UART_RxCpltCallback+0x110>)
 8000426:	4293      	cmp	r3, r2
 8000428:	d179      	bne.n	800051e <HAL_UART_RxCpltCallback+0x106>
  {
	//Xử lí kí tự nhận được, kiểm tra xem chuỗi đã hoàn chỉnh chưa (r/ carriage return, n/ line feed
    if (rxChar == '\r' || rxChar == '\n') {
 800042a:	4b40      	ldr	r3, [pc, #256]	@ (800052c <HAL_UART_RxCpltCallback+0x114>)
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	2b0d      	cmp	r3, #13
 8000430:	d003      	beq.n	800043a <HAL_UART_RxCpltCallback+0x22>
 8000432:	4b3e      	ldr	r3, [pc, #248]	@ (800052c <HAL_UART_RxCpltCallback+0x114>)
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	2b0a      	cmp	r3, #10
 8000438:	d15d      	bne.n	80004f6 <HAL_UART_RxCpltCallback+0xde>
      rxBuffer[rxIndex] = '\0';			//đánh dâu kết thúc chuẩn C
 800043a:	4b3d      	ldr	r3, [pc, #244]	@ (8000530 <HAL_UART_RxCpltCallback+0x118>)
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	461a      	mov	r2, r3
 8000440:	4b3c      	ldr	r3, [pc, #240]	@ (8000534 <HAL_UART_RxCpltCallback+0x11c>)
 8000442:	2100      	movs	r1, #0
 8000444:	5499      	strb	r1, [r3, r2]
      rxIndex = 0;						//đặt rxIndex để chuẩn bị nhận chuỗi mới
 8000446:	4b3a      	ldr	r3, [pc, #232]	@ (8000530 <HAL_UART_RxCpltCallback+0x118>)
 8000448:	2200      	movs	r2, #0
 800044a:	701a      	strb	r2, [r3, #0]

      printf("Received: [%s]\r\n", rxBuffer); // In chuỗi nhận được
 800044c:	4939      	ldr	r1, [pc, #228]	@ (8000534 <HAL_UART_RxCpltCallback+0x11c>)
 800044e:	483a      	ldr	r0, [pc, #232]	@ (8000538 <HAL_UART_RxCpltCallback+0x120>)
 8000450:	f002 f976 	bl	8002740 <iprintf>

      if (strstr(rxBuffer, "turn on led1")) {
 8000454:	4939      	ldr	r1, [pc, #228]	@ (800053c <HAL_UART_RxCpltCallback+0x124>)
 8000456:	4837      	ldr	r0, [pc, #220]	@ (8000534 <HAL_UART_RxCpltCallback+0x11c>)
 8000458:	f002 fac2 	bl	80029e0 <strstr>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d00b      	beq.n	800047a <HAL_UART_RxCpltCallback+0x62>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000462:	2201      	movs	r2, #1
 8000464:	2120      	movs	r1, #32
 8000466:	4836      	ldr	r0, [pc, #216]	@ (8000540 <HAL_UART_RxCpltCallback+0x128>)
 8000468:	f000 fdf1 	bl	800104e <HAL_GPIO_WritePin>
        printf("LED1 ON\r\n");
 800046c:	4835      	ldr	r0, [pc, #212]	@ (8000544 <HAL_UART_RxCpltCallback+0x12c>)
 800046e:	f002 f9cf 	bl	8002810 <puts>
        led1_state = 1;
 8000472:	4b35      	ldr	r3, [pc, #212]	@ (8000548 <HAL_UART_RxCpltCallback+0x130>)
 8000474:	2201      	movs	r2, #1
 8000476:	701a      	strb	r2, [r3, #0]
      if (strstr(rxBuffer, "turn on led1")) {
 8000478:	e04c      	b.n	8000514 <HAL_UART_RxCpltCallback+0xfc>
      }
      else if (strstr(rxBuffer, "turn off led1")) {
 800047a:	4934      	ldr	r1, [pc, #208]	@ (800054c <HAL_UART_RxCpltCallback+0x134>)
 800047c:	482d      	ldr	r0, [pc, #180]	@ (8000534 <HAL_UART_RxCpltCallback+0x11c>)
 800047e:	f002 faaf 	bl	80029e0 <strstr>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d00b      	beq.n	80004a0 <HAL_UART_RxCpltCallback+0x88>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000488:	2200      	movs	r2, #0
 800048a:	2120      	movs	r1, #32
 800048c:	482c      	ldr	r0, [pc, #176]	@ (8000540 <HAL_UART_RxCpltCallback+0x128>)
 800048e:	f000 fdde 	bl	800104e <HAL_GPIO_WritePin>
        printf("LED1 OFF\r\n");
 8000492:	482f      	ldr	r0, [pc, #188]	@ (8000550 <HAL_UART_RxCpltCallback+0x138>)
 8000494:	f002 f9bc 	bl	8002810 <puts>
        led1_state = 0;
 8000498:	4b2b      	ldr	r3, [pc, #172]	@ (8000548 <HAL_UART_RxCpltCallback+0x130>)
 800049a:	2200      	movs	r2, #0
 800049c:	701a      	strb	r2, [r3, #0]
      if (strstr(rxBuffer, "turn on led1")) {
 800049e:	e039      	b.n	8000514 <HAL_UART_RxCpltCallback+0xfc>
      }
      else if (strstr(rxBuffer, "turn on led2")) {
 80004a0:	492c      	ldr	r1, [pc, #176]	@ (8000554 <HAL_UART_RxCpltCallback+0x13c>)
 80004a2:	4824      	ldr	r0, [pc, #144]	@ (8000534 <HAL_UART_RxCpltCallback+0x11c>)
 80004a4:	f002 fa9c 	bl	80029e0 <strstr>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d00b      	beq.n	80004c6 <HAL_UART_RxCpltCallback+0xae>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80004ae:	2201      	movs	r2, #1
 80004b0:	2140      	movs	r1, #64	@ 0x40
 80004b2:	4823      	ldr	r0, [pc, #140]	@ (8000540 <HAL_UART_RxCpltCallback+0x128>)
 80004b4:	f000 fdcb 	bl	800104e <HAL_GPIO_WritePin>
        printf("LED2 ON\r\n");
 80004b8:	4827      	ldr	r0, [pc, #156]	@ (8000558 <HAL_UART_RxCpltCallback+0x140>)
 80004ba:	f002 f9a9 	bl	8002810 <puts>
        led2_state = 1;
 80004be:	4b27      	ldr	r3, [pc, #156]	@ (800055c <HAL_UART_RxCpltCallback+0x144>)
 80004c0:	2201      	movs	r2, #1
 80004c2:	701a      	strb	r2, [r3, #0]
      if (strstr(rxBuffer, "turn on led1")) {
 80004c4:	e026      	b.n	8000514 <HAL_UART_RxCpltCallback+0xfc>
      }
      else if (strstr(rxBuffer, "turn off led2")) {
 80004c6:	4926      	ldr	r1, [pc, #152]	@ (8000560 <HAL_UART_RxCpltCallback+0x148>)
 80004c8:	481a      	ldr	r0, [pc, #104]	@ (8000534 <HAL_UART_RxCpltCallback+0x11c>)
 80004ca:	f002 fa89 	bl	80029e0 <strstr>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d00b      	beq.n	80004ec <HAL_UART_RxCpltCallback+0xd4>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80004d4:	2200      	movs	r2, #0
 80004d6:	2140      	movs	r1, #64	@ 0x40
 80004d8:	4819      	ldr	r0, [pc, #100]	@ (8000540 <HAL_UART_RxCpltCallback+0x128>)
 80004da:	f000 fdb8 	bl	800104e <HAL_GPIO_WritePin>
        printf("LED2 OFF\r\n");
 80004de:	4821      	ldr	r0, [pc, #132]	@ (8000564 <HAL_UART_RxCpltCallback+0x14c>)
 80004e0:	f002 f996 	bl	8002810 <puts>
        led2_state = 0;
 80004e4:	4b1d      	ldr	r3, [pc, #116]	@ (800055c <HAL_UART_RxCpltCallback+0x144>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	701a      	strb	r2, [r3, #0]
      if (strstr(rxBuffer, "turn on led1")) {
 80004ea:	e013      	b.n	8000514 <HAL_UART_RxCpltCallback+0xfc>
      }
      else {
        printf("Unknown command: [%s]\r\n", rxBuffer);
 80004ec:	4911      	ldr	r1, [pc, #68]	@ (8000534 <HAL_UART_RxCpltCallback+0x11c>)
 80004ee:	481e      	ldr	r0, [pc, #120]	@ (8000568 <HAL_UART_RxCpltCallback+0x150>)
 80004f0:	f002 f926 	bl	8002740 <iprintf>
      if (strstr(rxBuffer, "turn on led1")) {
 80004f4:	e00e      	b.n	8000514 <HAL_UART_RxCpltCallback+0xfc>
      }
    }
    //Nếu ký tự nhận được không phải \r hoặc \n, lưu ký tự vào rxBuffer.
    else {
      if (rxIndex < sizeof(rxBuffer) - 1)
 80004f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000530 <HAL_UART_RxCpltCallback+0x118>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	2b30      	cmp	r3, #48	@ 0x30
 80004fc:	d80a      	bhi.n	8000514 <HAL_UART_RxCpltCallback+0xfc>
        rxBuffer[rxIndex++] = rxChar;
 80004fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000530 <HAL_UART_RxCpltCallback+0x118>)
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	1c5a      	adds	r2, r3, #1
 8000504:	b2d1      	uxtb	r1, r2
 8000506:	4a0a      	ldr	r2, [pc, #40]	@ (8000530 <HAL_UART_RxCpltCallback+0x118>)
 8000508:	7011      	strb	r1, [r2, #0]
 800050a:	461a      	mov	r2, r3
 800050c:	4b07      	ldr	r3, [pc, #28]	@ (800052c <HAL_UART_RxCpltCallback+0x114>)
 800050e:	7819      	ldrb	r1, [r3, #0]
 8000510:	4b08      	ldr	r3, [pc, #32]	@ (8000534 <HAL_UART_RxCpltCallback+0x11c>)
 8000512:	5499      	strb	r1, [r3, r2]
    }

    HAL_UART_Receive_IT(&huart1, &rxChar, 1); // tiếp tục nhận
 8000514:	2201      	movs	r2, #1
 8000516:	4905      	ldr	r1, [pc, #20]	@ (800052c <HAL_UART_RxCpltCallback+0x114>)
 8000518:	4814      	ldr	r0, [pc, #80]	@ (800056c <HAL_UART_RxCpltCallback+0x154>)
 800051a:	f001 fabf 	bl	8001a9c <HAL_UART_Receive_IT>
  }
}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40013800 	.word	0x40013800
 800052c:	20000103 	.word	0x20000103
 8000530:	20000102 	.word	0x20000102
 8000534:	200000d0 	.word	0x200000d0
 8000538:	08003570 	.word	0x08003570
 800053c:	08003584 	.word	0x08003584
 8000540:	40010800 	.word	0x40010800
 8000544:	08003540 	.word	0x08003540
 8000548:	200000cc 	.word	0x200000cc
 800054c:	08003594 	.word	0x08003594
 8000550:	0800354c 	.word	0x0800354c
 8000554:	080035a4 	.word	0x080035a4
 8000558:	08003558 	.word	0x08003558
 800055c:	200000cd 	.word	0x200000cd
 8000560:	080035b4 	.word	0x080035b4
 8000564:	08003564 	.word	0x08003564
 8000568:	080035c4 	.word	0x080035c4
 800056c:	20000084 	.word	0x20000084

08000570 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000574:	b672      	cpsid	i
}
 8000576:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000578:	bf00      	nop
 800057a:	e7fd      	b.n	8000578 <Error_Handler+0x8>

0800057c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000582:	4b15      	ldr	r3, [pc, #84]	@ (80005d8 <HAL_MspInit+0x5c>)
 8000584:	699b      	ldr	r3, [r3, #24]
 8000586:	4a14      	ldr	r2, [pc, #80]	@ (80005d8 <HAL_MspInit+0x5c>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	6193      	str	r3, [r2, #24]
 800058e:	4b12      	ldr	r3, [pc, #72]	@ (80005d8 <HAL_MspInit+0x5c>)
 8000590:	699b      	ldr	r3, [r3, #24]
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800059a:	4b0f      	ldr	r3, [pc, #60]	@ (80005d8 <HAL_MspInit+0x5c>)
 800059c:	69db      	ldr	r3, [r3, #28]
 800059e:	4a0e      	ldr	r2, [pc, #56]	@ (80005d8 <HAL_MspInit+0x5c>)
 80005a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005a4:	61d3      	str	r3, [r2, #28]
 80005a6:	4b0c      	ldr	r3, [pc, #48]	@ (80005d8 <HAL_MspInit+0x5c>)
 80005a8:	69db      	ldr	r3, [r3, #28]
 80005aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005b2:	4b0a      	ldr	r3, [pc, #40]	@ (80005dc <HAL_MspInit+0x60>)
 80005b4:	685b      	ldr	r3, [r3, #4]
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	4a04      	ldr	r2, [pc, #16]	@ (80005dc <HAL_MspInit+0x60>)
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ce:	bf00      	nop
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bc80      	pop	{r7}
 80005d6:	4770      	bx	lr
 80005d8:	40021000 	.word	0x40021000
 80005dc:	40010000 	.word	0x40010000

080005e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e8:	f107 0310 	add.w	r3, r7, #16
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a20      	ldr	r2, [pc, #128]	@ (800067c <HAL_UART_MspInit+0x9c>)
 80005fc:	4293      	cmp	r3, r2
 80005fe:	d139      	bne.n	8000674 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000600:	4b1f      	ldr	r3, [pc, #124]	@ (8000680 <HAL_UART_MspInit+0xa0>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	4a1e      	ldr	r2, [pc, #120]	@ (8000680 <HAL_UART_MspInit+0xa0>)
 8000606:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800060a:	6193      	str	r3, [r2, #24]
 800060c:	4b1c      	ldr	r3, [pc, #112]	@ (8000680 <HAL_UART_MspInit+0xa0>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000618:	4b19      	ldr	r3, [pc, #100]	@ (8000680 <HAL_UART_MspInit+0xa0>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	4a18      	ldr	r2, [pc, #96]	@ (8000680 <HAL_UART_MspInit+0xa0>)
 800061e:	f043 0304 	orr.w	r3, r3, #4
 8000622:	6193      	str	r3, [r2, #24]
 8000624:	4b16      	ldr	r3, [pc, #88]	@ (8000680 <HAL_UART_MspInit+0xa0>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	f003 0304 	and.w	r3, r3, #4
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000630:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000634:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000636:	2302      	movs	r3, #2
 8000638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800063a:	2303      	movs	r3, #3
 800063c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063e:	f107 0310 	add.w	r3, r7, #16
 8000642:	4619      	mov	r1, r3
 8000644:	480f      	ldr	r0, [pc, #60]	@ (8000684 <HAL_UART_MspInit+0xa4>)
 8000646:	f000 fb67 	bl	8000d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800064a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800064e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000658:	f107 0310 	add.w	r3, r7, #16
 800065c:	4619      	mov	r1, r3
 800065e:	4809      	ldr	r0, [pc, #36]	@ (8000684 <HAL_UART_MspInit+0xa4>)
 8000660:	f000 fb5a 	bl	8000d18 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000664:	2200      	movs	r2, #0
 8000666:	2100      	movs	r1, #0
 8000668:	2025      	movs	r0, #37	@ 0x25
 800066a:	f000 fa6c 	bl	8000b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800066e:	2025      	movs	r0, #37	@ 0x25
 8000670:	f000 fa85 	bl	8000b7e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000674:	bf00      	nop
 8000676:	3720      	adds	r7, #32
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40013800 	.word	0x40013800
 8000680:	40021000 	.word	0x40021000
 8000684:	40010800 	.word	0x40010800

08000688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800068c:	bf00      	nop
 800068e:	e7fd      	b.n	800068c <NMI_Handler+0x4>

08000690 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000694:	bf00      	nop
 8000696:	e7fd      	b.n	8000694 <HardFault_Handler+0x4>

08000698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800069c:	bf00      	nop
 800069e:	e7fd      	b.n	800069c <MemManage_Handler+0x4>

080006a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006a4:	bf00      	nop
 80006a6:	e7fd      	b.n	80006a4 <BusFault_Handler+0x4>

080006a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006ac:	bf00      	nop
 80006ae:	e7fd      	b.n	80006ac <UsageFault_Handler+0x4>

080006b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr

080006bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr

080006c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr

080006d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d8:	f000 f91e 	bl	8000918 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}

080006e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80006e4:	4802      	ldr	r0, [pc, #8]	@ (80006f0 <USART1_IRQHandler+0x10>)
 80006e6:	f001 f9ff 	bl	8001ae8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000084 	.word	0x20000084

080006f4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
 8000704:	e00a      	b.n	800071c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000706:	f3af 8000 	nop.w
 800070a:	4601      	mov	r1, r0
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	1c5a      	adds	r2, r3, #1
 8000710:	60ba      	str	r2, [r7, #8]
 8000712:	b2ca      	uxtb	r2, r1
 8000714:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	3301      	adds	r3, #1
 800071a:	617b      	str	r3, [r7, #20]
 800071c:	697a      	ldr	r2, [r7, #20]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	429a      	cmp	r2, r3
 8000722:	dbf0      	blt.n	8000706 <_read+0x12>
  }

  return len;
 8000724:	687b      	ldr	r3, [r7, #4]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3718      	adds	r7, #24
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	b086      	sub	sp, #24
 8000732:	af00      	add	r7, sp, #0
 8000734:	60f8      	str	r0, [r7, #12]
 8000736:	60b9      	str	r1, [r7, #8]
 8000738:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800073a:	2300      	movs	r3, #0
 800073c:	617b      	str	r3, [r7, #20]
 800073e:	e009      	b.n	8000754 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	1c5a      	adds	r2, r3, #1
 8000744:	60ba      	str	r2, [r7, #8]
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff fcff 	bl	800014c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	3301      	adds	r3, #1
 8000752:	617b      	str	r3, [r7, #20]
 8000754:	697a      	ldr	r2, [r7, #20]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	429a      	cmp	r2, r3
 800075a:	dbf1      	blt.n	8000740 <_write+0x12>
  }
  return len;
 800075c:	687b      	ldr	r3, [r7, #4]
}
 800075e:	4618      	mov	r0, r3
 8000760:	3718      	adds	r7, #24
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <_close>:

int _close(int file)
{
 8000766:	b480      	push	{r7}
 8000768:	b083      	sub	sp, #12
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800076e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000772:	4618      	mov	r0, r3
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr

0800077c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800078c:	605a      	str	r2, [r3, #4]
  return 0;
 800078e:	2300      	movs	r3, #0
}
 8000790:	4618      	mov	r0, r3
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr

0800079a <_isatty>:

int _isatty(int file)
{
 800079a:	b480      	push	{r7}
 800079c:	b083      	sub	sp, #12
 800079e:	af00      	add	r7, sp, #0
 80007a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007a2:	2301      	movs	r3, #1
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bc80      	pop	{r7}
 80007ac:	4770      	bx	lr

080007ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007ae:	b480      	push	{r7}
 80007b0:	b085      	sub	sp, #20
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	60f8      	str	r0, [r7, #12]
 80007b6:	60b9      	str	r1, [r7, #8]
 80007b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80007ba:	2300      	movs	r3, #0
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3714      	adds	r7, #20
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr
	...

080007c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007d0:	4a14      	ldr	r2, [pc, #80]	@ (8000824 <_sbrk+0x5c>)
 80007d2:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <_sbrk+0x60>)
 80007d4:	1ad3      	subs	r3, r2, r3
 80007d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007dc:	4b13      	ldr	r3, [pc, #76]	@ (800082c <_sbrk+0x64>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d102      	bne.n	80007ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007e4:	4b11      	ldr	r3, [pc, #68]	@ (800082c <_sbrk+0x64>)
 80007e6:	4a12      	ldr	r2, [pc, #72]	@ (8000830 <_sbrk+0x68>)
 80007e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007ea:	4b10      	ldr	r3, [pc, #64]	@ (800082c <_sbrk+0x64>)
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4413      	add	r3, r2
 80007f2:	693a      	ldr	r2, [r7, #16]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d207      	bcs.n	8000808 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007f8:	f002 f94e 	bl	8002a98 <__errno>
 80007fc:	4603      	mov	r3, r0
 80007fe:	220c      	movs	r2, #12
 8000800:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000802:	f04f 33ff 	mov.w	r3, #4294967295
 8000806:	e009      	b.n	800081c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000808:	4b08      	ldr	r3, [pc, #32]	@ (800082c <_sbrk+0x64>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800080e:	4b07      	ldr	r3, [pc, #28]	@ (800082c <_sbrk+0x64>)
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4413      	add	r3, r2
 8000816:	4a05      	ldr	r2, [pc, #20]	@ (800082c <_sbrk+0x64>)
 8000818:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800081a:	68fb      	ldr	r3, [r7, #12]
}
 800081c:	4618      	mov	r0, r3
 800081e:	3718      	adds	r7, #24
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20005000 	.word	0x20005000
 8000828:	00000400 	.word	0x00000400
 800082c:	20000104 	.word	0x20000104
 8000830:	20000258 	.word	0x20000258

08000834 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr

08000840 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000840:	f7ff fff8 	bl	8000834 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000844:	480b      	ldr	r0, [pc, #44]	@ (8000874 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000846:	490c      	ldr	r1, [pc, #48]	@ (8000878 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000848:	4a0c      	ldr	r2, [pc, #48]	@ (800087c <LoopFillZerobss+0x16>)
  movs r3, #0
 800084a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800084c:	e002      	b.n	8000854 <LoopCopyDataInit>

0800084e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800084e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000852:	3304      	adds	r3, #4

08000854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000858:	d3f9      	bcc.n	800084e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800085a:	4a09      	ldr	r2, [pc, #36]	@ (8000880 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800085c:	4c09      	ldr	r4, [pc, #36]	@ (8000884 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800085e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000860:	e001      	b.n	8000866 <LoopFillZerobss>

08000862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000864:	3204      	adds	r2, #4

08000866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000868:	d3fb      	bcc.n	8000862 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800086a:	f002 f91b 	bl	8002aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800086e:	f7ff fc7f 	bl	8000170 <main>
  bx lr
 8000872:	4770      	bx	lr
  ldr r0, =_sdata
 8000874:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000878:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800087c:	08003644 	.word	0x08003644
  ldr r2, =_sbss
 8000880:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000884:	20000258 	.word	0x20000258

08000888 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000888:	e7fe      	b.n	8000888 <ADC1_2_IRQHandler>
	...

0800088c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000890:	4b08      	ldr	r3, [pc, #32]	@ (80008b4 <HAL_Init+0x28>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a07      	ldr	r2, [pc, #28]	@ (80008b4 <HAL_Init+0x28>)
 8000896:	f043 0310 	orr.w	r3, r3, #16
 800089a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800089c:	2003      	movs	r0, #3
 800089e:	f000 f947 	bl	8000b30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008a2:	200f      	movs	r0, #15
 80008a4:	f000 f808 	bl	80008b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008a8:	f7ff fe68 	bl	800057c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008ac:	2300      	movs	r3, #0
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40022000 	.word	0x40022000

080008b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008c0:	4b12      	ldr	r3, [pc, #72]	@ (800090c <HAL_InitTick+0x54>)
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	4b12      	ldr	r3, [pc, #72]	@ (8000910 <HAL_InitTick+0x58>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	4619      	mov	r1, r3
 80008ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80008d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 f95f 	bl	8000b9a <HAL_SYSTICK_Config>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008e2:	2301      	movs	r3, #1
 80008e4:	e00e      	b.n	8000904 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2b0f      	cmp	r3, #15
 80008ea:	d80a      	bhi.n	8000902 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008ec:	2200      	movs	r2, #0
 80008ee:	6879      	ldr	r1, [r7, #4]
 80008f0:	f04f 30ff 	mov.w	r0, #4294967295
 80008f4:	f000 f927 	bl	8000b46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008f8:	4a06      	ldr	r2, [pc, #24]	@ (8000914 <HAL_InitTick+0x5c>)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008fe:	2300      	movs	r3, #0
 8000900:	e000      	b.n	8000904 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000902:	2301      	movs	r3, #1
}
 8000904:	4618      	mov	r0, r3
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000000 	.word	0x20000000
 8000910:	20000008 	.word	0x20000008
 8000914:	20000004 	.word	0x20000004

08000918 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800091c:	4b05      	ldr	r3, [pc, #20]	@ (8000934 <HAL_IncTick+0x1c>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	461a      	mov	r2, r3
 8000922:	4b05      	ldr	r3, [pc, #20]	@ (8000938 <HAL_IncTick+0x20>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4413      	add	r3, r2
 8000928:	4a03      	ldr	r2, [pc, #12]	@ (8000938 <HAL_IncTick+0x20>)
 800092a:	6013      	str	r3, [r2, #0]
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr
 8000934:	20000008 	.word	0x20000008
 8000938:	20000108 	.word	0x20000108

0800093c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  return uwTick;
 8000940:	4b02      	ldr	r3, [pc, #8]	@ (800094c <HAL_GetTick+0x10>)
 8000942:	681b      	ldr	r3, [r3, #0]
}
 8000944:	4618      	mov	r0, r3
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr
 800094c:	20000108 	.word	0x20000108

08000950 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000958:	f7ff fff0 	bl	800093c <HAL_GetTick>
 800095c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000968:	d005      	beq.n	8000976 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800096a:	4b0a      	ldr	r3, [pc, #40]	@ (8000994 <HAL_Delay+0x44>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	461a      	mov	r2, r3
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	4413      	add	r3, r2
 8000974:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000976:	bf00      	nop
 8000978:	f7ff ffe0 	bl	800093c <HAL_GetTick>
 800097c:	4602      	mov	r2, r0
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	68fa      	ldr	r2, [r7, #12]
 8000984:	429a      	cmp	r2, r3
 8000986:	d8f7      	bhi.n	8000978 <HAL_Delay+0x28>
  {
  }
}
 8000988:	bf00      	nop
 800098a:	bf00      	nop
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000008 	.word	0x20000008

08000998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f003 0307 	and.w	r3, r3, #7
 80009a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a8:	4b0c      	ldr	r3, [pc, #48]	@ (80009dc <__NVIC_SetPriorityGrouping+0x44>)
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009b4:	4013      	ands	r3, r2
 80009b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ca:	4a04      	ldr	r2, [pc, #16]	@ (80009dc <__NVIC_SetPriorityGrouping+0x44>)
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	60d3      	str	r3, [r2, #12]
}
 80009d0:	bf00      	nop
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e4:	4b04      	ldr	r3, [pc, #16]	@ (80009f8 <__NVIC_GetPriorityGrouping+0x18>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	0a1b      	lsrs	r3, r3, #8
 80009ea:	f003 0307 	and.w	r3, r3, #7
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	db0b      	blt.n	8000a26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	f003 021f 	and.w	r2, r3, #31
 8000a14:	4906      	ldr	r1, [pc, #24]	@ (8000a30 <__NVIC_EnableIRQ+0x34>)
 8000a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1a:	095b      	lsrs	r3, r3, #5
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr
 8000a30:	e000e100 	.word	0xe000e100

08000a34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	6039      	str	r1, [r7, #0]
 8000a3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	db0a      	blt.n	8000a5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	490c      	ldr	r1, [pc, #48]	@ (8000a80 <__NVIC_SetPriority+0x4c>)
 8000a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a52:	0112      	lsls	r2, r2, #4
 8000a54:	b2d2      	uxtb	r2, r2
 8000a56:	440b      	add	r3, r1
 8000a58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a5c:	e00a      	b.n	8000a74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	b2da      	uxtb	r2, r3
 8000a62:	4908      	ldr	r1, [pc, #32]	@ (8000a84 <__NVIC_SetPriority+0x50>)
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	f003 030f 	and.w	r3, r3, #15
 8000a6a:	3b04      	subs	r3, #4
 8000a6c:	0112      	lsls	r2, r2, #4
 8000a6e:	b2d2      	uxtb	r2, r2
 8000a70:	440b      	add	r3, r1
 8000a72:	761a      	strb	r2, [r3, #24]
}
 8000a74:	bf00      	nop
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000e100 	.word	0xe000e100
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b089      	sub	sp, #36	@ 0x24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	f003 0307 	and.w	r3, r3, #7
 8000a9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a9c:	69fb      	ldr	r3, [r7, #28]
 8000a9e:	f1c3 0307 	rsb	r3, r3, #7
 8000aa2:	2b04      	cmp	r3, #4
 8000aa4:	bf28      	it	cs
 8000aa6:	2304      	movcs	r3, #4
 8000aa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	3304      	adds	r3, #4
 8000aae:	2b06      	cmp	r3, #6
 8000ab0:	d902      	bls.n	8000ab8 <NVIC_EncodePriority+0x30>
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	3b03      	subs	r3, #3
 8000ab6:	e000      	b.n	8000aba <NVIC_EncodePriority+0x32>
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000abc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac6:	43da      	mvns	r2, r3
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	401a      	ands	r2, r3
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ada:	43d9      	mvns	r1, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae0:	4313      	orrs	r3, r2
         );
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3724      	adds	r7, #36	@ 0x24
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr

08000aec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000afc:	d301      	bcc.n	8000b02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000afe:	2301      	movs	r3, #1
 8000b00:	e00f      	b.n	8000b22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b02:	4a0a      	ldr	r2, [pc, #40]	@ (8000b2c <SysTick_Config+0x40>)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3b01      	subs	r3, #1
 8000b08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b0a:	210f      	movs	r1, #15
 8000b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b10:	f7ff ff90 	bl	8000a34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b14:	4b05      	ldr	r3, [pc, #20]	@ (8000b2c <SysTick_Config+0x40>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b1a:	4b04      	ldr	r3, [pc, #16]	@ (8000b2c <SysTick_Config+0x40>)
 8000b1c:	2207      	movs	r2, #7
 8000b1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	e000e010 	.word	0xe000e010

08000b30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f7ff ff2d 	bl	8000998 <__NVIC_SetPriorityGrouping>
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b086      	sub	sp, #24
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	60b9      	str	r1, [r7, #8]
 8000b50:	607a      	str	r2, [r7, #4]
 8000b52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b58:	f7ff ff42 	bl	80009e0 <__NVIC_GetPriorityGrouping>
 8000b5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	68b9      	ldr	r1, [r7, #8]
 8000b62:	6978      	ldr	r0, [r7, #20]
 8000b64:	f7ff ff90 	bl	8000a88 <NVIC_EncodePriority>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b6e:	4611      	mov	r1, r2
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff ff5f 	bl	8000a34 <__NVIC_SetPriority>
}
 8000b76:	bf00      	nop
 8000b78:	3718      	adds	r7, #24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	4603      	mov	r3, r0
 8000b86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ff35 	bl	80009fc <__NVIC_EnableIRQ>
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b082      	sub	sp, #8
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f7ff ffa2 	bl	8000aec <SysTick_Config>
 8000ba8:	4603      	mov	r3, r0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	b085      	sub	sp, #20
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	d008      	beq.n	8000bdc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2204      	movs	r2, #4
 8000bce:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	e020      	b.n	8000c1e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f022 020e 	bic.w	r2, r2, #14
 8000bea:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f022 0201 	bic.w	r2, r2, #1
 8000bfa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c04:	2101      	movs	r1, #1
 8000c06:	fa01 f202 	lsl.w	r2, r1, r2
 8000c0a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2201      	movs	r2, #1
 8000c10:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2200      	movs	r2, #0
 8000c18:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr

08000c28 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c30:	2300      	movs	r3, #0
 8000c32:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	2b02      	cmp	r3, #2
 8000c3e:	d005      	beq.n	8000c4c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2204      	movs	r2, #4
 8000c44:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
 8000c48:	73fb      	strb	r3, [r7, #15]
 8000c4a:	e051      	b.n	8000cf0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f022 020e 	bic.w	r2, r2, #14
 8000c5a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f022 0201 	bic.w	r2, r2, #1
 8000c6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a22      	ldr	r2, [pc, #136]	@ (8000cfc <HAL_DMA_Abort_IT+0xd4>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d029      	beq.n	8000cca <HAL_DMA_Abort_IT+0xa2>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a21      	ldr	r2, [pc, #132]	@ (8000d00 <HAL_DMA_Abort_IT+0xd8>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d022      	beq.n	8000cc6 <HAL_DMA_Abort_IT+0x9e>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a1f      	ldr	r2, [pc, #124]	@ (8000d04 <HAL_DMA_Abort_IT+0xdc>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d01a      	beq.n	8000cc0 <HAL_DMA_Abort_IT+0x98>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a1e      	ldr	r2, [pc, #120]	@ (8000d08 <HAL_DMA_Abort_IT+0xe0>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d012      	beq.n	8000cba <HAL_DMA_Abort_IT+0x92>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a1c      	ldr	r2, [pc, #112]	@ (8000d0c <HAL_DMA_Abort_IT+0xe4>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d00a      	beq.n	8000cb4 <HAL_DMA_Abort_IT+0x8c>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a1b      	ldr	r2, [pc, #108]	@ (8000d10 <HAL_DMA_Abort_IT+0xe8>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d102      	bne.n	8000cae <HAL_DMA_Abort_IT+0x86>
 8000ca8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000cac:	e00e      	b.n	8000ccc <HAL_DMA_Abort_IT+0xa4>
 8000cae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000cb2:	e00b      	b.n	8000ccc <HAL_DMA_Abort_IT+0xa4>
 8000cb4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cb8:	e008      	b.n	8000ccc <HAL_DMA_Abort_IT+0xa4>
 8000cba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cbe:	e005      	b.n	8000ccc <HAL_DMA_Abort_IT+0xa4>
 8000cc0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cc4:	e002      	b.n	8000ccc <HAL_DMA_Abort_IT+0xa4>
 8000cc6:	2310      	movs	r3, #16
 8000cc8:	e000      	b.n	8000ccc <HAL_DMA_Abort_IT+0xa4>
 8000cca:	2301      	movs	r3, #1
 8000ccc:	4a11      	ldr	r2, [pc, #68]	@ (8000d14 <HAL_DMA_Abort_IT+0xec>)
 8000cce:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d003      	beq.n	8000cf0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	4798      	blx	r3
    } 
  }
  return status;
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40020008 	.word	0x40020008
 8000d00:	4002001c 	.word	0x4002001c
 8000d04:	40020030 	.word	0x40020030
 8000d08:	40020044 	.word	0x40020044
 8000d0c:	40020058 	.word	0x40020058
 8000d10:	4002006c 	.word	0x4002006c
 8000d14:	40020000 	.word	0x40020000

08000d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b08b      	sub	sp, #44	@ 0x2c
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d22:	2300      	movs	r3, #0
 8000d24:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d26:	2300      	movs	r3, #0
 8000d28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d2a:	e169      	b.n	8001000 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	69fa      	ldr	r2, [r7, #28]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	f040 8158 	bne.w	8000ffa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	4a9a      	ldr	r2, [pc, #616]	@ (8000fb8 <HAL_GPIO_Init+0x2a0>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d05e      	beq.n	8000e12 <HAL_GPIO_Init+0xfa>
 8000d54:	4a98      	ldr	r2, [pc, #608]	@ (8000fb8 <HAL_GPIO_Init+0x2a0>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d875      	bhi.n	8000e46 <HAL_GPIO_Init+0x12e>
 8000d5a:	4a98      	ldr	r2, [pc, #608]	@ (8000fbc <HAL_GPIO_Init+0x2a4>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d058      	beq.n	8000e12 <HAL_GPIO_Init+0xfa>
 8000d60:	4a96      	ldr	r2, [pc, #600]	@ (8000fbc <HAL_GPIO_Init+0x2a4>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d86f      	bhi.n	8000e46 <HAL_GPIO_Init+0x12e>
 8000d66:	4a96      	ldr	r2, [pc, #600]	@ (8000fc0 <HAL_GPIO_Init+0x2a8>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d052      	beq.n	8000e12 <HAL_GPIO_Init+0xfa>
 8000d6c:	4a94      	ldr	r2, [pc, #592]	@ (8000fc0 <HAL_GPIO_Init+0x2a8>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d869      	bhi.n	8000e46 <HAL_GPIO_Init+0x12e>
 8000d72:	4a94      	ldr	r2, [pc, #592]	@ (8000fc4 <HAL_GPIO_Init+0x2ac>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d04c      	beq.n	8000e12 <HAL_GPIO_Init+0xfa>
 8000d78:	4a92      	ldr	r2, [pc, #584]	@ (8000fc4 <HAL_GPIO_Init+0x2ac>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d863      	bhi.n	8000e46 <HAL_GPIO_Init+0x12e>
 8000d7e:	4a92      	ldr	r2, [pc, #584]	@ (8000fc8 <HAL_GPIO_Init+0x2b0>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d046      	beq.n	8000e12 <HAL_GPIO_Init+0xfa>
 8000d84:	4a90      	ldr	r2, [pc, #576]	@ (8000fc8 <HAL_GPIO_Init+0x2b0>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d85d      	bhi.n	8000e46 <HAL_GPIO_Init+0x12e>
 8000d8a:	2b12      	cmp	r3, #18
 8000d8c:	d82a      	bhi.n	8000de4 <HAL_GPIO_Init+0xcc>
 8000d8e:	2b12      	cmp	r3, #18
 8000d90:	d859      	bhi.n	8000e46 <HAL_GPIO_Init+0x12e>
 8000d92:	a201      	add	r2, pc, #4	@ (adr r2, 8000d98 <HAL_GPIO_Init+0x80>)
 8000d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d98:	08000e13 	.word	0x08000e13
 8000d9c:	08000ded 	.word	0x08000ded
 8000da0:	08000dff 	.word	0x08000dff
 8000da4:	08000e41 	.word	0x08000e41
 8000da8:	08000e47 	.word	0x08000e47
 8000dac:	08000e47 	.word	0x08000e47
 8000db0:	08000e47 	.word	0x08000e47
 8000db4:	08000e47 	.word	0x08000e47
 8000db8:	08000e47 	.word	0x08000e47
 8000dbc:	08000e47 	.word	0x08000e47
 8000dc0:	08000e47 	.word	0x08000e47
 8000dc4:	08000e47 	.word	0x08000e47
 8000dc8:	08000e47 	.word	0x08000e47
 8000dcc:	08000e47 	.word	0x08000e47
 8000dd0:	08000e47 	.word	0x08000e47
 8000dd4:	08000e47 	.word	0x08000e47
 8000dd8:	08000e47 	.word	0x08000e47
 8000ddc:	08000df5 	.word	0x08000df5
 8000de0:	08000e09 	.word	0x08000e09
 8000de4:	4a79      	ldr	r2, [pc, #484]	@ (8000fcc <HAL_GPIO_Init+0x2b4>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d013      	beq.n	8000e12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000dea:	e02c      	b.n	8000e46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	623b      	str	r3, [r7, #32]
          break;
 8000df2:	e029      	b.n	8000e48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	3304      	adds	r3, #4
 8000dfa:	623b      	str	r3, [r7, #32]
          break;
 8000dfc:	e024      	b.n	8000e48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	68db      	ldr	r3, [r3, #12]
 8000e02:	3308      	adds	r3, #8
 8000e04:	623b      	str	r3, [r7, #32]
          break;
 8000e06:	e01f      	b.n	8000e48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	330c      	adds	r3, #12
 8000e0e:	623b      	str	r3, [r7, #32]
          break;
 8000e10:	e01a      	b.n	8000e48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d102      	bne.n	8000e20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e1a:	2304      	movs	r3, #4
 8000e1c:	623b      	str	r3, [r7, #32]
          break;
 8000e1e:	e013      	b.n	8000e48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d105      	bne.n	8000e34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e28:	2308      	movs	r3, #8
 8000e2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	69fa      	ldr	r2, [r7, #28]
 8000e30:	611a      	str	r2, [r3, #16]
          break;
 8000e32:	e009      	b.n	8000e48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e34:	2308      	movs	r3, #8
 8000e36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	69fa      	ldr	r2, [r7, #28]
 8000e3c:	615a      	str	r2, [r3, #20]
          break;
 8000e3e:	e003      	b.n	8000e48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e40:	2300      	movs	r3, #0
 8000e42:	623b      	str	r3, [r7, #32]
          break;
 8000e44:	e000      	b.n	8000e48 <HAL_GPIO_Init+0x130>
          break;
 8000e46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	2bff      	cmp	r3, #255	@ 0xff
 8000e4c:	d801      	bhi.n	8000e52 <HAL_GPIO_Init+0x13a>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	e001      	b.n	8000e56 <HAL_GPIO_Init+0x13e>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	3304      	adds	r3, #4
 8000e56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	2bff      	cmp	r3, #255	@ 0xff
 8000e5c:	d802      	bhi.n	8000e64 <HAL_GPIO_Init+0x14c>
 8000e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	e002      	b.n	8000e6a <HAL_GPIO_Init+0x152>
 8000e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e66:	3b08      	subs	r3, #8
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	210f      	movs	r1, #15
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	fa01 f303 	lsl.w	r3, r1, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	6a39      	ldr	r1, [r7, #32]
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	fa01 f303 	lsl.w	r3, r1, r3
 8000e84:	431a      	orrs	r2, r3
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	f000 80b1 	beq.w	8000ffa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e98:	4b4d      	ldr	r3, [pc, #308]	@ (8000fd0 <HAL_GPIO_Init+0x2b8>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	4a4c      	ldr	r2, [pc, #304]	@ (8000fd0 <HAL_GPIO_Init+0x2b8>)
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	6193      	str	r3, [r2, #24]
 8000ea4:	4b4a      	ldr	r3, [pc, #296]	@ (8000fd0 <HAL_GPIO_Init+0x2b8>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000eb0:	4a48      	ldr	r2, [pc, #288]	@ (8000fd4 <HAL_GPIO_Init+0x2bc>)
 8000eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eb4:	089b      	lsrs	r3, r3, #2
 8000eb6:	3302      	adds	r3, #2
 8000eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ebc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ec0:	f003 0303 	and.w	r3, r3, #3
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	220f      	movs	r2, #15
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	68fa      	ldr	r2, [r7, #12]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a40      	ldr	r2, [pc, #256]	@ (8000fd8 <HAL_GPIO_Init+0x2c0>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d013      	beq.n	8000f04 <HAL_GPIO_Init+0x1ec>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a3f      	ldr	r2, [pc, #252]	@ (8000fdc <HAL_GPIO_Init+0x2c4>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d00d      	beq.n	8000f00 <HAL_GPIO_Init+0x1e8>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a3e      	ldr	r2, [pc, #248]	@ (8000fe0 <HAL_GPIO_Init+0x2c8>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d007      	beq.n	8000efc <HAL_GPIO_Init+0x1e4>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a3d      	ldr	r2, [pc, #244]	@ (8000fe4 <HAL_GPIO_Init+0x2cc>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d101      	bne.n	8000ef8 <HAL_GPIO_Init+0x1e0>
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	e006      	b.n	8000f06 <HAL_GPIO_Init+0x1ee>
 8000ef8:	2304      	movs	r3, #4
 8000efa:	e004      	b.n	8000f06 <HAL_GPIO_Init+0x1ee>
 8000efc:	2302      	movs	r3, #2
 8000efe:	e002      	b.n	8000f06 <HAL_GPIO_Init+0x1ee>
 8000f00:	2301      	movs	r3, #1
 8000f02:	e000      	b.n	8000f06 <HAL_GPIO_Init+0x1ee>
 8000f04:	2300      	movs	r3, #0
 8000f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f08:	f002 0203 	and.w	r2, r2, #3
 8000f0c:	0092      	lsls	r2, r2, #2
 8000f0e:	4093      	lsls	r3, r2
 8000f10:	68fa      	ldr	r2, [r7, #12]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f16:	492f      	ldr	r1, [pc, #188]	@ (8000fd4 <HAL_GPIO_Init+0x2bc>)
 8000f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f1a:	089b      	lsrs	r3, r3, #2
 8000f1c:	3302      	adds	r3, #2
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d006      	beq.n	8000f3e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f30:	4b2d      	ldr	r3, [pc, #180]	@ (8000fe8 <HAL_GPIO_Init+0x2d0>)
 8000f32:	689a      	ldr	r2, [r3, #8]
 8000f34:	492c      	ldr	r1, [pc, #176]	@ (8000fe8 <HAL_GPIO_Init+0x2d0>)
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	608b      	str	r3, [r1, #8]
 8000f3c:	e006      	b.n	8000f4c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f3e:	4b2a      	ldr	r3, [pc, #168]	@ (8000fe8 <HAL_GPIO_Init+0x2d0>)
 8000f40:	689a      	ldr	r2, [r3, #8]
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	43db      	mvns	r3, r3
 8000f46:	4928      	ldr	r1, [pc, #160]	@ (8000fe8 <HAL_GPIO_Init+0x2d0>)
 8000f48:	4013      	ands	r3, r2
 8000f4a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d006      	beq.n	8000f66 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f58:	4b23      	ldr	r3, [pc, #140]	@ (8000fe8 <HAL_GPIO_Init+0x2d0>)
 8000f5a:	68da      	ldr	r2, [r3, #12]
 8000f5c:	4922      	ldr	r1, [pc, #136]	@ (8000fe8 <HAL_GPIO_Init+0x2d0>)
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	60cb      	str	r3, [r1, #12]
 8000f64:	e006      	b.n	8000f74 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f66:	4b20      	ldr	r3, [pc, #128]	@ (8000fe8 <HAL_GPIO_Init+0x2d0>)
 8000f68:	68da      	ldr	r2, [r3, #12]
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	491e      	ldr	r1, [pc, #120]	@ (8000fe8 <HAL_GPIO_Init+0x2d0>)
 8000f70:	4013      	ands	r3, r2
 8000f72:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d006      	beq.n	8000f8e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f80:	4b19      	ldr	r3, [pc, #100]	@ (8000fe8 <HAL_GPIO_Init+0x2d0>)
 8000f82:	685a      	ldr	r2, [r3, #4]
 8000f84:	4918      	ldr	r1, [pc, #96]	@ (8000fe8 <HAL_GPIO_Init+0x2d0>)
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	604b      	str	r3, [r1, #4]
 8000f8c:	e006      	b.n	8000f9c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f8e:	4b16      	ldr	r3, [pc, #88]	@ (8000fe8 <HAL_GPIO_Init+0x2d0>)
 8000f90:	685a      	ldr	r2, [r3, #4]
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	43db      	mvns	r3, r3
 8000f96:	4914      	ldr	r1, [pc, #80]	@ (8000fe8 <HAL_GPIO_Init+0x2d0>)
 8000f98:	4013      	ands	r3, r2
 8000f9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d021      	beq.n	8000fec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe8 <HAL_GPIO_Init+0x2d0>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	490e      	ldr	r1, [pc, #56]	@ (8000fe8 <HAL_GPIO_Init+0x2d0>)
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	600b      	str	r3, [r1, #0]
 8000fb4:	e021      	b.n	8000ffa <HAL_GPIO_Init+0x2e2>
 8000fb6:	bf00      	nop
 8000fb8:	10320000 	.word	0x10320000
 8000fbc:	10310000 	.word	0x10310000
 8000fc0:	10220000 	.word	0x10220000
 8000fc4:	10210000 	.word	0x10210000
 8000fc8:	10120000 	.word	0x10120000
 8000fcc:	10110000 	.word	0x10110000
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40010000 	.word	0x40010000
 8000fd8:	40010800 	.word	0x40010800
 8000fdc:	40010c00 	.word	0x40010c00
 8000fe0:	40011000 	.word	0x40011000
 8000fe4:	40011400 	.word	0x40011400
 8000fe8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fec:	4b0b      	ldr	r3, [pc, #44]	@ (800101c <HAL_GPIO_Init+0x304>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	4909      	ldr	r1, [pc, #36]	@ (800101c <HAL_GPIO_Init+0x304>)
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001006:	fa22 f303 	lsr.w	r3, r2, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	f47f ae8e 	bne.w	8000d2c <HAL_GPIO_Init+0x14>
  }
}
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	372c      	adds	r7, #44	@ 0x2c
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr
 800101c:	40010400 	.word	0x40010400

08001020 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	460b      	mov	r3, r1
 800102a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	689a      	ldr	r2, [r3, #8]
 8001030:	887b      	ldrh	r3, [r7, #2]
 8001032:	4013      	ands	r3, r2
 8001034:	2b00      	cmp	r3, #0
 8001036:	d002      	beq.n	800103e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001038:	2301      	movs	r3, #1
 800103a:	73fb      	strb	r3, [r7, #15]
 800103c:	e001      	b.n	8001042 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800103e:	2300      	movs	r3, #0
 8001040:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001042:	7bfb      	ldrb	r3, [r7, #15]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr

0800104e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800104e:	b480      	push	{r7}
 8001050:	b083      	sub	sp, #12
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
 8001056:	460b      	mov	r3, r1
 8001058:	807b      	strh	r3, [r7, #2]
 800105a:	4613      	mov	r3, r2
 800105c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800105e:	787b      	ldrb	r3, [r7, #1]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d003      	beq.n	800106c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001064:	887a      	ldrh	r2, [r7, #2]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800106a:	e003      	b.n	8001074 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800106c:	887b      	ldrh	r3, [r7, #2]
 800106e:	041a      	lsls	r2, r3, #16
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	611a      	str	r2, [r3, #16]
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr
	...

08001080 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d101      	bne.n	8001092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e272      	b.n	8001578 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	2b00      	cmp	r3, #0
 800109c:	f000 8087 	beq.w	80011ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010a0:	4b92      	ldr	r3, [pc, #584]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 030c 	and.w	r3, r3, #12
 80010a8:	2b04      	cmp	r3, #4
 80010aa:	d00c      	beq.n	80010c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010ac:	4b8f      	ldr	r3, [pc, #572]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 030c 	and.w	r3, r3, #12
 80010b4:	2b08      	cmp	r3, #8
 80010b6:	d112      	bne.n	80010de <HAL_RCC_OscConfig+0x5e>
 80010b8:	4b8c      	ldr	r3, [pc, #560]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010c4:	d10b      	bne.n	80010de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c6:	4b89      	ldr	r3, [pc, #548]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d06c      	beq.n	80011ac <HAL_RCC_OscConfig+0x12c>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d168      	bne.n	80011ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e24c      	b.n	8001578 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010e6:	d106      	bne.n	80010f6 <HAL_RCC_OscConfig+0x76>
 80010e8:	4b80      	ldr	r3, [pc, #512]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a7f      	ldr	r2, [pc, #508]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 80010ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010f2:	6013      	str	r3, [r2, #0]
 80010f4:	e02e      	b.n	8001154 <HAL_RCC_OscConfig+0xd4>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d10c      	bne.n	8001118 <HAL_RCC_OscConfig+0x98>
 80010fe:	4b7b      	ldr	r3, [pc, #492]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a7a      	ldr	r2, [pc, #488]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 8001104:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001108:	6013      	str	r3, [r2, #0]
 800110a:	4b78      	ldr	r3, [pc, #480]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a77      	ldr	r2, [pc, #476]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 8001110:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001114:	6013      	str	r3, [r2, #0]
 8001116:	e01d      	b.n	8001154 <HAL_RCC_OscConfig+0xd4>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001120:	d10c      	bne.n	800113c <HAL_RCC_OscConfig+0xbc>
 8001122:	4b72      	ldr	r3, [pc, #456]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a71      	ldr	r2, [pc, #452]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 8001128:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	4b6f      	ldr	r3, [pc, #444]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a6e      	ldr	r2, [pc, #440]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 8001134:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001138:	6013      	str	r3, [r2, #0]
 800113a:	e00b      	b.n	8001154 <HAL_RCC_OscConfig+0xd4>
 800113c:	4b6b      	ldr	r3, [pc, #428]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a6a      	ldr	r2, [pc, #424]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 8001142:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001146:	6013      	str	r3, [r2, #0]
 8001148:	4b68      	ldr	r3, [pc, #416]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a67      	ldr	r2, [pc, #412]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 800114e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001152:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d013      	beq.n	8001184 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115c:	f7ff fbee 	bl	800093c <HAL_GetTick>
 8001160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001162:	e008      	b.n	8001176 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001164:	f7ff fbea 	bl	800093c <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b64      	cmp	r3, #100	@ 0x64
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e200      	b.n	8001578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001176:	4b5d      	ldr	r3, [pc, #372]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d0f0      	beq.n	8001164 <HAL_RCC_OscConfig+0xe4>
 8001182:	e014      	b.n	80011ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001184:	f7ff fbda 	bl	800093c <HAL_GetTick>
 8001188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800118a:	e008      	b.n	800119e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800118c:	f7ff fbd6 	bl	800093c <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b64      	cmp	r3, #100	@ 0x64
 8001198:	d901      	bls.n	800119e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e1ec      	b.n	8001578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800119e:	4b53      	ldr	r3, [pc, #332]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d1f0      	bne.n	800118c <HAL_RCC_OscConfig+0x10c>
 80011aa:	e000      	b.n	80011ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d063      	beq.n	8001282 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011ba:	4b4c      	ldr	r3, [pc, #304]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f003 030c 	and.w	r3, r3, #12
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d00b      	beq.n	80011de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011c6:	4b49      	ldr	r3, [pc, #292]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 030c 	and.w	r3, r3, #12
 80011ce:	2b08      	cmp	r3, #8
 80011d0:	d11c      	bne.n	800120c <HAL_RCC_OscConfig+0x18c>
 80011d2:	4b46      	ldr	r3, [pc, #280]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d116      	bne.n	800120c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011de:	4b43      	ldr	r3, [pc, #268]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d005      	beq.n	80011f6 <HAL_RCC_OscConfig+0x176>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	691b      	ldr	r3, [r3, #16]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d001      	beq.n	80011f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e1c0      	b.n	8001578 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f6:	4b3d      	ldr	r3, [pc, #244]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	4939      	ldr	r1, [pc, #228]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 8001206:	4313      	orrs	r3, r2
 8001208:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800120a:	e03a      	b.n	8001282 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d020      	beq.n	8001256 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001214:	4b36      	ldr	r3, [pc, #216]	@ (80012f0 <HAL_RCC_OscConfig+0x270>)
 8001216:	2201      	movs	r2, #1
 8001218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121a:	f7ff fb8f 	bl	800093c <HAL_GetTick>
 800121e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001220:	e008      	b.n	8001234 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001222:	f7ff fb8b 	bl	800093c <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e1a1      	b.n	8001578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001234:	4b2d      	ldr	r3, [pc, #180]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d0f0      	beq.n	8001222 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001240:	4b2a      	ldr	r3, [pc, #168]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	695b      	ldr	r3, [r3, #20]
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	4927      	ldr	r1, [pc, #156]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 8001250:	4313      	orrs	r3, r2
 8001252:	600b      	str	r3, [r1, #0]
 8001254:	e015      	b.n	8001282 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001256:	4b26      	ldr	r3, [pc, #152]	@ (80012f0 <HAL_RCC_OscConfig+0x270>)
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800125c:	f7ff fb6e 	bl	800093c <HAL_GetTick>
 8001260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001264:	f7ff fb6a 	bl	800093c <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e180      	b.n	8001578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001276:	4b1d      	ldr	r3, [pc, #116]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d1f0      	bne.n	8001264 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0308 	and.w	r3, r3, #8
 800128a:	2b00      	cmp	r3, #0
 800128c:	d03a      	beq.n	8001304 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d019      	beq.n	80012ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001296:	4b17      	ldr	r3, [pc, #92]	@ (80012f4 <HAL_RCC_OscConfig+0x274>)
 8001298:	2201      	movs	r2, #1
 800129a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800129c:	f7ff fb4e 	bl	800093c <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012a4:	f7ff fb4a 	bl	800093c <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e160      	b.n	8001578 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012b6:	4b0d      	ldr	r3, [pc, #52]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 80012b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d0f0      	beq.n	80012a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012c2:	2001      	movs	r0, #1
 80012c4:	f000 face 	bl	8001864 <RCC_Delay>
 80012c8:	e01c      	b.n	8001304 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012ca:	4b0a      	ldr	r3, [pc, #40]	@ (80012f4 <HAL_RCC_OscConfig+0x274>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d0:	f7ff fb34 	bl	800093c <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d6:	e00f      	b.n	80012f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012d8:	f7ff fb30 	bl	800093c <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d908      	bls.n	80012f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e146      	b.n	8001578 <HAL_RCC_OscConfig+0x4f8>
 80012ea:	bf00      	nop
 80012ec:	40021000 	.word	0x40021000
 80012f0:	42420000 	.word	0x42420000
 80012f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012f8:	4b92      	ldr	r3, [pc, #584]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 80012fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d1e9      	bne.n	80012d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0304 	and.w	r3, r3, #4
 800130c:	2b00      	cmp	r3, #0
 800130e:	f000 80a6 	beq.w	800145e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001312:	2300      	movs	r3, #0
 8001314:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001316:	4b8b      	ldr	r3, [pc, #556]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d10d      	bne.n	800133e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001322:	4b88      	ldr	r3, [pc, #544]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	4a87      	ldr	r2, [pc, #540]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 8001328:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800132c:	61d3      	str	r3, [r2, #28]
 800132e:	4b85      	ldr	r3, [pc, #532]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800133a:	2301      	movs	r3, #1
 800133c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800133e:	4b82      	ldr	r3, [pc, #520]	@ (8001548 <HAL_RCC_OscConfig+0x4c8>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001346:	2b00      	cmp	r3, #0
 8001348:	d118      	bne.n	800137c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800134a:	4b7f      	ldr	r3, [pc, #508]	@ (8001548 <HAL_RCC_OscConfig+0x4c8>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a7e      	ldr	r2, [pc, #504]	@ (8001548 <HAL_RCC_OscConfig+0x4c8>)
 8001350:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001354:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001356:	f7ff faf1 	bl	800093c <HAL_GetTick>
 800135a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800135c:	e008      	b.n	8001370 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800135e:	f7ff faed 	bl	800093c <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	2b64      	cmp	r3, #100	@ 0x64
 800136a:	d901      	bls.n	8001370 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e103      	b.n	8001578 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001370:	4b75      	ldr	r3, [pc, #468]	@ (8001548 <HAL_RCC_OscConfig+0x4c8>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001378:	2b00      	cmp	r3, #0
 800137a:	d0f0      	beq.n	800135e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d106      	bne.n	8001392 <HAL_RCC_OscConfig+0x312>
 8001384:	4b6f      	ldr	r3, [pc, #444]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 8001386:	6a1b      	ldr	r3, [r3, #32]
 8001388:	4a6e      	ldr	r2, [pc, #440]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	6213      	str	r3, [r2, #32]
 8001390:	e02d      	b.n	80013ee <HAL_RCC_OscConfig+0x36e>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d10c      	bne.n	80013b4 <HAL_RCC_OscConfig+0x334>
 800139a:	4b6a      	ldr	r3, [pc, #424]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 800139c:	6a1b      	ldr	r3, [r3, #32]
 800139e:	4a69      	ldr	r2, [pc, #420]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 80013a0:	f023 0301 	bic.w	r3, r3, #1
 80013a4:	6213      	str	r3, [r2, #32]
 80013a6:	4b67      	ldr	r3, [pc, #412]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 80013a8:	6a1b      	ldr	r3, [r3, #32]
 80013aa:	4a66      	ldr	r2, [pc, #408]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 80013ac:	f023 0304 	bic.w	r3, r3, #4
 80013b0:	6213      	str	r3, [r2, #32]
 80013b2:	e01c      	b.n	80013ee <HAL_RCC_OscConfig+0x36e>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	2b05      	cmp	r3, #5
 80013ba:	d10c      	bne.n	80013d6 <HAL_RCC_OscConfig+0x356>
 80013bc:	4b61      	ldr	r3, [pc, #388]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 80013be:	6a1b      	ldr	r3, [r3, #32]
 80013c0:	4a60      	ldr	r2, [pc, #384]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 80013c2:	f043 0304 	orr.w	r3, r3, #4
 80013c6:	6213      	str	r3, [r2, #32]
 80013c8:	4b5e      	ldr	r3, [pc, #376]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 80013ca:	6a1b      	ldr	r3, [r3, #32]
 80013cc:	4a5d      	ldr	r2, [pc, #372]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	6213      	str	r3, [r2, #32]
 80013d4:	e00b      	b.n	80013ee <HAL_RCC_OscConfig+0x36e>
 80013d6:	4b5b      	ldr	r3, [pc, #364]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 80013d8:	6a1b      	ldr	r3, [r3, #32]
 80013da:	4a5a      	ldr	r2, [pc, #360]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 80013dc:	f023 0301 	bic.w	r3, r3, #1
 80013e0:	6213      	str	r3, [r2, #32]
 80013e2:	4b58      	ldr	r3, [pc, #352]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 80013e4:	6a1b      	ldr	r3, [r3, #32]
 80013e6:	4a57      	ldr	r2, [pc, #348]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 80013e8:	f023 0304 	bic.w	r3, r3, #4
 80013ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d015      	beq.n	8001422 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f6:	f7ff faa1 	bl	800093c <HAL_GetTick>
 80013fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013fc:	e00a      	b.n	8001414 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013fe:	f7ff fa9d 	bl	800093c <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	f241 3288 	movw	r2, #5000	@ 0x1388
 800140c:	4293      	cmp	r3, r2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e0b1      	b.n	8001578 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001414:	4b4b      	ldr	r3, [pc, #300]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	2b00      	cmp	r3, #0
 800141e:	d0ee      	beq.n	80013fe <HAL_RCC_OscConfig+0x37e>
 8001420:	e014      	b.n	800144c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001422:	f7ff fa8b 	bl	800093c <HAL_GetTick>
 8001426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001428:	e00a      	b.n	8001440 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800142a:	f7ff fa87 	bl	800093c <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001438:	4293      	cmp	r3, r2
 800143a:	d901      	bls.n	8001440 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e09b      	b.n	8001578 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001440:	4b40      	ldr	r3, [pc, #256]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 8001442:	6a1b      	ldr	r3, [r3, #32]
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d1ee      	bne.n	800142a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800144c:	7dfb      	ldrb	r3, [r7, #23]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d105      	bne.n	800145e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001452:	4b3c      	ldr	r3, [pc, #240]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	4a3b      	ldr	r2, [pc, #236]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 8001458:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800145c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	2b00      	cmp	r3, #0
 8001464:	f000 8087 	beq.w	8001576 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001468:	4b36      	ldr	r3, [pc, #216]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f003 030c 	and.w	r3, r3, #12
 8001470:	2b08      	cmp	r3, #8
 8001472:	d061      	beq.n	8001538 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	69db      	ldr	r3, [r3, #28]
 8001478:	2b02      	cmp	r3, #2
 800147a:	d146      	bne.n	800150a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800147c:	4b33      	ldr	r3, [pc, #204]	@ (800154c <HAL_RCC_OscConfig+0x4cc>)
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001482:	f7ff fa5b 	bl	800093c <HAL_GetTick>
 8001486:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001488:	e008      	b.n	800149c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800148a:	f7ff fa57 	bl	800093c <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e06d      	b.n	8001578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800149c:	4b29      	ldr	r3, [pc, #164]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1f0      	bne.n	800148a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a1b      	ldr	r3, [r3, #32]
 80014ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014b0:	d108      	bne.n	80014c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014b2:	4b24      	ldr	r3, [pc, #144]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	4921      	ldr	r1, [pc, #132]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 80014c0:	4313      	orrs	r3, r2
 80014c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a19      	ldr	r1, [r3, #32]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d4:	430b      	orrs	r3, r1
 80014d6:	491b      	ldr	r1, [pc, #108]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 80014d8:	4313      	orrs	r3, r2
 80014da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014dc:	4b1b      	ldr	r3, [pc, #108]	@ (800154c <HAL_RCC_OscConfig+0x4cc>)
 80014de:	2201      	movs	r2, #1
 80014e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e2:	f7ff fa2b 	bl	800093c <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ea:	f7ff fa27 	bl	800093c <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e03d      	b.n	8001578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014fc:	4b11      	ldr	r3, [pc, #68]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d0f0      	beq.n	80014ea <HAL_RCC_OscConfig+0x46a>
 8001508:	e035      	b.n	8001576 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800150a:	4b10      	ldr	r3, [pc, #64]	@ (800154c <HAL_RCC_OscConfig+0x4cc>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001510:	f7ff fa14 	bl	800093c <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001518:	f7ff fa10 	bl	800093c <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e026      	b.n	8001578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800152a:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f0      	bne.n	8001518 <HAL_RCC_OscConfig+0x498>
 8001536:	e01e      	b.n	8001576 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	69db      	ldr	r3, [r3, #28]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d107      	bne.n	8001550 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e019      	b.n	8001578 <HAL_RCC_OscConfig+0x4f8>
 8001544:	40021000 	.word	0x40021000
 8001548:	40007000 	.word	0x40007000
 800154c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001550:	4b0b      	ldr	r3, [pc, #44]	@ (8001580 <HAL_RCC_OscConfig+0x500>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a1b      	ldr	r3, [r3, #32]
 8001560:	429a      	cmp	r2, r3
 8001562:	d106      	bne.n	8001572 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800156e:	429a      	cmp	r2, r3
 8001570:	d001      	beq.n	8001576 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e000      	b.n	8001578 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	3718      	adds	r7, #24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40021000 	.word	0x40021000

08001584 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e0d0      	b.n	800173a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001598:	4b6a      	ldr	r3, [pc, #424]	@ (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d910      	bls.n	80015c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a6:	4b67      	ldr	r3, [pc, #412]	@ (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f023 0207 	bic.w	r2, r3, #7
 80015ae:	4965      	ldr	r1, [pc, #404]	@ (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b6:	4b63      	ldr	r3, [pc, #396]	@ (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d001      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e0b8      	b.n	800173a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d020      	beq.n	8001616 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d005      	beq.n	80015ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015e0:	4b59      	ldr	r3, [pc, #356]	@ (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	4a58      	ldr	r2, [pc, #352]	@ (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 80015e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80015ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0308 	and.w	r3, r3, #8
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d005      	beq.n	8001604 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015f8:	4b53      	ldr	r3, [pc, #332]	@ (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	4a52      	ldr	r2, [pc, #328]	@ (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 80015fe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001602:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001604:	4b50      	ldr	r3, [pc, #320]	@ (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	494d      	ldr	r1, [pc, #308]	@ (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001612:	4313      	orrs	r3, r2
 8001614:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	2b00      	cmp	r3, #0
 8001620:	d040      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d107      	bne.n	800163a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162a:	4b47      	ldr	r3, [pc, #284]	@ (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d115      	bne.n	8001662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e07f      	b.n	800173a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b02      	cmp	r3, #2
 8001640:	d107      	bne.n	8001652 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001642:	4b41      	ldr	r3, [pc, #260]	@ (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d109      	bne.n	8001662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e073      	b.n	800173a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001652:	4b3d      	ldr	r3, [pc, #244]	@ (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d101      	bne.n	8001662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e06b      	b.n	800173a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001662:	4b39      	ldr	r3, [pc, #228]	@ (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f023 0203 	bic.w	r2, r3, #3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	4936      	ldr	r1, [pc, #216]	@ (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001670:	4313      	orrs	r3, r2
 8001672:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001674:	f7ff f962 	bl	800093c <HAL_GetTick>
 8001678:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800167a:	e00a      	b.n	8001692 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800167c:	f7ff f95e 	bl	800093c <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	f241 3288 	movw	r2, #5000	@ 0x1388
 800168a:	4293      	cmp	r3, r2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e053      	b.n	800173a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001692:	4b2d      	ldr	r3, [pc, #180]	@ (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f003 020c 	and.w	r2, r3, #12
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d1eb      	bne.n	800167c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016a4:	4b27      	ldr	r3, [pc, #156]	@ (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0307 	and.w	r3, r3, #7
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d210      	bcs.n	80016d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b2:	4b24      	ldr	r3, [pc, #144]	@ (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f023 0207 	bic.w	r2, r3, #7
 80016ba:	4922      	ldr	r1, [pc, #136]	@ (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	4313      	orrs	r3, r2
 80016c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016c2:	4b20      	ldr	r3, [pc, #128]	@ (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d001      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e032      	b.n	800173a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d008      	beq.n	80016f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016e0:	4b19      	ldr	r3, [pc, #100]	@ (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	4916      	ldr	r1, [pc, #88]	@ (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d009      	beq.n	8001712 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016fe:	4b12      	ldr	r3, [pc, #72]	@ (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	490e      	ldr	r1, [pc, #56]	@ (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 800170e:	4313      	orrs	r3, r2
 8001710:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001712:	f000 f821 	bl	8001758 <HAL_RCC_GetSysClockFreq>
 8001716:	4602      	mov	r2, r0
 8001718:	4b0b      	ldr	r3, [pc, #44]	@ (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	091b      	lsrs	r3, r3, #4
 800171e:	f003 030f 	and.w	r3, r3, #15
 8001722:	490a      	ldr	r1, [pc, #40]	@ (800174c <HAL_RCC_ClockConfig+0x1c8>)
 8001724:	5ccb      	ldrb	r3, [r1, r3]
 8001726:	fa22 f303 	lsr.w	r3, r2, r3
 800172a:	4a09      	ldr	r2, [pc, #36]	@ (8001750 <HAL_RCC_ClockConfig+0x1cc>)
 800172c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800172e:	4b09      	ldr	r3, [pc, #36]	@ (8001754 <HAL_RCC_ClockConfig+0x1d0>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff f8c0 	bl	80008b8 <HAL_InitTick>

  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40022000 	.word	0x40022000
 8001748:	40021000 	.word	0x40021000
 800174c:	080035dc 	.word	0x080035dc
 8001750:	20000000 	.word	0x20000000
 8001754:	20000004 	.word	0x20000004

08001758 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001758:	b480      	push	{r7}
 800175a:	b087      	sub	sp, #28
 800175c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	2300      	movs	r3, #0
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	2300      	movs	r3, #0
 800176c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800176e:	2300      	movs	r3, #0
 8001770:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001772:	4b1e      	ldr	r3, [pc, #120]	@ (80017ec <HAL_RCC_GetSysClockFreq+0x94>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f003 030c 	and.w	r3, r3, #12
 800177e:	2b04      	cmp	r3, #4
 8001780:	d002      	beq.n	8001788 <HAL_RCC_GetSysClockFreq+0x30>
 8001782:	2b08      	cmp	r3, #8
 8001784:	d003      	beq.n	800178e <HAL_RCC_GetSysClockFreq+0x36>
 8001786:	e027      	b.n	80017d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001788:	4b19      	ldr	r3, [pc, #100]	@ (80017f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800178a:	613b      	str	r3, [r7, #16]
      break;
 800178c:	e027      	b.n	80017de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	0c9b      	lsrs	r3, r3, #18
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	4a17      	ldr	r2, [pc, #92]	@ (80017f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001798:	5cd3      	ldrb	r3, [r2, r3]
 800179a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d010      	beq.n	80017c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017a6:	4b11      	ldr	r3, [pc, #68]	@ (80017ec <HAL_RCC_GetSysClockFreq+0x94>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	0c5b      	lsrs	r3, r3, #17
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	4a11      	ldr	r2, [pc, #68]	@ (80017f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80017b2:	5cd3      	ldrb	r3, [r2, r3]
 80017b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a0d      	ldr	r2, [pc, #52]	@ (80017f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80017ba:	fb03 f202 	mul.w	r2, r3, r2
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	e004      	b.n	80017d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4a0c      	ldr	r2, [pc, #48]	@ (80017fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80017cc:	fb02 f303 	mul.w	r3, r2, r3
 80017d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	613b      	str	r3, [r7, #16]
      break;
 80017d6:	e002      	b.n	80017de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017d8:	4b05      	ldr	r3, [pc, #20]	@ (80017f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80017da:	613b      	str	r3, [r7, #16]
      break;
 80017dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017de:	693b      	ldr	r3, [r7, #16]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	371c      	adds	r7, #28
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	40021000 	.word	0x40021000
 80017f0:	007a1200 	.word	0x007a1200
 80017f4:	080035f4 	.word	0x080035f4
 80017f8:	08003604 	.word	0x08003604
 80017fc:	003d0900 	.word	0x003d0900

08001800 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001804:	4b02      	ldr	r3, [pc, #8]	@ (8001810 <HAL_RCC_GetHCLKFreq+0x10>)
 8001806:	681b      	ldr	r3, [r3, #0]
}
 8001808:	4618      	mov	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr
 8001810:	20000000 	.word	0x20000000

08001814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001818:	f7ff fff2 	bl	8001800 <HAL_RCC_GetHCLKFreq>
 800181c:	4602      	mov	r2, r0
 800181e:	4b05      	ldr	r3, [pc, #20]	@ (8001834 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	0a1b      	lsrs	r3, r3, #8
 8001824:	f003 0307 	and.w	r3, r3, #7
 8001828:	4903      	ldr	r1, [pc, #12]	@ (8001838 <HAL_RCC_GetPCLK1Freq+0x24>)
 800182a:	5ccb      	ldrb	r3, [r1, r3]
 800182c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001830:	4618      	mov	r0, r3
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40021000 	.word	0x40021000
 8001838:	080035ec 	.word	0x080035ec

0800183c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001840:	f7ff ffde 	bl	8001800 <HAL_RCC_GetHCLKFreq>
 8001844:	4602      	mov	r2, r0
 8001846:	4b05      	ldr	r3, [pc, #20]	@ (800185c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	0adb      	lsrs	r3, r3, #11
 800184c:	f003 0307 	and.w	r3, r3, #7
 8001850:	4903      	ldr	r1, [pc, #12]	@ (8001860 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001852:	5ccb      	ldrb	r3, [r1, r3]
 8001854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001858:	4618      	mov	r0, r3
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40021000 	.word	0x40021000
 8001860:	080035ec 	.word	0x080035ec

08001864 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800186c:	4b0a      	ldr	r3, [pc, #40]	@ (8001898 <RCC_Delay+0x34>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a0a      	ldr	r2, [pc, #40]	@ (800189c <RCC_Delay+0x38>)
 8001872:	fba2 2303 	umull	r2, r3, r2, r3
 8001876:	0a5b      	lsrs	r3, r3, #9
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	fb02 f303 	mul.w	r3, r2, r3
 800187e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001880:	bf00      	nop
  }
  while (Delay --);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	1e5a      	subs	r2, r3, #1
 8001886:	60fa      	str	r2, [r7, #12]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1f9      	bne.n	8001880 <RCC_Delay+0x1c>
}
 800188c:	bf00      	nop
 800188e:	bf00      	nop
 8001890:	3714      	adds	r7, #20
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr
 8001898:	20000000 	.word	0x20000000
 800189c:	10624dd3 	.word	0x10624dd3

080018a0 <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	460b      	mov	r3, r1
 80018aa:	607a      	str	r2, [r7, #4]
 80018ac:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e062      	b.n	800197e <HAL_MultiProcessor_Init+0xde>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d106      	bne.n	80018d2 <HAL_MultiProcessor_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80018cc:	68f8      	ldr	r0, [r7, #12]
 80018ce:	f7fe fe87 	bl	80005e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2224      	movs	r2, #36	@ 0x24
 80018d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	68da      	ldr	r2, [r3, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80018e8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80018ea:	68f8      	ldr	r0, [r7, #12]
 80018ec:	f000 fdd8 	bl	80024a0 <UART_SetConfig>

  /* In Multi-Processor mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	691a      	ldr	r2, [r3, #16]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80018fe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	695a      	ldr	r2, [r3, #20]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800190e:	615a      	str	r2, [r3, #20]

  /* Set the USART address node */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	691a      	ldr	r2, [r3, #16]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f022 020f 	bic.w	r2, r2, #15
 800191e:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, Address);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6919      	ldr	r1, [r3, #16]
 8001926:	7afa      	ldrb	r2, [r7, #11]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	430a      	orrs	r2, r1
 800192e:	611a      	str	r2, [r3, #16]

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	68da      	ldr	r2, [r3, #12]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800193e:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	68d9      	ldr	r1, [r3, #12]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	430a      	orrs	r2, r1
 800194e:	60da      	str	r2, [r3, #12]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	68da      	ldr	r2, [r3, #12]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800195e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2200      	movs	r2, #0
 8001964:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2220      	movs	r2, #32
 800196a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2220      	movs	r2, #32
 8001972:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2200      	movs	r2, #0
 800197a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b08a      	sub	sp, #40	@ 0x28
 800198a:	af02      	add	r7, sp, #8
 800198c:	60f8      	str	r0, [r7, #12]
 800198e:	60b9      	str	r1, [r7, #8]
 8001990:	603b      	str	r3, [r7, #0]
 8001992:	4613      	mov	r3, r2
 8001994:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b20      	cmp	r3, #32
 80019a4:	d175      	bne.n	8001a92 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d002      	beq.n	80019b2 <HAL_UART_Transmit+0x2c>
 80019ac:	88fb      	ldrh	r3, [r7, #6]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e06e      	b.n	8001a94 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2200      	movs	r2, #0
 80019ba:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2221      	movs	r2, #33	@ 0x21
 80019c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80019c4:	f7fe ffba 	bl	800093c <HAL_GetTick>
 80019c8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	88fa      	ldrh	r2, [r7, #6]
 80019ce:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	88fa      	ldrh	r2, [r7, #6]
 80019d4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80019de:	d108      	bne.n	80019f2 <HAL_UART_Transmit+0x6c>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d104      	bne.n	80019f2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	61bb      	str	r3, [r7, #24]
 80019f0:	e003      	b.n	80019fa <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80019fa:	e02e      	b.n	8001a5a <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	2200      	movs	r2, #0
 8001a04:	2180      	movs	r1, #128	@ 0x80
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f000 fb1d 	bl	8002046 <UART_WaitOnFlagUntilTimeout>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d005      	beq.n	8001a1e <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2220      	movs	r2, #32
 8001a16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e03a      	b.n	8001a94 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d10b      	bne.n	8001a3c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	881b      	ldrh	r3, [r3, #0]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a32:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	3302      	adds	r3, #2
 8001a38:	61bb      	str	r3, [r7, #24]
 8001a3a:	e007      	b.n	8001a4c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	781a      	ldrb	r2, [r3, #0]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	3b01      	subs	r3, #1
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1cb      	bne.n	80019fc <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2140      	movs	r1, #64	@ 0x40
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	f000 fae9 	bl	8002046 <UART_WaitOnFlagUntilTimeout>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d005      	beq.n	8001a86 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2220      	movs	r2, #32
 8001a7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e006      	b.n	8001a94 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2220      	movs	r2, #32
 8001a8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	e000      	b.n	8001a94 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001a92:	2302      	movs	r3, #2
  }
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3720      	adds	r7, #32
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b20      	cmp	r3, #32
 8001ab4:	d112      	bne.n	8001adc <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d002      	beq.n	8001ac2 <HAL_UART_Receive_IT+0x26>
 8001abc:	88fb      	ldrh	r3, [r7, #6]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e00b      	b.n	8001ade <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001acc:	88fb      	ldrh	r3, [r7, #6]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	68b9      	ldr	r1, [r7, #8]
 8001ad2:	68f8      	ldr	r0, [r7, #12]
 8001ad4:	f000 fb10 	bl	80020f8 <UART_Start_Receive_IT>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	e000      	b.n	8001ade <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001adc:	2302      	movs	r3, #2
  }
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b0ba      	sub	sp, #232	@ 0xe8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001b1e:	f003 030f 	and.w	r3, r3, #15
 8001b22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001b26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10f      	bne.n	8001b4e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001b32:	f003 0320 	and.w	r3, r3, #32
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d009      	beq.n	8001b4e <HAL_UART_IRQHandler+0x66>
 8001b3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001b3e:	f003 0320 	and.w	r3, r3, #32
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 fbec 	bl	8002324 <UART_Receive_IT>
      return;
 8001b4c:	e25b      	b.n	8002006 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001b4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 80de 	beq.w	8001d14 <HAL_UART_IRQHandler+0x22c>
 8001b58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d106      	bne.n	8001b72 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001b68:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f000 80d1 	beq.w	8001d14 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00b      	beq.n	8001b96 <HAL_UART_IRQHandler+0xae>
 8001b7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001b82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d005      	beq.n	8001b96 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8e:	f043 0201 	orr.w	r2, r3, #1
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001b9a:	f003 0304 	and.w	r3, r3, #4
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00b      	beq.n	8001bba <HAL_UART_IRQHandler+0xd2>
 8001ba2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d005      	beq.n	8001bba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb2:	f043 0202 	orr.w	r2, r3, #2
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d00b      	beq.n	8001bde <HAL_UART_IRQHandler+0xf6>
 8001bc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d005      	beq.n	8001bde <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd6:	f043 0204 	orr.w	r2, r3, #4
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001be2:	f003 0308 	and.w	r3, r3, #8
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d011      	beq.n	8001c0e <HAL_UART_IRQHandler+0x126>
 8001bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001bee:	f003 0320 	and.w	r3, r3, #32
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d105      	bne.n	8001c02 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001bf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d005      	beq.n	8001c0e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c06:	f043 0208 	orr.w	r2, r3, #8
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f000 81f2 	beq.w	8001ffc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c1c:	f003 0320 	and.w	r3, r3, #32
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d008      	beq.n	8001c36 <HAL_UART_IRQHandler+0x14e>
 8001c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001c28:	f003 0320 	and.w	r3, r3, #32
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d002      	beq.n	8001c36 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 fb77 	bl	8002324 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	695b      	ldr	r3, [r3, #20]
 8001c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	bf14      	ite	ne
 8001c44:	2301      	movne	r3, #1
 8001c46:	2300      	moveq	r3, #0
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c52:	f003 0308 	and.w	r3, r3, #8
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d103      	bne.n	8001c62 <HAL_UART_IRQHandler+0x17a>
 8001c5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d04f      	beq.n	8001d02 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 fa81 	bl	800216a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d041      	beq.n	8001cfa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	3314      	adds	r3, #20
 8001c7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001c84:	e853 3f00 	ldrex	r3, [r3]
 8001c88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001c8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001c90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001c94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	3314      	adds	r3, #20
 8001c9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001ca2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001ca6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001caa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001cae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001cb2:	e841 2300 	strex	r3, r2, [r1]
 8001cb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001cba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1d9      	bne.n	8001c76 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d013      	beq.n	8001cf2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cce:	4a7e      	ldr	r2, [pc, #504]	@ (8001ec8 <HAL_UART_IRQHandler+0x3e0>)
 8001cd0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe ffa6 	bl	8000c28 <HAL_DMA_Abort_IT>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d016      	beq.n	8001d10 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001cec:	4610      	mov	r0, r2
 8001cee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cf0:	e00e      	b.n	8001d10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f993 	bl	800201e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cf8:	e00a      	b.n	8001d10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f98f 	bl	800201e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d00:	e006      	b.n	8001d10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f98b 	bl	800201e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8001d0e:	e175      	b.n	8001ffc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d10:	bf00      	nop
    return;
 8001d12:	e173      	b.n	8001ffc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	f040 814f 	bne.w	8001fbc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d22:	f003 0310 	and.w	r3, r3, #16
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 8148 	beq.w	8001fbc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001d2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d30:	f003 0310 	and.w	r3, r3, #16
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f000 8141 	beq.w	8001fbc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	60bb      	str	r3, [r7, #8]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	60bb      	str	r3, [r7, #8]
 8001d4e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 80b6 	beq.w	8001ecc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001d6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 8145 	beq.w	8002000 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001d7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	f080 813e 	bcs.w	8002000 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001d8a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	2b20      	cmp	r3, #32
 8001d94:	f000 8088 	beq.w	8001ea8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	330c      	adds	r3, #12
 8001d9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001da2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001da6:	e853 3f00 	ldrex	r3, [r3]
 8001daa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8001dae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001db2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001db6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	330c      	adds	r3, #12
 8001dc0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001dc4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001dc8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dcc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001dd0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001dd4:	e841 2300 	strex	r3, r2, [r1]
 8001dd8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8001ddc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1d9      	bne.n	8001d98 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	3314      	adds	r3, #20
 8001dea:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001dee:	e853 3f00 	ldrex	r3, [r3]
 8001df2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8001df4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001df6:	f023 0301 	bic.w	r3, r3, #1
 8001dfa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	3314      	adds	r3, #20
 8001e04:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001e08:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8001e0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e0e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001e10:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001e14:	e841 2300 	strex	r3, r2, [r1]
 8001e18:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8001e1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1e1      	bne.n	8001de4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	3314      	adds	r3, #20
 8001e26:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e28:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e2a:	e853 3f00 	ldrex	r3, [r3]
 8001e2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8001e30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001e36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	3314      	adds	r3, #20
 8001e40:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001e44:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001e46:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e48:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001e4a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001e4c:	e841 2300 	strex	r3, r2, [r1]
 8001e50:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8001e52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1e3      	bne.n	8001e20 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2220      	movs	r2, #32
 8001e5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	330c      	adds	r3, #12
 8001e6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e70:	e853 3f00 	ldrex	r3, [r3]
 8001e74:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8001e76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e78:	f023 0310 	bic.w	r3, r3, #16
 8001e7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	330c      	adds	r3, #12
 8001e86:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001e8a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001e8c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e8e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001e90:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001e92:	e841 2300 	strex	r3, r2, [r1]
 8001e96:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8001e98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1e3      	bne.n	8001e66 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7fe fe85 	bl	8000bb2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2202      	movs	r2, #2
 8001eac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f8b6 	bl	8002030 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001ec4:	e09c      	b.n	8002000 <HAL_UART_IRQHandler+0x518>
 8001ec6:	bf00      	nop
 8001ec8:	0800222f 	.word	0x0800222f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f000 808e 	beq.w	8002004 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8001ee8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f000 8089 	beq.w	8002004 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	330c      	adds	r3, #12
 8001ef8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001efc:	e853 3f00 	ldrex	r3, [r3]
 8001f00:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8001f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001f08:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	330c      	adds	r3, #12
 8001f12:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8001f16:	647a      	str	r2, [r7, #68]	@ 0x44
 8001f18:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f1a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001f1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001f1e:	e841 2300 	strex	r3, r2, [r1]
 8001f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8001f24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1e3      	bne.n	8001ef2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	3314      	adds	r3, #20
 8001f30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f34:	e853 3f00 	ldrex	r3, [r3]
 8001f38:	623b      	str	r3, [r7, #32]
   return(result);
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	f023 0301 	bic.w	r3, r3, #1
 8001f40:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	3314      	adds	r3, #20
 8001f4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001f4e:	633a      	str	r2, [r7, #48]	@ 0x30
 8001f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001f54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f56:	e841 2300 	strex	r3, r2, [r1]
 8001f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8001f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1e3      	bne.n	8001f2a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2220      	movs	r2, #32
 8001f66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	330c      	adds	r3, #12
 8001f76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	e853 3f00 	ldrex	r3, [r3]
 8001f7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f023 0310 	bic.w	r3, r3, #16
 8001f86:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	330c      	adds	r3, #12
 8001f90:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8001f94:	61fa      	str	r2, [r7, #28]
 8001f96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f98:	69b9      	ldr	r1, [r7, #24]
 8001f9a:	69fa      	ldr	r2, [r7, #28]
 8001f9c:	e841 2300 	strex	r3, r2, [r1]
 8001fa0:	617b      	str	r3, [r7, #20]
   return(result);
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d1e3      	bne.n	8001f70 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2202      	movs	r2, #2
 8001fac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001fae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 f83b 	bl	8002030 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001fba:	e023      	b.n	8002004 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001fbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001fc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d009      	beq.n	8001fdc <HAL_UART_IRQHandler+0x4f4>
 8001fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001fcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 f93e 	bl	8002256 <UART_Transmit_IT>
    return;
 8001fda:	e014      	b.n	8002006 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00e      	beq.n	8002006 <HAL_UART_IRQHandler+0x51e>
 8001fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001fec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d008      	beq.n	8002006 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 f97d 	bl	80022f4 <UART_EndTransmit_IT>
    return;
 8001ffa:	e004      	b.n	8002006 <HAL_UART_IRQHandler+0x51e>
    return;
 8001ffc:	bf00      	nop
 8001ffe:	e002      	b.n	8002006 <HAL_UART_IRQHandler+0x51e>
      return;
 8002000:	bf00      	nop
 8002002:	e000      	b.n	8002006 <HAL_UART_IRQHandler+0x51e>
      return;
 8002004:	bf00      	nop
  }
}
 8002006:	37e8      	adds	r7, #232	@ 0xe8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr

0800201e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr

08002030 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	460b      	mov	r3, r1
 800203a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	bc80      	pop	{r7}
 8002044:	4770      	bx	lr

08002046 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b086      	sub	sp, #24
 800204a:	af00      	add	r7, sp, #0
 800204c:	60f8      	str	r0, [r7, #12]
 800204e:	60b9      	str	r1, [r7, #8]
 8002050:	603b      	str	r3, [r7, #0]
 8002052:	4613      	mov	r3, r2
 8002054:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002056:	e03b      	b.n	80020d0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002058:	6a3b      	ldr	r3, [r7, #32]
 800205a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800205e:	d037      	beq.n	80020d0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002060:	f7fe fc6c 	bl	800093c <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	6a3a      	ldr	r2, [r7, #32]
 800206c:	429a      	cmp	r2, r3
 800206e:	d302      	bcc.n	8002076 <UART_WaitOnFlagUntilTimeout+0x30>
 8002070:	6a3b      	ldr	r3, [r7, #32]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e03a      	b.n	80020f0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b00      	cmp	r3, #0
 8002086:	d023      	beq.n	80020d0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	2b80      	cmp	r3, #128	@ 0x80
 800208c:	d020      	beq.n	80020d0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	2b40      	cmp	r3, #64	@ 0x40
 8002092:	d01d      	beq.n	80020d0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b08      	cmp	r3, #8
 80020a0:	d116      	bne.n	80020d0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	617b      	str	r3, [r7, #20]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	617b      	str	r3, [r7, #20]
 80020b6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f000 f856 	bl	800216a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2208      	movs	r2, #8
 80020c2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e00f      	b.n	80020f0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	4013      	ands	r3, r2
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	429a      	cmp	r2, r3
 80020de:	bf0c      	ite	eq
 80020e0:	2301      	moveq	r3, #1
 80020e2:	2300      	movne	r3, #0
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	461a      	mov	r2, r3
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d0b4      	beq.n	8002058 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	4613      	mov	r3, r2
 8002104:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	68ba      	ldr	r2, [r7, #8]
 800210a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	88fa      	ldrh	r2, [r7, #6]
 8002110:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	88fa      	ldrh	r2, [r7, #6]
 8002116:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2222      	movs	r2, #34	@ 0x22
 8002122:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d007      	beq.n	800213e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68da      	ldr	r2, [r3, #12]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800213c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	695a      	ldr	r2, [r3, #20]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f042 0201 	orr.w	r2, r2, #1
 800214c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68da      	ldr	r2, [r3, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f042 0220 	orr.w	r2, r2, #32
 800215c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr

0800216a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800216a:	b480      	push	{r7}
 800216c:	b095      	sub	sp, #84	@ 0x54
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	330c      	adds	r3, #12
 8002178:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800217a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800217c:	e853 3f00 	ldrex	r3, [r3]
 8002180:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002184:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002188:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	330c      	adds	r3, #12
 8002190:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002192:	643a      	str	r2, [r7, #64]	@ 0x40
 8002194:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002196:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002198:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800219a:	e841 2300 	strex	r3, r2, [r1]
 800219e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80021a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1e5      	bne.n	8002172 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	3314      	adds	r3, #20
 80021ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021ae:	6a3b      	ldr	r3, [r7, #32]
 80021b0:	e853 3f00 	ldrex	r3, [r3]
 80021b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	f023 0301 	bic.w	r3, r3, #1
 80021bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	3314      	adds	r3, #20
 80021c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80021c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80021c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80021cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021ce:	e841 2300 	strex	r3, r2, [r1]
 80021d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80021d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1e5      	bne.n	80021a6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d119      	bne.n	8002216 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	330c      	adds	r3, #12
 80021e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	e853 3f00 	ldrex	r3, [r3]
 80021f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	f023 0310 	bic.w	r3, r3, #16
 80021f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	330c      	adds	r3, #12
 8002200:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002202:	61ba      	str	r2, [r7, #24]
 8002204:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002206:	6979      	ldr	r1, [r7, #20]
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	e841 2300 	strex	r3, r2, [r1]
 800220e:	613b      	str	r3, [r7, #16]
   return(result);
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1e5      	bne.n	80021e2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2220      	movs	r2, #32
 800221a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002224:	bf00      	nop
 8002226:	3754      	adds	r7, #84	@ 0x54
 8002228:	46bd      	mov	sp, r7
 800222a:	bc80      	pop	{r7}
 800222c:	4770      	bx	lr

0800222e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b084      	sub	sp, #16
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800223a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f7ff fee8 	bl	800201e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800224e:	bf00      	nop
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002256:	b480      	push	{r7}
 8002258:	b085      	sub	sp, #20
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b21      	cmp	r3, #33	@ 0x21
 8002268:	d13e      	bne.n	80022e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002272:	d114      	bne.n	800229e <UART_Transmit_IT+0x48>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d110      	bne.n	800229e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	461a      	mov	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002290:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	1c9a      	adds	r2, r3, #2
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	621a      	str	r2, [r3, #32]
 800229c:	e008      	b.n	80022b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	1c59      	adds	r1, r3, #1
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	6211      	str	r1, [r2, #32]
 80022a8:	781a      	ldrb	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	3b01      	subs	r3, #1
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	4619      	mov	r1, r3
 80022be:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10f      	bne.n	80022e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68da      	ldr	r2, [r3, #12]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80022e4:	2300      	movs	r3, #0
 80022e6:	e000      	b.n	80022ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80022e8:	2302      	movs	r3, #2
  }
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr

080022f4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68da      	ldr	r2, [r3, #12]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800230a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2220      	movs	r2, #32
 8002310:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f7ff fe79 	bl	800200c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08c      	sub	sp, #48	@ 0x30
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b22      	cmp	r3, #34	@ 0x22
 8002336:	f040 80ae 	bne.w	8002496 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002342:	d117      	bne.n	8002374 <UART_Receive_IT+0x50>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d113      	bne.n	8002374 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800234c:	2300      	movs	r3, #0
 800234e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002354:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	b29b      	uxth	r3, r3
 800235e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002362:	b29a      	uxth	r2, r3
 8002364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002366:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800236c:	1c9a      	adds	r2, r3, #2
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	629a      	str	r2, [r3, #40]	@ 0x28
 8002372:	e026      	b.n	80023c2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002378:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800237a:	2300      	movs	r3, #0
 800237c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002386:	d007      	beq.n	8002398 <UART_Receive_IT+0x74>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d10a      	bne.n	80023a6 <UART_Receive_IT+0x82>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d106      	bne.n	80023a6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023a2:	701a      	strb	r2, [r3, #0]
 80023a4:	e008      	b.n	80023b8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023b6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023bc:	1c5a      	adds	r2, r3, #1
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	3b01      	subs	r3, #1
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	4619      	mov	r1, r3
 80023d0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d15d      	bne.n	8002492 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 0220 	bic.w	r2, r2, #32
 80023e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68da      	ldr	r2, [r3, #12]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	695a      	ldr	r2, [r3, #20]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f022 0201 	bic.w	r2, r2, #1
 8002404:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2220      	movs	r2, #32
 800240a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002418:	2b01      	cmp	r3, #1
 800241a:	d135      	bne.n	8002488 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	330c      	adds	r3, #12
 8002428:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	e853 3f00 	ldrex	r3, [r3]
 8002430:	613b      	str	r3, [r7, #16]
   return(result);
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	f023 0310 	bic.w	r3, r3, #16
 8002438:	627b      	str	r3, [r7, #36]	@ 0x24
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	330c      	adds	r3, #12
 8002440:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002442:	623a      	str	r2, [r7, #32]
 8002444:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002446:	69f9      	ldr	r1, [r7, #28]
 8002448:	6a3a      	ldr	r2, [r7, #32]
 800244a:	e841 2300 	strex	r3, r2, [r1]
 800244e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1e5      	bne.n	8002422 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0310 	and.w	r3, r3, #16
 8002460:	2b10      	cmp	r3, #16
 8002462:	d10a      	bne.n	800247a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002464:	2300      	movs	r3, #0
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800247e:	4619      	mov	r1, r3
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7ff fdd5 	bl	8002030 <HAL_UARTEx_RxEventCallback>
 8002486:	e002      	b.n	800248e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f7fd ffc5 	bl	8000418 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800248e:	2300      	movs	r3, #0
 8002490:	e002      	b.n	8002498 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002492:	2300      	movs	r3, #0
 8002494:	e000      	b.n	8002498 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002496:	2302      	movs	r3, #2
  }
}
 8002498:	4618      	mov	r0, r3
 800249a:	3730      	adds	r7, #48	@ 0x30
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	430a      	orrs	r2, r1
 80024bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	431a      	orrs	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80024da:	f023 030c 	bic.w	r3, r3, #12
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	6812      	ldr	r2, [r2, #0]
 80024e2:	68b9      	ldr	r1, [r7, #8]
 80024e4:	430b      	orrs	r3, r1
 80024e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	699a      	ldr	r2, [r3, #24]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	430a      	orrs	r2, r1
 80024fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a2c      	ldr	r2, [pc, #176]	@ (80025b4 <UART_SetConfig+0x114>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d103      	bne.n	8002510 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002508:	f7ff f998 	bl	800183c <HAL_RCC_GetPCLK2Freq>
 800250c:	60f8      	str	r0, [r7, #12]
 800250e:	e002      	b.n	8002516 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002510:	f7ff f980 	bl	8001814 <HAL_RCC_GetPCLK1Freq>
 8002514:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	4613      	mov	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	009a      	lsls	r2, r3, #2
 8002520:	441a      	add	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	fbb2 f3f3 	udiv	r3, r2, r3
 800252c:	4a22      	ldr	r2, [pc, #136]	@ (80025b8 <UART_SetConfig+0x118>)
 800252e:	fba2 2303 	umull	r2, r3, r2, r3
 8002532:	095b      	lsrs	r3, r3, #5
 8002534:	0119      	lsls	r1, r3, #4
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	4613      	mov	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4413      	add	r3, r2
 800253e:	009a      	lsls	r2, r3, #2
 8002540:	441a      	add	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	fbb2 f2f3 	udiv	r2, r2, r3
 800254c:	4b1a      	ldr	r3, [pc, #104]	@ (80025b8 <UART_SetConfig+0x118>)
 800254e:	fba3 0302 	umull	r0, r3, r3, r2
 8002552:	095b      	lsrs	r3, r3, #5
 8002554:	2064      	movs	r0, #100	@ 0x64
 8002556:	fb00 f303 	mul.w	r3, r0, r3
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	011b      	lsls	r3, r3, #4
 800255e:	3332      	adds	r3, #50	@ 0x32
 8002560:	4a15      	ldr	r2, [pc, #84]	@ (80025b8 <UART_SetConfig+0x118>)
 8002562:	fba2 2303 	umull	r2, r3, r2, r3
 8002566:	095b      	lsrs	r3, r3, #5
 8002568:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800256c:	4419      	add	r1, r3
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	4613      	mov	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	009a      	lsls	r2, r3, #2
 8002578:	441a      	add	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	fbb2 f2f3 	udiv	r2, r2, r3
 8002584:	4b0c      	ldr	r3, [pc, #48]	@ (80025b8 <UART_SetConfig+0x118>)
 8002586:	fba3 0302 	umull	r0, r3, r3, r2
 800258a:	095b      	lsrs	r3, r3, #5
 800258c:	2064      	movs	r0, #100	@ 0x64
 800258e:	fb00 f303 	mul.w	r3, r0, r3
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	011b      	lsls	r3, r3, #4
 8002596:	3332      	adds	r3, #50	@ 0x32
 8002598:	4a07      	ldr	r2, [pc, #28]	@ (80025b8 <UART_SetConfig+0x118>)
 800259a:	fba2 2303 	umull	r2, r3, r2, r3
 800259e:	095b      	lsrs	r3, r3, #5
 80025a0:	f003 020f 	and.w	r2, r3, #15
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	440a      	add	r2, r1
 80025aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80025ac:	bf00      	nop
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40013800 	.word	0x40013800
 80025b8:	51eb851f 	.word	0x51eb851f

080025bc <std>:
 80025bc:	2300      	movs	r3, #0
 80025be:	b510      	push	{r4, lr}
 80025c0:	4604      	mov	r4, r0
 80025c2:	e9c0 3300 	strd	r3, r3, [r0]
 80025c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80025ca:	6083      	str	r3, [r0, #8]
 80025cc:	8181      	strh	r1, [r0, #12]
 80025ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80025d0:	81c2      	strh	r2, [r0, #14]
 80025d2:	6183      	str	r3, [r0, #24]
 80025d4:	4619      	mov	r1, r3
 80025d6:	2208      	movs	r2, #8
 80025d8:	305c      	adds	r0, #92	@ 0x5c
 80025da:	f000 f9f9 	bl	80029d0 <memset>
 80025de:	4b0d      	ldr	r3, [pc, #52]	@ (8002614 <std+0x58>)
 80025e0:	6224      	str	r4, [r4, #32]
 80025e2:	6263      	str	r3, [r4, #36]	@ 0x24
 80025e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002618 <std+0x5c>)
 80025e6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80025e8:	4b0c      	ldr	r3, [pc, #48]	@ (800261c <std+0x60>)
 80025ea:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80025ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002620 <std+0x64>)
 80025ee:	6323      	str	r3, [r4, #48]	@ 0x30
 80025f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002624 <std+0x68>)
 80025f2:	429c      	cmp	r4, r3
 80025f4:	d006      	beq.n	8002604 <std+0x48>
 80025f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80025fa:	4294      	cmp	r4, r2
 80025fc:	d002      	beq.n	8002604 <std+0x48>
 80025fe:	33d0      	adds	r3, #208	@ 0xd0
 8002600:	429c      	cmp	r4, r3
 8002602:	d105      	bne.n	8002610 <std+0x54>
 8002604:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800260c:	f000 ba6e 	b.w	8002aec <__retarget_lock_init_recursive>
 8002610:	bd10      	pop	{r4, pc}
 8002612:	bf00      	nop
 8002614:	08002821 	.word	0x08002821
 8002618:	08002843 	.word	0x08002843
 800261c:	0800287b 	.word	0x0800287b
 8002620:	0800289f 	.word	0x0800289f
 8002624:	2000010c 	.word	0x2000010c

08002628 <stdio_exit_handler>:
 8002628:	4a02      	ldr	r2, [pc, #8]	@ (8002634 <stdio_exit_handler+0xc>)
 800262a:	4903      	ldr	r1, [pc, #12]	@ (8002638 <stdio_exit_handler+0x10>)
 800262c:	4803      	ldr	r0, [pc, #12]	@ (800263c <stdio_exit_handler+0x14>)
 800262e:	f000 b869 	b.w	8002704 <_fwalk_sglue>
 8002632:	bf00      	nop
 8002634:	2000000c 	.word	0x2000000c
 8002638:	08003385 	.word	0x08003385
 800263c:	2000001c 	.word	0x2000001c

08002640 <cleanup_stdio>:
 8002640:	6841      	ldr	r1, [r0, #4]
 8002642:	4b0c      	ldr	r3, [pc, #48]	@ (8002674 <cleanup_stdio+0x34>)
 8002644:	b510      	push	{r4, lr}
 8002646:	4299      	cmp	r1, r3
 8002648:	4604      	mov	r4, r0
 800264a:	d001      	beq.n	8002650 <cleanup_stdio+0x10>
 800264c:	f000 fe9a 	bl	8003384 <_fflush_r>
 8002650:	68a1      	ldr	r1, [r4, #8]
 8002652:	4b09      	ldr	r3, [pc, #36]	@ (8002678 <cleanup_stdio+0x38>)
 8002654:	4299      	cmp	r1, r3
 8002656:	d002      	beq.n	800265e <cleanup_stdio+0x1e>
 8002658:	4620      	mov	r0, r4
 800265a:	f000 fe93 	bl	8003384 <_fflush_r>
 800265e:	68e1      	ldr	r1, [r4, #12]
 8002660:	4b06      	ldr	r3, [pc, #24]	@ (800267c <cleanup_stdio+0x3c>)
 8002662:	4299      	cmp	r1, r3
 8002664:	d004      	beq.n	8002670 <cleanup_stdio+0x30>
 8002666:	4620      	mov	r0, r4
 8002668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800266c:	f000 be8a 	b.w	8003384 <_fflush_r>
 8002670:	bd10      	pop	{r4, pc}
 8002672:	bf00      	nop
 8002674:	2000010c 	.word	0x2000010c
 8002678:	20000174 	.word	0x20000174
 800267c:	200001dc 	.word	0x200001dc

08002680 <global_stdio_init.part.0>:
 8002680:	b510      	push	{r4, lr}
 8002682:	4b0b      	ldr	r3, [pc, #44]	@ (80026b0 <global_stdio_init.part.0+0x30>)
 8002684:	4c0b      	ldr	r4, [pc, #44]	@ (80026b4 <global_stdio_init.part.0+0x34>)
 8002686:	4a0c      	ldr	r2, [pc, #48]	@ (80026b8 <global_stdio_init.part.0+0x38>)
 8002688:	4620      	mov	r0, r4
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	2104      	movs	r1, #4
 800268e:	2200      	movs	r2, #0
 8002690:	f7ff ff94 	bl	80025bc <std>
 8002694:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002698:	2201      	movs	r2, #1
 800269a:	2109      	movs	r1, #9
 800269c:	f7ff ff8e 	bl	80025bc <std>
 80026a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80026a4:	2202      	movs	r2, #2
 80026a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026aa:	2112      	movs	r1, #18
 80026ac:	f7ff bf86 	b.w	80025bc <std>
 80026b0:	20000244 	.word	0x20000244
 80026b4:	2000010c 	.word	0x2000010c
 80026b8:	08002629 	.word	0x08002629

080026bc <__sfp_lock_acquire>:
 80026bc:	4801      	ldr	r0, [pc, #4]	@ (80026c4 <__sfp_lock_acquire+0x8>)
 80026be:	f000 ba16 	b.w	8002aee <__retarget_lock_acquire_recursive>
 80026c2:	bf00      	nop
 80026c4:	2000024d 	.word	0x2000024d

080026c8 <__sfp_lock_release>:
 80026c8:	4801      	ldr	r0, [pc, #4]	@ (80026d0 <__sfp_lock_release+0x8>)
 80026ca:	f000 ba11 	b.w	8002af0 <__retarget_lock_release_recursive>
 80026ce:	bf00      	nop
 80026d0:	2000024d 	.word	0x2000024d

080026d4 <__sinit>:
 80026d4:	b510      	push	{r4, lr}
 80026d6:	4604      	mov	r4, r0
 80026d8:	f7ff fff0 	bl	80026bc <__sfp_lock_acquire>
 80026dc:	6a23      	ldr	r3, [r4, #32]
 80026de:	b11b      	cbz	r3, 80026e8 <__sinit+0x14>
 80026e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026e4:	f7ff bff0 	b.w	80026c8 <__sfp_lock_release>
 80026e8:	4b04      	ldr	r3, [pc, #16]	@ (80026fc <__sinit+0x28>)
 80026ea:	6223      	str	r3, [r4, #32]
 80026ec:	4b04      	ldr	r3, [pc, #16]	@ (8002700 <__sinit+0x2c>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1f5      	bne.n	80026e0 <__sinit+0xc>
 80026f4:	f7ff ffc4 	bl	8002680 <global_stdio_init.part.0>
 80026f8:	e7f2      	b.n	80026e0 <__sinit+0xc>
 80026fa:	bf00      	nop
 80026fc:	08002641 	.word	0x08002641
 8002700:	20000244 	.word	0x20000244

08002704 <_fwalk_sglue>:
 8002704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002708:	4607      	mov	r7, r0
 800270a:	4688      	mov	r8, r1
 800270c:	4614      	mov	r4, r2
 800270e:	2600      	movs	r6, #0
 8002710:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002714:	f1b9 0901 	subs.w	r9, r9, #1
 8002718:	d505      	bpl.n	8002726 <_fwalk_sglue+0x22>
 800271a:	6824      	ldr	r4, [r4, #0]
 800271c:	2c00      	cmp	r4, #0
 800271e:	d1f7      	bne.n	8002710 <_fwalk_sglue+0xc>
 8002720:	4630      	mov	r0, r6
 8002722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002726:	89ab      	ldrh	r3, [r5, #12]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d907      	bls.n	800273c <_fwalk_sglue+0x38>
 800272c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002730:	3301      	adds	r3, #1
 8002732:	d003      	beq.n	800273c <_fwalk_sglue+0x38>
 8002734:	4629      	mov	r1, r5
 8002736:	4638      	mov	r0, r7
 8002738:	47c0      	blx	r8
 800273a:	4306      	orrs	r6, r0
 800273c:	3568      	adds	r5, #104	@ 0x68
 800273e:	e7e9      	b.n	8002714 <_fwalk_sglue+0x10>

08002740 <iprintf>:
 8002740:	b40f      	push	{r0, r1, r2, r3}
 8002742:	b507      	push	{r0, r1, r2, lr}
 8002744:	4906      	ldr	r1, [pc, #24]	@ (8002760 <iprintf+0x20>)
 8002746:	ab04      	add	r3, sp, #16
 8002748:	6808      	ldr	r0, [r1, #0]
 800274a:	f853 2b04 	ldr.w	r2, [r3], #4
 800274e:	6881      	ldr	r1, [r0, #8]
 8002750:	9301      	str	r3, [sp, #4]
 8002752:	f000 faed 	bl	8002d30 <_vfiprintf_r>
 8002756:	b003      	add	sp, #12
 8002758:	f85d eb04 	ldr.w	lr, [sp], #4
 800275c:	b004      	add	sp, #16
 800275e:	4770      	bx	lr
 8002760:	20000018 	.word	0x20000018

08002764 <_puts_r>:
 8002764:	6a03      	ldr	r3, [r0, #32]
 8002766:	b570      	push	{r4, r5, r6, lr}
 8002768:	4605      	mov	r5, r0
 800276a:	460e      	mov	r6, r1
 800276c:	6884      	ldr	r4, [r0, #8]
 800276e:	b90b      	cbnz	r3, 8002774 <_puts_r+0x10>
 8002770:	f7ff ffb0 	bl	80026d4 <__sinit>
 8002774:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002776:	07db      	lsls	r3, r3, #31
 8002778:	d405      	bmi.n	8002786 <_puts_r+0x22>
 800277a:	89a3      	ldrh	r3, [r4, #12]
 800277c:	0598      	lsls	r0, r3, #22
 800277e:	d402      	bmi.n	8002786 <_puts_r+0x22>
 8002780:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002782:	f000 f9b4 	bl	8002aee <__retarget_lock_acquire_recursive>
 8002786:	89a3      	ldrh	r3, [r4, #12]
 8002788:	0719      	lsls	r1, r3, #28
 800278a:	d502      	bpl.n	8002792 <_puts_r+0x2e>
 800278c:	6923      	ldr	r3, [r4, #16]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d135      	bne.n	80027fe <_puts_r+0x9a>
 8002792:	4621      	mov	r1, r4
 8002794:	4628      	mov	r0, r5
 8002796:	f000 f8c5 	bl	8002924 <__swsetup_r>
 800279a:	b380      	cbz	r0, 80027fe <_puts_r+0x9a>
 800279c:	f04f 35ff 	mov.w	r5, #4294967295
 80027a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80027a2:	07da      	lsls	r2, r3, #31
 80027a4:	d405      	bmi.n	80027b2 <_puts_r+0x4e>
 80027a6:	89a3      	ldrh	r3, [r4, #12]
 80027a8:	059b      	lsls	r3, r3, #22
 80027aa:	d402      	bmi.n	80027b2 <_puts_r+0x4e>
 80027ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80027ae:	f000 f99f 	bl	8002af0 <__retarget_lock_release_recursive>
 80027b2:	4628      	mov	r0, r5
 80027b4:	bd70      	pop	{r4, r5, r6, pc}
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	da04      	bge.n	80027c4 <_puts_r+0x60>
 80027ba:	69a2      	ldr	r2, [r4, #24]
 80027bc:	429a      	cmp	r2, r3
 80027be:	dc17      	bgt.n	80027f0 <_puts_r+0x8c>
 80027c0:	290a      	cmp	r1, #10
 80027c2:	d015      	beq.n	80027f0 <_puts_r+0x8c>
 80027c4:	6823      	ldr	r3, [r4, #0]
 80027c6:	1c5a      	adds	r2, r3, #1
 80027c8:	6022      	str	r2, [r4, #0]
 80027ca:	7019      	strb	r1, [r3, #0]
 80027cc:	68a3      	ldr	r3, [r4, #8]
 80027ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80027d2:	3b01      	subs	r3, #1
 80027d4:	60a3      	str	r3, [r4, #8]
 80027d6:	2900      	cmp	r1, #0
 80027d8:	d1ed      	bne.n	80027b6 <_puts_r+0x52>
 80027da:	2b00      	cmp	r3, #0
 80027dc:	da11      	bge.n	8002802 <_puts_r+0x9e>
 80027de:	4622      	mov	r2, r4
 80027e0:	210a      	movs	r1, #10
 80027e2:	4628      	mov	r0, r5
 80027e4:	f000 f85f 	bl	80028a6 <__swbuf_r>
 80027e8:	3001      	adds	r0, #1
 80027ea:	d0d7      	beq.n	800279c <_puts_r+0x38>
 80027ec:	250a      	movs	r5, #10
 80027ee:	e7d7      	b.n	80027a0 <_puts_r+0x3c>
 80027f0:	4622      	mov	r2, r4
 80027f2:	4628      	mov	r0, r5
 80027f4:	f000 f857 	bl	80028a6 <__swbuf_r>
 80027f8:	3001      	adds	r0, #1
 80027fa:	d1e7      	bne.n	80027cc <_puts_r+0x68>
 80027fc:	e7ce      	b.n	800279c <_puts_r+0x38>
 80027fe:	3e01      	subs	r6, #1
 8002800:	e7e4      	b.n	80027cc <_puts_r+0x68>
 8002802:	6823      	ldr	r3, [r4, #0]
 8002804:	1c5a      	adds	r2, r3, #1
 8002806:	6022      	str	r2, [r4, #0]
 8002808:	220a      	movs	r2, #10
 800280a:	701a      	strb	r2, [r3, #0]
 800280c:	e7ee      	b.n	80027ec <_puts_r+0x88>
	...

08002810 <puts>:
 8002810:	4b02      	ldr	r3, [pc, #8]	@ (800281c <puts+0xc>)
 8002812:	4601      	mov	r1, r0
 8002814:	6818      	ldr	r0, [r3, #0]
 8002816:	f7ff bfa5 	b.w	8002764 <_puts_r>
 800281a:	bf00      	nop
 800281c:	20000018 	.word	0x20000018

08002820 <__sread>:
 8002820:	b510      	push	{r4, lr}
 8002822:	460c      	mov	r4, r1
 8002824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002828:	f000 f912 	bl	8002a50 <_read_r>
 800282c:	2800      	cmp	r0, #0
 800282e:	bfab      	itete	ge
 8002830:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002832:	89a3      	ldrhlt	r3, [r4, #12]
 8002834:	181b      	addge	r3, r3, r0
 8002836:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800283a:	bfac      	ite	ge
 800283c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800283e:	81a3      	strhlt	r3, [r4, #12]
 8002840:	bd10      	pop	{r4, pc}

08002842 <__swrite>:
 8002842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002846:	461f      	mov	r7, r3
 8002848:	898b      	ldrh	r3, [r1, #12]
 800284a:	4605      	mov	r5, r0
 800284c:	05db      	lsls	r3, r3, #23
 800284e:	460c      	mov	r4, r1
 8002850:	4616      	mov	r6, r2
 8002852:	d505      	bpl.n	8002860 <__swrite+0x1e>
 8002854:	2302      	movs	r3, #2
 8002856:	2200      	movs	r2, #0
 8002858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800285c:	f000 f8e6 	bl	8002a2c <_lseek_r>
 8002860:	89a3      	ldrh	r3, [r4, #12]
 8002862:	4632      	mov	r2, r6
 8002864:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002868:	81a3      	strh	r3, [r4, #12]
 800286a:	4628      	mov	r0, r5
 800286c:	463b      	mov	r3, r7
 800286e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002872:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002876:	f000 b8fd 	b.w	8002a74 <_write_r>

0800287a <__sseek>:
 800287a:	b510      	push	{r4, lr}
 800287c:	460c      	mov	r4, r1
 800287e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002882:	f000 f8d3 	bl	8002a2c <_lseek_r>
 8002886:	1c43      	adds	r3, r0, #1
 8002888:	89a3      	ldrh	r3, [r4, #12]
 800288a:	bf15      	itete	ne
 800288c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800288e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002892:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002896:	81a3      	strheq	r3, [r4, #12]
 8002898:	bf18      	it	ne
 800289a:	81a3      	strhne	r3, [r4, #12]
 800289c:	bd10      	pop	{r4, pc}

0800289e <__sclose>:
 800289e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028a2:	f000 b8b3 	b.w	8002a0c <_close_r>

080028a6 <__swbuf_r>:
 80028a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028a8:	460e      	mov	r6, r1
 80028aa:	4614      	mov	r4, r2
 80028ac:	4605      	mov	r5, r0
 80028ae:	b118      	cbz	r0, 80028b8 <__swbuf_r+0x12>
 80028b0:	6a03      	ldr	r3, [r0, #32]
 80028b2:	b90b      	cbnz	r3, 80028b8 <__swbuf_r+0x12>
 80028b4:	f7ff ff0e 	bl	80026d4 <__sinit>
 80028b8:	69a3      	ldr	r3, [r4, #24]
 80028ba:	60a3      	str	r3, [r4, #8]
 80028bc:	89a3      	ldrh	r3, [r4, #12]
 80028be:	071a      	lsls	r2, r3, #28
 80028c0:	d501      	bpl.n	80028c6 <__swbuf_r+0x20>
 80028c2:	6923      	ldr	r3, [r4, #16]
 80028c4:	b943      	cbnz	r3, 80028d8 <__swbuf_r+0x32>
 80028c6:	4621      	mov	r1, r4
 80028c8:	4628      	mov	r0, r5
 80028ca:	f000 f82b 	bl	8002924 <__swsetup_r>
 80028ce:	b118      	cbz	r0, 80028d8 <__swbuf_r+0x32>
 80028d0:	f04f 37ff 	mov.w	r7, #4294967295
 80028d4:	4638      	mov	r0, r7
 80028d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028d8:	6823      	ldr	r3, [r4, #0]
 80028da:	6922      	ldr	r2, [r4, #16]
 80028dc:	b2f6      	uxtb	r6, r6
 80028de:	1a98      	subs	r0, r3, r2
 80028e0:	6963      	ldr	r3, [r4, #20]
 80028e2:	4637      	mov	r7, r6
 80028e4:	4283      	cmp	r3, r0
 80028e6:	dc05      	bgt.n	80028f4 <__swbuf_r+0x4e>
 80028e8:	4621      	mov	r1, r4
 80028ea:	4628      	mov	r0, r5
 80028ec:	f000 fd4a 	bl	8003384 <_fflush_r>
 80028f0:	2800      	cmp	r0, #0
 80028f2:	d1ed      	bne.n	80028d0 <__swbuf_r+0x2a>
 80028f4:	68a3      	ldr	r3, [r4, #8]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	60a3      	str	r3, [r4, #8]
 80028fa:	6823      	ldr	r3, [r4, #0]
 80028fc:	1c5a      	adds	r2, r3, #1
 80028fe:	6022      	str	r2, [r4, #0]
 8002900:	701e      	strb	r6, [r3, #0]
 8002902:	6962      	ldr	r2, [r4, #20]
 8002904:	1c43      	adds	r3, r0, #1
 8002906:	429a      	cmp	r2, r3
 8002908:	d004      	beq.n	8002914 <__swbuf_r+0x6e>
 800290a:	89a3      	ldrh	r3, [r4, #12]
 800290c:	07db      	lsls	r3, r3, #31
 800290e:	d5e1      	bpl.n	80028d4 <__swbuf_r+0x2e>
 8002910:	2e0a      	cmp	r6, #10
 8002912:	d1df      	bne.n	80028d4 <__swbuf_r+0x2e>
 8002914:	4621      	mov	r1, r4
 8002916:	4628      	mov	r0, r5
 8002918:	f000 fd34 	bl	8003384 <_fflush_r>
 800291c:	2800      	cmp	r0, #0
 800291e:	d0d9      	beq.n	80028d4 <__swbuf_r+0x2e>
 8002920:	e7d6      	b.n	80028d0 <__swbuf_r+0x2a>
	...

08002924 <__swsetup_r>:
 8002924:	b538      	push	{r3, r4, r5, lr}
 8002926:	4b29      	ldr	r3, [pc, #164]	@ (80029cc <__swsetup_r+0xa8>)
 8002928:	4605      	mov	r5, r0
 800292a:	6818      	ldr	r0, [r3, #0]
 800292c:	460c      	mov	r4, r1
 800292e:	b118      	cbz	r0, 8002938 <__swsetup_r+0x14>
 8002930:	6a03      	ldr	r3, [r0, #32]
 8002932:	b90b      	cbnz	r3, 8002938 <__swsetup_r+0x14>
 8002934:	f7ff fece 	bl	80026d4 <__sinit>
 8002938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800293c:	0719      	lsls	r1, r3, #28
 800293e:	d422      	bmi.n	8002986 <__swsetup_r+0x62>
 8002940:	06da      	lsls	r2, r3, #27
 8002942:	d407      	bmi.n	8002954 <__swsetup_r+0x30>
 8002944:	2209      	movs	r2, #9
 8002946:	602a      	str	r2, [r5, #0]
 8002948:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800294c:	f04f 30ff 	mov.w	r0, #4294967295
 8002950:	81a3      	strh	r3, [r4, #12]
 8002952:	e033      	b.n	80029bc <__swsetup_r+0x98>
 8002954:	0758      	lsls	r0, r3, #29
 8002956:	d512      	bpl.n	800297e <__swsetup_r+0x5a>
 8002958:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800295a:	b141      	cbz	r1, 800296e <__swsetup_r+0x4a>
 800295c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002960:	4299      	cmp	r1, r3
 8002962:	d002      	beq.n	800296a <__swsetup_r+0x46>
 8002964:	4628      	mov	r0, r5
 8002966:	f000 f8c5 	bl	8002af4 <_free_r>
 800296a:	2300      	movs	r3, #0
 800296c:	6363      	str	r3, [r4, #52]	@ 0x34
 800296e:	89a3      	ldrh	r3, [r4, #12]
 8002970:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002974:	81a3      	strh	r3, [r4, #12]
 8002976:	2300      	movs	r3, #0
 8002978:	6063      	str	r3, [r4, #4]
 800297a:	6923      	ldr	r3, [r4, #16]
 800297c:	6023      	str	r3, [r4, #0]
 800297e:	89a3      	ldrh	r3, [r4, #12]
 8002980:	f043 0308 	orr.w	r3, r3, #8
 8002984:	81a3      	strh	r3, [r4, #12]
 8002986:	6923      	ldr	r3, [r4, #16]
 8002988:	b94b      	cbnz	r3, 800299e <__swsetup_r+0x7a>
 800298a:	89a3      	ldrh	r3, [r4, #12]
 800298c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002990:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002994:	d003      	beq.n	800299e <__swsetup_r+0x7a>
 8002996:	4621      	mov	r1, r4
 8002998:	4628      	mov	r0, r5
 800299a:	f000 fd40 	bl	800341e <__smakebuf_r>
 800299e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80029a2:	f013 0201 	ands.w	r2, r3, #1
 80029a6:	d00a      	beq.n	80029be <__swsetup_r+0x9a>
 80029a8:	2200      	movs	r2, #0
 80029aa:	60a2      	str	r2, [r4, #8]
 80029ac:	6962      	ldr	r2, [r4, #20]
 80029ae:	4252      	negs	r2, r2
 80029b0:	61a2      	str	r2, [r4, #24]
 80029b2:	6922      	ldr	r2, [r4, #16]
 80029b4:	b942      	cbnz	r2, 80029c8 <__swsetup_r+0xa4>
 80029b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80029ba:	d1c5      	bne.n	8002948 <__swsetup_r+0x24>
 80029bc:	bd38      	pop	{r3, r4, r5, pc}
 80029be:	0799      	lsls	r1, r3, #30
 80029c0:	bf58      	it	pl
 80029c2:	6962      	ldrpl	r2, [r4, #20]
 80029c4:	60a2      	str	r2, [r4, #8]
 80029c6:	e7f4      	b.n	80029b2 <__swsetup_r+0x8e>
 80029c8:	2000      	movs	r0, #0
 80029ca:	e7f7      	b.n	80029bc <__swsetup_r+0x98>
 80029cc:	20000018 	.word	0x20000018

080029d0 <memset>:
 80029d0:	4603      	mov	r3, r0
 80029d2:	4402      	add	r2, r0
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d100      	bne.n	80029da <memset+0xa>
 80029d8:	4770      	bx	lr
 80029da:	f803 1b01 	strb.w	r1, [r3], #1
 80029de:	e7f9      	b.n	80029d4 <memset+0x4>

080029e0 <strstr>:
 80029e0:	780a      	ldrb	r2, [r1, #0]
 80029e2:	b570      	push	{r4, r5, r6, lr}
 80029e4:	b96a      	cbnz	r2, 8002a02 <strstr+0x22>
 80029e6:	bd70      	pop	{r4, r5, r6, pc}
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d109      	bne.n	8002a00 <strstr+0x20>
 80029ec:	460c      	mov	r4, r1
 80029ee:	4605      	mov	r5, r0
 80029f0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0f6      	beq.n	80029e6 <strstr+0x6>
 80029f8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80029fc:	429e      	cmp	r6, r3
 80029fe:	d0f7      	beq.n	80029f0 <strstr+0x10>
 8002a00:	3001      	adds	r0, #1
 8002a02:	7803      	ldrb	r3, [r0, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1ef      	bne.n	80029e8 <strstr+0x8>
 8002a08:	4618      	mov	r0, r3
 8002a0a:	e7ec      	b.n	80029e6 <strstr+0x6>

08002a0c <_close_r>:
 8002a0c:	b538      	push	{r3, r4, r5, lr}
 8002a0e:	2300      	movs	r3, #0
 8002a10:	4d05      	ldr	r5, [pc, #20]	@ (8002a28 <_close_r+0x1c>)
 8002a12:	4604      	mov	r4, r0
 8002a14:	4608      	mov	r0, r1
 8002a16:	602b      	str	r3, [r5, #0]
 8002a18:	f7fd fea5 	bl	8000766 <_close>
 8002a1c:	1c43      	adds	r3, r0, #1
 8002a1e:	d102      	bne.n	8002a26 <_close_r+0x1a>
 8002a20:	682b      	ldr	r3, [r5, #0]
 8002a22:	b103      	cbz	r3, 8002a26 <_close_r+0x1a>
 8002a24:	6023      	str	r3, [r4, #0]
 8002a26:	bd38      	pop	{r3, r4, r5, pc}
 8002a28:	20000248 	.word	0x20000248

08002a2c <_lseek_r>:
 8002a2c:	b538      	push	{r3, r4, r5, lr}
 8002a2e:	4604      	mov	r4, r0
 8002a30:	4608      	mov	r0, r1
 8002a32:	4611      	mov	r1, r2
 8002a34:	2200      	movs	r2, #0
 8002a36:	4d05      	ldr	r5, [pc, #20]	@ (8002a4c <_lseek_r+0x20>)
 8002a38:	602a      	str	r2, [r5, #0]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	f7fd feb7 	bl	80007ae <_lseek>
 8002a40:	1c43      	adds	r3, r0, #1
 8002a42:	d102      	bne.n	8002a4a <_lseek_r+0x1e>
 8002a44:	682b      	ldr	r3, [r5, #0]
 8002a46:	b103      	cbz	r3, 8002a4a <_lseek_r+0x1e>
 8002a48:	6023      	str	r3, [r4, #0]
 8002a4a:	bd38      	pop	{r3, r4, r5, pc}
 8002a4c:	20000248 	.word	0x20000248

08002a50 <_read_r>:
 8002a50:	b538      	push	{r3, r4, r5, lr}
 8002a52:	4604      	mov	r4, r0
 8002a54:	4608      	mov	r0, r1
 8002a56:	4611      	mov	r1, r2
 8002a58:	2200      	movs	r2, #0
 8002a5a:	4d05      	ldr	r5, [pc, #20]	@ (8002a70 <_read_r+0x20>)
 8002a5c:	602a      	str	r2, [r5, #0]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	f7fd fe48 	bl	80006f4 <_read>
 8002a64:	1c43      	adds	r3, r0, #1
 8002a66:	d102      	bne.n	8002a6e <_read_r+0x1e>
 8002a68:	682b      	ldr	r3, [r5, #0]
 8002a6a:	b103      	cbz	r3, 8002a6e <_read_r+0x1e>
 8002a6c:	6023      	str	r3, [r4, #0]
 8002a6e:	bd38      	pop	{r3, r4, r5, pc}
 8002a70:	20000248 	.word	0x20000248

08002a74 <_write_r>:
 8002a74:	b538      	push	{r3, r4, r5, lr}
 8002a76:	4604      	mov	r4, r0
 8002a78:	4608      	mov	r0, r1
 8002a7a:	4611      	mov	r1, r2
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	4d05      	ldr	r5, [pc, #20]	@ (8002a94 <_write_r+0x20>)
 8002a80:	602a      	str	r2, [r5, #0]
 8002a82:	461a      	mov	r2, r3
 8002a84:	f7fd fe53 	bl	800072e <_write>
 8002a88:	1c43      	adds	r3, r0, #1
 8002a8a:	d102      	bne.n	8002a92 <_write_r+0x1e>
 8002a8c:	682b      	ldr	r3, [r5, #0]
 8002a8e:	b103      	cbz	r3, 8002a92 <_write_r+0x1e>
 8002a90:	6023      	str	r3, [r4, #0]
 8002a92:	bd38      	pop	{r3, r4, r5, pc}
 8002a94:	20000248 	.word	0x20000248

08002a98 <__errno>:
 8002a98:	4b01      	ldr	r3, [pc, #4]	@ (8002aa0 <__errno+0x8>)
 8002a9a:	6818      	ldr	r0, [r3, #0]
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	20000018 	.word	0x20000018

08002aa4 <__libc_init_array>:
 8002aa4:	b570      	push	{r4, r5, r6, lr}
 8002aa6:	2600      	movs	r6, #0
 8002aa8:	4d0c      	ldr	r5, [pc, #48]	@ (8002adc <__libc_init_array+0x38>)
 8002aaa:	4c0d      	ldr	r4, [pc, #52]	@ (8002ae0 <__libc_init_array+0x3c>)
 8002aac:	1b64      	subs	r4, r4, r5
 8002aae:	10a4      	asrs	r4, r4, #2
 8002ab0:	42a6      	cmp	r6, r4
 8002ab2:	d109      	bne.n	8002ac8 <__libc_init_array+0x24>
 8002ab4:	f000 fd30 	bl	8003518 <_init>
 8002ab8:	2600      	movs	r6, #0
 8002aba:	4d0a      	ldr	r5, [pc, #40]	@ (8002ae4 <__libc_init_array+0x40>)
 8002abc:	4c0a      	ldr	r4, [pc, #40]	@ (8002ae8 <__libc_init_array+0x44>)
 8002abe:	1b64      	subs	r4, r4, r5
 8002ac0:	10a4      	asrs	r4, r4, #2
 8002ac2:	42a6      	cmp	r6, r4
 8002ac4:	d105      	bne.n	8002ad2 <__libc_init_array+0x2e>
 8002ac6:	bd70      	pop	{r4, r5, r6, pc}
 8002ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002acc:	4798      	blx	r3
 8002ace:	3601      	adds	r6, #1
 8002ad0:	e7ee      	b.n	8002ab0 <__libc_init_array+0xc>
 8002ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ad6:	4798      	blx	r3
 8002ad8:	3601      	adds	r6, #1
 8002ada:	e7f2      	b.n	8002ac2 <__libc_init_array+0x1e>
 8002adc:	0800363c 	.word	0x0800363c
 8002ae0:	0800363c 	.word	0x0800363c
 8002ae4:	0800363c 	.word	0x0800363c
 8002ae8:	08003640 	.word	0x08003640

08002aec <__retarget_lock_init_recursive>:
 8002aec:	4770      	bx	lr

08002aee <__retarget_lock_acquire_recursive>:
 8002aee:	4770      	bx	lr

08002af0 <__retarget_lock_release_recursive>:
 8002af0:	4770      	bx	lr
	...

08002af4 <_free_r>:
 8002af4:	b538      	push	{r3, r4, r5, lr}
 8002af6:	4605      	mov	r5, r0
 8002af8:	2900      	cmp	r1, #0
 8002afa:	d040      	beq.n	8002b7e <_free_r+0x8a>
 8002afc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b00:	1f0c      	subs	r4, r1, #4
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	bfb8      	it	lt
 8002b06:	18e4      	addlt	r4, r4, r3
 8002b08:	f000 f8de 	bl	8002cc8 <__malloc_lock>
 8002b0c:	4a1c      	ldr	r2, [pc, #112]	@ (8002b80 <_free_r+0x8c>)
 8002b0e:	6813      	ldr	r3, [r2, #0]
 8002b10:	b933      	cbnz	r3, 8002b20 <_free_r+0x2c>
 8002b12:	6063      	str	r3, [r4, #4]
 8002b14:	6014      	str	r4, [r2, #0]
 8002b16:	4628      	mov	r0, r5
 8002b18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b1c:	f000 b8da 	b.w	8002cd4 <__malloc_unlock>
 8002b20:	42a3      	cmp	r3, r4
 8002b22:	d908      	bls.n	8002b36 <_free_r+0x42>
 8002b24:	6820      	ldr	r0, [r4, #0]
 8002b26:	1821      	adds	r1, r4, r0
 8002b28:	428b      	cmp	r3, r1
 8002b2a:	bf01      	itttt	eq
 8002b2c:	6819      	ldreq	r1, [r3, #0]
 8002b2e:	685b      	ldreq	r3, [r3, #4]
 8002b30:	1809      	addeq	r1, r1, r0
 8002b32:	6021      	streq	r1, [r4, #0]
 8002b34:	e7ed      	b.n	8002b12 <_free_r+0x1e>
 8002b36:	461a      	mov	r2, r3
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	b10b      	cbz	r3, 8002b40 <_free_r+0x4c>
 8002b3c:	42a3      	cmp	r3, r4
 8002b3e:	d9fa      	bls.n	8002b36 <_free_r+0x42>
 8002b40:	6811      	ldr	r1, [r2, #0]
 8002b42:	1850      	adds	r0, r2, r1
 8002b44:	42a0      	cmp	r0, r4
 8002b46:	d10b      	bne.n	8002b60 <_free_r+0x6c>
 8002b48:	6820      	ldr	r0, [r4, #0]
 8002b4a:	4401      	add	r1, r0
 8002b4c:	1850      	adds	r0, r2, r1
 8002b4e:	4283      	cmp	r3, r0
 8002b50:	6011      	str	r1, [r2, #0]
 8002b52:	d1e0      	bne.n	8002b16 <_free_r+0x22>
 8002b54:	6818      	ldr	r0, [r3, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	4408      	add	r0, r1
 8002b5a:	6010      	str	r0, [r2, #0]
 8002b5c:	6053      	str	r3, [r2, #4]
 8002b5e:	e7da      	b.n	8002b16 <_free_r+0x22>
 8002b60:	d902      	bls.n	8002b68 <_free_r+0x74>
 8002b62:	230c      	movs	r3, #12
 8002b64:	602b      	str	r3, [r5, #0]
 8002b66:	e7d6      	b.n	8002b16 <_free_r+0x22>
 8002b68:	6820      	ldr	r0, [r4, #0]
 8002b6a:	1821      	adds	r1, r4, r0
 8002b6c:	428b      	cmp	r3, r1
 8002b6e:	bf01      	itttt	eq
 8002b70:	6819      	ldreq	r1, [r3, #0]
 8002b72:	685b      	ldreq	r3, [r3, #4]
 8002b74:	1809      	addeq	r1, r1, r0
 8002b76:	6021      	streq	r1, [r4, #0]
 8002b78:	6063      	str	r3, [r4, #4]
 8002b7a:	6054      	str	r4, [r2, #4]
 8002b7c:	e7cb      	b.n	8002b16 <_free_r+0x22>
 8002b7e:	bd38      	pop	{r3, r4, r5, pc}
 8002b80:	20000254 	.word	0x20000254

08002b84 <sbrk_aligned>:
 8002b84:	b570      	push	{r4, r5, r6, lr}
 8002b86:	4e0f      	ldr	r6, [pc, #60]	@ (8002bc4 <sbrk_aligned+0x40>)
 8002b88:	460c      	mov	r4, r1
 8002b8a:	6831      	ldr	r1, [r6, #0]
 8002b8c:	4605      	mov	r5, r0
 8002b8e:	b911      	cbnz	r1, 8002b96 <sbrk_aligned+0x12>
 8002b90:	f000 fca4 	bl	80034dc <_sbrk_r>
 8002b94:	6030      	str	r0, [r6, #0]
 8002b96:	4621      	mov	r1, r4
 8002b98:	4628      	mov	r0, r5
 8002b9a:	f000 fc9f 	bl	80034dc <_sbrk_r>
 8002b9e:	1c43      	adds	r3, r0, #1
 8002ba0:	d103      	bne.n	8002baa <sbrk_aligned+0x26>
 8002ba2:	f04f 34ff 	mov.w	r4, #4294967295
 8002ba6:	4620      	mov	r0, r4
 8002ba8:	bd70      	pop	{r4, r5, r6, pc}
 8002baa:	1cc4      	adds	r4, r0, #3
 8002bac:	f024 0403 	bic.w	r4, r4, #3
 8002bb0:	42a0      	cmp	r0, r4
 8002bb2:	d0f8      	beq.n	8002ba6 <sbrk_aligned+0x22>
 8002bb4:	1a21      	subs	r1, r4, r0
 8002bb6:	4628      	mov	r0, r5
 8002bb8:	f000 fc90 	bl	80034dc <_sbrk_r>
 8002bbc:	3001      	adds	r0, #1
 8002bbe:	d1f2      	bne.n	8002ba6 <sbrk_aligned+0x22>
 8002bc0:	e7ef      	b.n	8002ba2 <sbrk_aligned+0x1e>
 8002bc2:	bf00      	nop
 8002bc4:	20000250 	.word	0x20000250

08002bc8 <_malloc_r>:
 8002bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002bcc:	1ccd      	adds	r5, r1, #3
 8002bce:	f025 0503 	bic.w	r5, r5, #3
 8002bd2:	3508      	adds	r5, #8
 8002bd4:	2d0c      	cmp	r5, #12
 8002bd6:	bf38      	it	cc
 8002bd8:	250c      	movcc	r5, #12
 8002bda:	2d00      	cmp	r5, #0
 8002bdc:	4606      	mov	r6, r0
 8002bde:	db01      	blt.n	8002be4 <_malloc_r+0x1c>
 8002be0:	42a9      	cmp	r1, r5
 8002be2:	d904      	bls.n	8002bee <_malloc_r+0x26>
 8002be4:	230c      	movs	r3, #12
 8002be6:	6033      	str	r3, [r6, #0]
 8002be8:	2000      	movs	r0, #0
 8002bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002bee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002cc4 <_malloc_r+0xfc>
 8002bf2:	f000 f869 	bl	8002cc8 <__malloc_lock>
 8002bf6:	f8d8 3000 	ldr.w	r3, [r8]
 8002bfa:	461c      	mov	r4, r3
 8002bfc:	bb44      	cbnz	r4, 8002c50 <_malloc_r+0x88>
 8002bfe:	4629      	mov	r1, r5
 8002c00:	4630      	mov	r0, r6
 8002c02:	f7ff ffbf 	bl	8002b84 <sbrk_aligned>
 8002c06:	1c43      	adds	r3, r0, #1
 8002c08:	4604      	mov	r4, r0
 8002c0a:	d158      	bne.n	8002cbe <_malloc_r+0xf6>
 8002c0c:	f8d8 4000 	ldr.w	r4, [r8]
 8002c10:	4627      	mov	r7, r4
 8002c12:	2f00      	cmp	r7, #0
 8002c14:	d143      	bne.n	8002c9e <_malloc_r+0xd6>
 8002c16:	2c00      	cmp	r4, #0
 8002c18:	d04b      	beq.n	8002cb2 <_malloc_r+0xea>
 8002c1a:	6823      	ldr	r3, [r4, #0]
 8002c1c:	4639      	mov	r1, r7
 8002c1e:	4630      	mov	r0, r6
 8002c20:	eb04 0903 	add.w	r9, r4, r3
 8002c24:	f000 fc5a 	bl	80034dc <_sbrk_r>
 8002c28:	4581      	cmp	r9, r0
 8002c2a:	d142      	bne.n	8002cb2 <_malloc_r+0xea>
 8002c2c:	6821      	ldr	r1, [r4, #0]
 8002c2e:	4630      	mov	r0, r6
 8002c30:	1a6d      	subs	r5, r5, r1
 8002c32:	4629      	mov	r1, r5
 8002c34:	f7ff ffa6 	bl	8002b84 <sbrk_aligned>
 8002c38:	3001      	adds	r0, #1
 8002c3a:	d03a      	beq.n	8002cb2 <_malloc_r+0xea>
 8002c3c:	6823      	ldr	r3, [r4, #0]
 8002c3e:	442b      	add	r3, r5
 8002c40:	6023      	str	r3, [r4, #0]
 8002c42:	f8d8 3000 	ldr.w	r3, [r8]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	bb62      	cbnz	r2, 8002ca4 <_malloc_r+0xdc>
 8002c4a:	f8c8 7000 	str.w	r7, [r8]
 8002c4e:	e00f      	b.n	8002c70 <_malloc_r+0xa8>
 8002c50:	6822      	ldr	r2, [r4, #0]
 8002c52:	1b52      	subs	r2, r2, r5
 8002c54:	d420      	bmi.n	8002c98 <_malloc_r+0xd0>
 8002c56:	2a0b      	cmp	r2, #11
 8002c58:	d917      	bls.n	8002c8a <_malloc_r+0xc2>
 8002c5a:	1961      	adds	r1, r4, r5
 8002c5c:	42a3      	cmp	r3, r4
 8002c5e:	6025      	str	r5, [r4, #0]
 8002c60:	bf18      	it	ne
 8002c62:	6059      	strne	r1, [r3, #4]
 8002c64:	6863      	ldr	r3, [r4, #4]
 8002c66:	bf08      	it	eq
 8002c68:	f8c8 1000 	streq.w	r1, [r8]
 8002c6c:	5162      	str	r2, [r4, r5]
 8002c6e:	604b      	str	r3, [r1, #4]
 8002c70:	4630      	mov	r0, r6
 8002c72:	f000 f82f 	bl	8002cd4 <__malloc_unlock>
 8002c76:	f104 000b 	add.w	r0, r4, #11
 8002c7a:	1d23      	adds	r3, r4, #4
 8002c7c:	f020 0007 	bic.w	r0, r0, #7
 8002c80:	1ac2      	subs	r2, r0, r3
 8002c82:	bf1c      	itt	ne
 8002c84:	1a1b      	subne	r3, r3, r0
 8002c86:	50a3      	strne	r3, [r4, r2]
 8002c88:	e7af      	b.n	8002bea <_malloc_r+0x22>
 8002c8a:	6862      	ldr	r2, [r4, #4]
 8002c8c:	42a3      	cmp	r3, r4
 8002c8e:	bf0c      	ite	eq
 8002c90:	f8c8 2000 	streq.w	r2, [r8]
 8002c94:	605a      	strne	r2, [r3, #4]
 8002c96:	e7eb      	b.n	8002c70 <_malloc_r+0xa8>
 8002c98:	4623      	mov	r3, r4
 8002c9a:	6864      	ldr	r4, [r4, #4]
 8002c9c:	e7ae      	b.n	8002bfc <_malloc_r+0x34>
 8002c9e:	463c      	mov	r4, r7
 8002ca0:	687f      	ldr	r7, [r7, #4]
 8002ca2:	e7b6      	b.n	8002c12 <_malloc_r+0x4a>
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	42a3      	cmp	r3, r4
 8002caa:	d1fb      	bne.n	8002ca4 <_malloc_r+0xdc>
 8002cac:	2300      	movs	r3, #0
 8002cae:	6053      	str	r3, [r2, #4]
 8002cb0:	e7de      	b.n	8002c70 <_malloc_r+0xa8>
 8002cb2:	230c      	movs	r3, #12
 8002cb4:	4630      	mov	r0, r6
 8002cb6:	6033      	str	r3, [r6, #0]
 8002cb8:	f000 f80c 	bl	8002cd4 <__malloc_unlock>
 8002cbc:	e794      	b.n	8002be8 <_malloc_r+0x20>
 8002cbe:	6005      	str	r5, [r0, #0]
 8002cc0:	e7d6      	b.n	8002c70 <_malloc_r+0xa8>
 8002cc2:	bf00      	nop
 8002cc4:	20000254 	.word	0x20000254

08002cc8 <__malloc_lock>:
 8002cc8:	4801      	ldr	r0, [pc, #4]	@ (8002cd0 <__malloc_lock+0x8>)
 8002cca:	f7ff bf10 	b.w	8002aee <__retarget_lock_acquire_recursive>
 8002cce:	bf00      	nop
 8002cd0:	2000024c 	.word	0x2000024c

08002cd4 <__malloc_unlock>:
 8002cd4:	4801      	ldr	r0, [pc, #4]	@ (8002cdc <__malloc_unlock+0x8>)
 8002cd6:	f7ff bf0b 	b.w	8002af0 <__retarget_lock_release_recursive>
 8002cda:	bf00      	nop
 8002cdc:	2000024c 	.word	0x2000024c

08002ce0 <__sfputc_r>:
 8002ce0:	6893      	ldr	r3, [r2, #8]
 8002ce2:	b410      	push	{r4}
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	6093      	str	r3, [r2, #8]
 8002cea:	da07      	bge.n	8002cfc <__sfputc_r+0x1c>
 8002cec:	6994      	ldr	r4, [r2, #24]
 8002cee:	42a3      	cmp	r3, r4
 8002cf0:	db01      	blt.n	8002cf6 <__sfputc_r+0x16>
 8002cf2:	290a      	cmp	r1, #10
 8002cf4:	d102      	bne.n	8002cfc <__sfputc_r+0x1c>
 8002cf6:	bc10      	pop	{r4}
 8002cf8:	f7ff bdd5 	b.w	80028a6 <__swbuf_r>
 8002cfc:	6813      	ldr	r3, [r2, #0]
 8002cfe:	1c58      	adds	r0, r3, #1
 8002d00:	6010      	str	r0, [r2, #0]
 8002d02:	7019      	strb	r1, [r3, #0]
 8002d04:	4608      	mov	r0, r1
 8002d06:	bc10      	pop	{r4}
 8002d08:	4770      	bx	lr

08002d0a <__sfputs_r>:
 8002d0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d0c:	4606      	mov	r6, r0
 8002d0e:	460f      	mov	r7, r1
 8002d10:	4614      	mov	r4, r2
 8002d12:	18d5      	adds	r5, r2, r3
 8002d14:	42ac      	cmp	r4, r5
 8002d16:	d101      	bne.n	8002d1c <__sfputs_r+0x12>
 8002d18:	2000      	movs	r0, #0
 8002d1a:	e007      	b.n	8002d2c <__sfputs_r+0x22>
 8002d1c:	463a      	mov	r2, r7
 8002d1e:	4630      	mov	r0, r6
 8002d20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d24:	f7ff ffdc 	bl	8002ce0 <__sfputc_r>
 8002d28:	1c43      	adds	r3, r0, #1
 8002d2a:	d1f3      	bne.n	8002d14 <__sfputs_r+0xa>
 8002d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002d30 <_vfiprintf_r>:
 8002d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d34:	460d      	mov	r5, r1
 8002d36:	4614      	mov	r4, r2
 8002d38:	4698      	mov	r8, r3
 8002d3a:	4606      	mov	r6, r0
 8002d3c:	b09d      	sub	sp, #116	@ 0x74
 8002d3e:	b118      	cbz	r0, 8002d48 <_vfiprintf_r+0x18>
 8002d40:	6a03      	ldr	r3, [r0, #32]
 8002d42:	b90b      	cbnz	r3, 8002d48 <_vfiprintf_r+0x18>
 8002d44:	f7ff fcc6 	bl	80026d4 <__sinit>
 8002d48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002d4a:	07d9      	lsls	r1, r3, #31
 8002d4c:	d405      	bmi.n	8002d5a <_vfiprintf_r+0x2a>
 8002d4e:	89ab      	ldrh	r3, [r5, #12]
 8002d50:	059a      	lsls	r2, r3, #22
 8002d52:	d402      	bmi.n	8002d5a <_vfiprintf_r+0x2a>
 8002d54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002d56:	f7ff feca 	bl	8002aee <__retarget_lock_acquire_recursive>
 8002d5a:	89ab      	ldrh	r3, [r5, #12]
 8002d5c:	071b      	lsls	r3, r3, #28
 8002d5e:	d501      	bpl.n	8002d64 <_vfiprintf_r+0x34>
 8002d60:	692b      	ldr	r3, [r5, #16]
 8002d62:	b99b      	cbnz	r3, 8002d8c <_vfiprintf_r+0x5c>
 8002d64:	4629      	mov	r1, r5
 8002d66:	4630      	mov	r0, r6
 8002d68:	f7ff fddc 	bl	8002924 <__swsetup_r>
 8002d6c:	b170      	cbz	r0, 8002d8c <_vfiprintf_r+0x5c>
 8002d6e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002d70:	07dc      	lsls	r4, r3, #31
 8002d72:	d504      	bpl.n	8002d7e <_vfiprintf_r+0x4e>
 8002d74:	f04f 30ff 	mov.w	r0, #4294967295
 8002d78:	b01d      	add	sp, #116	@ 0x74
 8002d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d7e:	89ab      	ldrh	r3, [r5, #12]
 8002d80:	0598      	lsls	r0, r3, #22
 8002d82:	d4f7      	bmi.n	8002d74 <_vfiprintf_r+0x44>
 8002d84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002d86:	f7ff feb3 	bl	8002af0 <__retarget_lock_release_recursive>
 8002d8a:	e7f3      	b.n	8002d74 <_vfiprintf_r+0x44>
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002d90:	2320      	movs	r3, #32
 8002d92:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002d96:	2330      	movs	r3, #48	@ 0x30
 8002d98:	f04f 0901 	mov.w	r9, #1
 8002d9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002da0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8002f4c <_vfiprintf_r+0x21c>
 8002da4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002da8:	4623      	mov	r3, r4
 8002daa:	469a      	mov	sl, r3
 8002dac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002db0:	b10a      	cbz	r2, 8002db6 <_vfiprintf_r+0x86>
 8002db2:	2a25      	cmp	r2, #37	@ 0x25
 8002db4:	d1f9      	bne.n	8002daa <_vfiprintf_r+0x7a>
 8002db6:	ebba 0b04 	subs.w	fp, sl, r4
 8002dba:	d00b      	beq.n	8002dd4 <_vfiprintf_r+0xa4>
 8002dbc:	465b      	mov	r3, fp
 8002dbe:	4622      	mov	r2, r4
 8002dc0:	4629      	mov	r1, r5
 8002dc2:	4630      	mov	r0, r6
 8002dc4:	f7ff ffa1 	bl	8002d0a <__sfputs_r>
 8002dc8:	3001      	adds	r0, #1
 8002dca:	f000 80a7 	beq.w	8002f1c <_vfiprintf_r+0x1ec>
 8002dce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002dd0:	445a      	add	r2, fp
 8002dd2:	9209      	str	r2, [sp, #36]	@ 0x24
 8002dd4:	f89a 3000 	ldrb.w	r3, [sl]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 809f 	beq.w	8002f1c <_vfiprintf_r+0x1ec>
 8002dde:	2300      	movs	r3, #0
 8002de0:	f04f 32ff 	mov.w	r2, #4294967295
 8002de4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002de8:	f10a 0a01 	add.w	sl, sl, #1
 8002dec:	9304      	str	r3, [sp, #16]
 8002dee:	9307      	str	r3, [sp, #28]
 8002df0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002df4:	931a      	str	r3, [sp, #104]	@ 0x68
 8002df6:	4654      	mov	r4, sl
 8002df8:	2205      	movs	r2, #5
 8002dfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002dfe:	4853      	ldr	r0, [pc, #332]	@ (8002f4c <_vfiprintf_r+0x21c>)
 8002e00:	f000 fb7c 	bl	80034fc <memchr>
 8002e04:	9a04      	ldr	r2, [sp, #16]
 8002e06:	b9d8      	cbnz	r0, 8002e40 <_vfiprintf_r+0x110>
 8002e08:	06d1      	lsls	r1, r2, #27
 8002e0a:	bf44      	itt	mi
 8002e0c:	2320      	movmi	r3, #32
 8002e0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002e12:	0713      	lsls	r3, r2, #28
 8002e14:	bf44      	itt	mi
 8002e16:	232b      	movmi	r3, #43	@ 0x2b
 8002e18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002e1c:	f89a 3000 	ldrb.w	r3, [sl]
 8002e20:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e22:	d015      	beq.n	8002e50 <_vfiprintf_r+0x120>
 8002e24:	4654      	mov	r4, sl
 8002e26:	2000      	movs	r0, #0
 8002e28:	f04f 0c0a 	mov.w	ip, #10
 8002e2c:	9a07      	ldr	r2, [sp, #28]
 8002e2e:	4621      	mov	r1, r4
 8002e30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e34:	3b30      	subs	r3, #48	@ 0x30
 8002e36:	2b09      	cmp	r3, #9
 8002e38:	d94b      	bls.n	8002ed2 <_vfiprintf_r+0x1a2>
 8002e3a:	b1b0      	cbz	r0, 8002e6a <_vfiprintf_r+0x13a>
 8002e3c:	9207      	str	r2, [sp, #28]
 8002e3e:	e014      	b.n	8002e6a <_vfiprintf_r+0x13a>
 8002e40:	eba0 0308 	sub.w	r3, r0, r8
 8002e44:	fa09 f303 	lsl.w	r3, r9, r3
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	46a2      	mov	sl, r4
 8002e4c:	9304      	str	r3, [sp, #16]
 8002e4e:	e7d2      	b.n	8002df6 <_vfiprintf_r+0xc6>
 8002e50:	9b03      	ldr	r3, [sp, #12]
 8002e52:	1d19      	adds	r1, r3, #4
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	9103      	str	r1, [sp, #12]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	bfbb      	ittet	lt
 8002e5c:	425b      	neglt	r3, r3
 8002e5e:	f042 0202 	orrlt.w	r2, r2, #2
 8002e62:	9307      	strge	r3, [sp, #28]
 8002e64:	9307      	strlt	r3, [sp, #28]
 8002e66:	bfb8      	it	lt
 8002e68:	9204      	strlt	r2, [sp, #16]
 8002e6a:	7823      	ldrb	r3, [r4, #0]
 8002e6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8002e6e:	d10a      	bne.n	8002e86 <_vfiprintf_r+0x156>
 8002e70:	7863      	ldrb	r3, [r4, #1]
 8002e72:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e74:	d132      	bne.n	8002edc <_vfiprintf_r+0x1ac>
 8002e76:	9b03      	ldr	r3, [sp, #12]
 8002e78:	3402      	adds	r4, #2
 8002e7a:	1d1a      	adds	r2, r3, #4
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	9203      	str	r2, [sp, #12]
 8002e80:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002e84:	9305      	str	r3, [sp, #20]
 8002e86:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8002f50 <_vfiprintf_r+0x220>
 8002e8a:	2203      	movs	r2, #3
 8002e8c:	4650      	mov	r0, sl
 8002e8e:	7821      	ldrb	r1, [r4, #0]
 8002e90:	f000 fb34 	bl	80034fc <memchr>
 8002e94:	b138      	cbz	r0, 8002ea6 <_vfiprintf_r+0x176>
 8002e96:	2240      	movs	r2, #64	@ 0x40
 8002e98:	9b04      	ldr	r3, [sp, #16]
 8002e9a:	eba0 000a 	sub.w	r0, r0, sl
 8002e9e:	4082      	lsls	r2, r0
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	3401      	adds	r4, #1
 8002ea4:	9304      	str	r3, [sp, #16]
 8002ea6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002eaa:	2206      	movs	r2, #6
 8002eac:	4829      	ldr	r0, [pc, #164]	@ (8002f54 <_vfiprintf_r+0x224>)
 8002eae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002eb2:	f000 fb23 	bl	80034fc <memchr>
 8002eb6:	2800      	cmp	r0, #0
 8002eb8:	d03f      	beq.n	8002f3a <_vfiprintf_r+0x20a>
 8002eba:	4b27      	ldr	r3, [pc, #156]	@ (8002f58 <_vfiprintf_r+0x228>)
 8002ebc:	bb1b      	cbnz	r3, 8002f06 <_vfiprintf_r+0x1d6>
 8002ebe:	9b03      	ldr	r3, [sp, #12]
 8002ec0:	3307      	adds	r3, #7
 8002ec2:	f023 0307 	bic.w	r3, r3, #7
 8002ec6:	3308      	adds	r3, #8
 8002ec8:	9303      	str	r3, [sp, #12]
 8002eca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002ecc:	443b      	add	r3, r7
 8002ece:	9309      	str	r3, [sp, #36]	@ 0x24
 8002ed0:	e76a      	b.n	8002da8 <_vfiprintf_r+0x78>
 8002ed2:	460c      	mov	r4, r1
 8002ed4:	2001      	movs	r0, #1
 8002ed6:	fb0c 3202 	mla	r2, ip, r2, r3
 8002eda:	e7a8      	b.n	8002e2e <_vfiprintf_r+0xfe>
 8002edc:	2300      	movs	r3, #0
 8002ede:	f04f 0c0a 	mov.w	ip, #10
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	3401      	adds	r4, #1
 8002ee6:	9305      	str	r3, [sp, #20]
 8002ee8:	4620      	mov	r0, r4
 8002eea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002eee:	3a30      	subs	r2, #48	@ 0x30
 8002ef0:	2a09      	cmp	r2, #9
 8002ef2:	d903      	bls.n	8002efc <_vfiprintf_r+0x1cc>
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0c6      	beq.n	8002e86 <_vfiprintf_r+0x156>
 8002ef8:	9105      	str	r1, [sp, #20]
 8002efa:	e7c4      	b.n	8002e86 <_vfiprintf_r+0x156>
 8002efc:	4604      	mov	r4, r0
 8002efe:	2301      	movs	r3, #1
 8002f00:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f04:	e7f0      	b.n	8002ee8 <_vfiprintf_r+0x1b8>
 8002f06:	ab03      	add	r3, sp, #12
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	462a      	mov	r2, r5
 8002f0c:	4630      	mov	r0, r6
 8002f0e:	4b13      	ldr	r3, [pc, #76]	@ (8002f5c <_vfiprintf_r+0x22c>)
 8002f10:	a904      	add	r1, sp, #16
 8002f12:	f3af 8000 	nop.w
 8002f16:	4607      	mov	r7, r0
 8002f18:	1c78      	adds	r0, r7, #1
 8002f1a:	d1d6      	bne.n	8002eca <_vfiprintf_r+0x19a>
 8002f1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002f1e:	07d9      	lsls	r1, r3, #31
 8002f20:	d405      	bmi.n	8002f2e <_vfiprintf_r+0x1fe>
 8002f22:	89ab      	ldrh	r3, [r5, #12]
 8002f24:	059a      	lsls	r2, r3, #22
 8002f26:	d402      	bmi.n	8002f2e <_vfiprintf_r+0x1fe>
 8002f28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002f2a:	f7ff fde1 	bl	8002af0 <__retarget_lock_release_recursive>
 8002f2e:	89ab      	ldrh	r3, [r5, #12]
 8002f30:	065b      	lsls	r3, r3, #25
 8002f32:	f53f af1f 	bmi.w	8002d74 <_vfiprintf_r+0x44>
 8002f36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002f38:	e71e      	b.n	8002d78 <_vfiprintf_r+0x48>
 8002f3a:	ab03      	add	r3, sp, #12
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	462a      	mov	r2, r5
 8002f40:	4630      	mov	r0, r6
 8002f42:	4b06      	ldr	r3, [pc, #24]	@ (8002f5c <_vfiprintf_r+0x22c>)
 8002f44:	a904      	add	r1, sp, #16
 8002f46:	f000 f87d 	bl	8003044 <_printf_i>
 8002f4a:	e7e4      	b.n	8002f16 <_vfiprintf_r+0x1e6>
 8002f4c:	08003606 	.word	0x08003606
 8002f50:	0800360c 	.word	0x0800360c
 8002f54:	08003610 	.word	0x08003610
 8002f58:	00000000 	.word	0x00000000
 8002f5c:	08002d0b 	.word	0x08002d0b

08002f60 <_printf_common>:
 8002f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f64:	4616      	mov	r6, r2
 8002f66:	4698      	mov	r8, r3
 8002f68:	688a      	ldr	r2, [r1, #8]
 8002f6a:	690b      	ldr	r3, [r1, #16]
 8002f6c:	4607      	mov	r7, r0
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	bfb8      	it	lt
 8002f72:	4613      	movlt	r3, r2
 8002f74:	6033      	str	r3, [r6, #0]
 8002f76:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002f7a:	460c      	mov	r4, r1
 8002f7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002f80:	b10a      	cbz	r2, 8002f86 <_printf_common+0x26>
 8002f82:	3301      	adds	r3, #1
 8002f84:	6033      	str	r3, [r6, #0]
 8002f86:	6823      	ldr	r3, [r4, #0]
 8002f88:	0699      	lsls	r1, r3, #26
 8002f8a:	bf42      	ittt	mi
 8002f8c:	6833      	ldrmi	r3, [r6, #0]
 8002f8e:	3302      	addmi	r3, #2
 8002f90:	6033      	strmi	r3, [r6, #0]
 8002f92:	6825      	ldr	r5, [r4, #0]
 8002f94:	f015 0506 	ands.w	r5, r5, #6
 8002f98:	d106      	bne.n	8002fa8 <_printf_common+0x48>
 8002f9a:	f104 0a19 	add.w	sl, r4, #25
 8002f9e:	68e3      	ldr	r3, [r4, #12]
 8002fa0:	6832      	ldr	r2, [r6, #0]
 8002fa2:	1a9b      	subs	r3, r3, r2
 8002fa4:	42ab      	cmp	r3, r5
 8002fa6:	dc2b      	bgt.n	8003000 <_printf_common+0xa0>
 8002fa8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002fac:	6822      	ldr	r2, [r4, #0]
 8002fae:	3b00      	subs	r3, #0
 8002fb0:	bf18      	it	ne
 8002fb2:	2301      	movne	r3, #1
 8002fb4:	0692      	lsls	r2, r2, #26
 8002fb6:	d430      	bmi.n	800301a <_printf_common+0xba>
 8002fb8:	4641      	mov	r1, r8
 8002fba:	4638      	mov	r0, r7
 8002fbc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002fc0:	47c8      	blx	r9
 8002fc2:	3001      	adds	r0, #1
 8002fc4:	d023      	beq.n	800300e <_printf_common+0xae>
 8002fc6:	6823      	ldr	r3, [r4, #0]
 8002fc8:	6922      	ldr	r2, [r4, #16]
 8002fca:	f003 0306 	and.w	r3, r3, #6
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	bf14      	ite	ne
 8002fd2:	2500      	movne	r5, #0
 8002fd4:	6833      	ldreq	r3, [r6, #0]
 8002fd6:	f04f 0600 	mov.w	r6, #0
 8002fda:	bf08      	it	eq
 8002fdc:	68e5      	ldreq	r5, [r4, #12]
 8002fde:	f104 041a 	add.w	r4, r4, #26
 8002fe2:	bf08      	it	eq
 8002fe4:	1aed      	subeq	r5, r5, r3
 8002fe6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002fea:	bf08      	it	eq
 8002fec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	bfc4      	itt	gt
 8002ff4:	1a9b      	subgt	r3, r3, r2
 8002ff6:	18ed      	addgt	r5, r5, r3
 8002ff8:	42b5      	cmp	r5, r6
 8002ffa:	d11a      	bne.n	8003032 <_printf_common+0xd2>
 8002ffc:	2000      	movs	r0, #0
 8002ffe:	e008      	b.n	8003012 <_printf_common+0xb2>
 8003000:	2301      	movs	r3, #1
 8003002:	4652      	mov	r2, sl
 8003004:	4641      	mov	r1, r8
 8003006:	4638      	mov	r0, r7
 8003008:	47c8      	blx	r9
 800300a:	3001      	adds	r0, #1
 800300c:	d103      	bne.n	8003016 <_printf_common+0xb6>
 800300e:	f04f 30ff 	mov.w	r0, #4294967295
 8003012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003016:	3501      	adds	r5, #1
 8003018:	e7c1      	b.n	8002f9e <_printf_common+0x3e>
 800301a:	2030      	movs	r0, #48	@ 0x30
 800301c:	18e1      	adds	r1, r4, r3
 800301e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003022:	1c5a      	adds	r2, r3, #1
 8003024:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003028:	4422      	add	r2, r4
 800302a:	3302      	adds	r3, #2
 800302c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003030:	e7c2      	b.n	8002fb8 <_printf_common+0x58>
 8003032:	2301      	movs	r3, #1
 8003034:	4622      	mov	r2, r4
 8003036:	4641      	mov	r1, r8
 8003038:	4638      	mov	r0, r7
 800303a:	47c8      	blx	r9
 800303c:	3001      	adds	r0, #1
 800303e:	d0e6      	beq.n	800300e <_printf_common+0xae>
 8003040:	3601      	adds	r6, #1
 8003042:	e7d9      	b.n	8002ff8 <_printf_common+0x98>

08003044 <_printf_i>:
 8003044:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003048:	7e0f      	ldrb	r7, [r1, #24]
 800304a:	4691      	mov	r9, r2
 800304c:	2f78      	cmp	r7, #120	@ 0x78
 800304e:	4680      	mov	r8, r0
 8003050:	460c      	mov	r4, r1
 8003052:	469a      	mov	sl, r3
 8003054:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003056:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800305a:	d807      	bhi.n	800306c <_printf_i+0x28>
 800305c:	2f62      	cmp	r7, #98	@ 0x62
 800305e:	d80a      	bhi.n	8003076 <_printf_i+0x32>
 8003060:	2f00      	cmp	r7, #0
 8003062:	f000 80d3 	beq.w	800320c <_printf_i+0x1c8>
 8003066:	2f58      	cmp	r7, #88	@ 0x58
 8003068:	f000 80ba 	beq.w	80031e0 <_printf_i+0x19c>
 800306c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003070:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003074:	e03a      	b.n	80030ec <_printf_i+0xa8>
 8003076:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800307a:	2b15      	cmp	r3, #21
 800307c:	d8f6      	bhi.n	800306c <_printf_i+0x28>
 800307e:	a101      	add	r1, pc, #4	@ (adr r1, 8003084 <_printf_i+0x40>)
 8003080:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003084:	080030dd 	.word	0x080030dd
 8003088:	080030f1 	.word	0x080030f1
 800308c:	0800306d 	.word	0x0800306d
 8003090:	0800306d 	.word	0x0800306d
 8003094:	0800306d 	.word	0x0800306d
 8003098:	0800306d 	.word	0x0800306d
 800309c:	080030f1 	.word	0x080030f1
 80030a0:	0800306d 	.word	0x0800306d
 80030a4:	0800306d 	.word	0x0800306d
 80030a8:	0800306d 	.word	0x0800306d
 80030ac:	0800306d 	.word	0x0800306d
 80030b0:	080031f3 	.word	0x080031f3
 80030b4:	0800311b 	.word	0x0800311b
 80030b8:	080031ad 	.word	0x080031ad
 80030bc:	0800306d 	.word	0x0800306d
 80030c0:	0800306d 	.word	0x0800306d
 80030c4:	08003215 	.word	0x08003215
 80030c8:	0800306d 	.word	0x0800306d
 80030cc:	0800311b 	.word	0x0800311b
 80030d0:	0800306d 	.word	0x0800306d
 80030d4:	0800306d 	.word	0x0800306d
 80030d8:	080031b5 	.word	0x080031b5
 80030dc:	6833      	ldr	r3, [r6, #0]
 80030de:	1d1a      	adds	r2, r3, #4
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6032      	str	r2, [r6, #0]
 80030e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80030e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80030ec:	2301      	movs	r3, #1
 80030ee:	e09e      	b.n	800322e <_printf_i+0x1ea>
 80030f0:	6833      	ldr	r3, [r6, #0]
 80030f2:	6820      	ldr	r0, [r4, #0]
 80030f4:	1d19      	adds	r1, r3, #4
 80030f6:	6031      	str	r1, [r6, #0]
 80030f8:	0606      	lsls	r6, r0, #24
 80030fa:	d501      	bpl.n	8003100 <_printf_i+0xbc>
 80030fc:	681d      	ldr	r5, [r3, #0]
 80030fe:	e003      	b.n	8003108 <_printf_i+0xc4>
 8003100:	0645      	lsls	r5, r0, #25
 8003102:	d5fb      	bpl.n	80030fc <_printf_i+0xb8>
 8003104:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003108:	2d00      	cmp	r5, #0
 800310a:	da03      	bge.n	8003114 <_printf_i+0xd0>
 800310c:	232d      	movs	r3, #45	@ 0x2d
 800310e:	426d      	negs	r5, r5
 8003110:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003114:	230a      	movs	r3, #10
 8003116:	4859      	ldr	r0, [pc, #356]	@ (800327c <_printf_i+0x238>)
 8003118:	e011      	b.n	800313e <_printf_i+0xfa>
 800311a:	6821      	ldr	r1, [r4, #0]
 800311c:	6833      	ldr	r3, [r6, #0]
 800311e:	0608      	lsls	r0, r1, #24
 8003120:	f853 5b04 	ldr.w	r5, [r3], #4
 8003124:	d402      	bmi.n	800312c <_printf_i+0xe8>
 8003126:	0649      	lsls	r1, r1, #25
 8003128:	bf48      	it	mi
 800312a:	b2ad      	uxthmi	r5, r5
 800312c:	2f6f      	cmp	r7, #111	@ 0x6f
 800312e:	6033      	str	r3, [r6, #0]
 8003130:	bf14      	ite	ne
 8003132:	230a      	movne	r3, #10
 8003134:	2308      	moveq	r3, #8
 8003136:	4851      	ldr	r0, [pc, #324]	@ (800327c <_printf_i+0x238>)
 8003138:	2100      	movs	r1, #0
 800313a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800313e:	6866      	ldr	r6, [r4, #4]
 8003140:	2e00      	cmp	r6, #0
 8003142:	bfa8      	it	ge
 8003144:	6821      	ldrge	r1, [r4, #0]
 8003146:	60a6      	str	r6, [r4, #8]
 8003148:	bfa4      	itt	ge
 800314a:	f021 0104 	bicge.w	r1, r1, #4
 800314e:	6021      	strge	r1, [r4, #0]
 8003150:	b90d      	cbnz	r5, 8003156 <_printf_i+0x112>
 8003152:	2e00      	cmp	r6, #0
 8003154:	d04b      	beq.n	80031ee <_printf_i+0x1aa>
 8003156:	4616      	mov	r6, r2
 8003158:	fbb5 f1f3 	udiv	r1, r5, r3
 800315c:	fb03 5711 	mls	r7, r3, r1, r5
 8003160:	5dc7      	ldrb	r7, [r0, r7]
 8003162:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003166:	462f      	mov	r7, r5
 8003168:	42bb      	cmp	r3, r7
 800316a:	460d      	mov	r5, r1
 800316c:	d9f4      	bls.n	8003158 <_printf_i+0x114>
 800316e:	2b08      	cmp	r3, #8
 8003170:	d10b      	bne.n	800318a <_printf_i+0x146>
 8003172:	6823      	ldr	r3, [r4, #0]
 8003174:	07df      	lsls	r7, r3, #31
 8003176:	d508      	bpl.n	800318a <_printf_i+0x146>
 8003178:	6923      	ldr	r3, [r4, #16]
 800317a:	6861      	ldr	r1, [r4, #4]
 800317c:	4299      	cmp	r1, r3
 800317e:	bfde      	ittt	le
 8003180:	2330      	movle	r3, #48	@ 0x30
 8003182:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003186:	f106 36ff 	addle.w	r6, r6, #4294967295
 800318a:	1b92      	subs	r2, r2, r6
 800318c:	6122      	str	r2, [r4, #16]
 800318e:	464b      	mov	r3, r9
 8003190:	4621      	mov	r1, r4
 8003192:	4640      	mov	r0, r8
 8003194:	f8cd a000 	str.w	sl, [sp]
 8003198:	aa03      	add	r2, sp, #12
 800319a:	f7ff fee1 	bl	8002f60 <_printf_common>
 800319e:	3001      	adds	r0, #1
 80031a0:	d14a      	bne.n	8003238 <_printf_i+0x1f4>
 80031a2:	f04f 30ff 	mov.w	r0, #4294967295
 80031a6:	b004      	add	sp, #16
 80031a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031ac:	6823      	ldr	r3, [r4, #0]
 80031ae:	f043 0320 	orr.w	r3, r3, #32
 80031b2:	6023      	str	r3, [r4, #0]
 80031b4:	2778      	movs	r7, #120	@ 0x78
 80031b6:	4832      	ldr	r0, [pc, #200]	@ (8003280 <_printf_i+0x23c>)
 80031b8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80031bc:	6823      	ldr	r3, [r4, #0]
 80031be:	6831      	ldr	r1, [r6, #0]
 80031c0:	061f      	lsls	r7, r3, #24
 80031c2:	f851 5b04 	ldr.w	r5, [r1], #4
 80031c6:	d402      	bmi.n	80031ce <_printf_i+0x18a>
 80031c8:	065f      	lsls	r7, r3, #25
 80031ca:	bf48      	it	mi
 80031cc:	b2ad      	uxthmi	r5, r5
 80031ce:	6031      	str	r1, [r6, #0]
 80031d0:	07d9      	lsls	r1, r3, #31
 80031d2:	bf44      	itt	mi
 80031d4:	f043 0320 	orrmi.w	r3, r3, #32
 80031d8:	6023      	strmi	r3, [r4, #0]
 80031da:	b11d      	cbz	r5, 80031e4 <_printf_i+0x1a0>
 80031dc:	2310      	movs	r3, #16
 80031de:	e7ab      	b.n	8003138 <_printf_i+0xf4>
 80031e0:	4826      	ldr	r0, [pc, #152]	@ (800327c <_printf_i+0x238>)
 80031e2:	e7e9      	b.n	80031b8 <_printf_i+0x174>
 80031e4:	6823      	ldr	r3, [r4, #0]
 80031e6:	f023 0320 	bic.w	r3, r3, #32
 80031ea:	6023      	str	r3, [r4, #0]
 80031ec:	e7f6      	b.n	80031dc <_printf_i+0x198>
 80031ee:	4616      	mov	r6, r2
 80031f0:	e7bd      	b.n	800316e <_printf_i+0x12a>
 80031f2:	6833      	ldr	r3, [r6, #0]
 80031f4:	6825      	ldr	r5, [r4, #0]
 80031f6:	1d18      	adds	r0, r3, #4
 80031f8:	6961      	ldr	r1, [r4, #20]
 80031fa:	6030      	str	r0, [r6, #0]
 80031fc:	062e      	lsls	r6, r5, #24
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	d501      	bpl.n	8003206 <_printf_i+0x1c2>
 8003202:	6019      	str	r1, [r3, #0]
 8003204:	e002      	b.n	800320c <_printf_i+0x1c8>
 8003206:	0668      	lsls	r0, r5, #25
 8003208:	d5fb      	bpl.n	8003202 <_printf_i+0x1be>
 800320a:	8019      	strh	r1, [r3, #0]
 800320c:	2300      	movs	r3, #0
 800320e:	4616      	mov	r6, r2
 8003210:	6123      	str	r3, [r4, #16]
 8003212:	e7bc      	b.n	800318e <_printf_i+0x14a>
 8003214:	6833      	ldr	r3, [r6, #0]
 8003216:	2100      	movs	r1, #0
 8003218:	1d1a      	adds	r2, r3, #4
 800321a:	6032      	str	r2, [r6, #0]
 800321c:	681e      	ldr	r6, [r3, #0]
 800321e:	6862      	ldr	r2, [r4, #4]
 8003220:	4630      	mov	r0, r6
 8003222:	f000 f96b 	bl	80034fc <memchr>
 8003226:	b108      	cbz	r0, 800322c <_printf_i+0x1e8>
 8003228:	1b80      	subs	r0, r0, r6
 800322a:	6060      	str	r0, [r4, #4]
 800322c:	6863      	ldr	r3, [r4, #4]
 800322e:	6123      	str	r3, [r4, #16]
 8003230:	2300      	movs	r3, #0
 8003232:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003236:	e7aa      	b.n	800318e <_printf_i+0x14a>
 8003238:	4632      	mov	r2, r6
 800323a:	4649      	mov	r1, r9
 800323c:	4640      	mov	r0, r8
 800323e:	6923      	ldr	r3, [r4, #16]
 8003240:	47d0      	blx	sl
 8003242:	3001      	adds	r0, #1
 8003244:	d0ad      	beq.n	80031a2 <_printf_i+0x15e>
 8003246:	6823      	ldr	r3, [r4, #0]
 8003248:	079b      	lsls	r3, r3, #30
 800324a:	d413      	bmi.n	8003274 <_printf_i+0x230>
 800324c:	68e0      	ldr	r0, [r4, #12]
 800324e:	9b03      	ldr	r3, [sp, #12]
 8003250:	4298      	cmp	r0, r3
 8003252:	bfb8      	it	lt
 8003254:	4618      	movlt	r0, r3
 8003256:	e7a6      	b.n	80031a6 <_printf_i+0x162>
 8003258:	2301      	movs	r3, #1
 800325a:	4632      	mov	r2, r6
 800325c:	4649      	mov	r1, r9
 800325e:	4640      	mov	r0, r8
 8003260:	47d0      	blx	sl
 8003262:	3001      	adds	r0, #1
 8003264:	d09d      	beq.n	80031a2 <_printf_i+0x15e>
 8003266:	3501      	adds	r5, #1
 8003268:	68e3      	ldr	r3, [r4, #12]
 800326a:	9903      	ldr	r1, [sp, #12]
 800326c:	1a5b      	subs	r3, r3, r1
 800326e:	42ab      	cmp	r3, r5
 8003270:	dcf2      	bgt.n	8003258 <_printf_i+0x214>
 8003272:	e7eb      	b.n	800324c <_printf_i+0x208>
 8003274:	2500      	movs	r5, #0
 8003276:	f104 0619 	add.w	r6, r4, #25
 800327a:	e7f5      	b.n	8003268 <_printf_i+0x224>
 800327c:	08003617 	.word	0x08003617
 8003280:	08003628 	.word	0x08003628

08003284 <__sflush_r>:
 8003284:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800328a:	0716      	lsls	r6, r2, #28
 800328c:	4605      	mov	r5, r0
 800328e:	460c      	mov	r4, r1
 8003290:	d454      	bmi.n	800333c <__sflush_r+0xb8>
 8003292:	684b      	ldr	r3, [r1, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	dc02      	bgt.n	800329e <__sflush_r+0x1a>
 8003298:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800329a:	2b00      	cmp	r3, #0
 800329c:	dd48      	ble.n	8003330 <__sflush_r+0xac>
 800329e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80032a0:	2e00      	cmp	r6, #0
 80032a2:	d045      	beq.n	8003330 <__sflush_r+0xac>
 80032a4:	2300      	movs	r3, #0
 80032a6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80032aa:	682f      	ldr	r7, [r5, #0]
 80032ac:	6a21      	ldr	r1, [r4, #32]
 80032ae:	602b      	str	r3, [r5, #0]
 80032b0:	d030      	beq.n	8003314 <__sflush_r+0x90>
 80032b2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80032b4:	89a3      	ldrh	r3, [r4, #12]
 80032b6:	0759      	lsls	r1, r3, #29
 80032b8:	d505      	bpl.n	80032c6 <__sflush_r+0x42>
 80032ba:	6863      	ldr	r3, [r4, #4]
 80032bc:	1ad2      	subs	r2, r2, r3
 80032be:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80032c0:	b10b      	cbz	r3, 80032c6 <__sflush_r+0x42>
 80032c2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80032c4:	1ad2      	subs	r2, r2, r3
 80032c6:	2300      	movs	r3, #0
 80032c8:	4628      	mov	r0, r5
 80032ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80032cc:	6a21      	ldr	r1, [r4, #32]
 80032ce:	47b0      	blx	r6
 80032d0:	1c43      	adds	r3, r0, #1
 80032d2:	89a3      	ldrh	r3, [r4, #12]
 80032d4:	d106      	bne.n	80032e4 <__sflush_r+0x60>
 80032d6:	6829      	ldr	r1, [r5, #0]
 80032d8:	291d      	cmp	r1, #29
 80032da:	d82b      	bhi.n	8003334 <__sflush_r+0xb0>
 80032dc:	4a28      	ldr	r2, [pc, #160]	@ (8003380 <__sflush_r+0xfc>)
 80032de:	410a      	asrs	r2, r1
 80032e0:	07d6      	lsls	r6, r2, #31
 80032e2:	d427      	bmi.n	8003334 <__sflush_r+0xb0>
 80032e4:	2200      	movs	r2, #0
 80032e6:	6062      	str	r2, [r4, #4]
 80032e8:	6922      	ldr	r2, [r4, #16]
 80032ea:	04d9      	lsls	r1, r3, #19
 80032ec:	6022      	str	r2, [r4, #0]
 80032ee:	d504      	bpl.n	80032fa <__sflush_r+0x76>
 80032f0:	1c42      	adds	r2, r0, #1
 80032f2:	d101      	bne.n	80032f8 <__sflush_r+0x74>
 80032f4:	682b      	ldr	r3, [r5, #0]
 80032f6:	b903      	cbnz	r3, 80032fa <__sflush_r+0x76>
 80032f8:	6560      	str	r0, [r4, #84]	@ 0x54
 80032fa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80032fc:	602f      	str	r7, [r5, #0]
 80032fe:	b1b9      	cbz	r1, 8003330 <__sflush_r+0xac>
 8003300:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003304:	4299      	cmp	r1, r3
 8003306:	d002      	beq.n	800330e <__sflush_r+0x8a>
 8003308:	4628      	mov	r0, r5
 800330a:	f7ff fbf3 	bl	8002af4 <_free_r>
 800330e:	2300      	movs	r3, #0
 8003310:	6363      	str	r3, [r4, #52]	@ 0x34
 8003312:	e00d      	b.n	8003330 <__sflush_r+0xac>
 8003314:	2301      	movs	r3, #1
 8003316:	4628      	mov	r0, r5
 8003318:	47b0      	blx	r6
 800331a:	4602      	mov	r2, r0
 800331c:	1c50      	adds	r0, r2, #1
 800331e:	d1c9      	bne.n	80032b4 <__sflush_r+0x30>
 8003320:	682b      	ldr	r3, [r5, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d0c6      	beq.n	80032b4 <__sflush_r+0x30>
 8003326:	2b1d      	cmp	r3, #29
 8003328:	d001      	beq.n	800332e <__sflush_r+0xaa>
 800332a:	2b16      	cmp	r3, #22
 800332c:	d11d      	bne.n	800336a <__sflush_r+0xe6>
 800332e:	602f      	str	r7, [r5, #0]
 8003330:	2000      	movs	r0, #0
 8003332:	e021      	b.n	8003378 <__sflush_r+0xf4>
 8003334:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003338:	b21b      	sxth	r3, r3
 800333a:	e01a      	b.n	8003372 <__sflush_r+0xee>
 800333c:	690f      	ldr	r7, [r1, #16]
 800333e:	2f00      	cmp	r7, #0
 8003340:	d0f6      	beq.n	8003330 <__sflush_r+0xac>
 8003342:	0793      	lsls	r3, r2, #30
 8003344:	bf18      	it	ne
 8003346:	2300      	movne	r3, #0
 8003348:	680e      	ldr	r6, [r1, #0]
 800334a:	bf08      	it	eq
 800334c:	694b      	ldreq	r3, [r1, #20]
 800334e:	1bf6      	subs	r6, r6, r7
 8003350:	600f      	str	r7, [r1, #0]
 8003352:	608b      	str	r3, [r1, #8]
 8003354:	2e00      	cmp	r6, #0
 8003356:	ddeb      	ble.n	8003330 <__sflush_r+0xac>
 8003358:	4633      	mov	r3, r6
 800335a:	463a      	mov	r2, r7
 800335c:	4628      	mov	r0, r5
 800335e:	6a21      	ldr	r1, [r4, #32]
 8003360:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003364:	47e0      	blx	ip
 8003366:	2800      	cmp	r0, #0
 8003368:	dc07      	bgt.n	800337a <__sflush_r+0xf6>
 800336a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800336e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003372:	f04f 30ff 	mov.w	r0, #4294967295
 8003376:	81a3      	strh	r3, [r4, #12]
 8003378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800337a:	4407      	add	r7, r0
 800337c:	1a36      	subs	r6, r6, r0
 800337e:	e7e9      	b.n	8003354 <__sflush_r+0xd0>
 8003380:	dfbffffe 	.word	0xdfbffffe

08003384 <_fflush_r>:
 8003384:	b538      	push	{r3, r4, r5, lr}
 8003386:	690b      	ldr	r3, [r1, #16]
 8003388:	4605      	mov	r5, r0
 800338a:	460c      	mov	r4, r1
 800338c:	b913      	cbnz	r3, 8003394 <_fflush_r+0x10>
 800338e:	2500      	movs	r5, #0
 8003390:	4628      	mov	r0, r5
 8003392:	bd38      	pop	{r3, r4, r5, pc}
 8003394:	b118      	cbz	r0, 800339e <_fflush_r+0x1a>
 8003396:	6a03      	ldr	r3, [r0, #32]
 8003398:	b90b      	cbnz	r3, 800339e <_fflush_r+0x1a>
 800339a:	f7ff f99b 	bl	80026d4 <__sinit>
 800339e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d0f3      	beq.n	800338e <_fflush_r+0xa>
 80033a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80033a8:	07d0      	lsls	r0, r2, #31
 80033aa:	d404      	bmi.n	80033b6 <_fflush_r+0x32>
 80033ac:	0599      	lsls	r1, r3, #22
 80033ae:	d402      	bmi.n	80033b6 <_fflush_r+0x32>
 80033b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80033b2:	f7ff fb9c 	bl	8002aee <__retarget_lock_acquire_recursive>
 80033b6:	4628      	mov	r0, r5
 80033b8:	4621      	mov	r1, r4
 80033ba:	f7ff ff63 	bl	8003284 <__sflush_r>
 80033be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80033c0:	4605      	mov	r5, r0
 80033c2:	07da      	lsls	r2, r3, #31
 80033c4:	d4e4      	bmi.n	8003390 <_fflush_r+0xc>
 80033c6:	89a3      	ldrh	r3, [r4, #12]
 80033c8:	059b      	lsls	r3, r3, #22
 80033ca:	d4e1      	bmi.n	8003390 <_fflush_r+0xc>
 80033cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80033ce:	f7ff fb8f 	bl	8002af0 <__retarget_lock_release_recursive>
 80033d2:	e7dd      	b.n	8003390 <_fflush_r+0xc>

080033d4 <__swhatbuf_r>:
 80033d4:	b570      	push	{r4, r5, r6, lr}
 80033d6:	460c      	mov	r4, r1
 80033d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033dc:	4615      	mov	r5, r2
 80033de:	2900      	cmp	r1, #0
 80033e0:	461e      	mov	r6, r3
 80033e2:	b096      	sub	sp, #88	@ 0x58
 80033e4:	da0c      	bge.n	8003400 <__swhatbuf_r+0x2c>
 80033e6:	89a3      	ldrh	r3, [r4, #12]
 80033e8:	2100      	movs	r1, #0
 80033ea:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80033ee:	bf14      	ite	ne
 80033f0:	2340      	movne	r3, #64	@ 0x40
 80033f2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80033f6:	2000      	movs	r0, #0
 80033f8:	6031      	str	r1, [r6, #0]
 80033fa:	602b      	str	r3, [r5, #0]
 80033fc:	b016      	add	sp, #88	@ 0x58
 80033fe:	bd70      	pop	{r4, r5, r6, pc}
 8003400:	466a      	mov	r2, sp
 8003402:	f000 f849 	bl	8003498 <_fstat_r>
 8003406:	2800      	cmp	r0, #0
 8003408:	dbed      	blt.n	80033e6 <__swhatbuf_r+0x12>
 800340a:	9901      	ldr	r1, [sp, #4]
 800340c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003410:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003414:	4259      	negs	r1, r3
 8003416:	4159      	adcs	r1, r3
 8003418:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800341c:	e7eb      	b.n	80033f6 <__swhatbuf_r+0x22>

0800341e <__smakebuf_r>:
 800341e:	898b      	ldrh	r3, [r1, #12]
 8003420:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003422:	079d      	lsls	r5, r3, #30
 8003424:	4606      	mov	r6, r0
 8003426:	460c      	mov	r4, r1
 8003428:	d507      	bpl.n	800343a <__smakebuf_r+0x1c>
 800342a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800342e:	6023      	str	r3, [r4, #0]
 8003430:	6123      	str	r3, [r4, #16]
 8003432:	2301      	movs	r3, #1
 8003434:	6163      	str	r3, [r4, #20]
 8003436:	b003      	add	sp, #12
 8003438:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800343a:	466a      	mov	r2, sp
 800343c:	ab01      	add	r3, sp, #4
 800343e:	f7ff ffc9 	bl	80033d4 <__swhatbuf_r>
 8003442:	9f00      	ldr	r7, [sp, #0]
 8003444:	4605      	mov	r5, r0
 8003446:	4639      	mov	r1, r7
 8003448:	4630      	mov	r0, r6
 800344a:	f7ff fbbd 	bl	8002bc8 <_malloc_r>
 800344e:	b948      	cbnz	r0, 8003464 <__smakebuf_r+0x46>
 8003450:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003454:	059a      	lsls	r2, r3, #22
 8003456:	d4ee      	bmi.n	8003436 <__smakebuf_r+0x18>
 8003458:	f023 0303 	bic.w	r3, r3, #3
 800345c:	f043 0302 	orr.w	r3, r3, #2
 8003460:	81a3      	strh	r3, [r4, #12]
 8003462:	e7e2      	b.n	800342a <__smakebuf_r+0xc>
 8003464:	89a3      	ldrh	r3, [r4, #12]
 8003466:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800346a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800346e:	81a3      	strh	r3, [r4, #12]
 8003470:	9b01      	ldr	r3, [sp, #4]
 8003472:	6020      	str	r0, [r4, #0]
 8003474:	b15b      	cbz	r3, 800348e <__smakebuf_r+0x70>
 8003476:	4630      	mov	r0, r6
 8003478:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800347c:	f000 f81e 	bl	80034bc <_isatty_r>
 8003480:	b128      	cbz	r0, 800348e <__smakebuf_r+0x70>
 8003482:	89a3      	ldrh	r3, [r4, #12]
 8003484:	f023 0303 	bic.w	r3, r3, #3
 8003488:	f043 0301 	orr.w	r3, r3, #1
 800348c:	81a3      	strh	r3, [r4, #12]
 800348e:	89a3      	ldrh	r3, [r4, #12]
 8003490:	431d      	orrs	r5, r3
 8003492:	81a5      	strh	r5, [r4, #12]
 8003494:	e7cf      	b.n	8003436 <__smakebuf_r+0x18>
	...

08003498 <_fstat_r>:
 8003498:	b538      	push	{r3, r4, r5, lr}
 800349a:	2300      	movs	r3, #0
 800349c:	4d06      	ldr	r5, [pc, #24]	@ (80034b8 <_fstat_r+0x20>)
 800349e:	4604      	mov	r4, r0
 80034a0:	4608      	mov	r0, r1
 80034a2:	4611      	mov	r1, r2
 80034a4:	602b      	str	r3, [r5, #0]
 80034a6:	f7fd f969 	bl	800077c <_fstat>
 80034aa:	1c43      	adds	r3, r0, #1
 80034ac:	d102      	bne.n	80034b4 <_fstat_r+0x1c>
 80034ae:	682b      	ldr	r3, [r5, #0]
 80034b0:	b103      	cbz	r3, 80034b4 <_fstat_r+0x1c>
 80034b2:	6023      	str	r3, [r4, #0]
 80034b4:	bd38      	pop	{r3, r4, r5, pc}
 80034b6:	bf00      	nop
 80034b8:	20000248 	.word	0x20000248

080034bc <_isatty_r>:
 80034bc:	b538      	push	{r3, r4, r5, lr}
 80034be:	2300      	movs	r3, #0
 80034c0:	4d05      	ldr	r5, [pc, #20]	@ (80034d8 <_isatty_r+0x1c>)
 80034c2:	4604      	mov	r4, r0
 80034c4:	4608      	mov	r0, r1
 80034c6:	602b      	str	r3, [r5, #0]
 80034c8:	f7fd f967 	bl	800079a <_isatty>
 80034cc:	1c43      	adds	r3, r0, #1
 80034ce:	d102      	bne.n	80034d6 <_isatty_r+0x1a>
 80034d0:	682b      	ldr	r3, [r5, #0]
 80034d2:	b103      	cbz	r3, 80034d6 <_isatty_r+0x1a>
 80034d4:	6023      	str	r3, [r4, #0]
 80034d6:	bd38      	pop	{r3, r4, r5, pc}
 80034d8:	20000248 	.word	0x20000248

080034dc <_sbrk_r>:
 80034dc:	b538      	push	{r3, r4, r5, lr}
 80034de:	2300      	movs	r3, #0
 80034e0:	4d05      	ldr	r5, [pc, #20]	@ (80034f8 <_sbrk_r+0x1c>)
 80034e2:	4604      	mov	r4, r0
 80034e4:	4608      	mov	r0, r1
 80034e6:	602b      	str	r3, [r5, #0]
 80034e8:	f7fd f96e 	bl	80007c8 <_sbrk>
 80034ec:	1c43      	adds	r3, r0, #1
 80034ee:	d102      	bne.n	80034f6 <_sbrk_r+0x1a>
 80034f0:	682b      	ldr	r3, [r5, #0]
 80034f2:	b103      	cbz	r3, 80034f6 <_sbrk_r+0x1a>
 80034f4:	6023      	str	r3, [r4, #0]
 80034f6:	bd38      	pop	{r3, r4, r5, pc}
 80034f8:	20000248 	.word	0x20000248

080034fc <memchr>:
 80034fc:	4603      	mov	r3, r0
 80034fe:	b510      	push	{r4, lr}
 8003500:	b2c9      	uxtb	r1, r1
 8003502:	4402      	add	r2, r0
 8003504:	4293      	cmp	r3, r2
 8003506:	4618      	mov	r0, r3
 8003508:	d101      	bne.n	800350e <memchr+0x12>
 800350a:	2000      	movs	r0, #0
 800350c:	e003      	b.n	8003516 <memchr+0x1a>
 800350e:	7804      	ldrb	r4, [r0, #0]
 8003510:	3301      	adds	r3, #1
 8003512:	428c      	cmp	r4, r1
 8003514:	d1f6      	bne.n	8003504 <memchr+0x8>
 8003516:	bd10      	pop	{r4, pc}

08003518 <_init>:
 8003518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800351a:	bf00      	nop
 800351c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800351e:	bc08      	pop	{r3}
 8003520:	469e      	mov	lr, r3
 8003522:	4770      	bx	lr

08003524 <_fini>:
 8003524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003526:	bf00      	nop
 8003528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800352a:	bc08      	pop	{r3}
 800352c:	469e      	mov	lr, r3
 800352e:	4770      	bx	lr
