
Led_7seg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028b8  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08002b50  08002b50  00003b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002b6c  08002b6c  00003b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08002b70  08002b70  00003b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000014  24000000  08002b74  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000070  24000014  08002b88  00004014  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24000084  08002b88  00004084  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00004014  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c876  00000000  00000000  00004042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000018f1  00000000  00000000  000108b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000bc0  00000000  00000000  000121b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000912  00000000  00000000  00012d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000357f0  00000000  00000000  00013682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000d459  00000000  00000000  00048e72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015a095  00000000  00000000  000562cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001b0360  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003124  00000000  00000000  001b03a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000004a  00000000  00000000  001b34c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000014 	.word	0x24000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08002b38 	.word	0x08002b38

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000018 	.word	0x24000018
 80002d4:	08002b38 	.word	0x08002b38

080002d8 <display_digit>:
    0x90  // 9
};


/* Function to display a digit on the 7-segment */
void display_digit(uint8_t digit, uint8_t position) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	460a      	mov	r2, r1
 80002e2:	71fb      	strb	r3, [r7, #7]
 80002e4:	4613      	mov	r3, r2
 80002e6:	71bb      	strb	r3, [r7, #6]
    // Turn off both digits
    HAL_GPIO_WritePin(DIGIT_PORT, DIGIT1_PIN, GPIO_PIN_SET);
 80002e8:	2201      	movs	r2, #1
 80002ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002ee:	483a      	ldr	r0, [pc, #232]	@ (80003d8 <display_digit+0x100>)
 80002f0:	f000 ffa8 	bl	8001244 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DIGIT_PORT, DIGIT2_PIN, GPIO_PIN_SET);
 80002f4:	2201      	movs	r2, #1
 80002f6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80002fa:	4837      	ldr	r0, [pc, #220]	@ (80003d8 <display_digit+0x100>)
 80002fc:	f000 ffa2 	bl	8001244 <HAL_GPIO_WritePin>

    // Set segment pattern
    uint8_t pattern = segment_patterns[digit];
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	4a36      	ldr	r2, [pc, #216]	@ (80003dc <display_digit+0x104>)
 8000304:	5cd3      	ldrb	r3, [r2, r3]
 8000306:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(SEG_PORT, SEG_A_PIN, (pattern & (1 << 0)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000308:	7bfb      	ldrb	r3, [r7, #15]
 800030a:	f003 0301 	and.w	r3, r3, #1
 800030e:	b2db      	uxtb	r3, r3
 8000310:	461a      	mov	r2, r3
 8000312:	2101      	movs	r1, #1
 8000314:	4830      	ldr	r0, [pc, #192]	@ (80003d8 <display_digit+0x100>)
 8000316:	f000 ff95 	bl	8001244 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_PORT, SEG_B_PIN, (pattern & (1 << 1)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800031a:	7bfb      	ldrb	r3, [r7, #15]
 800031c:	105b      	asrs	r3, r3, #1
 800031e:	b2db      	uxtb	r3, r3
 8000320:	f003 0301 	and.w	r3, r3, #1
 8000324:	b2db      	uxtb	r3, r3
 8000326:	461a      	mov	r2, r3
 8000328:	2102      	movs	r1, #2
 800032a:	482b      	ldr	r0, [pc, #172]	@ (80003d8 <display_digit+0x100>)
 800032c:	f000 ff8a 	bl	8001244 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_PORT, SEG_C_PIN, (pattern & (1 << 2)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000330:	7bfb      	ldrb	r3, [r7, #15]
 8000332:	109b      	asrs	r3, r3, #2
 8000334:	b2db      	uxtb	r3, r3
 8000336:	f003 0301 	and.w	r3, r3, #1
 800033a:	b2db      	uxtb	r3, r3
 800033c:	461a      	mov	r2, r3
 800033e:	2104      	movs	r1, #4
 8000340:	4825      	ldr	r0, [pc, #148]	@ (80003d8 <display_digit+0x100>)
 8000342:	f000 ff7f 	bl	8001244 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_PORT, SEG_D_PIN, (pattern & (1 << 3)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000346:	7bfb      	ldrb	r3, [r7, #15]
 8000348:	10db      	asrs	r3, r3, #3
 800034a:	b2db      	uxtb	r3, r3
 800034c:	f003 0301 	and.w	r3, r3, #1
 8000350:	b2db      	uxtb	r3, r3
 8000352:	461a      	mov	r2, r3
 8000354:	2108      	movs	r1, #8
 8000356:	4820      	ldr	r0, [pc, #128]	@ (80003d8 <display_digit+0x100>)
 8000358:	f000 ff74 	bl	8001244 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_PORT, SEG_E_PIN, (pattern & (1 << 4)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800035c:	7bfb      	ldrb	r3, [r7, #15]
 800035e:	111b      	asrs	r3, r3, #4
 8000360:	b2db      	uxtb	r3, r3
 8000362:	f003 0301 	and.w	r3, r3, #1
 8000366:	b2db      	uxtb	r3, r3
 8000368:	461a      	mov	r2, r3
 800036a:	2110      	movs	r1, #16
 800036c:	481a      	ldr	r0, [pc, #104]	@ (80003d8 <display_digit+0x100>)
 800036e:	f000 ff69 	bl	8001244 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_PORT, SEG_F_PIN, (pattern & (1 << 5)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000372:	7bfb      	ldrb	r3, [r7, #15]
 8000374:	115b      	asrs	r3, r3, #5
 8000376:	b2db      	uxtb	r3, r3
 8000378:	f003 0301 	and.w	r3, r3, #1
 800037c:	b2db      	uxtb	r3, r3
 800037e:	461a      	mov	r2, r3
 8000380:	2120      	movs	r1, #32
 8000382:	4815      	ldr	r0, [pc, #84]	@ (80003d8 <display_digit+0x100>)
 8000384:	f000 ff5e 	bl	8001244 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_PORT, SEG_G_PIN, (pattern & (1 << 6)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000388:	7bfb      	ldrb	r3, [r7, #15]
 800038a:	119b      	asrs	r3, r3, #6
 800038c:	b2db      	uxtb	r3, r3
 800038e:	f003 0301 	and.w	r3, r3, #1
 8000392:	b2db      	uxtb	r3, r3
 8000394:	461a      	mov	r2, r3
 8000396:	2140      	movs	r1, #64	@ 0x40
 8000398:	480f      	ldr	r0, [pc, #60]	@ (80003d8 <display_digit+0x100>)
 800039a:	f000 ff53 	bl	8001244 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_PORT, SEG_DP_PIN, GPIO_PIN_SET); // Decimal point OFF
 800039e:	2201      	movs	r2, #1
 80003a0:	2180      	movs	r1, #128	@ 0x80
 80003a2:	480d      	ldr	r0, [pc, #52]	@ (80003d8 <display_digit+0x100>)
 80003a4:	f000 ff4e 	bl	8001244 <HAL_GPIO_WritePin>

    // Enable the selected digit (common anode, SET to turn ON)
    if (position == 1) {
 80003a8:	79bb      	ldrb	r3, [r7, #6]
 80003aa:	2b01      	cmp	r3, #1
 80003ac:	d106      	bne.n	80003bc <display_digit+0xe4>
        HAL_GPIO_WritePin(DIGIT_PORT, DIGIT1_PIN, GPIO_PIN_RESET); // Units digit
 80003ae:	2200      	movs	r2, #0
 80003b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003b4:	4808      	ldr	r0, [pc, #32]	@ (80003d8 <display_digit+0x100>)
 80003b6:	f000 ff45 	bl	8001244 <HAL_GPIO_WritePin>
    } else if (position == 2) {
        HAL_GPIO_WritePin(DIGIT_PORT, DIGIT2_PIN, GPIO_PIN_RESET); // Tens digit
    }
}
 80003ba:	e008      	b.n	80003ce <display_digit+0xf6>
    } else if (position == 2) {
 80003bc:	79bb      	ldrb	r3, [r7, #6]
 80003be:	2b02      	cmp	r3, #2
 80003c0:	d105      	bne.n	80003ce <display_digit+0xf6>
        HAL_GPIO_WritePin(DIGIT_PORT, DIGIT2_PIN, GPIO_PIN_RESET); // Tens digit
 80003c2:	2200      	movs	r2, #0
 80003c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80003c8:	4803      	ldr	r0, [pc, #12]	@ (80003d8 <display_digit+0x100>)
 80003ca:	f000 ff3b 	bl	8001244 <HAL_GPIO_WritePin>
}
 80003ce:	bf00      	nop
 80003d0:	3710      	adds	r7, #16
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	58020000 	.word	0x58020000
 80003dc:	08002b50 	.word	0x08002b50

080003e0 <refresh_display>:

/* Function to refresh the display with uniform timing */
void refresh_display(uint8_t tens_digit, uint8_t units_digit) {
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	4603      	mov	r3, r0
 80003e8:	460a      	mov	r2, r1
 80003ea:	71fb      	strb	r3, [r7, #7]
 80003ec:	4613      	mov	r3, r2
 80003ee:	71bb      	strb	r3, [r7, #6]
    // Display tens digit
    display_digit(tens_digit, 2);
 80003f0:	79fb      	ldrb	r3, [r7, #7]
 80003f2:	2102      	movs	r1, #2
 80003f4:	4618      	mov	r0, r3
 80003f6:	f7ff ff6f 	bl	80002d8 <display_digit>
    HAL_Delay(2); // Fixed display time of 2ms
 80003fa:	2002      	movs	r0, #2
 80003fc:	f000 fbba 	bl	8000b74 <HAL_Delay>

    // Display units digit
    display_digit(units_digit, 1);
 8000400:	79bb      	ldrb	r3, [r7, #6]
 8000402:	2101      	movs	r1, #1
 8000404:	4618      	mov	r0, r3
 8000406:	f7ff ff67 	bl	80002d8 <display_digit>
    HAL_Delay(2); // Fixed display time of 2ms
 800040a:	2002      	movs	r0, #2
 800040c:	f000 fbb2 	bl	8000b74 <HAL_Delay>
}
 8000410:	bf00      	nop
 8000412:	3708      	adds	r7, #8
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}

08000418 <HAL_GPIO_EXTI_Callback>:

//callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	4603      	mov	r3, r0
 8000420:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == BUTTON_INC_PIN) {
 8000422:	88fb      	ldrh	r3, [r7, #6]
 8000424:	2b02      	cmp	r3, #2
 8000426:	d103      	bne.n	8000430 <HAL_GPIO_EXTI_Callback+0x18>
        inc_flag = 1;
 8000428:	4b07      	ldr	r3, [pc, #28]	@ (8000448 <HAL_GPIO_EXTI_Callback+0x30>)
 800042a:	2201      	movs	r2, #1
 800042c:	701a      	strb	r2, [r3, #0]
    } else if (GPIO_Pin == BUTTON_DEC_PIN) {
        dec_flag = 1;
    }
}
 800042e:	e005      	b.n	800043c <HAL_GPIO_EXTI_Callback+0x24>
    } else if (GPIO_Pin == BUTTON_DEC_PIN) {
 8000430:	88fb      	ldrh	r3, [r7, #6]
 8000432:	2b01      	cmp	r3, #1
 8000434:	d102      	bne.n	800043c <HAL_GPIO_EXTI_Callback+0x24>
        dec_flag = 1;
 8000436:	4b05      	ldr	r3, [pc, #20]	@ (800044c <HAL_GPIO_EXTI_Callback+0x34>)
 8000438:	2201      	movs	r2, #1
 800043a:	701a      	strb	r2, [r3, #0]
}
 800043c:	bf00      	nop
 800043e:	370c      	adds	r7, #12
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr
 8000448:	2400007c 	.word	0x2400007c
 800044c:	2400007d 	.word	0x2400007d

08000450 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b084      	sub	sp, #16
 8000454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000456:	f000 f99d 	bl	8000794 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800045a:	f000 faf9 	bl	8000a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800045e:	f000 f86d 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000462:	f000 f923 	bl	80006ac <MX_GPIO_Init>
  MX_TIM3_Init();
 8000466:	f000 f8d3 	bl	8000610 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Bắt đầu PWM trên kênh TIM2 Channel 1
     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800046a:	2108      	movs	r1, #8
 800046c:	482e      	ldr	r0, [pc, #184]	@ (8000528 <main+0xd8>)
 800046e:	f001 ff39 	bl	80022e4 <HAL_TIM_PWM_Start>
     uint32_t last_btn_tick = 0;
 8000472:	2300      	movs	r3, #0
 8000474:	60fb      	str	r3, [r7, #12]
//	                  count = 1; // Loop back to 01
//	              }
//	              previous_time = HAL_GetTick();
//	          }

	  uint32_t now = HAL_GetTick();
 8000476:	f000 fb71 	bl	8000b5c <HAL_GetTick>
 800047a:	60b8      	str	r0, [r7, #8]
	         if (inc_flag && (now - last_btn_tick) > 200) {
 800047c:	4b2b      	ldr	r3, [pc, #172]	@ (800052c <main+0xdc>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	b2db      	uxtb	r3, r3
 8000482:	2b00      	cmp	r3, #0
 8000484:	d019      	beq.n	80004ba <main+0x6a>
 8000486:	68ba      	ldr	r2, [r7, #8]
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	1ad3      	subs	r3, r2, r3
 800048c:	2bc8      	cmp	r3, #200	@ 0xc8
 800048e:	d914      	bls.n	80004ba <main+0x6a>
	             inc_flag = 0;
 8000490:	4b26      	ldr	r3, [pc, #152]	@ (800052c <main+0xdc>)
 8000492:	2200      	movs	r2, #0
 8000494:	701a      	strb	r2, [r3, #0]
	             if (count < 99) count++; else count = 1;
 8000496:	4b26      	ldr	r3, [pc, #152]	@ (8000530 <main+0xe0>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	b2db      	uxtb	r3, r3
 800049c:	2b62      	cmp	r3, #98	@ 0x62
 800049e:	d807      	bhi.n	80004b0 <main+0x60>
 80004a0:	4b23      	ldr	r3, [pc, #140]	@ (8000530 <main+0xe0>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	3301      	adds	r3, #1
 80004a8:	b2da      	uxtb	r2, r3
 80004aa:	4b21      	ldr	r3, [pc, #132]	@ (8000530 <main+0xe0>)
 80004ac:	701a      	strb	r2, [r3, #0]
 80004ae:	e002      	b.n	80004b6 <main+0x66>
 80004b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000530 <main+0xe0>)
 80004b2:	2201      	movs	r2, #1
 80004b4:	701a      	strb	r2, [r3, #0]
	             last_btn_tick = now;
 80004b6:	68bb      	ldr	r3, [r7, #8]
 80004b8:	60fb      	str	r3, [r7, #12]
	         }
	         if (dec_flag && (now - last_btn_tick) > 200) {
 80004ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000534 <main+0xe4>)
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d015      	beq.n	80004f0 <main+0xa0>
 80004c4:	68ba      	ldr	r2, [r7, #8]
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	1ad3      	subs	r3, r2, r3
 80004ca:	2bc8      	cmp	r3, #200	@ 0xc8
 80004cc:	d910      	bls.n	80004f0 <main+0xa0>
	             dec_flag = 0;
 80004ce:	4b19      	ldr	r3, [pc, #100]	@ (8000534 <main+0xe4>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	701a      	strb	r2, [r3, #0]
	             if (count > 1) count--;
 80004d4:	4b16      	ldr	r3, [pc, #88]	@ (8000530 <main+0xe0>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d906      	bls.n	80004ec <main+0x9c>
 80004de:	4b14      	ldr	r3, [pc, #80]	@ (8000530 <main+0xe0>)
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	3b01      	subs	r3, #1
 80004e6:	b2da      	uxtb	r2, r3
 80004e8:	4b11      	ldr	r3, [pc, #68]	@ (8000530 <main+0xe0>)
 80004ea:	701a      	strb	r2, [r3, #0]
	             last_btn_tick = now;
 80004ec:	68bb      	ldr	r3, [r7, #8]
 80004ee:	60fb      	str	r3, [r7, #12]
	         }

	         uint8_t tens_digit = count / 10;
 80004f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000530 <main+0xe0>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	4a10      	ldr	r2, [pc, #64]	@ (8000538 <main+0xe8>)
 80004f8:	fba2 2303 	umull	r2, r3, r2, r3
 80004fc:	08db      	lsrs	r3, r3, #3
 80004fe:	71fb      	strb	r3, [r7, #7]
	         uint8_t units_digit = count % 10;
 8000500:	4b0b      	ldr	r3, [pc, #44]	@ (8000530 <main+0xe0>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	b2da      	uxtb	r2, r3
 8000506:	4b0c      	ldr	r3, [pc, #48]	@ (8000538 <main+0xe8>)
 8000508:	fba3 1302 	umull	r1, r3, r3, r2
 800050c:	08d9      	lsrs	r1, r3, #3
 800050e:	460b      	mov	r3, r1
 8000510:	009b      	lsls	r3, r3, #2
 8000512:	440b      	add	r3, r1
 8000514:	005b      	lsls	r3, r3, #1
 8000516:	1ad3      	subs	r3, r2, r3
 8000518:	71bb      	strb	r3, [r7, #6]
	         refresh_display(tens_digit, units_digit);
 800051a:	79ba      	ldrb	r2, [r7, #6]
 800051c:	79fb      	ldrb	r3, [r7, #7]
 800051e:	4611      	mov	r1, r2
 8000520:	4618      	mov	r0, r3
 8000522:	f7ff ff5d 	bl	80003e0 <refresh_display>
  {
 8000526:	e7a6      	b.n	8000476 <main+0x26>
 8000528:	24000030 	.word	0x24000030
 800052c:	2400007c 	.word	0x2400007c
 8000530:	24000000 	.word	0x24000000
 8000534:	2400007d 	.word	0x2400007d
 8000538:	cccccccd 	.word	0xcccccccd

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b09c      	sub	sp, #112	@ 0x70
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000546:	224c      	movs	r2, #76	@ 0x4c
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f002 fac8 	bl	8002ae0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	2220      	movs	r2, #32
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f002 fac2 	bl	8002ae0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800055c:	2002      	movs	r0, #2
 800055e:	f000 fea5 	bl	80012ac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000562:	2300      	movs	r3, #0
 8000564:	603b      	str	r3, [r7, #0]
 8000566:	4b28      	ldr	r3, [pc, #160]	@ (8000608 <SystemClock_Config+0xcc>)
 8000568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800056a:	4a27      	ldr	r2, [pc, #156]	@ (8000608 <SystemClock_Config+0xcc>)
 800056c:	f023 0301 	bic.w	r3, r3, #1
 8000570:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000572:	4b25      	ldr	r3, [pc, #148]	@ (8000608 <SystemClock_Config+0xcc>)
 8000574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	603b      	str	r3, [r7, #0]
 800057c:	4b23      	ldr	r3, [pc, #140]	@ (800060c <SystemClock_Config+0xd0>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000584:	4a21      	ldr	r2, [pc, #132]	@ (800060c <SystemClock_Config+0xd0>)
 8000586:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800058a:	6193      	str	r3, [r2, #24]
 800058c:	4b1f      	ldr	r3, [pc, #124]	@ (800060c <SystemClock_Config+0xd0>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000594:	603b      	str	r3, [r7, #0]
 8000596:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000598:	bf00      	nop
 800059a:	4b1c      	ldr	r3, [pc, #112]	@ (800060c <SystemClock_Config+0xd0>)
 800059c:	699b      	ldr	r3, [r3, #24]
 800059e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80005a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80005a6:	d1f8      	bne.n	800059a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a8:	2302      	movs	r3, #2
 80005aa:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80005ac:	2301      	movs	r3, #1
 80005ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b0:	2340      	movs	r3, #64	@ 0x40
 80005b2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005b4:	2300      	movs	r3, #0
 80005b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005bc:	4618      	mov	r0, r3
 80005be:	f000 feaf 	bl	8001320 <HAL_RCC_OscConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80005c8:	f000 f910 	bl	80007ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005cc:	233f      	movs	r3, #63	@ 0x3f
 80005ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005d0:	2300      	movs	r3, #0
 80005d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	2101      	movs	r1, #1
 80005f0:	4618      	mov	r0, r3
 80005f2:	f001 faef 	bl	8001bd4 <HAL_RCC_ClockConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005fc:	f000 f8f6 	bl	80007ec <Error_Handler>
  }
}
 8000600:	bf00      	nop
 8000602:	3770      	adds	r7, #112	@ 0x70
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	58000400 	.word	0x58000400
 800060c:	58024800 	.word	0x58024800

08000610 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000616:	f107 0310 	add.w	r3, r7, #16
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800062e:	4b1d      	ldr	r3, [pc, #116]	@ (80006a4 <MX_TIM3_Init+0x94>)
 8000630:	4a1d      	ldr	r2, [pc, #116]	@ (80006a8 <MX_TIM3_Init+0x98>)
 8000632:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000634:	4b1b      	ldr	r3, [pc, #108]	@ (80006a4 <MX_TIM3_Init+0x94>)
 8000636:	223f      	movs	r2, #63	@ 0x3f
 8000638:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800063a:	4b1a      	ldr	r3, [pc, #104]	@ (80006a4 <MX_TIM3_Init+0x94>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000640:	4b18      	ldr	r3, [pc, #96]	@ (80006a4 <MX_TIM3_Init+0x94>)
 8000642:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000646:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000648:	4b16      	ldr	r3, [pc, #88]	@ (80006a4 <MX_TIM3_Init+0x94>)
 800064a:	2200      	movs	r2, #0
 800064c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800064e:	4b15      	ldr	r3, [pc, #84]	@ (80006a4 <MX_TIM3_Init+0x94>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000654:	4813      	ldr	r0, [pc, #76]	@ (80006a4 <MX_TIM3_Init+0x94>)
 8000656:	f001 fded 	bl	8002234 <HAL_TIM_Base_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000660:	f000 f8c4 	bl	80007ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000664:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000668:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800066a:	f107 0310 	add.w	r3, r7, #16
 800066e:	4619      	mov	r1, r3
 8000670:	480c      	ldr	r0, [pc, #48]	@ (80006a4 <MX_TIM3_Init+0x94>)
 8000672:	f001 ff45 	bl	8002500 <HAL_TIM_ConfigClockSource>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800067c:	f000 f8b6 	bl	80007ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	4619      	mov	r1, r3
 800068c:	4805      	ldr	r0, [pc, #20]	@ (80006a4 <MX_TIM3_Init+0x94>)
 800068e:	f002 f999 	bl	80029c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000698:	f000 f8a8 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800069c:	bf00      	nop
 800069e:	3720      	adds	r7, #32
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	24000030 	.word	0x24000030
 80006a8:	40000400 	.word	0x40000400

080006ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	f107 030c 	add.w	r3, r7, #12
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c2:	4b31      	ldr	r3, [pc, #196]	@ (8000788 <MX_GPIO_Init+0xdc>)
 80006c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006c8:	4a2f      	ldr	r2, [pc, #188]	@ (8000788 <MX_GPIO_Init+0xdc>)
 80006ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006d2:	4b2d      	ldr	r3, [pc, #180]	@ (8000788 <MX_GPIO_Init+0xdc>)
 80006d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e0:	4b29      	ldr	r3, [pc, #164]	@ (8000788 <MX_GPIO_Init+0xdc>)
 80006e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006e6:	4a28      	ldr	r2, [pc, #160]	@ (8000788 <MX_GPIO_Init+0xdc>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006f0:	4b25      	ldr	r3, [pc, #148]	@ (8000788 <MX_GPIO_Init+0xdc>)
 80006f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fe:	4b22      	ldr	r3, [pc, #136]	@ (8000788 <MX_GPIO_Init+0xdc>)
 8000700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000704:	4a20      	ldr	r2, [pc, #128]	@ (8000788 <MX_GPIO_Init+0xdc>)
 8000706:	f043 0302 	orr.w	r3, r3, #2
 800070a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800070e:	4b1e      	ldr	r3, [pc, #120]	@ (8000788 <MX_GPIO_Init+0xdc>)
 8000710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000714:	f003 0302 	and.w	r3, r3, #2
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800071c:	2200      	movs	r2, #0
 800071e:	f240 61ff 	movw	r1, #1791	@ 0x6ff
 8000722:	481a      	ldr	r0, [pc, #104]	@ (800078c <MX_GPIO_Init+0xe0>)
 8000724:	f000 fd8e 	bl	8001244 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000728:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 800072c:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072e:	2301      	movs	r3, #1
 8000730:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000736:	2300      	movs	r3, #0
 8000738:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073a:	f107 030c 	add.w	r3, r7, #12
 800073e:	4619      	mov	r1, r3
 8000740:	4812      	ldr	r0, [pc, #72]	@ (800078c <MX_GPIO_Init+0xe0>)
 8000742:	f000 fbcf 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000746:	2303      	movs	r3, #3
 8000748:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800074a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800074e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000750:	2301      	movs	r3, #1
 8000752:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000754:	f107 030c 	add.w	r3, r7, #12
 8000758:	4619      	mov	r1, r3
 800075a:	480d      	ldr	r0, [pc, #52]	@ (8000790 <MX_GPIO_Init+0xe4>)
 800075c:	f000 fbc2 	bl	8000ee4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8000760:	2200      	movs	r2, #0
 8000762:	2101      	movs	r1, #1
 8000764:	2006      	movs	r0, #6
 8000766:	f000 fb10 	bl	8000d8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800076a:	2006      	movs	r0, #6
 800076c:	f000 fb27 	bl	8000dbe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);
 8000770:	2200      	movs	r2, #0
 8000772:	2102      	movs	r1, #2
 8000774:	2007      	movs	r0, #7
 8000776:	f000 fb08 	bl	8000d8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800077a:	2007      	movs	r0, #7
 800077c:	f000 fb1f 	bl	8000dbe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000780:	bf00      	nop
 8000782:	3720      	adds	r7, #32
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	58024400 	.word	0x58024400
 800078c:	58020000 	.word	0x58020000
 8000790:	58020400 	.word	0x58020400

08000794 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800079a:	463b      	mov	r3, r7
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80007a6:	f000 fb25 	bl	8000df4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007aa:	2301      	movs	r3, #1
 80007ac:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80007b6:	231f      	movs	r3, #31
 80007b8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80007ba:	2387      	movs	r3, #135	@ 0x87
 80007bc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80007be:	2300      	movs	r3, #0
 80007c0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80007c2:	2300      	movs	r3, #0
 80007c4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80007c6:	2301      	movs	r3, #1
 80007c8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80007ca:	2301      	movs	r3, #1
 80007cc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80007ce:	2300      	movs	r3, #0
 80007d0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80007d2:	2300      	movs	r3, #0
 80007d4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007d6:	463b      	mov	r3, r7
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 fb43 	bl	8000e64 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80007de:	2004      	movs	r0, #4
 80007e0:	f000 fb20 	bl	8000e24 <HAL_MPU_Enable>

}
 80007e4:	bf00      	nop
 80007e6:	3710      	adds	r7, #16
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f0:	b672      	cpsid	i
}
 80007f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f4:	bf00      	nop
 80007f6:	e7fd      	b.n	80007f4 <Error_Handler+0x8>

080007f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000828 <HAL_MspInit+0x30>)
 8000800:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000804:	4a08      	ldr	r2, [pc, #32]	@ (8000828 <HAL_MspInit+0x30>)
 8000806:	f043 0302 	orr.w	r3, r3, #2
 800080a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800080e:	4b06      	ldr	r3, [pc, #24]	@ (8000828 <HAL_MspInit+0x30>)
 8000810:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000814:	f003 0302 	and.w	r3, r3, #2
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081c:	bf00      	nop
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	58024400 	.word	0x58024400

0800082c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a0b      	ldr	r2, [pc, #44]	@ (8000868 <HAL_TIM_Base_MspInit+0x3c>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d10e      	bne.n	800085c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800083e:	4b0b      	ldr	r3, [pc, #44]	@ (800086c <HAL_TIM_Base_MspInit+0x40>)
 8000840:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000844:	4a09      	ldr	r2, [pc, #36]	@ (800086c <HAL_TIM_Base_MspInit+0x40>)
 8000846:	f043 0302 	orr.w	r3, r3, #2
 800084a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800084e:	4b07      	ldr	r3, [pc, #28]	@ (800086c <HAL_TIM_Base_MspInit+0x40>)
 8000850:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000854:	f003 0302 	and.w	r3, r3, #2
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800085c:	bf00      	nop
 800085e:	3714      	adds	r7, #20
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr
 8000868:	40000400 	.word	0x40000400
 800086c:	58024400 	.word	0x58024400

08000870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000874:	bf00      	nop
 8000876:	e7fd      	b.n	8000874 <NMI_Handler+0x4>

08000878 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <HardFault_Handler+0x4>

08000880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <MemManage_Handler+0x4>

08000888 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800088c:	bf00      	nop
 800088e:	e7fd      	b.n	800088c <BusFault_Handler+0x4>

08000890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000894:	bf00      	nop
 8000896:	e7fd      	b.n	8000894 <UsageFault_Handler+0x4>

08000898 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr

080008a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr

080008c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c6:	f000 f935 	bl	8000b34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}

080008ce <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80008d2:	2001      	movs	r0, #1
 80008d4:	f000 fccf 	bl	8001276 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}

080008dc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80008e0:	2002      	movs	r0, #2
 80008e2:	f000 fcc8 	bl	8001276 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008f0:	4b37      	ldr	r3, [pc, #220]	@ (80009d0 <SystemInit+0xe4>)
 80008f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008f6:	4a36      	ldr	r2, [pc, #216]	@ (80009d0 <SystemInit+0xe4>)
 80008f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000900:	4b34      	ldr	r3, [pc, #208]	@ (80009d4 <SystemInit+0xe8>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f003 030f 	and.w	r3, r3, #15
 8000908:	2b06      	cmp	r3, #6
 800090a:	d807      	bhi.n	800091c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800090c:	4b31      	ldr	r3, [pc, #196]	@ (80009d4 <SystemInit+0xe8>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f023 030f 	bic.w	r3, r3, #15
 8000914:	4a2f      	ldr	r2, [pc, #188]	@ (80009d4 <SystemInit+0xe8>)
 8000916:	f043 0307 	orr.w	r3, r3, #7
 800091a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800091c:	4b2e      	ldr	r3, [pc, #184]	@ (80009d8 <SystemInit+0xec>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a2d      	ldr	r2, [pc, #180]	@ (80009d8 <SystemInit+0xec>)
 8000922:	f043 0301 	orr.w	r3, r3, #1
 8000926:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000928:	4b2b      	ldr	r3, [pc, #172]	@ (80009d8 <SystemInit+0xec>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800092e:	4b2a      	ldr	r3, [pc, #168]	@ (80009d8 <SystemInit+0xec>)
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	4929      	ldr	r1, [pc, #164]	@ (80009d8 <SystemInit+0xec>)
 8000934:	4b29      	ldr	r3, [pc, #164]	@ (80009dc <SystemInit+0xf0>)
 8000936:	4013      	ands	r3, r2
 8000938:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800093a:	4b26      	ldr	r3, [pc, #152]	@ (80009d4 <SystemInit+0xe8>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f003 0308 	and.w	r3, r3, #8
 8000942:	2b00      	cmp	r3, #0
 8000944:	d007      	beq.n	8000956 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000946:	4b23      	ldr	r3, [pc, #140]	@ (80009d4 <SystemInit+0xe8>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f023 030f 	bic.w	r3, r3, #15
 800094e:	4a21      	ldr	r2, [pc, #132]	@ (80009d4 <SystemInit+0xe8>)
 8000950:	f043 0307 	orr.w	r3, r3, #7
 8000954:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000956:	4b20      	ldr	r3, [pc, #128]	@ (80009d8 <SystemInit+0xec>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800095c:	4b1e      	ldr	r3, [pc, #120]	@ (80009d8 <SystemInit+0xec>)
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000962:	4b1d      	ldr	r3, [pc, #116]	@ (80009d8 <SystemInit+0xec>)
 8000964:	2200      	movs	r2, #0
 8000966:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000968:	4b1b      	ldr	r3, [pc, #108]	@ (80009d8 <SystemInit+0xec>)
 800096a:	4a1d      	ldr	r2, [pc, #116]	@ (80009e0 <SystemInit+0xf4>)
 800096c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800096e:	4b1a      	ldr	r3, [pc, #104]	@ (80009d8 <SystemInit+0xec>)
 8000970:	4a1c      	ldr	r2, [pc, #112]	@ (80009e4 <SystemInit+0xf8>)
 8000972:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000974:	4b18      	ldr	r3, [pc, #96]	@ (80009d8 <SystemInit+0xec>)
 8000976:	4a1c      	ldr	r2, [pc, #112]	@ (80009e8 <SystemInit+0xfc>)
 8000978:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800097a:	4b17      	ldr	r3, [pc, #92]	@ (80009d8 <SystemInit+0xec>)
 800097c:	2200      	movs	r2, #0
 800097e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000980:	4b15      	ldr	r3, [pc, #84]	@ (80009d8 <SystemInit+0xec>)
 8000982:	4a19      	ldr	r2, [pc, #100]	@ (80009e8 <SystemInit+0xfc>)
 8000984:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000986:	4b14      	ldr	r3, [pc, #80]	@ (80009d8 <SystemInit+0xec>)
 8000988:	2200      	movs	r2, #0
 800098a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800098c:	4b12      	ldr	r3, [pc, #72]	@ (80009d8 <SystemInit+0xec>)
 800098e:	4a16      	ldr	r2, [pc, #88]	@ (80009e8 <SystemInit+0xfc>)
 8000990:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000992:	4b11      	ldr	r3, [pc, #68]	@ (80009d8 <SystemInit+0xec>)
 8000994:	2200      	movs	r2, #0
 8000996:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000998:	4b0f      	ldr	r3, [pc, #60]	@ (80009d8 <SystemInit+0xec>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a0e      	ldr	r2, [pc, #56]	@ (80009d8 <SystemInit+0xec>)
 800099e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80009a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	@ (80009d8 <SystemInit+0xec>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80009aa:	4b10      	ldr	r3, [pc, #64]	@ (80009ec <SystemInit+0x100>)
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	4b10      	ldr	r3, [pc, #64]	@ (80009f0 <SystemInit+0x104>)
 80009b0:	4013      	ands	r3, r2
 80009b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80009b6:	d202      	bcs.n	80009be <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80009b8:	4b0e      	ldr	r3, [pc, #56]	@ (80009f4 <SystemInit+0x108>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80009be:	4b0e      	ldr	r3, [pc, #56]	@ (80009f8 <SystemInit+0x10c>)
 80009c0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80009c4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	e000ed00 	.word	0xe000ed00
 80009d4:	52002000 	.word	0x52002000
 80009d8:	58024400 	.word	0x58024400
 80009dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80009e0:	02020200 	.word	0x02020200
 80009e4:	01ff0000 	.word	0x01ff0000
 80009e8:	01010280 	.word	0x01010280
 80009ec:	5c001000 	.word	0x5c001000
 80009f0:	ffff0000 	.word	0xffff0000
 80009f4:	51008108 	.word	0x51008108
 80009f8:	52004000 	.word	0x52004000

080009fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80009fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a34 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a00:	f7ff ff74 	bl	80008ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a04:	480c      	ldr	r0, [pc, #48]	@ (8000a38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a06:	490d      	ldr	r1, [pc, #52]	@ (8000a3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a08:	4a0d      	ldr	r2, [pc, #52]	@ (8000a40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a0c:	e002      	b.n	8000a14 <LoopCopyDataInit>

08000a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a12:	3304      	adds	r3, #4

08000a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a18:	d3f9      	bcc.n	8000a0e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a1c:	4c0a      	ldr	r4, [pc, #40]	@ (8000a48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a20:	e001      	b.n	8000a26 <LoopFillZerobss>

08000a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a24:	3204      	adds	r2, #4

08000a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a28:	d3fb      	bcc.n	8000a22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a2a:	f002 f861 	bl	8002af0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a2e:	f7ff fd0f 	bl	8000450 <main>
  bx  lr
 8000a32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a34:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000a38:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000a3c:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8000a40:	08002b74 	.word	0x08002b74
  ldr r2, =_sbss
 8000a44:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8000a48:	24000084 	.word	0x24000084

08000a4c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a4c:	e7fe      	b.n	8000a4c <ADC3_IRQHandler>
	...

08000a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a56:	2003      	movs	r0, #3
 8000a58:	f000 f98c 	bl	8000d74 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000a5c:	f001 fa70 	bl	8001f40 <HAL_RCC_GetSysClockFreq>
 8000a60:	4602      	mov	r2, r0
 8000a62:	4b15      	ldr	r3, [pc, #84]	@ (8000ab8 <HAL_Init+0x68>)
 8000a64:	699b      	ldr	r3, [r3, #24]
 8000a66:	0a1b      	lsrs	r3, r3, #8
 8000a68:	f003 030f 	and.w	r3, r3, #15
 8000a6c:	4913      	ldr	r1, [pc, #76]	@ (8000abc <HAL_Init+0x6c>)
 8000a6e:	5ccb      	ldrb	r3, [r1, r3]
 8000a70:	f003 031f 	and.w	r3, r3, #31
 8000a74:	fa22 f303 	lsr.w	r3, r2, r3
 8000a78:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab8 <HAL_Init+0x68>)
 8000a7c:	699b      	ldr	r3, [r3, #24]
 8000a7e:	f003 030f 	and.w	r3, r3, #15
 8000a82:	4a0e      	ldr	r2, [pc, #56]	@ (8000abc <HAL_Init+0x6c>)
 8000a84:	5cd3      	ldrb	r3, [r2, r3]
 8000a86:	f003 031f 	and.w	r3, r3, #31
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000a90:	4a0b      	ldr	r2, [pc, #44]	@ (8000ac0 <HAL_Init+0x70>)
 8000a92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000a94:	4a0b      	ldr	r2, [pc, #44]	@ (8000ac4 <HAL_Init+0x74>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a9a:	200f      	movs	r0, #15
 8000a9c:	f000 f814 	bl	8000ac8 <HAL_InitTick>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e002      	b.n	8000ab0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000aaa:	f7ff fea5 	bl	80007f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aae:	2300      	movs	r3, #0
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	58024400 	.word	0x58024400
 8000abc:	08002b5c 	.word	0x08002b5c
 8000ac0:	24000008 	.word	0x24000008
 8000ac4:	24000004 	.word	0x24000004

08000ac8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ad0:	4b15      	ldr	r3, [pc, #84]	@ (8000b28 <HAL_InitTick+0x60>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d101      	bne.n	8000adc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	e021      	b.n	8000b20 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000adc:	4b13      	ldr	r3, [pc, #76]	@ (8000b2c <HAL_InitTick+0x64>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	4b11      	ldr	r3, [pc, #68]	@ (8000b28 <HAL_InitTick+0x60>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000aea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af2:	4618      	mov	r0, r3
 8000af4:	f000 f971 	bl	8000dda <HAL_SYSTICK_Config>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	e00e      	b.n	8000b20 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2b0f      	cmp	r3, #15
 8000b06:	d80a      	bhi.n	8000b1e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	6879      	ldr	r1, [r7, #4]
 8000b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b10:	f000 f93b 	bl	8000d8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b14:	4a06      	ldr	r2, [pc, #24]	@ (8000b30 <HAL_InitTick+0x68>)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	e000      	b.n	8000b20 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	24000010 	.word	0x24000010
 8000b2c:	24000004 	.word	0x24000004
 8000b30:	2400000c 	.word	0x2400000c

08000b34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b38:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <HAL_IncTick+0x20>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <HAL_IncTick+0x24>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4413      	add	r3, r2
 8000b44:	4a04      	ldr	r2, [pc, #16]	@ (8000b58 <HAL_IncTick+0x24>)
 8000b46:	6013      	str	r3, [r2, #0]
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	24000010 	.word	0x24000010
 8000b58:	24000080 	.word	0x24000080

08000b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b60:	4b03      	ldr	r3, [pc, #12]	@ (8000b70 <HAL_GetTick+0x14>)
 8000b62:	681b      	ldr	r3, [r3, #0]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	24000080 	.word	0x24000080

08000b74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b7c:	f7ff ffee 	bl	8000b5c <HAL_GetTick>
 8000b80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b8c:	d005      	beq.n	8000b9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb8 <HAL_Delay+0x44>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	461a      	mov	r2, r3
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	4413      	add	r3, r2
 8000b98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b9a:	bf00      	nop
 8000b9c:	f7ff ffde 	bl	8000b5c <HAL_GetTick>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	68fa      	ldr	r2, [r7, #12]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d8f7      	bhi.n	8000b9c <HAL_Delay+0x28>
  {
  }
}
 8000bac:	bf00      	nop
 8000bae:	bf00      	nop
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	24000010 	.word	0x24000010

08000bbc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000bc0:	4b03      	ldr	r3, [pc, #12]	@ (8000bd0 <HAL_GetREVID+0x14>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	0c1b      	lsrs	r3, r3, #16
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	5c001000 	.word	0x5c001000

08000bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be4:	4b0b      	ldr	r3, [pc, #44]	@ (8000c14 <__NVIC_SetPriorityGrouping+0x40>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bea:	68ba      	ldr	r2, [r7, #8]
 8000bec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000bfc:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c02:	4a04      	ldr	r2, [pc, #16]	@ (8000c14 <__NVIC_SetPriorityGrouping+0x40>)
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	60d3      	str	r3, [r2, #12]
}
 8000c08:	bf00      	nop
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000ed00 	.word	0xe000ed00
 8000c18:	05fa0000 	.word	0x05fa0000

08000c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c20:	4b04      	ldr	r3, [pc, #16]	@ (8000c34 <__NVIC_GetPriorityGrouping+0x18>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	0a1b      	lsrs	r3, r3, #8
 8000c26:	f003 0307 	and.w	r3, r3, #7
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	db0b      	blt.n	8000c62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c4a:	88fb      	ldrh	r3, [r7, #6]
 8000c4c:	f003 021f 	and.w	r2, r3, #31
 8000c50:	4907      	ldr	r1, [pc, #28]	@ (8000c70 <__NVIC_EnableIRQ+0x38>)
 8000c52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c56:	095b      	lsrs	r3, r3, #5
 8000c58:	2001      	movs	r0, #1
 8000c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000e100 	.word	0xe000e100

08000c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	6039      	str	r1, [r7, #0]
 8000c7e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	db0a      	blt.n	8000c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	490c      	ldr	r1, [pc, #48]	@ (8000cc0 <__NVIC_SetPriority+0x4c>)
 8000c8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c92:	0112      	lsls	r2, r2, #4
 8000c94:	b2d2      	uxtb	r2, r2
 8000c96:	440b      	add	r3, r1
 8000c98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c9c:	e00a      	b.n	8000cb4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	4908      	ldr	r1, [pc, #32]	@ (8000cc4 <__NVIC_SetPriority+0x50>)
 8000ca4:	88fb      	ldrh	r3, [r7, #6]
 8000ca6:	f003 030f 	and.w	r3, r3, #15
 8000caa:	3b04      	subs	r3, #4
 8000cac:	0112      	lsls	r2, r2, #4
 8000cae:	b2d2      	uxtb	r2, r2
 8000cb0:	440b      	add	r3, r1
 8000cb2:	761a      	strb	r2, [r3, #24]
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000e100 	.word	0xe000e100
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b089      	sub	sp, #36	@ 0x24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	f1c3 0307 	rsb	r3, r3, #7
 8000ce2:	2b04      	cmp	r3, #4
 8000ce4:	bf28      	it	cs
 8000ce6:	2304      	movcs	r3, #4
 8000ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3304      	adds	r3, #4
 8000cee:	2b06      	cmp	r3, #6
 8000cf0:	d902      	bls.n	8000cf8 <NVIC_EncodePriority+0x30>
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3b03      	subs	r3, #3
 8000cf6:	e000      	b.n	8000cfa <NVIC_EncodePriority+0x32>
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43da      	mvns	r2, r3
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	401a      	ands	r2, r3
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d10:	f04f 31ff 	mov.w	r1, #4294967295
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1a:	43d9      	mvns	r1, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d20:	4313      	orrs	r3, r2
         );
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3724      	adds	r7, #36	@ 0x24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
	...

08000d30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d40:	d301      	bcc.n	8000d46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d42:	2301      	movs	r3, #1
 8000d44:	e00f      	b.n	8000d66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d46:	4a0a      	ldr	r2, [pc, #40]	@ (8000d70 <SysTick_Config+0x40>)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d4e:	210f      	movs	r1, #15
 8000d50:	f04f 30ff 	mov.w	r0, #4294967295
 8000d54:	f7ff ff8e 	bl	8000c74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d58:	4b05      	ldr	r3, [pc, #20]	@ (8000d70 <SysTick_Config+0x40>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d5e:	4b04      	ldr	r3, [pc, #16]	@ (8000d70 <SysTick_Config+0x40>)
 8000d60:	2207      	movs	r2, #7
 8000d62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	e000e010 	.word	0xe000e010

08000d74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f7ff ff29 	bl	8000bd4 <__NVIC_SetPriorityGrouping>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b086      	sub	sp, #24
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	4603      	mov	r3, r0
 8000d92:	60b9      	str	r1, [r7, #8]
 8000d94:	607a      	str	r2, [r7, #4]
 8000d96:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d98:	f7ff ff40 	bl	8000c1c <__NVIC_GetPriorityGrouping>
 8000d9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	68b9      	ldr	r1, [r7, #8]
 8000da2:	6978      	ldr	r0, [r7, #20]
 8000da4:	f7ff ff90 	bl	8000cc8 <NVIC_EncodePriority>
 8000da8:	4602      	mov	r2, r0
 8000daa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000dae:	4611      	mov	r1, r2
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff ff5f 	bl	8000c74 <__NVIC_SetPriority>
}
 8000db6:	bf00      	nop
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ff33 	bl	8000c38 <__NVIC_EnableIRQ>
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f7ff ffa4 	bl	8000d30 <SysTick_Config>
 8000de8:	4603      	mov	r3, r0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000df8:	f3bf 8f5f 	dmb	sy
}
 8000dfc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000dfe:	4b07      	ldr	r3, [pc, #28]	@ (8000e1c <HAL_MPU_Disable+0x28>)
 8000e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e02:	4a06      	ldr	r2, [pc, #24]	@ (8000e1c <HAL_MPU_Disable+0x28>)
 8000e04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e08:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000e0a:	4b05      	ldr	r3, [pc, #20]	@ (8000e20 <HAL_MPU_Disable+0x2c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	605a      	str	r2, [r3, #4]
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	e000ed00 	.word	0xe000ed00
 8000e20:	e000ed90 	.word	0xe000ed90

08000e24 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000e2c:	4a0b      	ldr	r2, [pc, #44]	@ (8000e5c <HAL_MPU_Enable+0x38>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000e36:	4b0a      	ldr	r3, [pc, #40]	@ (8000e60 <HAL_MPU_Enable+0x3c>)
 8000e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e3a:	4a09      	ldr	r2, [pc, #36]	@ (8000e60 <HAL_MPU_Enable+0x3c>)
 8000e3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e40:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000e42:	f3bf 8f4f 	dsb	sy
}
 8000e46:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e48:	f3bf 8f6f 	isb	sy
}
 8000e4c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	e000ed90 	.word	0xe000ed90
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	785a      	ldrb	r2, [r3, #1]
 8000e70:	4b1b      	ldr	r3, [pc, #108]	@ (8000ee0 <HAL_MPU_ConfigRegion+0x7c>)
 8000e72:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000e74:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee0 <HAL_MPU_ConfigRegion+0x7c>)
 8000e76:	691b      	ldr	r3, [r3, #16]
 8000e78:	4a19      	ldr	r2, [pc, #100]	@ (8000ee0 <HAL_MPU_ConfigRegion+0x7c>)
 8000e7a:	f023 0301 	bic.w	r3, r3, #1
 8000e7e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000e80:	4a17      	ldr	r2, [pc, #92]	@ (8000ee0 <HAL_MPU_ConfigRegion+0x7c>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	7b1b      	ldrb	r3, [r3, #12]
 8000e8c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	7adb      	ldrb	r3, [r3, #11]
 8000e92:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e94:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	7a9b      	ldrb	r3, [r3, #10]
 8000e9a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000e9c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	7b5b      	ldrb	r3, [r3, #13]
 8000ea2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000ea4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	7b9b      	ldrb	r3, [r3, #14]
 8000eaa:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000eac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	7bdb      	ldrb	r3, [r3, #15]
 8000eb2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000eb4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	7a5b      	ldrb	r3, [r3, #9]
 8000eba:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000ebc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	7a1b      	ldrb	r3, [r3, #8]
 8000ec2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000ec4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	7812      	ldrb	r2, [r2, #0]
 8000eca:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ecc:	4a04      	ldr	r2, [pc, #16]	@ (8000ee0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000ece:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ed0:	6113      	str	r3, [r2, #16]
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	e000ed90 	.word	0xe000ed90

08000ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b089      	sub	sp, #36	@ 0x24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000ef2:	4b89      	ldr	r3, [pc, #548]	@ (8001118 <HAL_GPIO_Init+0x234>)
 8000ef4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000ef6:	e194      	b.n	8001222 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	2101      	movs	r1, #1
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	fa01 f303 	lsl.w	r3, r1, r3
 8000f04:	4013      	ands	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	f000 8186 	beq.w	800121c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f003 0303 	and.w	r3, r3, #3
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d005      	beq.n	8000f28 <HAL_GPIO_Init+0x44>
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 0303 	and.w	r3, r3, #3
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d130      	bne.n	8000f8a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	2203      	movs	r2, #3
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	68da      	ldr	r2, [r3, #12]
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f5e:	2201      	movs	r2, #1
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	091b      	lsrs	r3, r3, #4
 8000f74:	f003 0201 	and.w	r2, r3, #1
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f003 0303 	and.w	r3, r3, #3
 8000f92:	2b03      	cmp	r3, #3
 8000f94:	d017      	beq.n	8000fc6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4013      	ands	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	689a      	ldr	r2, [r3, #8]
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f003 0303 	and.w	r3, r3, #3
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d123      	bne.n	800101a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	08da      	lsrs	r2, r3, #3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	3208      	adds	r2, #8
 8000fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	220f      	movs	r2, #15
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	691a      	ldr	r2, [r3, #16]
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	f003 0307 	and.w	r3, r3, #7
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4313      	orrs	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	08da      	lsrs	r2, r3, #3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3208      	adds	r2, #8
 8001014:	69b9      	ldr	r1, [r7, #24]
 8001016:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	2203      	movs	r2, #3
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4013      	ands	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f003 0203 	and.w	r2, r3, #3
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4313      	orrs	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001056:	2b00      	cmp	r3, #0
 8001058:	f000 80e0 	beq.w	800121c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105c:	4b2f      	ldr	r3, [pc, #188]	@ (800111c <HAL_GPIO_Init+0x238>)
 800105e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001062:	4a2e      	ldr	r2, [pc, #184]	@ (800111c <HAL_GPIO_Init+0x238>)
 8001064:	f043 0302 	orr.w	r3, r3, #2
 8001068:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800106c:	4b2b      	ldr	r3, [pc, #172]	@ (800111c <HAL_GPIO_Init+0x238>)
 800106e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800107a:	4a29      	ldr	r2, [pc, #164]	@ (8001120 <HAL_GPIO_Init+0x23c>)
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	089b      	lsrs	r3, r3, #2
 8001080:	3302      	adds	r3, #2
 8001082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	220f      	movs	r2, #15
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4013      	ands	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a20      	ldr	r2, [pc, #128]	@ (8001124 <HAL_GPIO_Init+0x240>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d052      	beq.n	800114c <HAL_GPIO_Init+0x268>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a1f      	ldr	r2, [pc, #124]	@ (8001128 <HAL_GPIO_Init+0x244>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d031      	beq.n	8001112 <HAL_GPIO_Init+0x22e>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a1e      	ldr	r2, [pc, #120]	@ (800112c <HAL_GPIO_Init+0x248>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d02b      	beq.n	800110e <HAL_GPIO_Init+0x22a>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a1d      	ldr	r2, [pc, #116]	@ (8001130 <HAL_GPIO_Init+0x24c>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d025      	beq.n	800110a <HAL_GPIO_Init+0x226>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a1c      	ldr	r2, [pc, #112]	@ (8001134 <HAL_GPIO_Init+0x250>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d01f      	beq.n	8001106 <HAL_GPIO_Init+0x222>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001138 <HAL_GPIO_Init+0x254>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d019      	beq.n	8001102 <HAL_GPIO_Init+0x21e>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a1a      	ldr	r2, [pc, #104]	@ (800113c <HAL_GPIO_Init+0x258>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d013      	beq.n	80010fe <HAL_GPIO_Init+0x21a>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a19      	ldr	r2, [pc, #100]	@ (8001140 <HAL_GPIO_Init+0x25c>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d00d      	beq.n	80010fa <HAL_GPIO_Init+0x216>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a18      	ldr	r2, [pc, #96]	@ (8001144 <HAL_GPIO_Init+0x260>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d007      	beq.n	80010f6 <HAL_GPIO_Init+0x212>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a17      	ldr	r2, [pc, #92]	@ (8001148 <HAL_GPIO_Init+0x264>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d101      	bne.n	80010f2 <HAL_GPIO_Init+0x20e>
 80010ee:	2309      	movs	r3, #9
 80010f0:	e02d      	b.n	800114e <HAL_GPIO_Init+0x26a>
 80010f2:	230a      	movs	r3, #10
 80010f4:	e02b      	b.n	800114e <HAL_GPIO_Init+0x26a>
 80010f6:	2308      	movs	r3, #8
 80010f8:	e029      	b.n	800114e <HAL_GPIO_Init+0x26a>
 80010fa:	2307      	movs	r3, #7
 80010fc:	e027      	b.n	800114e <HAL_GPIO_Init+0x26a>
 80010fe:	2306      	movs	r3, #6
 8001100:	e025      	b.n	800114e <HAL_GPIO_Init+0x26a>
 8001102:	2305      	movs	r3, #5
 8001104:	e023      	b.n	800114e <HAL_GPIO_Init+0x26a>
 8001106:	2304      	movs	r3, #4
 8001108:	e021      	b.n	800114e <HAL_GPIO_Init+0x26a>
 800110a:	2303      	movs	r3, #3
 800110c:	e01f      	b.n	800114e <HAL_GPIO_Init+0x26a>
 800110e:	2302      	movs	r3, #2
 8001110:	e01d      	b.n	800114e <HAL_GPIO_Init+0x26a>
 8001112:	2301      	movs	r3, #1
 8001114:	e01b      	b.n	800114e <HAL_GPIO_Init+0x26a>
 8001116:	bf00      	nop
 8001118:	58000080 	.word	0x58000080
 800111c:	58024400 	.word	0x58024400
 8001120:	58000400 	.word	0x58000400
 8001124:	58020000 	.word	0x58020000
 8001128:	58020400 	.word	0x58020400
 800112c:	58020800 	.word	0x58020800
 8001130:	58020c00 	.word	0x58020c00
 8001134:	58021000 	.word	0x58021000
 8001138:	58021400 	.word	0x58021400
 800113c:	58021800 	.word	0x58021800
 8001140:	58021c00 	.word	0x58021c00
 8001144:	58022000 	.word	0x58022000
 8001148:	58022400 	.word	0x58022400
 800114c:	2300      	movs	r3, #0
 800114e:	69fa      	ldr	r2, [r7, #28]
 8001150:	f002 0203 	and.w	r2, r2, #3
 8001154:	0092      	lsls	r2, r2, #2
 8001156:	4093      	lsls	r3, r2
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800115e:	4938      	ldr	r1, [pc, #224]	@ (8001240 <HAL_GPIO_Init+0x35c>)
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	089b      	lsrs	r3, r3, #2
 8001164:	3302      	adds	r3, #2
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800116c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	43db      	mvns	r3, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4013      	ands	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001192:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800119a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d003      	beq.n	80011c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	4313      	orrs	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80011c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	3301      	adds	r3, #1
 8001220:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	fa22 f303 	lsr.w	r3, r2, r3
 800122c:	2b00      	cmp	r3, #0
 800122e:	f47f ae63 	bne.w	8000ef8 <HAL_GPIO_Init+0x14>
  }
}
 8001232:	bf00      	nop
 8001234:	bf00      	nop
 8001236:	3724      	adds	r7, #36	@ 0x24
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	58000400 	.word	0x58000400

08001244 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	807b      	strh	r3, [r7, #2]
 8001250:	4613      	mov	r3, r2
 8001252:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001254:	787b      	ldrb	r3, [r7, #1]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800125a:	887a      	ldrh	r2, [r7, #2]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001260:	e003      	b.n	800126a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001262:	887b      	ldrh	r3, [r7, #2]
 8001264:	041a      	lsls	r2, r3, #16
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	619a      	str	r2, [r3, #24]
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001280:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001284:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001288:	88fb      	ldrh	r3, [r7, #6]
 800128a:	4013      	ands	r3, r2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d008      	beq.n	80012a2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001290:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001294:	88fb      	ldrh	r3, [r7, #6]
 8001296:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800129a:	88fb      	ldrh	r3, [r7, #6]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff f8bb 	bl	8000418 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80012b4:	4b19      	ldr	r3, [pc, #100]	@ (800131c <HAL_PWREx_ConfigSupply+0x70>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	f003 0304 	and.w	r3, r3, #4
 80012bc:	2b04      	cmp	r3, #4
 80012be:	d00a      	beq.n	80012d6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80012c0:	4b16      	ldr	r3, [pc, #88]	@ (800131c <HAL_PWREx_ConfigSupply+0x70>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	f003 0307 	and.w	r3, r3, #7
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d001      	beq.n	80012d2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e01f      	b.n	8001312 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80012d2:	2300      	movs	r3, #0
 80012d4:	e01d      	b.n	8001312 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80012d6:	4b11      	ldr	r3, [pc, #68]	@ (800131c <HAL_PWREx_ConfigSupply+0x70>)
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	f023 0207 	bic.w	r2, r3, #7
 80012de:	490f      	ldr	r1, [pc, #60]	@ (800131c <HAL_PWREx_ConfigSupply+0x70>)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80012e6:	f7ff fc39 	bl	8000b5c <HAL_GetTick>
 80012ea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80012ec:	e009      	b.n	8001302 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80012ee:	f7ff fc35 	bl	8000b5c <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80012fc:	d901      	bls.n	8001302 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e007      	b.n	8001312 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001302:	4b06      	ldr	r3, [pc, #24]	@ (800131c <HAL_PWREx_ConfigSupply+0x70>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800130a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800130e:	d1ee      	bne.n	80012ee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	58024800 	.word	0x58024800

08001320 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08c      	sub	sp, #48	@ 0x30
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d102      	bne.n	8001334 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	f000 bc48 	b.w	8001bc4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	2b00      	cmp	r3, #0
 800133e:	f000 8088 	beq.w	8001452 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001342:	4b99      	ldr	r3, [pc, #612]	@ (80015a8 <HAL_RCC_OscConfig+0x288>)
 8001344:	691b      	ldr	r3, [r3, #16]
 8001346:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800134a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800134c:	4b96      	ldr	r3, [pc, #600]	@ (80015a8 <HAL_RCC_OscConfig+0x288>)
 800134e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001350:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001354:	2b10      	cmp	r3, #16
 8001356:	d007      	beq.n	8001368 <HAL_RCC_OscConfig+0x48>
 8001358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800135a:	2b18      	cmp	r3, #24
 800135c:	d111      	bne.n	8001382 <HAL_RCC_OscConfig+0x62>
 800135e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001360:	f003 0303 	and.w	r3, r3, #3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d10c      	bne.n	8001382 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001368:	4b8f      	ldr	r3, [pc, #572]	@ (80015a8 <HAL_RCC_OscConfig+0x288>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d06d      	beq.n	8001450 <HAL_RCC_OscConfig+0x130>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d169      	bne.n	8001450 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	f000 bc21 	b.w	8001bc4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800138a:	d106      	bne.n	800139a <HAL_RCC_OscConfig+0x7a>
 800138c:	4b86      	ldr	r3, [pc, #536]	@ (80015a8 <HAL_RCC_OscConfig+0x288>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a85      	ldr	r2, [pc, #532]	@ (80015a8 <HAL_RCC_OscConfig+0x288>)
 8001392:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	e02e      	b.n	80013f8 <HAL_RCC_OscConfig+0xd8>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d10c      	bne.n	80013bc <HAL_RCC_OscConfig+0x9c>
 80013a2:	4b81      	ldr	r3, [pc, #516]	@ (80015a8 <HAL_RCC_OscConfig+0x288>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a80      	ldr	r2, [pc, #512]	@ (80015a8 <HAL_RCC_OscConfig+0x288>)
 80013a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	4b7e      	ldr	r3, [pc, #504]	@ (80015a8 <HAL_RCC_OscConfig+0x288>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a7d      	ldr	r2, [pc, #500]	@ (80015a8 <HAL_RCC_OscConfig+0x288>)
 80013b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013b8:	6013      	str	r3, [r2, #0]
 80013ba:	e01d      	b.n	80013f8 <HAL_RCC_OscConfig+0xd8>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013c4:	d10c      	bne.n	80013e0 <HAL_RCC_OscConfig+0xc0>
 80013c6:	4b78      	ldr	r3, [pc, #480]	@ (80015a8 <HAL_RCC_OscConfig+0x288>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a77      	ldr	r2, [pc, #476]	@ (80015a8 <HAL_RCC_OscConfig+0x288>)
 80013cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	4b75      	ldr	r3, [pc, #468]	@ (80015a8 <HAL_RCC_OscConfig+0x288>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a74      	ldr	r2, [pc, #464]	@ (80015a8 <HAL_RCC_OscConfig+0x288>)
 80013d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	e00b      	b.n	80013f8 <HAL_RCC_OscConfig+0xd8>
 80013e0:	4b71      	ldr	r3, [pc, #452]	@ (80015a8 <HAL_RCC_OscConfig+0x288>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a70      	ldr	r2, [pc, #448]	@ (80015a8 <HAL_RCC_OscConfig+0x288>)
 80013e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013ea:	6013      	str	r3, [r2, #0]
 80013ec:	4b6e      	ldr	r3, [pc, #440]	@ (80015a8 <HAL_RCC_OscConfig+0x288>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a6d      	ldr	r2, [pc, #436]	@ (80015a8 <HAL_RCC_OscConfig+0x288>)
 80013f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d013      	beq.n	8001428 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001400:	f7ff fbac 	bl	8000b5c <HAL_GetTick>
 8001404:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001408:	f7ff fba8 	bl	8000b5c <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b64      	cmp	r3, #100	@ 0x64
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e3d4      	b.n	8001bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800141a:	4b63      	ldr	r3, [pc, #396]	@ (80015a8 <HAL_RCC_OscConfig+0x288>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0f0      	beq.n	8001408 <HAL_RCC_OscConfig+0xe8>
 8001426:	e014      	b.n	8001452 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001428:	f7ff fb98 	bl	8000b5c <HAL_GetTick>
 800142c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001430:	f7ff fb94 	bl	8000b5c <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b64      	cmp	r3, #100	@ 0x64
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e3c0      	b.n	8001bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001442:	4b59      	ldr	r3, [pc, #356]	@ (80015a8 <HAL_RCC_OscConfig+0x288>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f0      	bne.n	8001430 <HAL_RCC_OscConfig+0x110>
 800144e:	e000      	b.n	8001452 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	f000 80ca 	beq.w	80015f4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001460:	4b51      	ldr	r3, [pc, #324]	@ (80015a8 <HAL_RCC_OscConfig+0x288>)
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001468:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800146a:	4b4f      	ldr	r3, [pc, #316]	@ (80015a8 <HAL_RCC_OscConfig+0x288>)
 800146c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800146e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001470:	6a3b      	ldr	r3, [r7, #32]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d007      	beq.n	8001486 <HAL_RCC_OscConfig+0x166>
 8001476:	6a3b      	ldr	r3, [r7, #32]
 8001478:	2b18      	cmp	r3, #24
 800147a:	d156      	bne.n	800152a <HAL_RCC_OscConfig+0x20a>
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f003 0303 	and.w	r3, r3, #3
 8001482:	2b00      	cmp	r3, #0
 8001484:	d151      	bne.n	800152a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001486:	4b48      	ldr	r3, [pc, #288]	@ (80015a8 <HAL_RCC_OscConfig+0x288>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0304 	and.w	r3, r3, #4
 800148e:	2b00      	cmp	r3, #0
 8001490:	d005      	beq.n	800149e <HAL_RCC_OscConfig+0x17e>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d101      	bne.n	800149e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e392      	b.n	8001bc4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800149e:	4b42      	ldr	r3, [pc, #264]	@ (80015a8 <HAL_RCC_OscConfig+0x288>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f023 0219 	bic.w	r2, r3, #25
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	493f      	ldr	r1, [pc, #252]	@ (80015a8 <HAL_RCC_OscConfig+0x288>)
 80014ac:	4313      	orrs	r3, r2
 80014ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b0:	f7ff fb54 	bl	8000b5c <HAL_GetTick>
 80014b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014b8:	f7ff fb50 	bl	8000b5c <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e37c      	b.n	8001bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014ca:	4b37      	ldr	r3, [pc, #220]	@ (80015a8 <HAL_RCC_OscConfig+0x288>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0304 	and.w	r3, r3, #4
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d0f0      	beq.n	80014b8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d6:	f7ff fb71 	bl	8000bbc <HAL_GetREVID>
 80014da:	4603      	mov	r3, r0
 80014dc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d817      	bhi.n	8001514 <HAL_RCC_OscConfig+0x1f4>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	2b40      	cmp	r3, #64	@ 0x40
 80014ea:	d108      	bne.n	80014fe <HAL_RCC_OscConfig+0x1de>
 80014ec:	4b2e      	ldr	r3, [pc, #184]	@ (80015a8 <HAL_RCC_OscConfig+0x288>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80014f4:	4a2c      	ldr	r2, [pc, #176]	@ (80015a8 <HAL_RCC_OscConfig+0x288>)
 80014f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014fa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014fc:	e07a      	b.n	80015f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014fe:	4b2a      	ldr	r3, [pc, #168]	@ (80015a8 <HAL_RCC_OscConfig+0x288>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	031b      	lsls	r3, r3, #12
 800150c:	4926      	ldr	r1, [pc, #152]	@ (80015a8 <HAL_RCC_OscConfig+0x288>)
 800150e:	4313      	orrs	r3, r2
 8001510:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001512:	e06f      	b.n	80015f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001514:	4b24      	ldr	r3, [pc, #144]	@ (80015a8 <HAL_RCC_OscConfig+0x288>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	061b      	lsls	r3, r3, #24
 8001522:	4921      	ldr	r1, [pc, #132]	@ (80015a8 <HAL_RCC_OscConfig+0x288>)
 8001524:	4313      	orrs	r3, r2
 8001526:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001528:	e064      	b.n	80015f4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d047      	beq.n	80015c2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001532:	4b1d      	ldr	r3, [pc, #116]	@ (80015a8 <HAL_RCC_OscConfig+0x288>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f023 0219 	bic.w	r2, r3, #25
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	491a      	ldr	r1, [pc, #104]	@ (80015a8 <HAL_RCC_OscConfig+0x288>)
 8001540:	4313      	orrs	r3, r2
 8001542:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001544:	f7ff fb0a 	bl	8000b5c <HAL_GetTick>
 8001548:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800154c:	f7ff fb06 	bl	8000b5c <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e332      	b.n	8001bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800155e:	4b12      	ldr	r3, [pc, #72]	@ (80015a8 <HAL_RCC_OscConfig+0x288>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0304 	and.w	r3, r3, #4
 8001566:	2b00      	cmp	r3, #0
 8001568:	d0f0      	beq.n	800154c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800156a:	f7ff fb27 	bl	8000bbc <HAL_GetREVID>
 800156e:	4603      	mov	r3, r0
 8001570:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001574:	4293      	cmp	r3, r2
 8001576:	d819      	bhi.n	80015ac <HAL_RCC_OscConfig+0x28c>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	2b40      	cmp	r3, #64	@ 0x40
 800157e:	d108      	bne.n	8001592 <HAL_RCC_OscConfig+0x272>
 8001580:	4b09      	ldr	r3, [pc, #36]	@ (80015a8 <HAL_RCC_OscConfig+0x288>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001588:	4a07      	ldr	r2, [pc, #28]	@ (80015a8 <HAL_RCC_OscConfig+0x288>)
 800158a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800158e:	6053      	str	r3, [r2, #4]
 8001590:	e030      	b.n	80015f4 <HAL_RCC_OscConfig+0x2d4>
 8001592:	4b05      	ldr	r3, [pc, #20]	@ (80015a8 <HAL_RCC_OscConfig+0x288>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	031b      	lsls	r3, r3, #12
 80015a0:	4901      	ldr	r1, [pc, #4]	@ (80015a8 <HAL_RCC_OscConfig+0x288>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	604b      	str	r3, [r1, #4]
 80015a6:	e025      	b.n	80015f4 <HAL_RCC_OscConfig+0x2d4>
 80015a8:	58024400 	.word	0x58024400
 80015ac:	4b9a      	ldr	r3, [pc, #616]	@ (8001818 <HAL_RCC_OscConfig+0x4f8>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	691b      	ldr	r3, [r3, #16]
 80015b8:	061b      	lsls	r3, r3, #24
 80015ba:	4997      	ldr	r1, [pc, #604]	@ (8001818 <HAL_RCC_OscConfig+0x4f8>)
 80015bc:	4313      	orrs	r3, r2
 80015be:	604b      	str	r3, [r1, #4]
 80015c0:	e018      	b.n	80015f4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015c2:	4b95      	ldr	r3, [pc, #596]	@ (8001818 <HAL_RCC_OscConfig+0x4f8>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a94      	ldr	r2, [pc, #592]	@ (8001818 <HAL_RCC_OscConfig+0x4f8>)
 80015c8:	f023 0301 	bic.w	r3, r3, #1
 80015cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ce:	f7ff fac5 	bl	8000b5c <HAL_GetTick>
 80015d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d6:	f7ff fac1 	bl	8000b5c <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e2ed      	b.n	8001bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015e8:	4b8b      	ldr	r3, [pc, #556]	@ (8001818 <HAL_RCC_OscConfig+0x4f8>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1f0      	bne.n	80015d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0310 	and.w	r3, r3, #16
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 80a9 	beq.w	8001754 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001602:	4b85      	ldr	r3, [pc, #532]	@ (8001818 <HAL_RCC_OscConfig+0x4f8>)
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800160a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800160c:	4b82      	ldr	r3, [pc, #520]	@ (8001818 <HAL_RCC_OscConfig+0x4f8>)
 800160e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001610:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	2b08      	cmp	r3, #8
 8001616:	d007      	beq.n	8001628 <HAL_RCC_OscConfig+0x308>
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	2b18      	cmp	r3, #24
 800161c:	d13a      	bne.n	8001694 <HAL_RCC_OscConfig+0x374>
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	f003 0303 	and.w	r3, r3, #3
 8001624:	2b01      	cmp	r3, #1
 8001626:	d135      	bne.n	8001694 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001628:	4b7b      	ldr	r3, [pc, #492]	@ (8001818 <HAL_RCC_OscConfig+0x4f8>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001630:	2b00      	cmp	r3, #0
 8001632:	d005      	beq.n	8001640 <HAL_RCC_OscConfig+0x320>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	69db      	ldr	r3, [r3, #28]
 8001638:	2b80      	cmp	r3, #128	@ 0x80
 800163a:	d001      	beq.n	8001640 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e2c1      	b.n	8001bc4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001640:	f7ff fabc 	bl	8000bbc <HAL_GetREVID>
 8001644:	4603      	mov	r3, r0
 8001646:	f241 0203 	movw	r2, #4099	@ 0x1003
 800164a:	4293      	cmp	r3, r2
 800164c:	d817      	bhi.n	800167e <HAL_RCC_OscConfig+0x35e>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a1b      	ldr	r3, [r3, #32]
 8001652:	2b20      	cmp	r3, #32
 8001654:	d108      	bne.n	8001668 <HAL_RCC_OscConfig+0x348>
 8001656:	4b70      	ldr	r3, [pc, #448]	@ (8001818 <HAL_RCC_OscConfig+0x4f8>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800165e:	4a6e      	ldr	r2, [pc, #440]	@ (8001818 <HAL_RCC_OscConfig+0x4f8>)
 8001660:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001664:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001666:	e075      	b.n	8001754 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001668:	4b6b      	ldr	r3, [pc, #428]	@ (8001818 <HAL_RCC_OscConfig+0x4f8>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	069b      	lsls	r3, r3, #26
 8001676:	4968      	ldr	r1, [pc, #416]	@ (8001818 <HAL_RCC_OscConfig+0x4f8>)
 8001678:	4313      	orrs	r3, r2
 800167a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800167c:	e06a      	b.n	8001754 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800167e:	4b66      	ldr	r3, [pc, #408]	@ (8001818 <HAL_RCC_OscConfig+0x4f8>)
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a1b      	ldr	r3, [r3, #32]
 800168a:	061b      	lsls	r3, r3, #24
 800168c:	4962      	ldr	r1, [pc, #392]	@ (8001818 <HAL_RCC_OscConfig+0x4f8>)
 800168e:	4313      	orrs	r3, r2
 8001690:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001692:	e05f      	b.n	8001754 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	69db      	ldr	r3, [r3, #28]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d042      	beq.n	8001722 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800169c:	4b5e      	ldr	r3, [pc, #376]	@ (8001818 <HAL_RCC_OscConfig+0x4f8>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a5d      	ldr	r2, [pc, #372]	@ (8001818 <HAL_RCC_OscConfig+0x4f8>)
 80016a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a8:	f7ff fa58 	bl	8000b5c <HAL_GetTick>
 80016ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80016b0:	f7ff fa54 	bl	8000b5c <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e280      	b.n	8001bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80016c2:	4b55      	ldr	r3, [pc, #340]	@ (8001818 <HAL_RCC_OscConfig+0x4f8>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d0f0      	beq.n	80016b0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016ce:	f7ff fa75 	bl	8000bbc <HAL_GetREVID>
 80016d2:	4603      	mov	r3, r0
 80016d4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80016d8:	4293      	cmp	r3, r2
 80016da:	d817      	bhi.n	800170c <HAL_RCC_OscConfig+0x3ec>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a1b      	ldr	r3, [r3, #32]
 80016e0:	2b20      	cmp	r3, #32
 80016e2:	d108      	bne.n	80016f6 <HAL_RCC_OscConfig+0x3d6>
 80016e4:	4b4c      	ldr	r3, [pc, #304]	@ (8001818 <HAL_RCC_OscConfig+0x4f8>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80016ec:	4a4a      	ldr	r2, [pc, #296]	@ (8001818 <HAL_RCC_OscConfig+0x4f8>)
 80016ee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80016f2:	6053      	str	r3, [r2, #4]
 80016f4:	e02e      	b.n	8001754 <HAL_RCC_OscConfig+0x434>
 80016f6:	4b48      	ldr	r3, [pc, #288]	@ (8001818 <HAL_RCC_OscConfig+0x4f8>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a1b      	ldr	r3, [r3, #32]
 8001702:	069b      	lsls	r3, r3, #26
 8001704:	4944      	ldr	r1, [pc, #272]	@ (8001818 <HAL_RCC_OscConfig+0x4f8>)
 8001706:	4313      	orrs	r3, r2
 8001708:	604b      	str	r3, [r1, #4]
 800170a:	e023      	b.n	8001754 <HAL_RCC_OscConfig+0x434>
 800170c:	4b42      	ldr	r3, [pc, #264]	@ (8001818 <HAL_RCC_OscConfig+0x4f8>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	061b      	lsls	r3, r3, #24
 800171a:	493f      	ldr	r1, [pc, #252]	@ (8001818 <HAL_RCC_OscConfig+0x4f8>)
 800171c:	4313      	orrs	r3, r2
 800171e:	60cb      	str	r3, [r1, #12]
 8001720:	e018      	b.n	8001754 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001722:	4b3d      	ldr	r3, [pc, #244]	@ (8001818 <HAL_RCC_OscConfig+0x4f8>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a3c      	ldr	r2, [pc, #240]	@ (8001818 <HAL_RCC_OscConfig+0x4f8>)
 8001728:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800172c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172e:	f7ff fa15 	bl	8000b5c <HAL_GetTick>
 8001732:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001734:	e008      	b.n	8001748 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001736:	f7ff fa11 	bl	8000b5c <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e23d      	b.n	8001bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001748:	4b33      	ldr	r3, [pc, #204]	@ (8001818 <HAL_RCC_OscConfig+0x4f8>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1f0      	bne.n	8001736 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0308 	and.w	r3, r3, #8
 800175c:	2b00      	cmp	r3, #0
 800175e:	d036      	beq.n	80017ce <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	695b      	ldr	r3, [r3, #20]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d019      	beq.n	800179c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001768:	4b2b      	ldr	r3, [pc, #172]	@ (8001818 <HAL_RCC_OscConfig+0x4f8>)
 800176a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800176c:	4a2a      	ldr	r2, [pc, #168]	@ (8001818 <HAL_RCC_OscConfig+0x4f8>)
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001774:	f7ff f9f2 	bl	8000b5c <HAL_GetTick>
 8001778:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800177c:	f7ff f9ee 	bl	8000b5c <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e21a      	b.n	8001bc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800178e:	4b22      	ldr	r3, [pc, #136]	@ (8001818 <HAL_RCC_OscConfig+0x4f8>)
 8001790:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d0f0      	beq.n	800177c <HAL_RCC_OscConfig+0x45c>
 800179a:	e018      	b.n	80017ce <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800179c:	4b1e      	ldr	r3, [pc, #120]	@ (8001818 <HAL_RCC_OscConfig+0x4f8>)
 800179e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001818 <HAL_RCC_OscConfig+0x4f8>)
 80017a2:	f023 0301 	bic.w	r3, r3, #1
 80017a6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a8:	f7ff f9d8 	bl	8000b5c <HAL_GetTick>
 80017ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017b0:	f7ff f9d4 	bl	8000b5c <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e200      	b.n	8001bc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017c2:	4b15      	ldr	r3, [pc, #84]	@ (8001818 <HAL_RCC_OscConfig+0x4f8>)
 80017c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f0      	bne.n	80017b0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0320 	and.w	r3, r3, #32
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d039      	beq.n	800184e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d01c      	beq.n	800181c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001818 <HAL_RCC_OscConfig+0x4f8>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a0c      	ldr	r2, [pc, #48]	@ (8001818 <HAL_RCC_OscConfig+0x4f8>)
 80017e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80017ee:	f7ff f9b5 	bl	8000b5c <HAL_GetTick>
 80017f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017f6:	f7ff f9b1 	bl	8000b5c <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e1dd      	b.n	8001bc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001808:	4b03      	ldr	r3, [pc, #12]	@ (8001818 <HAL_RCC_OscConfig+0x4f8>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0f0      	beq.n	80017f6 <HAL_RCC_OscConfig+0x4d6>
 8001814:	e01b      	b.n	800184e <HAL_RCC_OscConfig+0x52e>
 8001816:	bf00      	nop
 8001818:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800181c:	4b9b      	ldr	r3, [pc, #620]	@ (8001a8c <HAL_RCC_OscConfig+0x76c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a9a      	ldr	r2, [pc, #616]	@ (8001a8c <HAL_RCC_OscConfig+0x76c>)
 8001822:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001826:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001828:	f7ff f998 	bl	8000b5c <HAL_GetTick>
 800182c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001830:	f7ff f994 	bl	8000b5c <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e1c0      	b.n	8001bc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001842:	4b92      	ldr	r3, [pc, #584]	@ (8001a8c <HAL_RCC_OscConfig+0x76c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f0      	bne.n	8001830 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0304 	and.w	r3, r3, #4
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 8081 	beq.w	800195e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800185c:	4b8c      	ldr	r3, [pc, #560]	@ (8001a90 <HAL_RCC_OscConfig+0x770>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a8b      	ldr	r2, [pc, #556]	@ (8001a90 <HAL_RCC_OscConfig+0x770>)
 8001862:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001866:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001868:	f7ff f978 	bl	8000b5c <HAL_GetTick>
 800186c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001870:	f7ff f974 	bl	8000b5c <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b64      	cmp	r3, #100	@ 0x64
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e1a0      	b.n	8001bc4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001882:	4b83      	ldr	r3, [pc, #524]	@ (8001a90 <HAL_RCC_OscConfig+0x770>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800188a:	2b00      	cmp	r3, #0
 800188c:	d0f0      	beq.n	8001870 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d106      	bne.n	80018a4 <HAL_RCC_OscConfig+0x584>
 8001896:	4b7d      	ldr	r3, [pc, #500]	@ (8001a8c <HAL_RCC_OscConfig+0x76c>)
 8001898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800189a:	4a7c      	ldr	r2, [pc, #496]	@ (8001a8c <HAL_RCC_OscConfig+0x76c>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80018a2:	e02d      	b.n	8001900 <HAL_RCC_OscConfig+0x5e0>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d10c      	bne.n	80018c6 <HAL_RCC_OscConfig+0x5a6>
 80018ac:	4b77      	ldr	r3, [pc, #476]	@ (8001a8c <HAL_RCC_OscConfig+0x76c>)
 80018ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018b0:	4a76      	ldr	r2, [pc, #472]	@ (8001a8c <HAL_RCC_OscConfig+0x76c>)
 80018b2:	f023 0301 	bic.w	r3, r3, #1
 80018b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80018b8:	4b74      	ldr	r3, [pc, #464]	@ (8001a8c <HAL_RCC_OscConfig+0x76c>)
 80018ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018bc:	4a73      	ldr	r2, [pc, #460]	@ (8001a8c <HAL_RCC_OscConfig+0x76c>)
 80018be:	f023 0304 	bic.w	r3, r3, #4
 80018c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80018c4:	e01c      	b.n	8001900 <HAL_RCC_OscConfig+0x5e0>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	2b05      	cmp	r3, #5
 80018cc:	d10c      	bne.n	80018e8 <HAL_RCC_OscConfig+0x5c8>
 80018ce:	4b6f      	ldr	r3, [pc, #444]	@ (8001a8c <HAL_RCC_OscConfig+0x76c>)
 80018d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018d2:	4a6e      	ldr	r2, [pc, #440]	@ (8001a8c <HAL_RCC_OscConfig+0x76c>)
 80018d4:	f043 0304 	orr.w	r3, r3, #4
 80018d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80018da:	4b6c      	ldr	r3, [pc, #432]	@ (8001a8c <HAL_RCC_OscConfig+0x76c>)
 80018dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018de:	4a6b      	ldr	r2, [pc, #428]	@ (8001a8c <HAL_RCC_OscConfig+0x76c>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80018e6:	e00b      	b.n	8001900 <HAL_RCC_OscConfig+0x5e0>
 80018e8:	4b68      	ldr	r3, [pc, #416]	@ (8001a8c <HAL_RCC_OscConfig+0x76c>)
 80018ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018ec:	4a67      	ldr	r2, [pc, #412]	@ (8001a8c <HAL_RCC_OscConfig+0x76c>)
 80018ee:	f023 0301 	bic.w	r3, r3, #1
 80018f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80018f4:	4b65      	ldr	r3, [pc, #404]	@ (8001a8c <HAL_RCC_OscConfig+0x76c>)
 80018f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018f8:	4a64      	ldr	r2, [pc, #400]	@ (8001a8c <HAL_RCC_OscConfig+0x76c>)
 80018fa:	f023 0304 	bic.w	r3, r3, #4
 80018fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d015      	beq.n	8001934 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001908:	f7ff f928 	bl	8000b5c <HAL_GetTick>
 800190c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800190e:	e00a      	b.n	8001926 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001910:	f7ff f924 	bl	8000b5c <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800191e:	4293      	cmp	r3, r2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e14e      	b.n	8001bc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001926:	4b59      	ldr	r3, [pc, #356]	@ (8001a8c <HAL_RCC_OscConfig+0x76c>)
 8001928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0ee      	beq.n	8001910 <HAL_RCC_OscConfig+0x5f0>
 8001932:	e014      	b.n	800195e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001934:	f7ff f912 	bl	8000b5c <HAL_GetTick>
 8001938:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800193a:	e00a      	b.n	8001952 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800193c:	f7ff f90e 	bl	8000b5c <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800194a:	4293      	cmp	r3, r2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e138      	b.n	8001bc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001952:	4b4e      	ldr	r3, [pc, #312]	@ (8001a8c <HAL_RCC_OscConfig+0x76c>)
 8001954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1ee      	bne.n	800193c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001962:	2b00      	cmp	r3, #0
 8001964:	f000 812d 	beq.w	8001bc2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001968:	4b48      	ldr	r3, [pc, #288]	@ (8001a8c <HAL_RCC_OscConfig+0x76c>)
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001970:	2b18      	cmp	r3, #24
 8001972:	f000 80bd 	beq.w	8001af0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197a:	2b02      	cmp	r3, #2
 800197c:	f040 809e 	bne.w	8001abc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001980:	4b42      	ldr	r3, [pc, #264]	@ (8001a8c <HAL_RCC_OscConfig+0x76c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a41      	ldr	r2, [pc, #260]	@ (8001a8c <HAL_RCC_OscConfig+0x76c>)
 8001986:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800198a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198c:	f7ff f8e6 	bl	8000b5c <HAL_GetTick>
 8001990:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001994:	f7ff f8e2 	bl	8000b5c <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e10e      	b.n	8001bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019a6:	4b39      	ldr	r3, [pc, #228]	@ (8001a8c <HAL_RCC_OscConfig+0x76c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1f0      	bne.n	8001994 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019b2:	4b36      	ldr	r3, [pc, #216]	@ (8001a8c <HAL_RCC_OscConfig+0x76c>)
 80019b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80019b6:	4b37      	ldr	r3, [pc, #220]	@ (8001a94 <HAL_RCC_OscConfig+0x774>)
 80019b8:	4013      	ands	r3, r2
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80019c2:	0112      	lsls	r2, r2, #4
 80019c4:	430a      	orrs	r2, r1
 80019c6:	4931      	ldr	r1, [pc, #196]	@ (8001a8c <HAL_RCC_OscConfig+0x76c>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	628b      	str	r3, [r1, #40]	@ 0x28
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d0:	3b01      	subs	r3, #1
 80019d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019da:	3b01      	subs	r3, #1
 80019dc:	025b      	lsls	r3, r3, #9
 80019de:	b29b      	uxth	r3, r3
 80019e0:	431a      	orrs	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019e6:	3b01      	subs	r3, #1
 80019e8:	041b      	lsls	r3, r3, #16
 80019ea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019f4:	3b01      	subs	r3, #1
 80019f6:	061b      	lsls	r3, r3, #24
 80019f8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80019fc:	4923      	ldr	r1, [pc, #140]	@ (8001a8c <HAL_RCC_OscConfig+0x76c>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001a02:	4b22      	ldr	r3, [pc, #136]	@ (8001a8c <HAL_RCC_OscConfig+0x76c>)
 8001a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a06:	4a21      	ldr	r2, [pc, #132]	@ (8001a8c <HAL_RCC_OscConfig+0x76c>)
 8001a08:	f023 0301 	bic.w	r3, r3, #1
 8001a0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001a0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001a8c <HAL_RCC_OscConfig+0x76c>)
 8001a10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a12:	4b21      	ldr	r3, [pc, #132]	@ (8001a98 <HAL_RCC_OscConfig+0x778>)
 8001a14:	4013      	ands	r3, r2
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001a1a:	00d2      	lsls	r2, r2, #3
 8001a1c:	491b      	ldr	r1, [pc, #108]	@ (8001a8c <HAL_RCC_OscConfig+0x76c>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001a22:	4b1a      	ldr	r3, [pc, #104]	@ (8001a8c <HAL_RCC_OscConfig+0x76c>)
 8001a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a26:	f023 020c 	bic.w	r2, r3, #12
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2e:	4917      	ldr	r1, [pc, #92]	@ (8001a8c <HAL_RCC_OscConfig+0x76c>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001a34:	4b15      	ldr	r3, [pc, #84]	@ (8001a8c <HAL_RCC_OscConfig+0x76c>)
 8001a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a38:	f023 0202 	bic.w	r2, r3, #2
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a40:	4912      	ldr	r1, [pc, #72]	@ (8001a8c <HAL_RCC_OscConfig+0x76c>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001a46:	4b11      	ldr	r3, [pc, #68]	@ (8001a8c <HAL_RCC_OscConfig+0x76c>)
 8001a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a4a:	4a10      	ldr	r2, [pc, #64]	@ (8001a8c <HAL_RCC_OscConfig+0x76c>)
 8001a4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001a52:	4b0e      	ldr	r3, [pc, #56]	@ (8001a8c <HAL_RCC_OscConfig+0x76c>)
 8001a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a56:	4a0d      	ldr	r2, [pc, #52]	@ (8001a8c <HAL_RCC_OscConfig+0x76c>)
 8001a58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a8c <HAL_RCC_OscConfig+0x76c>)
 8001a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a62:	4a0a      	ldr	r2, [pc, #40]	@ (8001a8c <HAL_RCC_OscConfig+0x76c>)
 8001a64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001a6a:	4b08      	ldr	r3, [pc, #32]	@ (8001a8c <HAL_RCC_OscConfig+0x76c>)
 8001a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a6e:	4a07      	ldr	r2, [pc, #28]	@ (8001a8c <HAL_RCC_OscConfig+0x76c>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a76:	4b05      	ldr	r3, [pc, #20]	@ (8001a8c <HAL_RCC_OscConfig+0x76c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a04      	ldr	r2, [pc, #16]	@ (8001a8c <HAL_RCC_OscConfig+0x76c>)
 8001a7c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a82:	f7ff f86b 	bl	8000b5c <HAL_GetTick>
 8001a86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a88:	e011      	b.n	8001aae <HAL_RCC_OscConfig+0x78e>
 8001a8a:	bf00      	nop
 8001a8c:	58024400 	.word	0x58024400
 8001a90:	58024800 	.word	0x58024800
 8001a94:	fffffc0c 	.word	0xfffffc0c
 8001a98:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a9c:	f7ff f85e 	bl	8000b5c <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e08a      	b.n	8001bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001aae:	4b47      	ldr	r3, [pc, #284]	@ (8001bcc <HAL_RCC_OscConfig+0x8ac>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0f0      	beq.n	8001a9c <HAL_RCC_OscConfig+0x77c>
 8001aba:	e082      	b.n	8001bc2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001abc:	4b43      	ldr	r3, [pc, #268]	@ (8001bcc <HAL_RCC_OscConfig+0x8ac>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a42      	ldr	r2, [pc, #264]	@ (8001bcc <HAL_RCC_OscConfig+0x8ac>)
 8001ac2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac8:	f7ff f848 	bl	8000b5c <HAL_GetTick>
 8001acc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad0:	f7ff f844 	bl	8000b5c <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e070      	b.n	8001bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ae2:	4b3a      	ldr	r3, [pc, #232]	@ (8001bcc <HAL_RCC_OscConfig+0x8ac>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1f0      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x7b0>
 8001aee:	e068      	b.n	8001bc2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001af0:	4b36      	ldr	r3, [pc, #216]	@ (8001bcc <HAL_RCC_OscConfig+0x8ac>)
 8001af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001af6:	4b35      	ldr	r3, [pc, #212]	@ (8001bcc <HAL_RCC_OscConfig+0x8ac>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d031      	beq.n	8001b68 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	f003 0203 	and.w	r2, r3, #3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d12a      	bne.n	8001b68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	091b      	lsrs	r3, r3, #4
 8001b16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d122      	bne.n	8001b68 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d11a      	bne.n	8001b68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	0a5b      	lsrs	r3, r3, #9
 8001b36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b3e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d111      	bne.n	8001b68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	0c1b      	lsrs	r3, r3, #16
 8001b48:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b50:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d108      	bne.n	8001b68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	0e1b      	lsrs	r3, r3, #24
 8001b5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b62:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d001      	beq.n	8001b6c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e02b      	b.n	8001bc4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001b6c:	4b17      	ldr	r3, [pc, #92]	@ (8001bcc <HAL_RCC_OscConfig+0x8ac>)
 8001b6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b70:	08db      	lsrs	r3, r3, #3
 8001b72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001b76:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d01f      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001b82:	4b12      	ldr	r3, [pc, #72]	@ (8001bcc <HAL_RCC_OscConfig+0x8ac>)
 8001b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b86:	4a11      	ldr	r2, [pc, #68]	@ (8001bcc <HAL_RCC_OscConfig+0x8ac>)
 8001b88:	f023 0301 	bic.w	r3, r3, #1
 8001b8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b8e:	f7fe ffe5 	bl	8000b5c <HAL_GetTick>
 8001b92:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001b94:	bf00      	nop
 8001b96:	f7fe ffe1 	bl	8000b5c <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d0f9      	beq.n	8001b96 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bcc <HAL_RCC_OscConfig+0x8ac>)
 8001ba4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd0 <HAL_RCC_OscConfig+0x8b0>)
 8001ba8:	4013      	ands	r3, r2
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001bae:	00d2      	lsls	r2, r2, #3
 8001bb0:	4906      	ldr	r1, [pc, #24]	@ (8001bcc <HAL_RCC_OscConfig+0x8ac>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001bb6:	4b05      	ldr	r3, [pc, #20]	@ (8001bcc <HAL_RCC_OscConfig+0x8ac>)
 8001bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bba:	4a04      	ldr	r2, [pc, #16]	@ (8001bcc <HAL_RCC_OscConfig+0x8ac>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3730      	adds	r7, #48	@ 0x30
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	58024400 	.word	0x58024400
 8001bd0:	ffff0007 	.word	0xffff0007

08001bd4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d101      	bne.n	8001be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e19c      	b.n	8001f22 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001be8:	4b8a      	ldr	r3, [pc, #552]	@ (8001e14 <HAL_RCC_ClockConfig+0x240>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 030f 	and.w	r3, r3, #15
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d910      	bls.n	8001c18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf6:	4b87      	ldr	r3, [pc, #540]	@ (8001e14 <HAL_RCC_ClockConfig+0x240>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f023 020f 	bic.w	r2, r3, #15
 8001bfe:	4985      	ldr	r1, [pc, #532]	@ (8001e14 <HAL_RCC_ClockConfig+0x240>)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c06:	4b83      	ldr	r3, [pc, #524]	@ (8001e14 <HAL_RCC_ClockConfig+0x240>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d001      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e184      	b.n	8001f22 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d010      	beq.n	8001c46 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	691a      	ldr	r2, [r3, #16]
 8001c28:	4b7b      	ldr	r3, [pc, #492]	@ (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d908      	bls.n	8001c46 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c34:	4b78      	ldr	r3, [pc, #480]	@ (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	4975      	ldr	r1, [pc, #468]	@ (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d010      	beq.n	8001c74 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	695a      	ldr	r2, [r3, #20]
 8001c56:	4b70      	ldr	r3, [pc, #448]	@ (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d908      	bls.n	8001c74 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c62:	4b6d      	ldr	r3, [pc, #436]	@ (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	496a      	ldr	r1, [pc, #424]	@ (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0310 	and.w	r3, r3, #16
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d010      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	699a      	ldr	r2, [r3, #24]
 8001c84:	4b64      	ldr	r3, [pc, #400]	@ (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001c86:	69db      	ldr	r3, [r3, #28]
 8001c88:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d908      	bls.n	8001ca2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001c90:	4b61      	ldr	r3, [pc, #388]	@ (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001c92:	69db      	ldr	r3, [r3, #28]
 8001c94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	495e      	ldr	r1, [pc, #376]	@ (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0320 	and.w	r3, r3, #32
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d010      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69da      	ldr	r2, [r3, #28]
 8001cb2:	4b59      	ldr	r3, [pc, #356]	@ (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d908      	bls.n	8001cd0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001cbe:	4b56      	ldr	r3, [pc, #344]	@ (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	4953      	ldr	r1, [pc, #332]	@ (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d010      	beq.n	8001cfe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68da      	ldr	r2, [r3, #12]
 8001ce0:	4b4d      	ldr	r3, [pc, #308]	@ (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	f003 030f 	and.w	r3, r3, #15
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d908      	bls.n	8001cfe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cec:	4b4a      	ldr	r3, [pc, #296]	@ (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	f023 020f 	bic.w	r2, r3, #15
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	4947      	ldr	r1, [pc, #284]	@ (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d055      	beq.n	8001db6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001d0a:	4b43      	ldr	r3, [pc, #268]	@ (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	4940      	ldr	r1, [pc, #256]	@ (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d107      	bne.n	8001d34 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d24:	4b3c      	ldr	r3, [pc, #240]	@ (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d121      	bne.n	8001d74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e0f6      	b.n	8001f22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b03      	cmp	r3, #3
 8001d3a:	d107      	bne.n	8001d4c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d3c:	4b36      	ldr	r3, [pc, #216]	@ (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d115      	bne.n	8001d74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e0ea      	b.n	8001f22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d107      	bne.n	8001d64 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d54:	4b30      	ldr	r3, [pc, #192]	@ (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d109      	bne.n	8001d74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e0de      	b.n	8001f22 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d64:	4b2c      	ldr	r3, [pc, #176]	@ (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e0d6      	b.n	8001f22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d74:	4b28      	ldr	r3, [pc, #160]	@ (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	f023 0207 	bic.w	r2, r3, #7
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	4925      	ldr	r1, [pc, #148]	@ (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d86:	f7fe fee9 	bl	8000b5c <HAL_GetTick>
 8001d8a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d8c:	e00a      	b.n	8001da4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d8e:	f7fe fee5 	bl	8000b5c <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e0be      	b.n	8001f22 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da4:	4b1c      	ldr	r3, [pc, #112]	@ (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d1eb      	bne.n	8001d8e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d010      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68da      	ldr	r2, [r3, #12]
 8001dc6:	4b14      	ldr	r3, [pc, #80]	@ (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	f003 030f 	and.w	r3, r3, #15
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d208      	bcs.n	8001de4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd2:	4b11      	ldr	r3, [pc, #68]	@ (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	f023 020f 	bic.w	r2, r3, #15
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	490e      	ldr	r1, [pc, #56]	@ (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001de4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e14 <HAL_RCC_ClockConfig+0x240>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 030f 	and.w	r3, r3, #15
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d214      	bcs.n	8001e1c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df2:	4b08      	ldr	r3, [pc, #32]	@ (8001e14 <HAL_RCC_ClockConfig+0x240>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f023 020f 	bic.w	r2, r3, #15
 8001dfa:	4906      	ldr	r1, [pc, #24]	@ (8001e14 <HAL_RCC_ClockConfig+0x240>)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e02:	4b04      	ldr	r3, [pc, #16]	@ (8001e14 <HAL_RCC_ClockConfig+0x240>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 030f 	and.w	r3, r3, #15
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d005      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e086      	b.n	8001f22 <HAL_RCC_ClockConfig+0x34e>
 8001e14:	52002000 	.word	0x52002000
 8001e18:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d010      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691a      	ldr	r2, [r3, #16]
 8001e2c:	4b3f      	ldr	r3, [pc, #252]	@ (8001f2c <HAL_RCC_ClockConfig+0x358>)
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d208      	bcs.n	8001e4a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001e38:	4b3c      	ldr	r3, [pc, #240]	@ (8001f2c <HAL_RCC_ClockConfig+0x358>)
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	4939      	ldr	r1, [pc, #228]	@ (8001f2c <HAL_RCC_ClockConfig+0x358>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0308 	and.w	r3, r3, #8
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d010      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	695a      	ldr	r2, [r3, #20]
 8001e5a:	4b34      	ldr	r3, [pc, #208]	@ (8001f2c <HAL_RCC_ClockConfig+0x358>)
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d208      	bcs.n	8001e78 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001e66:	4b31      	ldr	r3, [pc, #196]	@ (8001f2c <HAL_RCC_ClockConfig+0x358>)
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	492e      	ldr	r1, [pc, #184]	@ (8001f2c <HAL_RCC_ClockConfig+0x358>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0310 	and.w	r3, r3, #16
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d010      	beq.n	8001ea6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	699a      	ldr	r2, [r3, #24]
 8001e88:	4b28      	ldr	r3, [pc, #160]	@ (8001f2c <HAL_RCC_ClockConfig+0x358>)
 8001e8a:	69db      	ldr	r3, [r3, #28]
 8001e8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d208      	bcs.n	8001ea6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001e94:	4b25      	ldr	r3, [pc, #148]	@ (8001f2c <HAL_RCC_ClockConfig+0x358>)
 8001e96:	69db      	ldr	r3, [r3, #28]
 8001e98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	4922      	ldr	r1, [pc, #136]	@ (8001f2c <HAL_RCC_ClockConfig+0x358>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0320 	and.w	r3, r3, #32
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d010      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69da      	ldr	r2, [r3, #28]
 8001eb6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f2c <HAL_RCC_ClockConfig+0x358>)
 8001eb8:	6a1b      	ldr	r3, [r3, #32]
 8001eba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d208      	bcs.n	8001ed4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001ec2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f2c <HAL_RCC_ClockConfig+0x358>)
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	4917      	ldr	r1, [pc, #92]	@ (8001f2c <HAL_RCC_ClockConfig+0x358>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ed4:	f000 f834 	bl	8001f40 <HAL_RCC_GetSysClockFreq>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	4b14      	ldr	r3, [pc, #80]	@ (8001f2c <HAL_RCC_ClockConfig+0x358>)
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	0a1b      	lsrs	r3, r3, #8
 8001ee0:	f003 030f 	and.w	r3, r3, #15
 8001ee4:	4912      	ldr	r1, [pc, #72]	@ (8001f30 <HAL_RCC_ClockConfig+0x35c>)
 8001ee6:	5ccb      	ldrb	r3, [r1, r3]
 8001ee8:	f003 031f 	and.w	r3, r3, #31
 8001eec:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8001f2c <HAL_RCC_ClockConfig+0x358>)
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	4a0d      	ldr	r2, [pc, #52]	@ (8001f30 <HAL_RCC_ClockConfig+0x35c>)
 8001efc:	5cd3      	ldrb	r3, [r2, r3]
 8001efe:	f003 031f 	and.w	r3, r3, #31
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	fa22 f303 	lsr.w	r3, r2, r3
 8001f08:	4a0a      	ldr	r2, [pc, #40]	@ (8001f34 <HAL_RCC_ClockConfig+0x360>)
 8001f0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f0c:	4a0a      	ldr	r2, [pc, #40]	@ (8001f38 <HAL_RCC_ClockConfig+0x364>)
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001f12:	4b0a      	ldr	r3, [pc, #40]	@ (8001f3c <HAL_RCC_ClockConfig+0x368>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe fdd6 	bl	8000ac8 <HAL_InitTick>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	58024400 	.word	0x58024400
 8001f30:	08002b5c 	.word	0x08002b5c
 8001f34:	24000008 	.word	0x24000008
 8001f38:	24000004 	.word	0x24000004
 8001f3c:	2400000c 	.word	0x2400000c

08001f40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b089      	sub	sp, #36	@ 0x24
 8001f44:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f46:	4bb3      	ldr	r3, [pc, #716]	@ (8002214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f4e:	2b18      	cmp	r3, #24
 8001f50:	f200 8155 	bhi.w	80021fe <HAL_RCC_GetSysClockFreq+0x2be>
 8001f54:	a201      	add	r2, pc, #4	@ (adr r2, 8001f5c <HAL_RCC_GetSysClockFreq+0x1c>)
 8001f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f5a:	bf00      	nop
 8001f5c:	08001fc1 	.word	0x08001fc1
 8001f60:	080021ff 	.word	0x080021ff
 8001f64:	080021ff 	.word	0x080021ff
 8001f68:	080021ff 	.word	0x080021ff
 8001f6c:	080021ff 	.word	0x080021ff
 8001f70:	080021ff 	.word	0x080021ff
 8001f74:	080021ff 	.word	0x080021ff
 8001f78:	080021ff 	.word	0x080021ff
 8001f7c:	08001fe7 	.word	0x08001fe7
 8001f80:	080021ff 	.word	0x080021ff
 8001f84:	080021ff 	.word	0x080021ff
 8001f88:	080021ff 	.word	0x080021ff
 8001f8c:	080021ff 	.word	0x080021ff
 8001f90:	080021ff 	.word	0x080021ff
 8001f94:	080021ff 	.word	0x080021ff
 8001f98:	080021ff 	.word	0x080021ff
 8001f9c:	08001fed 	.word	0x08001fed
 8001fa0:	080021ff 	.word	0x080021ff
 8001fa4:	080021ff 	.word	0x080021ff
 8001fa8:	080021ff 	.word	0x080021ff
 8001fac:	080021ff 	.word	0x080021ff
 8001fb0:	080021ff 	.word	0x080021ff
 8001fb4:	080021ff 	.word	0x080021ff
 8001fb8:	080021ff 	.word	0x080021ff
 8001fbc:	08001ff3 	.word	0x08001ff3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001fc0:	4b94      	ldr	r3, [pc, #592]	@ (8002214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0320 	and.w	r3, r3, #32
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d009      	beq.n	8001fe0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001fcc:	4b91      	ldr	r3, [pc, #580]	@ (8002214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	08db      	lsrs	r3, r3, #3
 8001fd2:	f003 0303 	and.w	r3, r3, #3
 8001fd6:	4a90      	ldr	r2, [pc, #576]	@ (8002218 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fdc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001fde:	e111      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001fe0:	4b8d      	ldr	r3, [pc, #564]	@ (8002218 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001fe2:	61bb      	str	r3, [r7, #24]
      break;
 8001fe4:	e10e      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001fe6:	4b8d      	ldr	r3, [pc, #564]	@ (800221c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001fe8:	61bb      	str	r3, [r7, #24]
      break;
 8001fea:	e10b      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001fec:	4b8c      	ldr	r3, [pc, #560]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001fee:	61bb      	str	r3, [r7, #24]
      break;
 8001ff0:	e108      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001ff2:	4b88      	ldr	r3, [pc, #544]	@ (8002214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001ffc:	4b85      	ldr	r3, [pc, #532]	@ (8002214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002000:	091b      	lsrs	r3, r3, #4
 8002002:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002006:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002008:	4b82      	ldr	r3, [pc, #520]	@ (8002214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800200a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002012:	4b80      	ldr	r3, [pc, #512]	@ (8002214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002016:	08db      	lsrs	r3, r3, #3
 8002018:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	fb02 f303 	mul.w	r3, r2, r3
 8002022:	ee07 3a90 	vmov	s15, r3
 8002026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800202a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	2b00      	cmp	r3, #0
 8002032:	f000 80e1 	beq.w	80021f8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	2b02      	cmp	r3, #2
 800203a:	f000 8083 	beq.w	8002144 <HAL_RCC_GetSysClockFreq+0x204>
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	2b02      	cmp	r3, #2
 8002042:	f200 80a1 	bhi.w	8002188 <HAL_RCC_GetSysClockFreq+0x248>
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d003      	beq.n	8002054 <HAL_RCC_GetSysClockFreq+0x114>
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d056      	beq.n	8002100 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002052:	e099      	b.n	8002188 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002054:	4b6f      	ldr	r3, [pc, #444]	@ (8002214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0320 	and.w	r3, r3, #32
 800205c:	2b00      	cmp	r3, #0
 800205e:	d02d      	beq.n	80020bc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002060:	4b6c      	ldr	r3, [pc, #432]	@ (8002214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	08db      	lsrs	r3, r3, #3
 8002066:	f003 0303 	and.w	r3, r3, #3
 800206a:	4a6b      	ldr	r2, [pc, #428]	@ (8002218 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800206c:	fa22 f303 	lsr.w	r3, r2, r3
 8002070:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	ee07 3a90 	vmov	s15, r3
 8002078:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	ee07 3a90 	vmov	s15, r3
 8002082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800208a:	4b62      	ldr	r3, [pc, #392]	@ (8002214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002092:	ee07 3a90 	vmov	s15, r3
 8002096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800209a:	ed97 6a02 	vldr	s12, [r7, #8]
 800209e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002224 <HAL_RCC_GetSysClockFreq+0x2e4>
 80020a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80020ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020b6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80020ba:	e087      	b.n	80021cc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	ee07 3a90 	vmov	s15, r3
 80020c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020c6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002228 <HAL_RCC_GetSysClockFreq+0x2e8>
 80020ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020ce:	4b51      	ldr	r3, [pc, #324]	@ (8002214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020d6:	ee07 3a90 	vmov	s15, r3
 80020da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020de:	ed97 6a02 	vldr	s12, [r7, #8]
 80020e2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002224 <HAL_RCC_GetSysClockFreq+0x2e4>
 80020e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80020f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80020fe:	e065      	b.n	80021cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	ee07 3a90 	vmov	s15, r3
 8002106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800210a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800222c <HAL_RCC_GetSysClockFreq+0x2ec>
 800210e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002112:	4b40      	ldr	r3, [pc, #256]	@ (8002214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800211a:	ee07 3a90 	vmov	s15, r3
 800211e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002122:	ed97 6a02 	vldr	s12, [r7, #8]
 8002126:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002224 <HAL_RCC_GetSysClockFreq+0x2e4>
 800212a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800212e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002132:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800213a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800213e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002142:	e043      	b.n	80021cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	ee07 3a90 	vmov	s15, r3
 800214a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800214e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002230 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002156:	4b2f      	ldr	r3, [pc, #188]	@ (8002214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800215e:	ee07 3a90 	vmov	s15, r3
 8002162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002166:	ed97 6a02 	vldr	s12, [r7, #8]
 800216a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002224 <HAL_RCC_GetSysClockFreq+0x2e4>
 800216e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002176:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800217a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800217e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002182:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002186:	e021      	b.n	80021cc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	ee07 3a90 	vmov	s15, r3
 800218e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002192:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800222c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800219a:	4b1e      	ldr	r3, [pc, #120]	@ (8002214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021a2:	ee07 3a90 	vmov	s15, r3
 80021a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80021ae:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002224 <HAL_RCC_GetSysClockFreq+0x2e4>
 80021b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80021be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80021ca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80021cc:	4b11      	ldr	r3, [pc, #68]	@ (8002214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d0:	0a5b      	lsrs	r3, r3, #9
 80021d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80021d6:	3301      	adds	r3, #1
 80021d8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	ee07 3a90 	vmov	s15, r3
 80021e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80021e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021f0:	ee17 3a90 	vmov	r3, s15
 80021f4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80021f6:	e005      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80021f8:	2300      	movs	r3, #0
 80021fa:	61bb      	str	r3, [r7, #24]
      break;
 80021fc:	e002      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80021fe:	4b07      	ldr	r3, [pc, #28]	@ (800221c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002200:	61bb      	str	r3, [r7, #24]
      break;
 8002202:	bf00      	nop
  }

  return sysclockfreq;
 8002204:	69bb      	ldr	r3, [r7, #24]
}
 8002206:	4618      	mov	r0, r3
 8002208:	3724      	adds	r7, #36	@ 0x24
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	58024400 	.word	0x58024400
 8002218:	03d09000 	.word	0x03d09000
 800221c:	003d0900 	.word	0x003d0900
 8002220:	017d7840 	.word	0x017d7840
 8002224:	46000000 	.word	0x46000000
 8002228:	4c742400 	.word	0x4c742400
 800222c:	4a742400 	.word	0x4a742400
 8002230:	4bbebc20 	.word	0x4bbebc20

08002234 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e049      	b.n	80022da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d106      	bne.n	8002260 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7fe fae6 	bl	800082c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2202      	movs	r2, #2
 8002264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3304      	adds	r3, #4
 8002270:	4619      	mov	r1, r3
 8002272:	4610      	mov	r0, r2
 8002274:	f000 fa3c 	bl	80026f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d109      	bne.n	8002308 <HAL_TIM_PWM_Start+0x24>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	bf14      	ite	ne
 8002300:	2301      	movne	r3, #1
 8002302:	2300      	moveq	r3, #0
 8002304:	b2db      	uxtb	r3, r3
 8002306:	e03c      	b.n	8002382 <HAL_TIM_PWM_Start+0x9e>
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	2b04      	cmp	r3, #4
 800230c:	d109      	bne.n	8002322 <HAL_TIM_PWM_Start+0x3e>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b01      	cmp	r3, #1
 8002318:	bf14      	ite	ne
 800231a:	2301      	movne	r3, #1
 800231c:	2300      	moveq	r3, #0
 800231e:	b2db      	uxtb	r3, r3
 8002320:	e02f      	b.n	8002382 <HAL_TIM_PWM_Start+0x9e>
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	2b08      	cmp	r3, #8
 8002326:	d109      	bne.n	800233c <HAL_TIM_PWM_Start+0x58>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b01      	cmp	r3, #1
 8002332:	bf14      	ite	ne
 8002334:	2301      	movne	r3, #1
 8002336:	2300      	moveq	r3, #0
 8002338:	b2db      	uxtb	r3, r3
 800233a:	e022      	b.n	8002382 <HAL_TIM_PWM_Start+0x9e>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	2b0c      	cmp	r3, #12
 8002340:	d109      	bne.n	8002356 <HAL_TIM_PWM_Start+0x72>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b01      	cmp	r3, #1
 800234c:	bf14      	ite	ne
 800234e:	2301      	movne	r3, #1
 8002350:	2300      	moveq	r3, #0
 8002352:	b2db      	uxtb	r3, r3
 8002354:	e015      	b.n	8002382 <HAL_TIM_PWM_Start+0x9e>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	2b10      	cmp	r3, #16
 800235a:	d109      	bne.n	8002370 <HAL_TIM_PWM_Start+0x8c>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b01      	cmp	r3, #1
 8002366:	bf14      	ite	ne
 8002368:	2301      	movne	r3, #1
 800236a:	2300      	moveq	r3, #0
 800236c:	b2db      	uxtb	r3, r3
 800236e:	e008      	b.n	8002382 <HAL_TIM_PWM_Start+0x9e>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b01      	cmp	r3, #1
 800237a:	bf14      	ite	ne
 800237c:	2301      	movne	r3, #1
 800237e:	2300      	moveq	r3, #0
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e0a1      	b.n	80024ce <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d104      	bne.n	800239a <HAL_TIM_PWM_Start+0xb6>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2202      	movs	r2, #2
 8002394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002398:	e023      	b.n	80023e2 <HAL_TIM_PWM_Start+0xfe>
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	2b04      	cmp	r3, #4
 800239e:	d104      	bne.n	80023aa <HAL_TIM_PWM_Start+0xc6>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2202      	movs	r2, #2
 80023a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023a8:	e01b      	b.n	80023e2 <HAL_TIM_PWM_Start+0xfe>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	2b08      	cmp	r3, #8
 80023ae:	d104      	bne.n	80023ba <HAL_TIM_PWM_Start+0xd6>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2202      	movs	r2, #2
 80023b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80023b8:	e013      	b.n	80023e2 <HAL_TIM_PWM_Start+0xfe>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	2b0c      	cmp	r3, #12
 80023be:	d104      	bne.n	80023ca <HAL_TIM_PWM_Start+0xe6>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2202      	movs	r2, #2
 80023c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80023c8:	e00b      	b.n	80023e2 <HAL_TIM_PWM_Start+0xfe>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	2b10      	cmp	r3, #16
 80023ce:	d104      	bne.n	80023da <HAL_TIM_PWM_Start+0xf6>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2202      	movs	r2, #2
 80023d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80023d8:	e003      	b.n	80023e2 <HAL_TIM_PWM_Start+0xfe>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2202      	movs	r2, #2
 80023de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2201      	movs	r2, #1
 80023e8:	6839      	ldr	r1, [r7, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 fac4 	bl	8002978 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a38      	ldr	r2, [pc, #224]	@ (80024d8 <HAL_TIM_PWM_Start+0x1f4>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d013      	beq.n	8002422 <HAL_TIM_PWM_Start+0x13e>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a37      	ldr	r2, [pc, #220]	@ (80024dc <HAL_TIM_PWM_Start+0x1f8>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d00e      	beq.n	8002422 <HAL_TIM_PWM_Start+0x13e>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a35      	ldr	r2, [pc, #212]	@ (80024e0 <HAL_TIM_PWM_Start+0x1fc>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d009      	beq.n	8002422 <HAL_TIM_PWM_Start+0x13e>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a34      	ldr	r2, [pc, #208]	@ (80024e4 <HAL_TIM_PWM_Start+0x200>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d004      	beq.n	8002422 <HAL_TIM_PWM_Start+0x13e>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a32      	ldr	r2, [pc, #200]	@ (80024e8 <HAL_TIM_PWM_Start+0x204>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d101      	bne.n	8002426 <HAL_TIM_PWM_Start+0x142>
 8002422:	2301      	movs	r3, #1
 8002424:	e000      	b.n	8002428 <HAL_TIM_PWM_Start+0x144>
 8002426:	2300      	movs	r3, #0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d007      	beq.n	800243c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800243a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a25      	ldr	r2, [pc, #148]	@ (80024d8 <HAL_TIM_PWM_Start+0x1f4>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d022      	beq.n	800248c <HAL_TIM_PWM_Start+0x1a8>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800244e:	d01d      	beq.n	800248c <HAL_TIM_PWM_Start+0x1a8>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a25      	ldr	r2, [pc, #148]	@ (80024ec <HAL_TIM_PWM_Start+0x208>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d018      	beq.n	800248c <HAL_TIM_PWM_Start+0x1a8>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a24      	ldr	r2, [pc, #144]	@ (80024f0 <HAL_TIM_PWM_Start+0x20c>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d013      	beq.n	800248c <HAL_TIM_PWM_Start+0x1a8>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a22      	ldr	r2, [pc, #136]	@ (80024f4 <HAL_TIM_PWM_Start+0x210>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d00e      	beq.n	800248c <HAL_TIM_PWM_Start+0x1a8>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a1a      	ldr	r2, [pc, #104]	@ (80024dc <HAL_TIM_PWM_Start+0x1f8>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d009      	beq.n	800248c <HAL_TIM_PWM_Start+0x1a8>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a1e      	ldr	r2, [pc, #120]	@ (80024f8 <HAL_TIM_PWM_Start+0x214>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d004      	beq.n	800248c <HAL_TIM_PWM_Start+0x1a8>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a16      	ldr	r2, [pc, #88]	@ (80024e0 <HAL_TIM_PWM_Start+0x1fc>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d115      	bne.n	80024b8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689a      	ldr	r2, [r3, #8]
 8002492:	4b1a      	ldr	r3, [pc, #104]	@ (80024fc <HAL_TIM_PWM_Start+0x218>)
 8002494:	4013      	ands	r3, r2
 8002496:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2b06      	cmp	r3, #6
 800249c:	d015      	beq.n	80024ca <HAL_TIM_PWM_Start+0x1e6>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024a4:	d011      	beq.n	80024ca <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f042 0201 	orr.w	r2, r2, #1
 80024b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024b6:	e008      	b.n	80024ca <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f042 0201 	orr.w	r2, r2, #1
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	e000      	b.n	80024cc <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40010000 	.word	0x40010000
 80024dc:	40010400 	.word	0x40010400
 80024e0:	40014000 	.word	0x40014000
 80024e4:	40014400 	.word	0x40014400
 80024e8:	40014800 	.word	0x40014800
 80024ec:	40000400 	.word	0x40000400
 80024f0:	40000800 	.word	0x40000800
 80024f4:	40000c00 	.word	0x40000c00
 80024f8:	40001800 	.word	0x40001800
 80024fc:	00010007 	.word	0x00010007

08002500 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800250a:	2300      	movs	r3, #0
 800250c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002514:	2b01      	cmp	r3, #1
 8002516:	d101      	bne.n	800251c <HAL_TIM_ConfigClockSource+0x1c>
 8002518:	2302      	movs	r3, #2
 800251a:	e0dc      	b.n	80026d6 <HAL_TIM_ConfigClockSource+0x1d6>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2202      	movs	r2, #2
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	4b6a      	ldr	r3, [pc, #424]	@ (80026e0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8002538:	4013      	ands	r3, r2
 800253a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002542:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68ba      	ldr	r2, [r7, #8]
 800254a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a64      	ldr	r2, [pc, #400]	@ (80026e4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002552:	4293      	cmp	r3, r2
 8002554:	f000 80a9 	beq.w	80026aa <HAL_TIM_ConfigClockSource+0x1aa>
 8002558:	4a62      	ldr	r2, [pc, #392]	@ (80026e4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800255a:	4293      	cmp	r3, r2
 800255c:	f200 80ae 	bhi.w	80026bc <HAL_TIM_ConfigClockSource+0x1bc>
 8002560:	4a61      	ldr	r2, [pc, #388]	@ (80026e8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002562:	4293      	cmp	r3, r2
 8002564:	f000 80a1 	beq.w	80026aa <HAL_TIM_ConfigClockSource+0x1aa>
 8002568:	4a5f      	ldr	r2, [pc, #380]	@ (80026e8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800256a:	4293      	cmp	r3, r2
 800256c:	f200 80a6 	bhi.w	80026bc <HAL_TIM_ConfigClockSource+0x1bc>
 8002570:	4a5e      	ldr	r2, [pc, #376]	@ (80026ec <HAL_TIM_ConfigClockSource+0x1ec>)
 8002572:	4293      	cmp	r3, r2
 8002574:	f000 8099 	beq.w	80026aa <HAL_TIM_ConfigClockSource+0x1aa>
 8002578:	4a5c      	ldr	r2, [pc, #368]	@ (80026ec <HAL_TIM_ConfigClockSource+0x1ec>)
 800257a:	4293      	cmp	r3, r2
 800257c:	f200 809e 	bhi.w	80026bc <HAL_TIM_ConfigClockSource+0x1bc>
 8002580:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002584:	f000 8091 	beq.w	80026aa <HAL_TIM_ConfigClockSource+0x1aa>
 8002588:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800258c:	f200 8096 	bhi.w	80026bc <HAL_TIM_ConfigClockSource+0x1bc>
 8002590:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002594:	f000 8089 	beq.w	80026aa <HAL_TIM_ConfigClockSource+0x1aa>
 8002598:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800259c:	f200 808e 	bhi.w	80026bc <HAL_TIM_ConfigClockSource+0x1bc>
 80025a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025a4:	d03e      	beq.n	8002624 <HAL_TIM_ConfigClockSource+0x124>
 80025a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025aa:	f200 8087 	bhi.w	80026bc <HAL_TIM_ConfigClockSource+0x1bc>
 80025ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025b2:	f000 8086 	beq.w	80026c2 <HAL_TIM_ConfigClockSource+0x1c2>
 80025b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025ba:	d87f      	bhi.n	80026bc <HAL_TIM_ConfigClockSource+0x1bc>
 80025bc:	2b70      	cmp	r3, #112	@ 0x70
 80025be:	d01a      	beq.n	80025f6 <HAL_TIM_ConfigClockSource+0xf6>
 80025c0:	2b70      	cmp	r3, #112	@ 0x70
 80025c2:	d87b      	bhi.n	80026bc <HAL_TIM_ConfigClockSource+0x1bc>
 80025c4:	2b60      	cmp	r3, #96	@ 0x60
 80025c6:	d050      	beq.n	800266a <HAL_TIM_ConfigClockSource+0x16a>
 80025c8:	2b60      	cmp	r3, #96	@ 0x60
 80025ca:	d877      	bhi.n	80026bc <HAL_TIM_ConfigClockSource+0x1bc>
 80025cc:	2b50      	cmp	r3, #80	@ 0x50
 80025ce:	d03c      	beq.n	800264a <HAL_TIM_ConfigClockSource+0x14a>
 80025d0:	2b50      	cmp	r3, #80	@ 0x50
 80025d2:	d873      	bhi.n	80026bc <HAL_TIM_ConfigClockSource+0x1bc>
 80025d4:	2b40      	cmp	r3, #64	@ 0x40
 80025d6:	d058      	beq.n	800268a <HAL_TIM_ConfigClockSource+0x18a>
 80025d8:	2b40      	cmp	r3, #64	@ 0x40
 80025da:	d86f      	bhi.n	80026bc <HAL_TIM_ConfigClockSource+0x1bc>
 80025dc:	2b30      	cmp	r3, #48	@ 0x30
 80025de:	d064      	beq.n	80026aa <HAL_TIM_ConfigClockSource+0x1aa>
 80025e0:	2b30      	cmp	r3, #48	@ 0x30
 80025e2:	d86b      	bhi.n	80026bc <HAL_TIM_ConfigClockSource+0x1bc>
 80025e4:	2b20      	cmp	r3, #32
 80025e6:	d060      	beq.n	80026aa <HAL_TIM_ConfigClockSource+0x1aa>
 80025e8:	2b20      	cmp	r3, #32
 80025ea:	d867      	bhi.n	80026bc <HAL_TIM_ConfigClockSource+0x1bc>
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d05c      	beq.n	80026aa <HAL_TIM_ConfigClockSource+0x1aa>
 80025f0:	2b10      	cmp	r3, #16
 80025f2:	d05a      	beq.n	80026aa <HAL_TIM_ConfigClockSource+0x1aa>
 80025f4:	e062      	b.n	80026bc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002606:	f000 f997 	bl	8002938 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002618:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	609a      	str	r2, [r3, #8]
      break;
 8002622:	e04f      	b.n	80026c4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002634:	f000 f980 	bl	8002938 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689a      	ldr	r2, [r3, #8]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002646:	609a      	str	r2, [r3, #8]
      break;
 8002648:	e03c      	b.n	80026c4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002656:	461a      	mov	r2, r3
 8002658:	f000 f8f0 	bl	800283c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2150      	movs	r1, #80	@ 0x50
 8002662:	4618      	mov	r0, r3
 8002664:	f000 f94a 	bl	80028fc <TIM_ITRx_SetConfig>
      break;
 8002668:	e02c      	b.n	80026c4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002676:	461a      	mov	r2, r3
 8002678:	f000 f90f 	bl	800289a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2160      	movs	r1, #96	@ 0x60
 8002682:	4618      	mov	r0, r3
 8002684:	f000 f93a 	bl	80028fc <TIM_ITRx_SetConfig>
      break;
 8002688:	e01c      	b.n	80026c4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002696:	461a      	mov	r2, r3
 8002698:	f000 f8d0 	bl	800283c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2140      	movs	r1, #64	@ 0x40
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 f92a 	bl	80028fc <TIM_ITRx_SetConfig>
      break;
 80026a8:	e00c      	b.n	80026c4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4619      	mov	r1, r3
 80026b4:	4610      	mov	r0, r2
 80026b6:	f000 f921 	bl	80028fc <TIM_ITRx_SetConfig>
      break;
 80026ba:	e003      	b.n	80026c4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	73fb      	strb	r3, [r7, #15]
      break;
 80026c0:	e000      	b.n	80026c4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80026c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	ffceff88 	.word	0xffceff88
 80026e4:	00100040 	.word	0x00100040
 80026e8:	00100030 	.word	0x00100030
 80026ec:	00100020 	.word	0x00100020

080026f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a46      	ldr	r2, [pc, #280]	@ (800281c <TIM_Base_SetConfig+0x12c>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d013      	beq.n	8002730 <TIM_Base_SetConfig+0x40>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800270e:	d00f      	beq.n	8002730 <TIM_Base_SetConfig+0x40>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a43      	ldr	r2, [pc, #268]	@ (8002820 <TIM_Base_SetConfig+0x130>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d00b      	beq.n	8002730 <TIM_Base_SetConfig+0x40>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a42      	ldr	r2, [pc, #264]	@ (8002824 <TIM_Base_SetConfig+0x134>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d007      	beq.n	8002730 <TIM_Base_SetConfig+0x40>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a41      	ldr	r2, [pc, #260]	@ (8002828 <TIM_Base_SetConfig+0x138>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d003      	beq.n	8002730 <TIM_Base_SetConfig+0x40>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a40      	ldr	r2, [pc, #256]	@ (800282c <TIM_Base_SetConfig+0x13c>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d108      	bne.n	8002742 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002736:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	4313      	orrs	r3, r2
 8002740:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a35      	ldr	r2, [pc, #212]	@ (800281c <TIM_Base_SetConfig+0x12c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d01f      	beq.n	800278a <TIM_Base_SetConfig+0x9a>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002750:	d01b      	beq.n	800278a <TIM_Base_SetConfig+0x9a>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a32      	ldr	r2, [pc, #200]	@ (8002820 <TIM_Base_SetConfig+0x130>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d017      	beq.n	800278a <TIM_Base_SetConfig+0x9a>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a31      	ldr	r2, [pc, #196]	@ (8002824 <TIM_Base_SetConfig+0x134>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d013      	beq.n	800278a <TIM_Base_SetConfig+0x9a>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a30      	ldr	r2, [pc, #192]	@ (8002828 <TIM_Base_SetConfig+0x138>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d00f      	beq.n	800278a <TIM_Base_SetConfig+0x9a>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a2f      	ldr	r2, [pc, #188]	@ (800282c <TIM_Base_SetConfig+0x13c>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d00b      	beq.n	800278a <TIM_Base_SetConfig+0x9a>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a2e      	ldr	r2, [pc, #184]	@ (8002830 <TIM_Base_SetConfig+0x140>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d007      	beq.n	800278a <TIM_Base_SetConfig+0x9a>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a2d      	ldr	r2, [pc, #180]	@ (8002834 <TIM_Base_SetConfig+0x144>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d003      	beq.n	800278a <TIM_Base_SetConfig+0x9a>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a2c      	ldr	r2, [pc, #176]	@ (8002838 <TIM_Base_SetConfig+0x148>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d108      	bne.n	800279c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002790:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	4313      	orrs	r3, r2
 800279a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a16      	ldr	r2, [pc, #88]	@ (800281c <TIM_Base_SetConfig+0x12c>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d00f      	beq.n	80027e8 <TIM_Base_SetConfig+0xf8>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a18      	ldr	r2, [pc, #96]	@ (800282c <TIM_Base_SetConfig+0x13c>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d00b      	beq.n	80027e8 <TIM_Base_SetConfig+0xf8>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a17      	ldr	r2, [pc, #92]	@ (8002830 <TIM_Base_SetConfig+0x140>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d007      	beq.n	80027e8 <TIM_Base_SetConfig+0xf8>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a16      	ldr	r2, [pc, #88]	@ (8002834 <TIM_Base_SetConfig+0x144>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d003      	beq.n	80027e8 <TIM_Base_SetConfig+0xf8>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a15      	ldr	r2, [pc, #84]	@ (8002838 <TIM_Base_SetConfig+0x148>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d103      	bne.n	80027f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	691a      	ldr	r2, [r3, #16]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d105      	bne.n	800280e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	f023 0201 	bic.w	r2, r3, #1
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	611a      	str	r2, [r3, #16]
  }
}
 800280e:	bf00      	nop
 8002810:	3714      	adds	r7, #20
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	40010000 	.word	0x40010000
 8002820:	40000400 	.word	0x40000400
 8002824:	40000800 	.word	0x40000800
 8002828:	40000c00 	.word	0x40000c00
 800282c:	40010400 	.word	0x40010400
 8002830:	40014000 	.word	0x40014000
 8002834:	40014400 	.word	0x40014400
 8002838:	40014800 	.word	0x40014800

0800283c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800283c:	b480      	push	{r7}
 800283e:	b087      	sub	sp, #28
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	f023 0201 	bic.w	r2, r3, #1
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002866:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	011b      	lsls	r3, r3, #4
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4313      	orrs	r3, r2
 8002870:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	f023 030a 	bic.w	r3, r3, #10
 8002878:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	4313      	orrs	r3, r2
 8002880:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	621a      	str	r2, [r3, #32]
}
 800288e:	bf00      	nop
 8002890:	371c      	adds	r7, #28
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800289a:	b480      	push	{r7}
 800289c:	b087      	sub	sp, #28
 800289e:	af00      	add	r7, sp, #0
 80028a0:	60f8      	str	r0, [r7, #12]
 80028a2:	60b9      	str	r1, [r7, #8]
 80028a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	f023 0210 	bic.w	r2, r3, #16
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80028c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	031b      	lsls	r3, r3, #12
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80028d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	4313      	orrs	r3, r2
 80028e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	621a      	str	r2, [r3, #32]
}
 80028ee:	bf00      	nop
 80028f0:	371c      	adds	r7, #28
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
	...

080028fc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	4b09      	ldr	r3, [pc, #36]	@ (8002934 <TIM_ITRx_SetConfig+0x38>)
 8002910:	4013      	ands	r3, r2
 8002912:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	4313      	orrs	r3, r2
 800291a:	f043 0307 	orr.w	r3, r3, #7
 800291e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	609a      	str	r2, [r3, #8]
}
 8002926:	bf00      	nop
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	ffcfff8f 	.word	0xffcfff8f

08002938 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002938:	b480      	push	{r7}
 800293a:	b087      	sub	sp, #28
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
 8002944:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002952:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	021a      	lsls	r2, r3, #8
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	431a      	orrs	r2, r3
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	4313      	orrs	r3, r2
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	4313      	orrs	r3, r2
 8002964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	609a      	str	r2, [r3, #8]
}
 800296c:	bf00      	nop
 800296e:	371c      	adds	r7, #28
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002978:	b480      	push	{r7}
 800297a:	b087      	sub	sp, #28
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	f003 031f 	and.w	r3, r3, #31
 800298a:	2201      	movs	r2, #1
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6a1a      	ldr	r2, [r3, #32]
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	43db      	mvns	r3, r3
 800299a:	401a      	ands	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6a1a      	ldr	r2, [r3, #32]
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	f003 031f 	and.w	r3, r3, #31
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	fa01 f303 	lsl.w	r3, r1, r3
 80029b0:	431a      	orrs	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	621a      	str	r2, [r3, #32]
}
 80029b6:	bf00      	nop
 80029b8:	371c      	adds	r7, #28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
	...

080029c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029d8:	2302      	movs	r3, #2
 80029da:	e06d      	b.n	8002ab8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2202      	movs	r2, #2
 80029e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a30      	ldr	r2, [pc, #192]	@ (8002ac4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d004      	beq.n	8002a10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a2f      	ldr	r2, [pc, #188]	@ (8002ac8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d108      	bne.n	8002a22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002a16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a20      	ldr	r2, [pc, #128]	@ (8002ac4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d022      	beq.n	8002a8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a4e:	d01d      	beq.n	8002a8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a1d      	ldr	r2, [pc, #116]	@ (8002acc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d018      	beq.n	8002a8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a1c      	ldr	r2, [pc, #112]	@ (8002ad0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d013      	beq.n	8002a8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a1a      	ldr	r2, [pc, #104]	@ (8002ad4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d00e      	beq.n	8002a8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a15      	ldr	r2, [pc, #84]	@ (8002ac8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d009      	beq.n	8002a8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a16      	ldr	r2, [pc, #88]	@ (8002ad8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d004      	beq.n	8002a8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a15      	ldr	r2, [pc, #84]	@ (8002adc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d10c      	bne.n	8002aa6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68ba      	ldr	r2, [r7, #8]
 8002aa4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	40010000 	.word	0x40010000
 8002ac8:	40010400 	.word	0x40010400
 8002acc:	40000400 	.word	0x40000400
 8002ad0:	40000800 	.word	0x40000800
 8002ad4:	40000c00 	.word	0x40000c00
 8002ad8:	40001800 	.word	0x40001800
 8002adc:	40014000 	.word	0x40014000

08002ae0 <memset>:
 8002ae0:	4402      	add	r2, r0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d100      	bne.n	8002aea <memset+0xa>
 8002ae8:	4770      	bx	lr
 8002aea:	f803 1b01 	strb.w	r1, [r3], #1
 8002aee:	e7f9      	b.n	8002ae4 <memset+0x4>

08002af0 <__libc_init_array>:
 8002af0:	b570      	push	{r4, r5, r6, lr}
 8002af2:	4d0d      	ldr	r5, [pc, #52]	@ (8002b28 <__libc_init_array+0x38>)
 8002af4:	4c0d      	ldr	r4, [pc, #52]	@ (8002b2c <__libc_init_array+0x3c>)
 8002af6:	1b64      	subs	r4, r4, r5
 8002af8:	10a4      	asrs	r4, r4, #2
 8002afa:	2600      	movs	r6, #0
 8002afc:	42a6      	cmp	r6, r4
 8002afe:	d109      	bne.n	8002b14 <__libc_init_array+0x24>
 8002b00:	4d0b      	ldr	r5, [pc, #44]	@ (8002b30 <__libc_init_array+0x40>)
 8002b02:	4c0c      	ldr	r4, [pc, #48]	@ (8002b34 <__libc_init_array+0x44>)
 8002b04:	f000 f818 	bl	8002b38 <_init>
 8002b08:	1b64      	subs	r4, r4, r5
 8002b0a:	10a4      	asrs	r4, r4, #2
 8002b0c:	2600      	movs	r6, #0
 8002b0e:	42a6      	cmp	r6, r4
 8002b10:	d105      	bne.n	8002b1e <__libc_init_array+0x2e>
 8002b12:	bd70      	pop	{r4, r5, r6, pc}
 8002b14:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b18:	4798      	blx	r3
 8002b1a:	3601      	adds	r6, #1
 8002b1c:	e7ee      	b.n	8002afc <__libc_init_array+0xc>
 8002b1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b22:	4798      	blx	r3
 8002b24:	3601      	adds	r6, #1
 8002b26:	e7f2      	b.n	8002b0e <__libc_init_array+0x1e>
 8002b28:	08002b6c 	.word	0x08002b6c
 8002b2c:	08002b6c 	.word	0x08002b6c
 8002b30:	08002b6c 	.word	0x08002b6c
 8002b34:	08002b70 	.word	0x08002b70

08002b38 <_init>:
 8002b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b3a:	bf00      	nop
 8002b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b3e:	bc08      	pop	{r3}
 8002b40:	469e      	mov	lr, r3
 8002b42:	4770      	bx	lr

08002b44 <_fini>:
 8002b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b46:	bf00      	nop
 8002b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b4a:	bc08      	pop	{r3}
 8002b4c:	469e      	mov	lr, r3
 8002b4e:	4770      	bx	lr
