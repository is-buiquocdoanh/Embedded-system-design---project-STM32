
sensor_MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ce4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  08009df8  08009df8  0000adf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2a0  0800a2a0  0000c278  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2a0  0800a2a0  0000b2a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2a8  0800a2a8  0000c278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2a8  0800a2a8  0000b2a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a2ac  0800a2ac  0000b2ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000278  20000000  0800a2b0  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c8  20000278  0800a528  0000c278  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000640  0800a528  0000c640  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c278  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba5e  00000000  00000000  0000c2a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f22  00000000  00000000  00017cff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac0  00000000  00000000  00019c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000085a  00000000  00000000  0001a6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001844e  00000000  00000000  0001af42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e318  00000000  00000000  00033390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086f0f  00000000  00000000  000416a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c85b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ea8  00000000  00000000  000c85fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000cc4a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000278 	.word	0x20000278
 800012c:	00000000 	.word	0x00000000
 8000130:	08009ddc 	.word	0x08009ddc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000027c 	.word	0x2000027c
 800014c:	08009ddc 	.word	0x08009ddc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <lcd_send_cmd>:
 * @param  lcd: Pointer to the LCD handle
 * @param  cmd: Command byte to send
 * @retval None
 */
void lcd_send_cmd(I2C_LCD_HandleTypeDef *lcd, char cmd)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af02      	add	r7, sp, #8
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (cmd & 0xF0);            // Extract upper nibble
 8000f50:	78fb      	ldrb	r3, [r7, #3]
 8000f52:	f023 030f 	bic.w	r3, r3, #15
 8000f56:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((cmd << 4) & 0xF0);     // Extract lower nibble
 8000f58:	78fb      	ldrb	r3, [r7, #3]
 8000f5a:	011b      	lsls	r3, r3, #4
 8000f5c:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0C;  // en=1, rs=0
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
 8000f60:	f043 030c 	orr.w	r3, r3, #12
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x08;  // en=0, rs=0
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	f043 0308 	orr.w	r3, r3, #8
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0C;  // en=1, rs=0
 8000f72:	7bbb      	ldrb	r3, [r7, #14]
 8000f74:	f043 030c 	orr.w	r3, r3, #12
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x08;  // en=0, rs=0
 8000f7c:	7bbb      	ldrb	r3, [r7, #14]
 8000f7e:	f043 0308 	orr.w	r3, r3, #8
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6818      	ldr	r0, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	791b      	ldrb	r3, [r3, #4]
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f107 0208 	add.w	r2, r7, #8
 8000f94:	2364      	movs	r3, #100	@ 0x64
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	2304      	movs	r3, #4
 8000f9a:	f001 fdad 	bl	8002af8 <HAL_I2C_Master_Transmit>
}
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <lcd_send_data>:
 * @param  lcd: Pointer to the LCD handle
 * @param  data: Data byte to send
 * @retval None
 */
void lcd_send_data(I2C_LCD_HandleTypeDef *lcd, char data)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b086      	sub	sp, #24
 8000faa:	af02      	add	r7, sp, #8
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	460b      	mov	r3, r1
 8000fb0:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (data & 0xF0);            // Extract upper nibble
 8000fb2:	78fb      	ldrb	r3, [r7, #3]
 8000fb4:	f023 030f 	bic.w	r3, r3, #15
 8000fb8:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((data << 4) & 0xF0);     // Extract lower nibble
 8000fba:	78fb      	ldrb	r3, [r7, #3]
 8000fbc:	011b      	lsls	r3, r3, #4
 8000fbe:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0D;  // en=1, rs=1
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
 8000fc2:	f043 030d 	orr.w	r3, r3, #13
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x09;  // en=0, rs=1
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
 8000fcc:	f043 0309 	orr.w	r3, r3, #9
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0D;  // en=1, rs=1
 8000fd4:	7bbb      	ldrb	r3, [r7, #14]
 8000fd6:	f043 030d 	orr.w	r3, r3, #13
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x09;  // en=0, rs=1
 8000fde:	7bbb      	ldrb	r3, [r7, #14]
 8000fe0:	f043 0309 	orr.w	r3, r3, #9
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6818      	ldr	r0, [r3, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	791b      	ldrb	r3, [r3, #4]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f107 0208 	add.w	r2, r7, #8
 8000ff6:	2364      	movs	r3, #100	@ 0x64
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	2304      	movs	r3, #4
 8000ffc:	f001 fd7c 	bl	8002af8 <HAL_I2C_Master_Transmit>
}
 8001000:	bf00      	nop
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <lcd_clear>:
 * @brief  Clears the LCD display.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_clear(I2C_LCD_HandleTypeDef *lcd)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
    lcd_send_cmd(lcd, 0x80);  // Move cursor to the home position
 8001010:	2180      	movs	r1, #128	@ 0x80
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff ff96 	bl	8000f44 <lcd_send_cmd>
    // Clear all characters
    // 16x4 = 64 characters
    // 20x4 = 80 characters
    // So 80 character clearing is enough for both 16x2, 16x4, 20x2 and 20x5 displays
    for (int i = 0; i < 80; i++)
 8001018:	2300      	movs	r3, #0
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	e006      	b.n	800102c <lcd_clear+0x24>
    {
        lcd_send_data(lcd, ' ');  // Write a space on each position
 800101e:	2120      	movs	r1, #32
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff ffc0 	bl	8000fa6 <lcd_send_data>
    for (int i = 0; i < 80; i++)
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	3301      	adds	r3, #1
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2b4f      	cmp	r3, #79	@ 0x4f
 8001030:	ddf5      	ble.n	800101e <lcd_clear+0x16>
    }
}
 8001032:	bf00      	nop
 8001034:	bf00      	nop
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <lcd_gotoxy>:
 * @param  col: Column number (0-15)
 * @param  row: Row number (0 or 1)
 * @retval None
 */
void lcd_gotoxy(I2C_LCD_HandleTypeDef *lcd, int col, int row)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
    uint8_t address;

    switch (row)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b03      	cmp	r3, #3
 800104c:	d824      	bhi.n	8001098 <lcd_gotoxy+0x5c>
 800104e:	a201      	add	r2, pc, #4	@ (adr r2, 8001054 <lcd_gotoxy+0x18>)
 8001050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001054:	08001065 	.word	0x08001065
 8001058:	0800106f 	.word	0x0800106f
 800105c:	08001079 	.word	0x08001079
 8001060:	08001083 	.word	0x08001083
    {
        case 0: address = 0x80 + col; break;  // First row
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	b2db      	uxtb	r3, r3
 8001068:	3b80      	subs	r3, #128	@ 0x80
 800106a:	75fb      	strb	r3, [r7, #23]
 800106c:	e00e      	b.n	800108c <lcd_gotoxy+0x50>
        case 1: address = 0xC0 + col; break;  // Second row
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	b2db      	uxtb	r3, r3
 8001072:	3b40      	subs	r3, #64	@ 0x40
 8001074:	75fb      	strb	r3, [r7, #23]
 8001076:	e009      	b.n	800108c <lcd_gotoxy+0x50>
        case 2: address = 0x94 + col; break;  // Third row
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	3b6c      	subs	r3, #108	@ 0x6c
 800107e:	75fb      	strb	r3, [r7, #23]
 8001080:	e004      	b.n	800108c <lcd_gotoxy+0x50>
        case 3: address = 0xD4 + col; break;  // Fourth row
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	b2db      	uxtb	r3, r3
 8001086:	3b2c      	subs	r3, #44	@ 0x2c
 8001088:	75fb      	strb	r3, [r7, #23]
 800108a:	bf00      	nop
        default: return;  // Ignore invalid row numbers
    }

    lcd_send_cmd(lcd, address);  // Send command to move the cursor
 800108c:	7dfb      	ldrb	r3, [r7, #23]
 800108e:	4619      	mov	r1, r3
 8001090:	68f8      	ldr	r0, [r7, #12]
 8001092:	f7ff ff57 	bl	8000f44 <lcd_send_cmd>
 8001096:	e000      	b.n	800109a <lcd_gotoxy+0x5e>
        default: return;  // Ignore invalid row numbers
 8001098:	bf00      	nop
}
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <lcd_init>:
 * @brief  Initializes the LCD in 4-bit mode.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_init(I2C_LCD_HandleTypeDef *lcd)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
    HAL_Delay(50);  // Wait for LCD power-up
 80010a8:	2032      	movs	r0, #50	@ 0x32
 80010aa:	f001 f857 	bl	800215c <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 80010ae:	2130      	movs	r1, #48	@ 0x30
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff ff47 	bl	8000f44 <lcd_send_cmd>
    HAL_Delay(5);
 80010b6:	2005      	movs	r0, #5
 80010b8:	f001 f850 	bl	800215c <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 80010bc:	2130      	movs	r1, #48	@ 0x30
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff ff40 	bl	8000f44 <lcd_send_cmd>
    HAL_Delay(1);
 80010c4:	2001      	movs	r0, #1
 80010c6:	f001 f849 	bl	800215c <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 80010ca:	2130      	movs	r1, #48	@ 0x30
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ff39 	bl	8000f44 <lcd_send_cmd>
    HAL_Delay(10);
 80010d2:	200a      	movs	r0, #10
 80010d4:	f001 f842 	bl	800215c <HAL_Delay>
    lcd_send_cmd(lcd, 0x20);  // Set to 4-bit mode
 80010d8:	2120      	movs	r1, #32
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff ff32 	bl	8000f44 <lcd_send_cmd>
    HAL_Delay(10);
 80010e0:	200a      	movs	r0, #10
 80010e2:	f001 f83b 	bl	800215c <HAL_Delay>

    // LCD configuration commands
    lcd_send_cmd(lcd, 0x28);  // 4-bit mode, 2 lines, 5x8 font
 80010e6:	2128      	movs	r1, #40	@ 0x28
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff ff2b 	bl	8000f44 <lcd_send_cmd>
    HAL_Delay(1);
 80010ee:	2001      	movs	r0, #1
 80010f0:	f001 f834 	bl	800215c <HAL_Delay>
    lcd_send_cmd(lcd, 0x08);  // Display off, cursor off, blink off
 80010f4:	2108      	movs	r1, #8
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff ff24 	bl	8000f44 <lcd_send_cmd>
    HAL_Delay(1);
 80010fc:	2001      	movs	r0, #1
 80010fe:	f001 f82d 	bl	800215c <HAL_Delay>
    lcd_send_cmd(lcd, 0x01);  // Clear display
 8001102:	2101      	movs	r1, #1
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff ff1d 	bl	8000f44 <lcd_send_cmd>
    HAL_Delay(2);
 800110a:	2002      	movs	r0, #2
 800110c:	f001 f826 	bl	800215c <HAL_Delay>
    lcd_send_cmd(lcd, 0x06);  // Entry mode: cursor moves right
 8001110:	2106      	movs	r1, #6
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ff16 	bl	8000f44 <lcd_send_cmd>
    HAL_Delay(1);
 8001118:	2001      	movs	r0, #1
 800111a:	f001 f81f 	bl	800215c <HAL_Delay>
    lcd_send_cmd(lcd, 0x0C);  // Display on, cursor off, blink off
 800111e:	210c      	movs	r1, #12
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ff0f 	bl	8000f44 <lcd_send_cmd>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <lcd_puts>:
 * @param  lcd: Pointer to the LCD handle
 * @param  str: Null-terminated string to display
 * @retval None
 */
void lcd_puts(I2C_LCD_HandleTypeDef *lcd, char *str)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
 8001136:	6039      	str	r1, [r7, #0]
    while (*str) lcd_send_data(lcd, *str++);  // Send each character in the string
 8001138:	e007      	b.n	800114a <lcd_puts+0x1c>
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	1c5a      	adds	r2, r3, #1
 800113e:	603a      	str	r2, [r7, #0]
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	4619      	mov	r1, r3
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff ff2e 	bl	8000fa6 <lcd_send_data>
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d1f3      	bne.n	800113a <lcd_puts+0xc>
}
 8001152:	bf00      	nop
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800115c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001160:	b098      	sub	sp, #96	@ 0x60
 8001162:	af10      	add	r7, sp, #64	@ 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001164:	f000 ff98 	bl	8002098 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001168:	f000 f8bc 	bl	80012e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800116c:	f000 f984 	bl	8001478 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001170:	f000 f8fa 	bl	8001368 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001174:	f000 f926 	bl	80013c4 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8001178:	f000 f952 	bl	8001420 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //LCD
  lcd.hi2c = &hi2c1;
 800117c:	4b4f      	ldr	r3, [pc, #316]	@ (80012bc <main+0x160>)
 800117e:	4a50      	ldr	r2, [pc, #320]	@ (80012c0 <main+0x164>)
 8001180:	601a      	str	r2, [r3, #0]
  lcd.address = 0x4E;
 8001182:	4b4e      	ldr	r3, [pc, #312]	@ (80012bc <main+0x160>)
 8001184:	224e      	movs	r2, #78	@ 0x4e
 8001186:	711a      	strb	r2, [r3, #4]
  lcd_init(&lcd);
 8001188:	484c      	ldr	r0, [pc, #304]	@ (80012bc <main+0x160>)
 800118a:	f7ff ff89 	bl	80010a0 <lcd_init>
  lcd_clear(&lcd);
 800118e:	484b      	ldr	r0, [pc, #300]	@ (80012bc <main+0x160>)
 8001190:	f7ff ff3a 	bl	8001008 <lcd_clear>
  //MPU
  MPU6050_Init(&hi2c2);
 8001194:	484b      	ldr	r0, [pc, #300]	@ (80012c4 <main+0x168>)
 8001196:	f000 f997 	bl	80014c8 <MPU6050_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MPU6050_Read_All(&hi2c2, &MPU6050);
 800119a:	494b      	ldr	r1, [pc, #300]	@ (80012c8 <main+0x16c>)
 800119c:	4849      	ldr	r0, [pc, #292]	@ (80012c4 <main+0x168>)
 800119e:	f000 f9eb 	bl	8001578 <MPU6050_Read_All>

	  // Ghi chuỗi định dạng để in ra UART
	          sprintf(uart_buf,
 80011a2:	4b49      	ldr	r3, [pc, #292]	@ (80012c8 <main+0x16c>)
 80011a4:	f103 0408 	add.w	r4, r3, #8
 80011a8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80011ac:	e9c7 3406 	strd	r3, r4, [r7, #24]
 80011b0:	4b45      	ldr	r3, [pc, #276]	@ (80012c8 <main+0x16c>)
 80011b2:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 80011b6:	4b44      	ldr	r3, [pc, #272]	@ (80012c8 <main+0x16c>)
 80011b8:	e9d3 ab06 	ldrd	sl, fp, [r3, #24]
 80011bc:	4b42      	ldr	r3, [pc, #264]	@ (80012c8 <main+0x16c>)
 80011be:	e9d3 120a 	ldrd	r1, r2, [r3, #40]	@ 0x28
 80011c2:	e9c7 1204 	strd	r1, r2, [r7, #16]
 80011c6:	4b40      	ldr	r3, [pc, #256]	@ (80012c8 <main+0x16c>)
 80011c8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80011cc:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80011d0:	4b3d      	ldr	r3, [pc, #244]	@ (80012c8 <main+0x16c>)
 80011d2:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 80011d6:	e9c7 4500 	strd	r4, r5, [r7]
	                  "Ax: %.2f Ay: %.2f Az: %.2f | "
	                  "Gx: %.2f Gy: %.2f Gz: %.2f | "
	                  "Temp: %.2f | KalX: %.2f KalY: %.2f\r\n",
	                  MPU6050.Ax, MPU6050.Ay, MPU6050.Az,
	                  MPU6050.Gx, MPU6050.Gy, MPU6050.Gz,
	                  MPU6050.Temperature,
 80011da:	4b3b      	ldr	r3, [pc, #236]	@ (80012c8 <main+0x16c>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
	          sprintf(uart_buf,
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f922 	bl	8000428 <__aeabi_f2d>
 80011e4:	4604      	mov	r4, r0
 80011e6:	460d      	mov	r5, r1
 80011e8:	4b37      	ldr	r3, [pc, #220]	@ (80012c8 <main+0x16c>)
 80011ea:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 80011ee:	4b36      	ldr	r3, [pc, #216]	@ (80012c8 <main+0x16c>)
 80011f0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80011f4:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
 80011f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80011fc:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
 8001200:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001204:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8001208:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800120c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001210:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001214:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8001218:	e9cd ab02 	strd	sl, fp, [sp, #8]
 800121c:	e9cd 8900 	strd	r8, r9, [sp]
 8001220:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001224:	4929      	ldr	r1, [pc, #164]	@ (80012cc <main+0x170>)
 8001226:	482a      	ldr	r0, [pc, #168]	@ (80012d0 <main+0x174>)
 8001228:	f006 f940 	bl	80074ac <siprintf>
	                  MPU6050.KalmanAngleX, MPU6050.KalmanAngleY);

	          HAL_UART_Transmit(&huart1, (uint8_t *)uart_buf, strlen(uart_buf), 100);
 800122c:	4828      	ldr	r0, [pc, #160]	@ (80012d0 <main+0x174>)
 800122e:	f7fe ff8f 	bl	8000150 <strlen>
 8001232:	4603      	mov	r3, r0
 8001234:	b29a      	uxth	r2, r3
 8001236:	2364      	movs	r3, #100	@ 0x64
 8001238:	4925      	ldr	r1, [pc, #148]	@ (80012d0 <main+0x174>)
 800123a:	4826      	ldr	r0, [pc, #152]	@ (80012d4 <main+0x178>)
 800123c:	f004 fe53 	bl	8005ee6 <HAL_UART_Transmit>
	          HAL_Delay(500); // In mỗi 0.5s
 8001240:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001244:	f000 ff8a 	bl	800215c <HAL_Delay>
	   // Ghi ra LCD
	          // Dòng 1: Ax Ay Az
				lcd_gotoxy(&lcd,0, 0); // vị trí cột 0, dòng 0
 8001248:	2200      	movs	r2, #0
 800124a:	2100      	movs	r1, #0
 800124c:	481b      	ldr	r0, [pc, #108]	@ (80012bc <main+0x160>)
 800124e:	f7ff fef5 	bl	800103c <lcd_gotoxy>
				sprintf(lcd_buf, "Ax: %.2f Ay: %.2f Az: %.2f | ", MPU6050.Ax, MPU6050.Ay, MPU6050.Az);
 8001252:	4b1d      	ldr	r3, [pc, #116]	@ (80012c8 <main+0x16c>)
 8001254:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001258:	4b1b      	ldr	r3, [pc, #108]	@ (80012c8 <main+0x16c>)
 800125a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800125e:	491a      	ldr	r1, [pc, #104]	@ (80012c8 <main+0x16c>)
 8001260:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 8001264:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001268:	e9cd 2300 	strd	r2, r3, [sp]
 800126c:	4622      	mov	r2, r4
 800126e:	462b      	mov	r3, r5
 8001270:	4919      	ldr	r1, [pc, #100]	@ (80012d8 <main+0x17c>)
 8001272:	481a      	ldr	r0, [pc, #104]	@ (80012dc <main+0x180>)
 8001274:	f006 f91a 	bl	80074ac <siprintf>
				lcd_puts(&lcd,lcd_buf);
 8001278:	4918      	ldr	r1, [pc, #96]	@ (80012dc <main+0x180>)
 800127a:	4810      	ldr	r0, [pc, #64]	@ (80012bc <main+0x160>)
 800127c:	f7ff ff57 	bl	800112e <lcd_puts>

				// Dòng 2: Gx Gy Gz
				lcd_gotoxy(&lcd,0, 1); // vị trí cột 0, dòng 0
 8001280:	2201      	movs	r2, #1
 8001282:	2100      	movs	r1, #0
 8001284:	480d      	ldr	r0, [pc, #52]	@ (80012bc <main+0x160>)
 8001286:	f7ff fed9 	bl	800103c <lcd_gotoxy>
				sprintf(lcd_buf,  "Gx: %.2f Gy: %.2f Gz: %.2f | ", MPU6050.Gx, MPU6050.Gy, MPU6050.Gz);
 800128a:	4b0f      	ldr	r3, [pc, #60]	@ (80012c8 <main+0x16c>)
 800128c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001290:	4b0d      	ldr	r3, [pc, #52]	@ (80012c8 <main+0x16c>)
 8001292:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001296:	490c      	ldr	r1, [pc, #48]	@ (80012c8 <main+0x16c>)
 8001298:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	@ 0x38
 800129c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80012a0:	e9cd 2300 	strd	r2, r3, [sp]
 80012a4:	4622      	mov	r2, r4
 80012a6:	462b      	mov	r3, r5
 80012a8:	490d      	ldr	r1, [pc, #52]	@ (80012e0 <main+0x184>)
 80012aa:	480c      	ldr	r0, [pc, #48]	@ (80012dc <main+0x180>)
 80012ac:	f006 f8fe 	bl	80074ac <siprintf>
				lcd_puts(&lcd,lcd_buf);
 80012b0:	490a      	ldr	r1, [pc, #40]	@ (80012dc <main+0x180>)
 80012b2:	4802      	ldr	r0, [pc, #8]	@ (80012bc <main+0x160>)
 80012b4:	f7ff ff3b 	bl	800112e <lcd_puts>
  {
 80012b8:	bf00      	nop
 80012ba:	e76e      	b.n	800119a <main+0x3e>
 80012bc:	20000384 	.word	0x20000384
 80012c0:	20000294 	.word	0x20000294
 80012c4:	200002e8 	.word	0x200002e8
 80012c8:	20000390 	.word	0x20000390
 80012cc:	08009df8 	.word	0x08009df8
 80012d0:	200003e8 	.word	0x200003e8
 80012d4:	2000033c 	.word	0x2000033c
 80012d8:	08009e58 	.word	0x08009e58
 80012dc:	20000468 	.word	0x20000468
 80012e0:	08009e78 	.word	0x08009e78

080012e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b090      	sub	sp, #64	@ 0x40
 80012e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ea:	f107 0318 	add.w	r3, r7, #24
 80012ee:	2228      	movs	r2, #40	@ 0x28
 80012f0:	2100      	movs	r1, #0
 80012f2:	4618      	mov	r0, r3
 80012f4:	f006 f93d 	bl	8007572 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
 8001304:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001306:	2302      	movs	r3, #2
 8001308:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800130a:	2301      	movs	r3, #1
 800130c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800130e:	2310      	movs	r3, #16
 8001310:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001312:	2302      	movs	r3, #2
 8001314:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001316:	2300      	movs	r3, #0
 8001318:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800131a:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800131e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001320:	f107 0318 	add.w	r3, r7, #24
 8001324:	4618      	mov	r0, r3
 8001326:	f004 f95b 	bl	80055e0 <HAL_RCC_OscConfig>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001330:	f000 f8c4 	bl	80014bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001334:	230f      	movs	r3, #15
 8001336:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001338:	2302      	movs	r3, #2
 800133a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800133c:	2300      	movs	r3, #0
 800133e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001340:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001344:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001346:	2300      	movs	r3, #0
 8001348:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	2102      	movs	r1, #2
 800134e:	4618      	mov	r0, r3
 8001350:	f004 fbc8 	bl	8005ae4 <HAL_RCC_ClockConfig>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800135a:	f000 f8af 	bl	80014bc <Error_Handler>
  }
}
 800135e:	bf00      	nop
 8001360:	3740      	adds	r7, #64	@ 0x40
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800136c:	4b12      	ldr	r3, [pc, #72]	@ (80013b8 <MX_I2C1_Init+0x50>)
 800136e:	4a13      	ldr	r2, [pc, #76]	@ (80013bc <MX_I2C1_Init+0x54>)
 8001370:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001372:	4b11      	ldr	r3, [pc, #68]	@ (80013b8 <MX_I2C1_Init+0x50>)
 8001374:	4a12      	ldr	r2, [pc, #72]	@ (80013c0 <MX_I2C1_Init+0x58>)
 8001376:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001378:	4b0f      	ldr	r3, [pc, #60]	@ (80013b8 <MX_I2C1_Init+0x50>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800137e:	4b0e      	ldr	r3, [pc, #56]	@ (80013b8 <MX_I2C1_Init+0x50>)
 8001380:	2200      	movs	r2, #0
 8001382:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001384:	4b0c      	ldr	r3, [pc, #48]	@ (80013b8 <MX_I2C1_Init+0x50>)
 8001386:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800138a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800138c:	4b0a      	ldr	r3, [pc, #40]	@ (80013b8 <MX_I2C1_Init+0x50>)
 800138e:	2200      	movs	r2, #0
 8001390:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001392:	4b09      	ldr	r3, [pc, #36]	@ (80013b8 <MX_I2C1_Init+0x50>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001398:	4b07      	ldr	r3, [pc, #28]	@ (80013b8 <MX_I2C1_Init+0x50>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800139e:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <MX_I2C1_Init+0x50>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013a4:	4804      	ldr	r0, [pc, #16]	@ (80013b8 <MX_I2C1_Init+0x50>)
 80013a6:	f001 fa4f 	bl	8002848 <HAL_I2C_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013b0:	f000 f884 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000294 	.word	0x20000294
 80013bc:	40005400 	.word	0x40005400
 80013c0:	000186a0 	.word	0x000186a0

080013c4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013c8:	4b12      	ldr	r3, [pc, #72]	@ (8001414 <MX_I2C2_Init+0x50>)
 80013ca:	4a13      	ldr	r2, [pc, #76]	@ (8001418 <MX_I2C2_Init+0x54>)
 80013cc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80013ce:	4b11      	ldr	r3, [pc, #68]	@ (8001414 <MX_I2C2_Init+0x50>)
 80013d0:	4a12      	ldr	r2, [pc, #72]	@ (800141c <MX_I2C2_Init+0x58>)
 80013d2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001414 <MX_I2C2_Init+0x50>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80013da:	4b0e      	ldr	r3, [pc, #56]	@ (8001414 <MX_I2C2_Init+0x50>)
 80013dc:	2200      	movs	r2, #0
 80013de:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001414 <MX_I2C2_Init+0x50>)
 80013e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013e6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001414 <MX_I2C2_Init+0x50>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80013ee:	4b09      	ldr	r3, [pc, #36]	@ (8001414 <MX_I2C2_Init+0x50>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013f4:	4b07      	ldr	r3, [pc, #28]	@ (8001414 <MX_I2C2_Init+0x50>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013fa:	4b06      	ldr	r3, [pc, #24]	@ (8001414 <MX_I2C2_Init+0x50>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001400:	4804      	ldr	r0, [pc, #16]	@ (8001414 <MX_I2C2_Init+0x50>)
 8001402:	f001 fa21 	bl	8002848 <HAL_I2C_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800140c:	f000 f856 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}
 8001414:	200002e8 	.word	0x200002e8
 8001418:	40005800 	.word	0x40005800
 800141c:	00061a80 	.word	0x00061a80

08001420 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001424:	4b12      	ldr	r3, [pc, #72]	@ (8001470 <MX_USART1_UART_Init+0x50>)
 8001426:	4a13      	ldr	r2, [pc, #76]	@ (8001474 <MX_USART1_UART_Init+0x54>)
 8001428:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800142a:	4b11      	ldr	r3, [pc, #68]	@ (8001470 <MX_USART1_UART_Init+0x50>)
 800142c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001430:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001432:	4b0f      	ldr	r3, [pc, #60]	@ (8001470 <MX_USART1_UART_Init+0x50>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001438:	4b0d      	ldr	r3, [pc, #52]	@ (8001470 <MX_USART1_UART_Init+0x50>)
 800143a:	2200      	movs	r2, #0
 800143c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800143e:	4b0c      	ldr	r3, [pc, #48]	@ (8001470 <MX_USART1_UART_Init+0x50>)
 8001440:	2200      	movs	r2, #0
 8001442:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001444:	4b0a      	ldr	r3, [pc, #40]	@ (8001470 <MX_USART1_UART_Init+0x50>)
 8001446:	220c      	movs	r2, #12
 8001448:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800144a:	4b09      	ldr	r3, [pc, #36]	@ (8001470 <MX_USART1_UART_Init+0x50>)
 800144c:	2200      	movs	r2, #0
 800144e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001450:	4b07      	ldr	r3, [pc, #28]	@ (8001470 <MX_USART1_UART_Init+0x50>)
 8001452:	2200      	movs	r2, #0
 8001454:	61da      	str	r2, [r3, #28]
  if (HAL_MultiProcessor_Init(&huart1, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8001456:	2200      	movs	r2, #0
 8001458:	2100      	movs	r1, #0
 800145a:	4805      	ldr	r0, [pc, #20]	@ (8001470 <MX_USART1_UART_Init+0x50>)
 800145c:	f004 fcd0 	bl	8005e00 <HAL_MultiProcessor_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8001466:	f000 f829 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	2000033c 	.word	0x2000033c
 8001474:	40013800 	.word	0x40013800

08001478 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800147e:	4b0e      	ldr	r3, [pc, #56]	@ (80014b8 <MX_GPIO_Init+0x40>)
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	4a0d      	ldr	r2, [pc, #52]	@ (80014b8 <MX_GPIO_Init+0x40>)
 8001484:	f043 0308 	orr.w	r3, r3, #8
 8001488:	6193      	str	r3, [r2, #24]
 800148a:	4b0b      	ldr	r3, [pc, #44]	@ (80014b8 <MX_GPIO_Init+0x40>)
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	f003 0308 	and.w	r3, r3, #8
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001496:	4b08      	ldr	r3, [pc, #32]	@ (80014b8 <MX_GPIO_Init+0x40>)
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	4a07      	ldr	r2, [pc, #28]	@ (80014b8 <MX_GPIO_Init+0x40>)
 800149c:	f043 0304 	orr.w	r3, r3, #4
 80014a0:	6193      	str	r3, [r2, #24]
 80014a2:	4b05      	ldr	r3, [pc, #20]	@ (80014b8 <MX_GPIO_Init+0x40>)
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	f003 0304 	and.w	r3, r3, #4
 80014aa:	603b      	str	r3, [r7, #0]
 80014ac:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr
 80014b8:	40021000 	.word	0x40021000

080014bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c0:	b672      	cpsid	i
}
 80014c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <Error_Handler+0x8>

080014c8 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b088      	sub	sp, #32
 80014cc:	af04      	add	r7, sp, #16
 80014ce:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80014d0:	2364      	movs	r3, #100	@ 0x64
 80014d2:	9302      	str	r3, [sp, #8]
 80014d4:	2301      	movs	r3, #1
 80014d6:	9301      	str	r3, [sp, #4]
 80014d8:	f107 030f 	add.w	r3, r7, #15
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	2301      	movs	r3, #1
 80014e0:	2275      	movs	r2, #117	@ 0x75
 80014e2:	21d0      	movs	r1, #208	@ 0xd0
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f001 fcff 	bl	8002ee8 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
 80014ec:	2b68      	cmp	r3, #104	@ 0x68
 80014ee:	d13d      	bne.n	800156c <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80014f4:	2364      	movs	r3, #100	@ 0x64
 80014f6:	9302      	str	r3, [sp, #8]
 80014f8:	2301      	movs	r3, #1
 80014fa:	9301      	str	r3, [sp, #4]
 80014fc:	f107 030e 	add.w	r3, r7, #14
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	2301      	movs	r3, #1
 8001504:	226b      	movs	r2, #107	@ 0x6b
 8001506:	21d0      	movs	r1, #208	@ 0xd0
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f001 fbf3 	bl	8002cf4 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800150e:	2307      	movs	r3, #7
 8001510:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001512:	2364      	movs	r3, #100	@ 0x64
 8001514:	9302      	str	r3, [sp, #8]
 8001516:	2301      	movs	r3, #1
 8001518:	9301      	str	r3, [sp, #4]
 800151a:	f107 030e 	add.w	r3, r7, #14
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	2301      	movs	r3, #1
 8001522:	2219      	movs	r2, #25
 8001524:	21d0      	movs	r1, #208	@ 0xd0
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f001 fbe4 	bl	8002cf4 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 800152c:	2300      	movs	r3, #0
 800152e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001530:	2364      	movs	r3, #100	@ 0x64
 8001532:	9302      	str	r3, [sp, #8]
 8001534:	2301      	movs	r3, #1
 8001536:	9301      	str	r3, [sp, #4]
 8001538:	f107 030e 	add.w	r3, r7, #14
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	2301      	movs	r3, #1
 8001540:	221c      	movs	r2, #28
 8001542:	21d0      	movs	r1, #208	@ 0xd0
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f001 fbd5 	bl	8002cf4 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 800154a:	2300      	movs	r3, #0
 800154c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800154e:	2364      	movs	r3, #100	@ 0x64
 8001550:	9302      	str	r3, [sp, #8]
 8001552:	2301      	movs	r3, #1
 8001554:	9301      	str	r3, [sp, #4]
 8001556:	f107 030e 	add.w	r3, r7, #14
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	2301      	movs	r3, #1
 800155e:	221b      	movs	r2, #27
 8001560:	21d0      	movs	r1, #208	@ 0xd0
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f001 fbc6 	bl	8002cf4 <HAL_I2C_Mem_Write>
        return 0;
 8001568:	2300      	movs	r3, #0
 800156a:	e000      	b.n	800156e <MPU6050_Init+0xa6>
    }
    return 1;
 800156c:	2301      	movs	r3, #1
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001578:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800157c:	b094      	sub	sp, #80	@ 0x50
 800157e:	af04      	add	r7, sp, #16
 8001580:	6078      	str	r0, [r7, #4]
 8001582:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001584:	2364      	movs	r3, #100	@ 0x64
 8001586:	9302      	str	r3, [sp, #8]
 8001588:	230e      	movs	r3, #14
 800158a:	9301      	str	r3, [sp, #4]
 800158c:	f107 0308 	add.w	r3, r7, #8
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	2301      	movs	r3, #1
 8001594:	223b      	movs	r2, #59	@ 0x3b
 8001596:	21d0      	movs	r1, #208	@ 0xd0
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f001 fca5 	bl	8002ee8 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800159e:	7a3b      	ldrb	r3, [r7, #8]
 80015a0:	021b      	lsls	r3, r3, #8
 80015a2:	b21a      	sxth	r2, r3
 80015a4:	7a7b      	ldrb	r3, [r7, #9]
 80015a6:	b21b      	sxth	r3, r3
 80015a8:	4313      	orrs	r3, r2
 80015aa:	b21a      	sxth	r2, r3
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80015b0:	7abb      	ldrb	r3, [r7, #10]
 80015b2:	021b      	lsls	r3, r3, #8
 80015b4:	b21a      	sxth	r2, r3
 80015b6:	7afb      	ldrb	r3, [r7, #11]
 80015b8:	b21b      	sxth	r3, r3
 80015ba:	4313      	orrs	r3, r2
 80015bc:	b21a      	sxth	r2, r3
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80015c2:	7b3b      	ldrb	r3, [r7, #12]
 80015c4:	021b      	lsls	r3, r3, #8
 80015c6:	b21a      	sxth	r2, r3
 80015c8:	7b7b      	ldrb	r3, [r7, #13]
 80015ca:	b21b      	sxth	r3, r3
 80015cc:	4313      	orrs	r3, r2
 80015ce:	b21a      	sxth	r2, r3
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 80015d4:	7bbb      	ldrb	r3, [r7, #14]
 80015d6:	021b      	lsls	r3, r3, #8
 80015d8:	b21a      	sxth	r2, r3
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	b21b      	sxth	r3, r3
 80015de:	4313      	orrs	r3, r2
 80015e0:	86fb      	strh	r3, [r7, #54]	@ 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 80015e2:	7c3b      	ldrb	r3, [r7, #16]
 80015e4:	021b      	lsls	r3, r3, #8
 80015e6:	b21a      	sxth	r2, r3
 80015e8:	7c7b      	ldrb	r3, [r7, #17]
 80015ea:	b21b      	sxth	r3, r3
 80015ec:	4313      	orrs	r3, r2
 80015ee:	b21a      	sxth	r2, r3
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 80015f4:	7cbb      	ldrb	r3, [r7, #18]
 80015f6:	021b      	lsls	r3, r3, #8
 80015f8:	b21a      	sxth	r2, r3
 80015fa:	7cfb      	ldrb	r3, [r7, #19]
 80015fc:	b21b      	sxth	r3, r3
 80015fe:	4313      	orrs	r3, r2
 8001600:	b21a      	sxth	r2, r3
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8001606:	7d3b      	ldrb	r3, [r7, #20]
 8001608:	021b      	lsls	r3, r3, #8
 800160a:	b21a      	sxth	r2, r3
 800160c:	7d7b      	ldrb	r3, [r7, #21]
 800160e:	b21b      	sxth	r3, r3
 8001610:	4313      	orrs	r3, r2
 8001612:	b21a      	sxth	r2, r3
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe fef0 	bl	8000404 <__aeabi_i2d>
 8001624:	f04f 0200 	mov.w	r2, #0
 8001628:	4b95      	ldr	r3, [pc, #596]	@ (8001880 <MPU6050_Read_All+0x308>)
 800162a:	f7ff f87f 	bl	800072c <__aeabi_ddiv>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	6839      	ldr	r1, [r7, #0]
 8001634:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800163e:	4618      	mov	r0, r3
 8001640:	f7fe fee0 	bl	8000404 <__aeabi_i2d>
 8001644:	f04f 0200 	mov.w	r2, #0
 8001648:	4b8d      	ldr	r3, [pc, #564]	@ (8001880 <MPU6050_Read_All+0x308>)
 800164a:	f7ff f86f 	bl	800072c <__aeabi_ddiv>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	6839      	ldr	r1, [r7, #0]
 8001654:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800165e:	4618      	mov	r0, r3
 8001660:	f7fe fed0 	bl	8000404 <__aeabi_i2d>
 8001664:	a380      	add	r3, pc, #512	@ (adr r3, 8001868 <MPU6050_Read_All+0x2f0>)
 8001666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166a:	f7ff f85f 	bl	800072c <__aeabi_ddiv>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	6839      	ldr	r1, [r7, #0]
 8001674:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001678:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff fabd 	bl	8000bfc <__aeabi_i2f>
 8001682:	4603      	mov	r3, r0
 8001684:	497f      	ldr	r1, [pc, #508]	@ (8001884 <MPU6050_Read_All+0x30c>)
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fbc0 	bl	8000e0c <__aeabi_fdiv>
 800168c:	4603      	mov	r3, r0
 800168e:	497e      	ldr	r1, [pc, #504]	@ (8001888 <MPU6050_Read_All+0x310>)
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff f9ff 	bl	8000a94 <__addsf3>
 8001696:	4603      	mov	r3, r0
 8001698:	461a      	mov	r2, r3
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	641a      	str	r2, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7fe fead 	bl	8000404 <__aeabi_i2d>
 80016aa:	a371      	add	r3, pc, #452	@ (adr r3, 8001870 <MPU6050_Read_All+0x2f8>)
 80016ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b0:	f7ff f83c 	bl	800072c <__aeabi_ddiv>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	6839      	ldr	r1, [r7, #0]
 80016ba:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7fe fe9d 	bl	8000404 <__aeabi_i2d>
 80016ca:	a369      	add	r3, pc, #420	@ (adr r3, 8001870 <MPU6050_Read_All+0x2f8>)
 80016cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d0:	f7ff f82c 	bl	800072c <__aeabi_ddiv>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	6839      	ldr	r1, [r7, #0]
 80016da:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe fe8d 	bl	8000404 <__aeabi_i2d>
 80016ea:	a361      	add	r3, pc, #388	@ (adr r3, 8001870 <MPU6050_Read_All+0x2f8>)
 80016ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f0:	f7ff f81c 	bl	800072c <__aeabi_ddiv>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	6839      	ldr	r1, [r7, #0]
 80016fa:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 80016fe:	f000 fd23 	bl	8002148 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	4b61      	ldr	r3, [pc, #388]	@ (800188c <MPU6050_Read_All+0x314>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	4618      	mov	r0, r3
 800170c:	f7fe fe6a 	bl	80003e4 <__aeabi_ui2d>
 8001710:	f04f 0200 	mov.w	r2, #0
 8001714:	4b5e      	ldr	r3, [pc, #376]	@ (8001890 <MPU6050_Read_All+0x318>)
 8001716:	f7ff f809 	bl	800072c <__aeabi_ddiv>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 8001722:	f000 fd11 	bl	8002148 <HAL_GetTick>
 8001726:	4603      	mov	r3, r0
 8001728:	4a58      	ldr	r2, [pc, #352]	@ (800188c <MPU6050_Read_All+0x314>)
 800172a:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001732:	461a      	mov	r2, r3
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	f9b3 3000 	ldrsh.w	r3, [r3]
 800173a:	fb03 f202 	mul.w	r2, r3, r2
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001744:	4619      	mov	r1, r3
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800174c:	fb01 f303 	mul.w	r3, r1, r3
 8001750:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001752:	4618      	mov	r0, r3
 8001754:	f7fe fe56 	bl	8000404 <__aeabi_i2d>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4610      	mov	r0, r2
 800175e:	4619      	mov	r1, r3
 8001760:	f007 ffda 	bl	8009718 <sqrt>
 8001764:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0)
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	f04f 0300 	mov.w	r3, #0
 8001770:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001774:	f7ff f918 	bl	80009a8 <__aeabi_dcmpeq>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d119      	bne.n	80017b2 <MPU6050_Read_All+0x23a>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001784:	4618      	mov	r0, r3
 8001786:	f7fe fe3d 	bl	8000404 <__aeabi_i2d>
 800178a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800178e:	f7fe ffcd 	bl	800072c <__aeabi_ddiv>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4610      	mov	r0, r2
 8001798:	4619      	mov	r1, r3
 800179a:	f007 ffe1 	bl	8009760 <atan>
 800179e:	a336      	add	r3, pc, #216	@ (adr r3, 8001878 <MPU6050_Read_All+0x300>)
 80017a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a4:	f7fe fe98 	bl	80004d8 <__aeabi_dmul>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 80017b0:	e005      	b.n	80017be <MPU6050_Read_All+0x246>
    }
    else
    {
        roll = 0.0;
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	f04f 0300 	mov.w	r3, #0
 80017ba:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c4:	425b      	negs	r3, r3
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe fe1c 	bl	8000404 <__aeabi_i2d>
 80017cc:	4682      	mov	sl, r0
 80017ce:	468b      	mov	fp, r1
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7fe fe14 	bl	8000404 <__aeabi_i2d>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	4650      	mov	r0, sl
 80017e2:	4659      	mov	r1, fp
 80017e4:	f007 ff96 	bl	8009714 <atan2>
 80017e8:	a323      	add	r3, pc, #140	@ (adr r3, 8001878 <MPU6050_Read_All+0x300>)
 80017ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ee:	f7fe fe73 	bl	80004d8 <__aeabi_dmul>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 80017fa:	f04f 0200 	mov.w	r2, #0
 80017fe:	4b25      	ldr	r3, [pc, #148]	@ (8001894 <MPU6050_Read_All+0x31c>)
 8001800:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001804:	f7ff f8da 	bl	80009bc <__aeabi_dcmplt>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d00a      	beq.n	8001824 <MPU6050_Read_All+0x2ac>
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	4b1f      	ldr	r3, [pc, #124]	@ (8001898 <MPU6050_Read_All+0x320>)
 800181a:	f7ff f8ed 	bl	80009f8 <__aeabi_dcmpgt>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d114      	bne.n	800184e <MPU6050_Read_All+0x2d6>
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	4b1b      	ldr	r3, [pc, #108]	@ (8001898 <MPU6050_Read_All+0x320>)
 800182a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800182e:	f7ff f8e3 	bl	80009f8 <__aeabi_dcmpgt>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d033      	beq.n	80018a0 <MPU6050_Read_All+0x328>
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	4b14      	ldr	r3, [pc, #80]	@ (8001894 <MPU6050_Read_All+0x31c>)
 8001844:	f7ff f8ba 	bl	80009bc <__aeabi_dcmplt>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d028      	beq.n	80018a0 <MPU6050_Read_All+0x328>
    {
        KalmanY.angle = pitch;
 800184e:	4913      	ldr	r1, [pc, #76]	@ (800189c <MPU6050_Read_All+0x324>)
 8001850:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001854:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001858:	6839      	ldr	r1, [r7, #0]
 800185a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800185e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8001862:	e030      	b.n	80018c6 <MPU6050_Read_All+0x34e>
 8001864:	f3af 8000 	nop.w
 8001868:	00000000 	.word	0x00000000
 800186c:	40cc2900 	.word	0x40cc2900
 8001870:	00000000 	.word	0x00000000
 8001874:	40606000 	.word	0x40606000
 8001878:	1a63c1f8 	.word	0x1a63c1f8
 800187c:	404ca5dc 	.word	0x404ca5dc
 8001880:	40d00000 	.word	0x40d00000
 8001884:	43aa0000 	.word	0x43aa0000
 8001888:	42121eb8 	.word	0x42121eb8
 800188c:	200004e8 	.word	0x200004e8
 8001890:	408f4000 	.word	0x408f4000
 8001894:	c0568000 	.word	0xc0568000
 8001898:	40568000 	.word	0x40568000
 800189c:	20000048 	.word	0x20000048
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80018a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80018aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80018ae:	e9cd 2300 	strd	r2, r3, [sp]
 80018b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018b6:	481c      	ldr	r0, [pc, #112]	@ (8001928 <MPU6050_Read_All+0x3b0>)
 80018b8:	f000 f83c 	bl	8001934 <Kalman_getAngle>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	6839      	ldr	r1, [r7, #0]
 80018c2:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80018cc:	4690      	mov	r8, r2
 80018ce:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	4b15      	ldr	r3, [pc, #84]	@ (800192c <MPU6050_Read_All+0x3b4>)
 80018d8:	4640      	mov	r0, r8
 80018da:	4649      	mov	r1, r9
 80018dc:	f7ff f88c 	bl	80009f8 <__aeabi_dcmpgt>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d008      	beq.n	80018f8 <MPU6050_Read_All+0x380>
        DataStruct->Gx = -DataStruct->Gx;
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80018ec:	4614      	mov	r4, r2
 80018ee:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80018fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001902:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001906:	e9cd 2300 	strd	r2, r3, [sp]
 800190a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800190e:	4808      	ldr	r0, [pc, #32]	@ (8001930 <MPU6050_Read_All+0x3b8>)
 8001910:	f000 f810 	bl	8001934 <Kalman_getAngle>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	6839      	ldr	r1, [r7, #0]
 800191a:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
}
 800191e:	bf00      	nop
 8001920:	3740      	adds	r7, #64	@ 0x40
 8001922:	46bd      	mov	sp, r7
 8001924:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001928:	20000048 	.word	0x20000048
 800192c:	40568000 	.word	0x40568000
 8001930:	20000000 	.word	0x20000000

08001934 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8001934:	b5b0      	push	{r4, r5, r7, lr}
 8001936:	b092      	sub	sp, #72	@ 0x48
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001946:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800194a:	f7fe fc0d 	bl	8000168 <__aeabi_dsub>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += dt * rate;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800195c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001960:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001964:	f7fe fdb8 	bl	80004d8 <__aeabi_dmul>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	4620      	mov	r0, r4
 800196e:	4629      	mov	r1, r5
 8001970:	f7fe fbfc 	bl	800016c <__adddf3>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	68f9      	ldr	r1, [r7, #12]
 800197a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800198a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800198e:	f7fe fda3 	bl	80004d8 <__aeabi_dmul>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	4610      	mov	r0, r2
 8001998:	4619      	mov	r1, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80019a0:	f7fe fbe2 	bl	8000168 <__aeabi_dsub>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4610      	mov	r0, r2
 80019aa:	4619      	mov	r1, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80019b2:	f7fe fbd9 	bl	8000168 <__aeabi_dsub>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4610      	mov	r0, r2
 80019bc:	4619      	mov	r1, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c4:	f7fe fbd2 	bl	800016c <__adddf3>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	4610      	mov	r0, r2
 80019ce:	4619      	mov	r1, r3
 80019d0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80019d4:	f7fe fd80 	bl	80004d8 <__aeabi_dmul>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4620      	mov	r0, r4
 80019de:	4629      	mov	r1, r5
 80019e0:	f7fe fbc4 	bl	800016c <__adddf3>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	68f9      	ldr	r1, [r7, #12]
 80019ea:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80019fa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80019fe:	f7fe fd6b 	bl	80004d8 <__aeabi_dmul>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	4620      	mov	r0, r4
 8001a08:	4629      	mov	r1, r5
 8001a0a:	f7fe fbad 	bl	8000168 <__aeabi_dsub>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	68f9      	ldr	r1, [r7, #12]
 8001a14:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001a24:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001a28:	f7fe fd56 	bl	80004d8 <__aeabi_dmul>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	4620      	mov	r0, r4
 8001a32:	4629      	mov	r1, r5
 8001a34:	f7fe fb98 	bl	8000168 <__aeabi_dsub>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	68f9      	ldr	r1, [r7, #12]
 8001a3e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001a4e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001a52:	f7fe fd41 	bl	80004d8 <__aeabi_dmul>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	4620      	mov	r0, r4
 8001a5c:	4629      	mov	r1, r5
 8001a5e:	f7fe fb85 	bl	800016c <__adddf3>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	68f9      	ldr	r1, [r7, #12]
 8001a68:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001a78:	f7fe fb78 	bl	800016c <__adddf3>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001a8a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001a8e:	f7fe fe4d 	bl	800072c <__aeabi_ddiv>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001aa0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001aa4:	f7fe fe42 	bl	800072c <__aeabi_ddiv>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001ab6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001aba:	f7fe fb55 	bl	8000168 <__aeabi_dsub>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    Kalman->angle += K[0] * y;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001acc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ad0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001ad4:	f7fe fd00 	bl	80004d8 <__aeabi_dmul>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4620      	mov	r0, r4
 8001ade:	4629      	mov	r1, r5
 8001ae0:	f7fe fb44 	bl	800016c <__adddf3>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	68f9      	ldr	r1, [r7, #12]
 8001aea:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001af4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001af8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001afc:	f7fe fcec 	bl	80004d8 <__aeabi_dmul>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4620      	mov	r0, r4
 8001b06:	4629      	mov	r1, r5
 8001b08:	f7fe fb30 	bl	800016c <__adddf3>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	68f9      	ldr	r1, [r7, #12]
 8001b12:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001b1c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    double P01_temp = Kalman->P[0][1];
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001b26:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001b30:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b38:	f7fe fcce 	bl	80004d8 <__aeabi_dmul>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4620      	mov	r0, r4
 8001b42:	4629      	mov	r1, r5
 8001b44:	f7fe fb10 	bl	8000168 <__aeabi_dsub>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	68f9      	ldr	r1, [r7, #12]
 8001b4e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001b58:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b5c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b60:	f7fe fcba 	bl	80004d8 <__aeabi_dmul>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4620      	mov	r0, r4
 8001b6a:	4629      	mov	r1, r5
 8001b6c:	f7fe fafc 	bl	8000168 <__aeabi_dsub>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	68f9      	ldr	r1, [r7, #12]
 8001b76:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8001b80:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b88:	f7fe fca6 	bl	80004d8 <__aeabi_dmul>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4620      	mov	r0, r4
 8001b92:	4629      	mov	r1, r5
 8001b94:	f7fe fae8 	bl	8000168 <__aeabi_dsub>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	68f9      	ldr	r1, [r7, #12]
 8001b9e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8001ba8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001bac:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001bb0:	f7fe fc92 	bl	80004d8 <__aeabi_dmul>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4620      	mov	r0, r4
 8001bba:	4629      	mov	r1, r5
 8001bbc:	f7fe fad4 	bl	8000168 <__aeabi_dsub>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	68f9      	ldr	r1, [r7, #12]
 8001bc6:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8001bd0:	4610      	mov	r0, r2
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	3748      	adds	r7, #72	@ 0x48
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001be2:	4b15      	ldr	r3, [pc, #84]	@ (8001c38 <HAL_MspInit+0x5c>)
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	4a14      	ldr	r2, [pc, #80]	@ (8001c38 <HAL_MspInit+0x5c>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	6193      	str	r3, [r2, #24]
 8001bee:	4b12      	ldr	r3, [pc, #72]	@ (8001c38 <HAL_MspInit+0x5c>)
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	60bb      	str	r3, [r7, #8]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8001c38 <HAL_MspInit+0x5c>)
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	4a0e      	ldr	r2, [pc, #56]	@ (8001c38 <HAL_MspInit+0x5c>)
 8001c00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c04:	61d3      	str	r3, [r2, #28]
 8001c06:	4b0c      	ldr	r3, [pc, #48]	@ (8001c38 <HAL_MspInit+0x5c>)
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c0e:	607b      	str	r3, [r7, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c12:	4b0a      	ldr	r3, [pc, #40]	@ (8001c3c <HAL_MspInit+0x60>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	4a04      	ldr	r2, [pc, #16]	@ (8001c3c <HAL_MspInit+0x60>)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40010000 	.word	0x40010000

08001c40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08a      	sub	sp, #40	@ 0x28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c48:	f107 0318 	add.w	r3, r7, #24
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a3b      	ldr	r2, [pc, #236]	@ (8001d48 <HAL_I2C_MspInit+0x108>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d134      	bne.n	8001cca <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c60:	4b3a      	ldr	r3, [pc, #232]	@ (8001d4c <HAL_I2C_MspInit+0x10c>)
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	4a39      	ldr	r2, [pc, #228]	@ (8001d4c <HAL_I2C_MspInit+0x10c>)
 8001c66:	f043 0308 	orr.w	r3, r3, #8
 8001c6a:	6193      	str	r3, [r2, #24]
 8001c6c:	4b37      	ldr	r3, [pc, #220]	@ (8001d4c <HAL_I2C_MspInit+0x10c>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	f003 0308 	and.w	r3, r3, #8
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c78:	23c0      	movs	r3, #192	@ 0xc0
 8001c7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c7c:	2312      	movs	r3, #18
 8001c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c80:	2303      	movs	r3, #3
 8001c82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c84:	f107 0318 	add.w	r3, r7, #24
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4831      	ldr	r0, [pc, #196]	@ (8001d50 <HAL_I2C_MspInit+0x110>)
 8001c8c:	f000 fc58 	bl	8002540 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c90:	4b2e      	ldr	r3, [pc, #184]	@ (8001d4c <HAL_I2C_MspInit+0x10c>)
 8001c92:	69db      	ldr	r3, [r3, #28]
 8001c94:	4a2d      	ldr	r2, [pc, #180]	@ (8001d4c <HAL_I2C_MspInit+0x10c>)
 8001c96:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c9a:	61d3      	str	r3, [r2, #28]
 8001c9c:	4b2b      	ldr	r3, [pc, #172]	@ (8001d4c <HAL_I2C_MspInit+0x10c>)
 8001c9e:	69db      	ldr	r3, [r3, #28]
 8001ca0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ca4:	613b      	str	r3, [r7, #16]
 8001ca6:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2100      	movs	r1, #0
 8001cac:	201f      	movs	r0, #31
 8001cae:	f000 fb50 	bl	8002352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001cb2:	201f      	movs	r0, #31
 8001cb4:	f000 fb69 	bl	800238a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001cb8:	2200      	movs	r2, #0
 8001cba:	2100      	movs	r1, #0
 8001cbc:	2020      	movs	r0, #32
 8001cbe:	f000 fb48 	bl	8002352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001cc2:	2020      	movs	r0, #32
 8001cc4:	f000 fb61 	bl	800238a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001cc8:	e039      	b.n	8001d3e <HAL_I2C_MspInit+0xfe>
  else if(hi2c->Instance==I2C2)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a21      	ldr	r2, [pc, #132]	@ (8001d54 <HAL_I2C_MspInit+0x114>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d134      	bne.n	8001d3e <HAL_I2C_MspInit+0xfe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d4c <HAL_I2C_MspInit+0x10c>)
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	4a1c      	ldr	r2, [pc, #112]	@ (8001d4c <HAL_I2C_MspInit+0x10c>)
 8001cda:	f043 0308 	orr.w	r3, r3, #8
 8001cde:	6193      	str	r3, [r2, #24]
 8001ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d4c <HAL_I2C_MspInit+0x10c>)
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	f003 0308 	and.w	r3, r3, #8
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001cec:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001cf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cf2:	2312      	movs	r3, #18
 8001cf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cfa:	f107 0318 	add.w	r3, r7, #24
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4813      	ldr	r0, [pc, #76]	@ (8001d50 <HAL_I2C_MspInit+0x110>)
 8001d02:	f000 fc1d 	bl	8002540 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d06:	4b11      	ldr	r3, [pc, #68]	@ (8001d4c <HAL_I2C_MspInit+0x10c>)
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	4a10      	ldr	r2, [pc, #64]	@ (8001d4c <HAL_I2C_MspInit+0x10c>)
 8001d0c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d10:	61d3      	str	r3, [r2, #28]
 8001d12:	4b0e      	ldr	r3, [pc, #56]	@ (8001d4c <HAL_I2C_MspInit+0x10c>)
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2100      	movs	r1, #0
 8001d22:	2021      	movs	r0, #33	@ 0x21
 8001d24:	f000 fb15 	bl	8002352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001d28:	2021      	movs	r0, #33	@ 0x21
 8001d2a:	f000 fb2e 	bl	800238a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2100      	movs	r1, #0
 8001d32:	2022      	movs	r0, #34	@ 0x22
 8001d34:	f000 fb0d 	bl	8002352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001d38:	2022      	movs	r0, #34	@ 0x22
 8001d3a:	f000 fb26 	bl	800238a <HAL_NVIC_EnableIRQ>
}
 8001d3e:	bf00      	nop
 8001d40:	3728      	adds	r7, #40	@ 0x28
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40005400 	.word	0x40005400
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40010c00 	.word	0x40010c00
 8001d54:	40005800 	.word	0x40005800

08001d58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b088      	sub	sp, #32
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d60:	f107 0310 	add.w	r3, r7, #16
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a20      	ldr	r2, [pc, #128]	@ (8001df4 <HAL_UART_MspInit+0x9c>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d139      	bne.n	8001dec <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d78:	4b1f      	ldr	r3, [pc, #124]	@ (8001df8 <HAL_UART_MspInit+0xa0>)
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	4a1e      	ldr	r2, [pc, #120]	@ (8001df8 <HAL_UART_MspInit+0xa0>)
 8001d7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d82:	6193      	str	r3, [r2, #24]
 8001d84:	4b1c      	ldr	r3, [pc, #112]	@ (8001df8 <HAL_UART_MspInit+0xa0>)
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d90:	4b19      	ldr	r3, [pc, #100]	@ (8001df8 <HAL_UART_MspInit+0xa0>)
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	4a18      	ldr	r2, [pc, #96]	@ (8001df8 <HAL_UART_MspInit+0xa0>)
 8001d96:	f043 0304 	orr.w	r3, r3, #4
 8001d9a:	6193      	str	r3, [r2, #24]
 8001d9c:	4b16      	ldr	r3, [pc, #88]	@ (8001df8 <HAL_UART_MspInit+0xa0>)
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001da8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001dac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dae:	2302      	movs	r3, #2
 8001db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001db2:	2303      	movs	r3, #3
 8001db4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db6:	f107 0310 	add.w	r3, r7, #16
 8001dba:	4619      	mov	r1, r3
 8001dbc:	480f      	ldr	r0, [pc, #60]	@ (8001dfc <HAL_UART_MspInit+0xa4>)
 8001dbe:	f000 fbbf 	bl	8002540 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001dc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001dc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd0:	f107 0310 	add.w	r3, r7, #16
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4809      	ldr	r0, [pc, #36]	@ (8001dfc <HAL_UART_MspInit+0xa4>)
 8001dd8:	f000 fbb2 	bl	8002540 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2100      	movs	r1, #0
 8001de0:	2025      	movs	r0, #37	@ 0x25
 8001de2:	f000 fab6 	bl	8002352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001de6:	2025      	movs	r0, #37	@ 0x25
 8001de8:	f000 facf 	bl	800238a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001dec:	bf00      	nop
 8001dee:	3720      	adds	r7, #32
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40013800 	.word	0x40013800
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	40010800 	.word	0x40010800

08001e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e04:	bf00      	nop
 8001e06:	e7fd      	b.n	8001e04 <NMI_Handler+0x4>

08001e08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e0c:	bf00      	nop
 8001e0e:	e7fd      	b.n	8001e0c <HardFault_Handler+0x4>

08001e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e14:	bf00      	nop
 8001e16:	e7fd      	b.n	8001e14 <MemManage_Handler+0x4>

08001e18 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e1c:	bf00      	nop
 8001e1e:	e7fd      	b.n	8001e1c <BusFault_Handler+0x4>

08001e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e24:	bf00      	nop
 8001e26:	e7fd      	b.n	8001e24 <UsageFault_Handler+0x4>

08001e28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr

08001e34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr

08001e40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e44:	bf00      	nop
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr

08001e4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e50:	f000 f968 	bl	8002124 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e54:	bf00      	nop
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001e5c:	4802      	ldr	r0, [pc, #8]	@ (8001e68 <I2C1_EV_IRQHandler+0x10>)
 8001e5e:	f001 fab7 	bl	80033d0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000294 	.word	0x20000294

08001e6c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001e70:	4802      	ldr	r0, [pc, #8]	@ (8001e7c <I2C1_ER_IRQHandler+0x10>)
 8001e72:	f001 fc00 	bl	8003676 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000294 	.word	0x20000294

08001e80 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001e84:	4802      	ldr	r0, [pc, #8]	@ (8001e90 <I2C2_EV_IRQHandler+0x10>)
 8001e86:	f001 faa3 	bl	80033d0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	200002e8 	.word	0x200002e8

08001e94 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001e98:	4802      	ldr	r0, [pc, #8]	@ (8001ea4 <I2C2_ER_IRQHandler+0x10>)
 8001e9a:	f001 fbec 	bl	8003676 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	200002e8 	.word	0x200002e8

08001ea8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001eac:	4802      	ldr	r0, [pc, #8]	@ (8001eb8 <USART1_IRQHandler+0x10>)
 8001eae:	f004 f8a5 	bl	8005ffc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	2000033c 	.word	0x2000033c

08001ebc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return 1;
 8001ec0:	2301      	movs	r3, #1
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr

08001eca <_kill>:

int _kill(int pid, int sig)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b082      	sub	sp, #8
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
 8001ed2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ed4:	f005 fba0 	bl	8007618 <__errno>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2216      	movs	r2, #22
 8001edc:	601a      	str	r2, [r3, #0]
  return -1;
 8001ede:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <_exit>:

void _exit (int status)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ef2:	f04f 31ff 	mov.w	r1, #4294967295
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7ff ffe7 	bl	8001eca <_kill>
  while (1) {}    /* Make sure we hang here */
 8001efc:	bf00      	nop
 8001efe:	e7fd      	b.n	8001efc <_exit+0x12>

08001f00 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	e00a      	b.n	8001f28 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f12:	f3af 8000 	nop.w
 8001f16:	4601      	mov	r1, r0
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	1c5a      	adds	r2, r3, #1
 8001f1c:	60ba      	str	r2, [r7, #8]
 8001f1e:	b2ca      	uxtb	r2, r1
 8001f20:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	3301      	adds	r3, #1
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	dbf0      	blt.n	8001f12 <_read+0x12>
  }

  return len;
 8001f30:	687b      	ldr	r3, [r7, #4]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b086      	sub	sp, #24
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	60f8      	str	r0, [r7, #12]
 8001f42:	60b9      	str	r1, [r7, #8]
 8001f44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
 8001f4a:	e009      	b.n	8001f60 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	1c5a      	adds	r2, r3, #1
 8001f50:	60ba      	str	r2, [r7, #8]
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	dbf1      	blt.n	8001f4c <_write+0x12>
  }
  return len;
 8001f68:	687b      	ldr	r3, [r7, #4]
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3718      	adds	r7, #24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <_close>:

int _close(int file)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr

08001f88 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f98:	605a      	str	r2, [r3, #4]
  return 0;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bc80      	pop	{r7}
 8001fa4:	4770      	bx	lr

08001fa6 <_isatty>:

int _isatty(int file)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fae:	2301      	movs	r3, #1
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bc80      	pop	{r7}
 8001fb8:	4770      	bx	lr

08001fba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b085      	sub	sp, #20
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	60f8      	str	r0, [r7, #12]
 8001fc2:	60b9      	str	r1, [r7, #8]
 8001fc4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bc80      	pop	{r7}
 8001fd0:	4770      	bx	lr
	...

08001fd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fdc:	4a14      	ldr	r2, [pc, #80]	@ (8002030 <_sbrk+0x5c>)
 8001fde:	4b15      	ldr	r3, [pc, #84]	@ (8002034 <_sbrk+0x60>)
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fe8:	4b13      	ldr	r3, [pc, #76]	@ (8002038 <_sbrk+0x64>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d102      	bne.n	8001ff6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ff0:	4b11      	ldr	r3, [pc, #68]	@ (8002038 <_sbrk+0x64>)
 8001ff2:	4a12      	ldr	r2, [pc, #72]	@ (800203c <_sbrk+0x68>)
 8001ff4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ff6:	4b10      	ldr	r3, [pc, #64]	@ (8002038 <_sbrk+0x64>)
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	429a      	cmp	r2, r3
 8002002:	d207      	bcs.n	8002014 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002004:	f005 fb08 	bl	8007618 <__errno>
 8002008:	4603      	mov	r3, r0
 800200a:	220c      	movs	r2, #12
 800200c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800200e:	f04f 33ff 	mov.w	r3, #4294967295
 8002012:	e009      	b.n	8002028 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002014:	4b08      	ldr	r3, [pc, #32]	@ (8002038 <_sbrk+0x64>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800201a:	4b07      	ldr	r3, [pc, #28]	@ (8002038 <_sbrk+0x64>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4413      	add	r3, r2
 8002022:	4a05      	ldr	r2, [pc, #20]	@ (8002038 <_sbrk+0x64>)
 8002024:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002026:	68fb      	ldr	r3, [r7, #12]
}
 8002028:	4618      	mov	r0, r3
 800202a:	3718      	adds	r7, #24
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	20005000 	.word	0x20005000
 8002034:	00000400 	.word	0x00000400
 8002038:	200004ec 	.word	0x200004ec
 800203c:	20000640 	.word	0x20000640

08002040 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr

0800204c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800204c:	f7ff fff8 	bl	8002040 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002050:	480b      	ldr	r0, [pc, #44]	@ (8002080 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002052:	490c      	ldr	r1, [pc, #48]	@ (8002084 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002054:	4a0c      	ldr	r2, [pc, #48]	@ (8002088 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002056:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002058:	e002      	b.n	8002060 <LoopCopyDataInit>

0800205a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800205a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800205c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800205e:	3304      	adds	r3, #4

08002060 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002060:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002062:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002064:	d3f9      	bcc.n	800205a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002066:	4a09      	ldr	r2, [pc, #36]	@ (800208c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002068:	4c09      	ldr	r4, [pc, #36]	@ (8002090 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800206a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800206c:	e001      	b.n	8002072 <LoopFillZerobss>

0800206e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800206e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002070:	3204      	adds	r2, #4

08002072 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002072:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002074:	d3fb      	bcc.n	800206e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002076:	f005 fad5 	bl	8007624 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800207a:	f7ff f86f 	bl	800115c <main>
  bx lr
 800207e:	4770      	bx	lr
  ldr r0, =_sdata
 8002080:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002084:	20000278 	.word	0x20000278
  ldr r2, =_sidata
 8002088:	0800a2b0 	.word	0x0800a2b0
  ldr r2, =_sbss
 800208c:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 8002090:	20000640 	.word	0x20000640

08002094 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002094:	e7fe      	b.n	8002094 <ADC1_2_IRQHandler>
	...

08002098 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800209c:	4b08      	ldr	r3, [pc, #32]	@ (80020c0 <HAL_Init+0x28>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a07      	ldr	r2, [pc, #28]	@ (80020c0 <HAL_Init+0x28>)
 80020a2:	f043 0310 	orr.w	r3, r3, #16
 80020a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020a8:	2003      	movs	r0, #3
 80020aa:	f000 f947 	bl	800233c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ae:	200f      	movs	r0, #15
 80020b0:	f000 f808 	bl	80020c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020b4:	f7ff fd92 	bl	8001bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40022000 	.word	0x40022000

080020c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020cc:	4b12      	ldr	r3, [pc, #72]	@ (8002118 <HAL_InitTick+0x54>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	4b12      	ldr	r3, [pc, #72]	@ (800211c <HAL_InitTick+0x58>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	4619      	mov	r1, r3
 80020d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020da:	fbb3 f3f1 	udiv	r3, r3, r1
 80020de:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 f95f 	bl	80023a6 <HAL_SYSTICK_Config>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e00e      	b.n	8002110 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b0f      	cmp	r3, #15
 80020f6:	d80a      	bhi.n	800210e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020f8:	2200      	movs	r2, #0
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002100:	f000 f927 	bl	8002352 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002104:	4a06      	ldr	r2, [pc, #24]	@ (8002120 <HAL_InitTick+0x5c>)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800210a:	2300      	movs	r3, #0
 800210c:	e000      	b.n	8002110 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
}
 8002110:	4618      	mov	r0, r3
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20000090 	.word	0x20000090
 800211c:	20000098 	.word	0x20000098
 8002120:	20000094 	.word	0x20000094

08002124 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002128:	4b05      	ldr	r3, [pc, #20]	@ (8002140 <HAL_IncTick+0x1c>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	461a      	mov	r2, r3
 800212e:	4b05      	ldr	r3, [pc, #20]	@ (8002144 <HAL_IncTick+0x20>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4413      	add	r3, r2
 8002134:	4a03      	ldr	r2, [pc, #12]	@ (8002144 <HAL_IncTick+0x20>)
 8002136:	6013      	str	r3, [r2, #0]
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr
 8002140:	20000098 	.word	0x20000098
 8002144:	200004f0 	.word	0x200004f0

08002148 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  return uwTick;
 800214c:	4b02      	ldr	r3, [pc, #8]	@ (8002158 <HAL_GetTick+0x10>)
 800214e:	681b      	ldr	r3, [r3, #0]
}
 8002150:	4618      	mov	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr
 8002158:	200004f0 	.word	0x200004f0

0800215c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002164:	f7ff fff0 	bl	8002148 <HAL_GetTick>
 8002168:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002174:	d005      	beq.n	8002182 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002176:	4b0a      	ldr	r3, [pc, #40]	@ (80021a0 <HAL_Delay+0x44>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	461a      	mov	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4413      	add	r3, r2
 8002180:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002182:	bf00      	nop
 8002184:	f7ff ffe0 	bl	8002148 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	429a      	cmp	r2, r3
 8002192:	d8f7      	bhi.n	8002184 <HAL_Delay+0x28>
  {
  }
}
 8002194:	bf00      	nop
 8002196:	bf00      	nop
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000098 	.word	0x20000098

080021a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021b4:	4b0c      	ldr	r3, [pc, #48]	@ (80021e8 <__NVIC_SetPriorityGrouping+0x44>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ba:	68ba      	ldr	r2, [r7, #8]
 80021bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021c0:	4013      	ands	r3, r2
 80021c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021d6:	4a04      	ldr	r2, [pc, #16]	@ (80021e8 <__NVIC_SetPriorityGrouping+0x44>)
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	60d3      	str	r3, [r2, #12]
}
 80021dc:	bf00      	nop
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	e000ed00 	.word	0xe000ed00

080021ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021f0:	4b04      	ldr	r3, [pc, #16]	@ (8002204 <__NVIC_GetPriorityGrouping+0x18>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	0a1b      	lsrs	r3, r3, #8
 80021f6:	f003 0307 	and.w	r3, r3, #7
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc80      	pop	{r7}
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	e000ed00 	.word	0xe000ed00

08002208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002216:	2b00      	cmp	r3, #0
 8002218:	db0b      	blt.n	8002232 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800221a:	79fb      	ldrb	r3, [r7, #7]
 800221c:	f003 021f 	and.w	r2, r3, #31
 8002220:	4906      	ldr	r1, [pc, #24]	@ (800223c <__NVIC_EnableIRQ+0x34>)
 8002222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002226:	095b      	lsrs	r3, r3, #5
 8002228:	2001      	movs	r0, #1
 800222a:	fa00 f202 	lsl.w	r2, r0, r2
 800222e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr
 800223c:	e000e100 	.word	0xe000e100

08002240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	6039      	str	r1, [r7, #0]
 800224a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800224c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002250:	2b00      	cmp	r3, #0
 8002252:	db0a      	blt.n	800226a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	b2da      	uxtb	r2, r3
 8002258:	490c      	ldr	r1, [pc, #48]	@ (800228c <__NVIC_SetPriority+0x4c>)
 800225a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225e:	0112      	lsls	r2, r2, #4
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	440b      	add	r3, r1
 8002264:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002268:	e00a      	b.n	8002280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	b2da      	uxtb	r2, r3
 800226e:	4908      	ldr	r1, [pc, #32]	@ (8002290 <__NVIC_SetPriority+0x50>)
 8002270:	79fb      	ldrb	r3, [r7, #7]
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	3b04      	subs	r3, #4
 8002278:	0112      	lsls	r2, r2, #4
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	440b      	add	r3, r1
 800227e:	761a      	strb	r2, [r3, #24]
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	e000e100 	.word	0xe000e100
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002294:	b480      	push	{r7}
 8002296:	b089      	sub	sp, #36	@ 0x24
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f1c3 0307 	rsb	r3, r3, #7
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	bf28      	it	cs
 80022b2:	2304      	movcs	r3, #4
 80022b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	3304      	adds	r3, #4
 80022ba:	2b06      	cmp	r3, #6
 80022bc:	d902      	bls.n	80022c4 <NVIC_EncodePriority+0x30>
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	3b03      	subs	r3, #3
 80022c2:	e000      	b.n	80022c6 <NVIC_EncodePriority+0x32>
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c8:	f04f 32ff 	mov.w	r2, #4294967295
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43da      	mvns	r2, r3
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	401a      	ands	r2, r3
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022dc:	f04f 31ff 	mov.w	r1, #4294967295
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	fa01 f303 	lsl.w	r3, r1, r3
 80022e6:	43d9      	mvns	r1, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ec:	4313      	orrs	r3, r2
         );
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3724      	adds	r7, #36	@ 0x24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr

080022f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3b01      	subs	r3, #1
 8002304:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002308:	d301      	bcc.n	800230e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800230a:	2301      	movs	r3, #1
 800230c:	e00f      	b.n	800232e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800230e:	4a0a      	ldr	r2, [pc, #40]	@ (8002338 <SysTick_Config+0x40>)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3b01      	subs	r3, #1
 8002314:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002316:	210f      	movs	r1, #15
 8002318:	f04f 30ff 	mov.w	r0, #4294967295
 800231c:	f7ff ff90 	bl	8002240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002320:	4b05      	ldr	r3, [pc, #20]	@ (8002338 <SysTick_Config+0x40>)
 8002322:	2200      	movs	r2, #0
 8002324:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002326:	4b04      	ldr	r3, [pc, #16]	@ (8002338 <SysTick_Config+0x40>)
 8002328:	2207      	movs	r2, #7
 800232a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	e000e010 	.word	0xe000e010

0800233c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7ff ff2d 	bl	80021a4 <__NVIC_SetPriorityGrouping>
}
 800234a:	bf00      	nop
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002352:	b580      	push	{r7, lr}
 8002354:	b086      	sub	sp, #24
 8002356:	af00      	add	r7, sp, #0
 8002358:	4603      	mov	r3, r0
 800235a:	60b9      	str	r1, [r7, #8]
 800235c:	607a      	str	r2, [r7, #4]
 800235e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002364:	f7ff ff42 	bl	80021ec <__NVIC_GetPriorityGrouping>
 8002368:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	68b9      	ldr	r1, [r7, #8]
 800236e:	6978      	ldr	r0, [r7, #20]
 8002370:	f7ff ff90 	bl	8002294 <NVIC_EncodePriority>
 8002374:	4602      	mov	r2, r0
 8002376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800237a:	4611      	mov	r1, r2
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff ff5f 	bl	8002240 <__NVIC_SetPriority>
}
 8002382:	bf00      	nop
 8002384:	3718      	adds	r7, #24
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b082      	sub	sp, #8
 800238e:	af00      	add	r7, sp, #0
 8002390:	4603      	mov	r3, r0
 8002392:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff ff35 	bl	8002208 <__NVIC_EnableIRQ>
}
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b082      	sub	sp, #8
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7ff ffa2 	bl	80022f8 <SysTick_Config>
 80023b4:	4603      	mov	r3, r0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023be:	b480      	push	{r7}
 80023c0:	b085      	sub	sp, #20
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023c6:	2300      	movs	r3, #0
 80023c8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d008      	beq.n	80023e8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2204      	movs	r2, #4
 80023da:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e020      	b.n	800242a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 020e 	bic.w	r2, r2, #14
 80023f6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0201 	bic.w	r2, r2, #1
 8002406:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002410:	2101      	movs	r1, #1
 8002412:	fa01 f202 	lsl.w	r2, r1, r2
 8002416:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002428:	7bfb      	ldrb	r3, [r7, #15]
}
 800242a:	4618      	mov	r0, r3
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr

08002434 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800243c:	2300      	movs	r3, #0
 800243e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d005      	beq.n	8002458 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2204      	movs	r2, #4
 8002450:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	73fb      	strb	r3, [r7, #15]
 8002456:	e051      	b.n	80024fc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 020e 	bic.w	r2, r2, #14
 8002466:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f022 0201 	bic.w	r2, r2, #1
 8002476:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a22      	ldr	r2, [pc, #136]	@ (8002508 <HAL_DMA_Abort_IT+0xd4>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d029      	beq.n	80024d6 <HAL_DMA_Abort_IT+0xa2>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a21      	ldr	r2, [pc, #132]	@ (800250c <HAL_DMA_Abort_IT+0xd8>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d022      	beq.n	80024d2 <HAL_DMA_Abort_IT+0x9e>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a1f      	ldr	r2, [pc, #124]	@ (8002510 <HAL_DMA_Abort_IT+0xdc>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d01a      	beq.n	80024cc <HAL_DMA_Abort_IT+0x98>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a1e      	ldr	r2, [pc, #120]	@ (8002514 <HAL_DMA_Abort_IT+0xe0>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d012      	beq.n	80024c6 <HAL_DMA_Abort_IT+0x92>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a1c      	ldr	r2, [pc, #112]	@ (8002518 <HAL_DMA_Abort_IT+0xe4>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d00a      	beq.n	80024c0 <HAL_DMA_Abort_IT+0x8c>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a1b      	ldr	r2, [pc, #108]	@ (800251c <HAL_DMA_Abort_IT+0xe8>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d102      	bne.n	80024ba <HAL_DMA_Abort_IT+0x86>
 80024b4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80024b8:	e00e      	b.n	80024d8 <HAL_DMA_Abort_IT+0xa4>
 80024ba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024be:	e00b      	b.n	80024d8 <HAL_DMA_Abort_IT+0xa4>
 80024c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80024c4:	e008      	b.n	80024d8 <HAL_DMA_Abort_IT+0xa4>
 80024c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024ca:	e005      	b.n	80024d8 <HAL_DMA_Abort_IT+0xa4>
 80024cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024d0:	e002      	b.n	80024d8 <HAL_DMA_Abort_IT+0xa4>
 80024d2:	2310      	movs	r3, #16
 80024d4:	e000      	b.n	80024d8 <HAL_DMA_Abort_IT+0xa4>
 80024d6:	2301      	movs	r3, #1
 80024d8:	4a11      	ldr	r2, [pc, #68]	@ (8002520 <HAL_DMA_Abort_IT+0xec>)
 80024da:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	4798      	blx	r3
    } 
  }
  return status;
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40020008 	.word	0x40020008
 800250c:	4002001c 	.word	0x4002001c
 8002510:	40020030 	.word	0x40020030
 8002514:	40020044 	.word	0x40020044
 8002518:	40020058 	.word	0x40020058
 800251c:	4002006c 	.word	0x4002006c
 8002520:	40020000 	.word	0x40020000

08002524 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002532:	b2db      	uxtb	r3, r3
}
 8002534:	4618      	mov	r0, r3
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	bc80      	pop	{r7}
 800253c:	4770      	bx	lr
	...

08002540 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002540:	b480      	push	{r7}
 8002542:	b08b      	sub	sp, #44	@ 0x2c
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800254a:	2300      	movs	r3, #0
 800254c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800254e:	2300      	movs	r3, #0
 8002550:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002552:	e169      	b.n	8002828 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002554:	2201      	movs	r2, #1
 8002556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	69fa      	ldr	r2, [r7, #28]
 8002564:	4013      	ands	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	429a      	cmp	r2, r3
 800256e:	f040 8158 	bne.w	8002822 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	4a9a      	ldr	r2, [pc, #616]	@ (80027e0 <HAL_GPIO_Init+0x2a0>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d05e      	beq.n	800263a <HAL_GPIO_Init+0xfa>
 800257c:	4a98      	ldr	r2, [pc, #608]	@ (80027e0 <HAL_GPIO_Init+0x2a0>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d875      	bhi.n	800266e <HAL_GPIO_Init+0x12e>
 8002582:	4a98      	ldr	r2, [pc, #608]	@ (80027e4 <HAL_GPIO_Init+0x2a4>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d058      	beq.n	800263a <HAL_GPIO_Init+0xfa>
 8002588:	4a96      	ldr	r2, [pc, #600]	@ (80027e4 <HAL_GPIO_Init+0x2a4>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d86f      	bhi.n	800266e <HAL_GPIO_Init+0x12e>
 800258e:	4a96      	ldr	r2, [pc, #600]	@ (80027e8 <HAL_GPIO_Init+0x2a8>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d052      	beq.n	800263a <HAL_GPIO_Init+0xfa>
 8002594:	4a94      	ldr	r2, [pc, #592]	@ (80027e8 <HAL_GPIO_Init+0x2a8>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d869      	bhi.n	800266e <HAL_GPIO_Init+0x12e>
 800259a:	4a94      	ldr	r2, [pc, #592]	@ (80027ec <HAL_GPIO_Init+0x2ac>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d04c      	beq.n	800263a <HAL_GPIO_Init+0xfa>
 80025a0:	4a92      	ldr	r2, [pc, #584]	@ (80027ec <HAL_GPIO_Init+0x2ac>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d863      	bhi.n	800266e <HAL_GPIO_Init+0x12e>
 80025a6:	4a92      	ldr	r2, [pc, #584]	@ (80027f0 <HAL_GPIO_Init+0x2b0>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d046      	beq.n	800263a <HAL_GPIO_Init+0xfa>
 80025ac:	4a90      	ldr	r2, [pc, #576]	@ (80027f0 <HAL_GPIO_Init+0x2b0>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d85d      	bhi.n	800266e <HAL_GPIO_Init+0x12e>
 80025b2:	2b12      	cmp	r3, #18
 80025b4:	d82a      	bhi.n	800260c <HAL_GPIO_Init+0xcc>
 80025b6:	2b12      	cmp	r3, #18
 80025b8:	d859      	bhi.n	800266e <HAL_GPIO_Init+0x12e>
 80025ba:	a201      	add	r2, pc, #4	@ (adr r2, 80025c0 <HAL_GPIO_Init+0x80>)
 80025bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c0:	0800263b 	.word	0x0800263b
 80025c4:	08002615 	.word	0x08002615
 80025c8:	08002627 	.word	0x08002627
 80025cc:	08002669 	.word	0x08002669
 80025d0:	0800266f 	.word	0x0800266f
 80025d4:	0800266f 	.word	0x0800266f
 80025d8:	0800266f 	.word	0x0800266f
 80025dc:	0800266f 	.word	0x0800266f
 80025e0:	0800266f 	.word	0x0800266f
 80025e4:	0800266f 	.word	0x0800266f
 80025e8:	0800266f 	.word	0x0800266f
 80025ec:	0800266f 	.word	0x0800266f
 80025f0:	0800266f 	.word	0x0800266f
 80025f4:	0800266f 	.word	0x0800266f
 80025f8:	0800266f 	.word	0x0800266f
 80025fc:	0800266f 	.word	0x0800266f
 8002600:	0800266f 	.word	0x0800266f
 8002604:	0800261d 	.word	0x0800261d
 8002608:	08002631 	.word	0x08002631
 800260c:	4a79      	ldr	r2, [pc, #484]	@ (80027f4 <HAL_GPIO_Init+0x2b4>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d013      	beq.n	800263a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002612:	e02c      	b.n	800266e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	623b      	str	r3, [r7, #32]
          break;
 800261a:	e029      	b.n	8002670 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	3304      	adds	r3, #4
 8002622:	623b      	str	r3, [r7, #32]
          break;
 8002624:	e024      	b.n	8002670 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	3308      	adds	r3, #8
 800262c:	623b      	str	r3, [r7, #32]
          break;
 800262e:	e01f      	b.n	8002670 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	330c      	adds	r3, #12
 8002636:	623b      	str	r3, [r7, #32]
          break;
 8002638:	e01a      	b.n	8002670 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d102      	bne.n	8002648 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002642:	2304      	movs	r3, #4
 8002644:	623b      	str	r3, [r7, #32]
          break;
 8002646:	e013      	b.n	8002670 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d105      	bne.n	800265c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002650:	2308      	movs	r3, #8
 8002652:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	69fa      	ldr	r2, [r7, #28]
 8002658:	611a      	str	r2, [r3, #16]
          break;
 800265a:	e009      	b.n	8002670 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800265c:	2308      	movs	r3, #8
 800265e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	69fa      	ldr	r2, [r7, #28]
 8002664:	615a      	str	r2, [r3, #20]
          break;
 8002666:	e003      	b.n	8002670 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002668:	2300      	movs	r3, #0
 800266a:	623b      	str	r3, [r7, #32]
          break;
 800266c:	e000      	b.n	8002670 <HAL_GPIO_Init+0x130>
          break;
 800266e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	2bff      	cmp	r3, #255	@ 0xff
 8002674:	d801      	bhi.n	800267a <HAL_GPIO_Init+0x13a>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	e001      	b.n	800267e <HAL_GPIO_Init+0x13e>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	3304      	adds	r3, #4
 800267e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	2bff      	cmp	r3, #255	@ 0xff
 8002684:	d802      	bhi.n	800268c <HAL_GPIO_Init+0x14c>
 8002686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	e002      	b.n	8002692 <HAL_GPIO_Init+0x152>
 800268c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268e:	3b08      	subs	r3, #8
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	210f      	movs	r1, #15
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	fa01 f303 	lsl.w	r3, r1, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	401a      	ands	r2, r3
 80026a4:	6a39      	ldr	r1, [r7, #32]
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	fa01 f303 	lsl.w	r3, r1, r3
 80026ac:	431a      	orrs	r2, r3
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 80b1 	beq.w	8002822 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026c0:	4b4d      	ldr	r3, [pc, #308]	@ (80027f8 <HAL_GPIO_Init+0x2b8>)
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	4a4c      	ldr	r2, [pc, #304]	@ (80027f8 <HAL_GPIO_Init+0x2b8>)
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	6193      	str	r3, [r2, #24]
 80026cc:	4b4a      	ldr	r3, [pc, #296]	@ (80027f8 <HAL_GPIO_Init+0x2b8>)
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	60bb      	str	r3, [r7, #8]
 80026d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80026d8:	4a48      	ldr	r2, [pc, #288]	@ (80027fc <HAL_GPIO_Init+0x2bc>)
 80026da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026dc:	089b      	lsrs	r3, r3, #2
 80026de:	3302      	adds	r3, #2
 80026e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e8:	f003 0303 	and.w	r3, r3, #3
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	220f      	movs	r2, #15
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	43db      	mvns	r3, r3
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	4013      	ands	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a40      	ldr	r2, [pc, #256]	@ (8002800 <HAL_GPIO_Init+0x2c0>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d013      	beq.n	800272c <HAL_GPIO_Init+0x1ec>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a3f      	ldr	r2, [pc, #252]	@ (8002804 <HAL_GPIO_Init+0x2c4>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d00d      	beq.n	8002728 <HAL_GPIO_Init+0x1e8>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a3e      	ldr	r2, [pc, #248]	@ (8002808 <HAL_GPIO_Init+0x2c8>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d007      	beq.n	8002724 <HAL_GPIO_Init+0x1e4>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a3d      	ldr	r2, [pc, #244]	@ (800280c <HAL_GPIO_Init+0x2cc>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d101      	bne.n	8002720 <HAL_GPIO_Init+0x1e0>
 800271c:	2303      	movs	r3, #3
 800271e:	e006      	b.n	800272e <HAL_GPIO_Init+0x1ee>
 8002720:	2304      	movs	r3, #4
 8002722:	e004      	b.n	800272e <HAL_GPIO_Init+0x1ee>
 8002724:	2302      	movs	r3, #2
 8002726:	e002      	b.n	800272e <HAL_GPIO_Init+0x1ee>
 8002728:	2301      	movs	r3, #1
 800272a:	e000      	b.n	800272e <HAL_GPIO_Init+0x1ee>
 800272c:	2300      	movs	r3, #0
 800272e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002730:	f002 0203 	and.w	r2, r2, #3
 8002734:	0092      	lsls	r2, r2, #2
 8002736:	4093      	lsls	r3, r2
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	4313      	orrs	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800273e:	492f      	ldr	r1, [pc, #188]	@ (80027fc <HAL_GPIO_Init+0x2bc>)
 8002740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002742:	089b      	lsrs	r3, r3, #2
 8002744:	3302      	adds	r3, #2
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d006      	beq.n	8002766 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002758:	4b2d      	ldr	r3, [pc, #180]	@ (8002810 <HAL_GPIO_Init+0x2d0>)
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	492c      	ldr	r1, [pc, #176]	@ (8002810 <HAL_GPIO_Init+0x2d0>)
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	4313      	orrs	r3, r2
 8002762:	608b      	str	r3, [r1, #8]
 8002764:	e006      	b.n	8002774 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002766:	4b2a      	ldr	r3, [pc, #168]	@ (8002810 <HAL_GPIO_Init+0x2d0>)
 8002768:	689a      	ldr	r2, [r3, #8]
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	43db      	mvns	r3, r3
 800276e:	4928      	ldr	r1, [pc, #160]	@ (8002810 <HAL_GPIO_Init+0x2d0>)
 8002770:	4013      	ands	r3, r2
 8002772:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d006      	beq.n	800278e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002780:	4b23      	ldr	r3, [pc, #140]	@ (8002810 <HAL_GPIO_Init+0x2d0>)
 8002782:	68da      	ldr	r2, [r3, #12]
 8002784:	4922      	ldr	r1, [pc, #136]	@ (8002810 <HAL_GPIO_Init+0x2d0>)
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	4313      	orrs	r3, r2
 800278a:	60cb      	str	r3, [r1, #12]
 800278c:	e006      	b.n	800279c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800278e:	4b20      	ldr	r3, [pc, #128]	@ (8002810 <HAL_GPIO_Init+0x2d0>)
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	43db      	mvns	r3, r3
 8002796:	491e      	ldr	r1, [pc, #120]	@ (8002810 <HAL_GPIO_Init+0x2d0>)
 8002798:	4013      	ands	r3, r2
 800279a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d006      	beq.n	80027b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80027a8:	4b19      	ldr	r3, [pc, #100]	@ (8002810 <HAL_GPIO_Init+0x2d0>)
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	4918      	ldr	r1, [pc, #96]	@ (8002810 <HAL_GPIO_Init+0x2d0>)
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	604b      	str	r3, [r1, #4]
 80027b4:	e006      	b.n	80027c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80027b6:	4b16      	ldr	r3, [pc, #88]	@ (8002810 <HAL_GPIO_Init+0x2d0>)
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	43db      	mvns	r3, r3
 80027be:	4914      	ldr	r1, [pc, #80]	@ (8002810 <HAL_GPIO_Init+0x2d0>)
 80027c0:	4013      	ands	r3, r2
 80027c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d021      	beq.n	8002814 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80027d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002810 <HAL_GPIO_Init+0x2d0>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	490e      	ldr	r1, [pc, #56]	@ (8002810 <HAL_GPIO_Init+0x2d0>)
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	4313      	orrs	r3, r2
 80027da:	600b      	str	r3, [r1, #0]
 80027dc:	e021      	b.n	8002822 <HAL_GPIO_Init+0x2e2>
 80027de:	bf00      	nop
 80027e0:	10320000 	.word	0x10320000
 80027e4:	10310000 	.word	0x10310000
 80027e8:	10220000 	.word	0x10220000
 80027ec:	10210000 	.word	0x10210000
 80027f0:	10120000 	.word	0x10120000
 80027f4:	10110000 	.word	0x10110000
 80027f8:	40021000 	.word	0x40021000
 80027fc:	40010000 	.word	0x40010000
 8002800:	40010800 	.word	0x40010800
 8002804:	40010c00 	.word	0x40010c00
 8002808:	40011000 	.word	0x40011000
 800280c:	40011400 	.word	0x40011400
 8002810:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002814:	4b0b      	ldr	r3, [pc, #44]	@ (8002844 <HAL_GPIO_Init+0x304>)
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	43db      	mvns	r3, r3
 800281c:	4909      	ldr	r1, [pc, #36]	@ (8002844 <HAL_GPIO_Init+0x304>)
 800281e:	4013      	ands	r3, r2
 8002820:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002824:	3301      	adds	r3, #1
 8002826:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282e:	fa22 f303 	lsr.w	r3, r2, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	f47f ae8e 	bne.w	8002554 <HAL_GPIO_Init+0x14>
  }
}
 8002838:	bf00      	nop
 800283a:	bf00      	nop
 800283c:	372c      	adds	r7, #44	@ 0x2c
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr
 8002844:	40010400 	.word	0x40010400

08002848 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e12b      	b.n	8002ab2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d106      	bne.n	8002874 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7ff f9e6 	bl	8001c40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2224      	movs	r2, #36	@ 0x24
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 0201 	bic.w	r2, r2, #1
 800288a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800289a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80028aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028ac:	f003 fa62 	bl	8005d74 <HAL_RCC_GetPCLK1Freq>
 80028b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	4a81      	ldr	r2, [pc, #516]	@ (8002abc <HAL_I2C_Init+0x274>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d807      	bhi.n	80028cc <HAL_I2C_Init+0x84>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4a80      	ldr	r2, [pc, #512]	@ (8002ac0 <HAL_I2C_Init+0x278>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	bf94      	ite	ls
 80028c4:	2301      	movls	r3, #1
 80028c6:	2300      	movhi	r3, #0
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	e006      	b.n	80028da <HAL_I2C_Init+0x92>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4a7d      	ldr	r2, [pc, #500]	@ (8002ac4 <HAL_I2C_Init+0x27c>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	bf94      	ite	ls
 80028d4:	2301      	movls	r3, #1
 80028d6:	2300      	movhi	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e0e7      	b.n	8002ab2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	4a78      	ldr	r2, [pc, #480]	@ (8002ac8 <HAL_I2C_Init+0x280>)
 80028e6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ea:	0c9b      	lsrs	r3, r3, #18
 80028ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	430a      	orrs	r2, r1
 8002900:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	4a6a      	ldr	r2, [pc, #424]	@ (8002abc <HAL_I2C_Init+0x274>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d802      	bhi.n	800291c <HAL_I2C_Init+0xd4>
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	3301      	adds	r3, #1
 800291a:	e009      	b.n	8002930 <HAL_I2C_Init+0xe8>
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002922:	fb02 f303 	mul.w	r3, r2, r3
 8002926:	4a69      	ldr	r2, [pc, #420]	@ (8002acc <HAL_I2C_Init+0x284>)
 8002928:	fba2 2303 	umull	r2, r3, r2, r3
 800292c:	099b      	lsrs	r3, r3, #6
 800292e:	3301      	adds	r3, #1
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6812      	ldr	r2, [r2, #0]
 8002934:	430b      	orrs	r3, r1
 8002936:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002942:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	495c      	ldr	r1, [pc, #368]	@ (8002abc <HAL_I2C_Init+0x274>)
 800294c:	428b      	cmp	r3, r1
 800294e:	d819      	bhi.n	8002984 <HAL_I2C_Init+0x13c>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	1e59      	subs	r1, r3, #1
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	fbb1 f3f3 	udiv	r3, r1, r3
 800295e:	1c59      	adds	r1, r3, #1
 8002960:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002964:	400b      	ands	r3, r1
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00a      	beq.n	8002980 <HAL_I2C_Init+0x138>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	1e59      	subs	r1, r3, #1
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	fbb1 f3f3 	udiv	r3, r1, r3
 8002978:	3301      	adds	r3, #1
 800297a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800297e:	e051      	b.n	8002a24 <HAL_I2C_Init+0x1dc>
 8002980:	2304      	movs	r3, #4
 8002982:	e04f      	b.n	8002a24 <HAL_I2C_Init+0x1dc>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d111      	bne.n	80029b0 <HAL_I2C_Init+0x168>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	1e58      	subs	r0, r3, #1
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6859      	ldr	r1, [r3, #4]
 8002994:	460b      	mov	r3, r1
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	440b      	add	r3, r1
 800299a:	fbb0 f3f3 	udiv	r3, r0, r3
 800299e:	3301      	adds	r3, #1
 80029a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	bf0c      	ite	eq
 80029a8:	2301      	moveq	r3, #1
 80029aa:	2300      	movne	r3, #0
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	e012      	b.n	80029d6 <HAL_I2C_Init+0x18e>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	1e58      	subs	r0, r3, #1
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6859      	ldr	r1, [r3, #4]
 80029b8:	460b      	mov	r3, r1
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	0099      	lsls	r1, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029c6:	3301      	adds	r3, #1
 80029c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	bf0c      	ite	eq
 80029d0:	2301      	moveq	r3, #1
 80029d2:	2300      	movne	r3, #0
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <HAL_I2C_Init+0x196>
 80029da:	2301      	movs	r3, #1
 80029dc:	e022      	b.n	8002a24 <HAL_I2C_Init+0x1dc>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10e      	bne.n	8002a04 <HAL_I2C_Init+0x1bc>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	1e58      	subs	r0, r3, #1
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6859      	ldr	r1, [r3, #4]
 80029ee:	460b      	mov	r3, r1
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	440b      	add	r3, r1
 80029f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80029f8:	3301      	adds	r3, #1
 80029fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a02:	e00f      	b.n	8002a24 <HAL_I2C_Init+0x1dc>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	1e58      	subs	r0, r3, #1
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6859      	ldr	r1, [r3, #4]
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	0099      	lsls	r1, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a20:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a24:	6879      	ldr	r1, [r7, #4]
 8002a26:	6809      	ldr	r1, [r1, #0]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	69da      	ldr	r2, [r3, #28]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	430a      	orrs	r2, r1
 8002a46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002a52:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	6911      	ldr	r1, [r2, #16]
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	68d2      	ldr	r2, [r2, #12]
 8002a5e:	4311      	orrs	r1, r2
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6812      	ldr	r2, [r2, #0]
 8002a64:	430b      	orrs	r3, r1
 8002a66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	695a      	ldr	r2, [r3, #20]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	430a      	orrs	r2, r1
 8002a82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0201 	orr.w	r2, r2, #1
 8002a92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2220      	movs	r2, #32
 8002a9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	000186a0 	.word	0x000186a0
 8002ac0:	001e847f 	.word	0x001e847f
 8002ac4:	003d08ff 	.word	0x003d08ff
 8002ac8:	431bde83 	.word	0x431bde83
 8002acc:	10624dd3 	.word	0x10624dd3

08002ad0 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ae2:	2b80      	cmp	r3, #128	@ 0x80
 8002ae4:	d103      	bne.n	8002aee <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2200      	movs	r2, #0
 8002aec:	611a      	str	r2, [r3, #16]
  }
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr

08002af8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b088      	sub	sp, #32
 8002afc:	af02      	add	r7, sp, #8
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	607a      	str	r2, [r7, #4]
 8002b02:	461a      	mov	r2, r3
 8002b04:	460b      	mov	r3, r1
 8002b06:	817b      	strh	r3, [r7, #10]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b0c:	f7ff fb1c 	bl	8002148 <HAL_GetTick>
 8002b10:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b20      	cmp	r3, #32
 8002b1c:	f040 80e0 	bne.w	8002ce0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	9300      	str	r3, [sp, #0]
 8002b24:	2319      	movs	r3, #25
 8002b26:	2201      	movs	r2, #1
 8002b28:	4970      	ldr	r1, [pc, #448]	@ (8002cec <HAL_I2C_Master_Transmit+0x1f4>)
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f002 fad6 	bl	80050dc <I2C_WaitOnFlagUntilTimeout>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b36:	2302      	movs	r3, #2
 8002b38:	e0d3      	b.n	8002ce2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d101      	bne.n	8002b48 <HAL_I2C_Master_Transmit+0x50>
 8002b44:	2302      	movs	r3, #2
 8002b46:	e0cc      	b.n	8002ce2 <HAL_I2C_Master_Transmit+0x1ea>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d007      	beq.n	8002b6e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f042 0201 	orr.w	r2, r2, #1
 8002b6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b7c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2221      	movs	r2, #33	@ 0x21
 8002b82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2210      	movs	r2, #16
 8002b8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	893a      	ldrh	r2, [r7, #8]
 8002b9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	4a50      	ldr	r2, [pc, #320]	@ (8002cf0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002bae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002bb0:	8979      	ldrh	r1, [r7, #10]
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	6a3a      	ldr	r2, [r7, #32]
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f001 ffe8 	bl	8004b8c <I2C_MasterRequestWrite>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e08d      	b.n	8002ce2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	613b      	str	r3, [r7, #16]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	695b      	ldr	r3, [r3, #20]
 8002bd0:	613b      	str	r3, [r7, #16]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	613b      	str	r3, [r7, #16]
 8002bda:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002bdc:	e066      	b.n	8002cac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	6a39      	ldr	r1, [r7, #32]
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f002 fb94 	bl	8005310 <I2C_WaitOnTXEFlagUntilTimeout>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00d      	beq.n	8002c0a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d107      	bne.n	8002c06 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c04:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e06b      	b.n	8002ce2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0e:	781a      	ldrb	r2, [r3, #0]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1a:	1c5a      	adds	r2, r3, #1
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	3b01      	subs	r3, #1
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c32:	3b01      	subs	r3, #1
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b04      	cmp	r3, #4
 8002c46:	d11b      	bne.n	8002c80 <HAL_I2C_Master_Transmit+0x188>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d017      	beq.n	8002c80 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c54:	781a      	ldrb	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c60:	1c5a      	adds	r2, r3, #1
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	6a39      	ldr	r1, [r7, #32]
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f002 fb8b 	bl	80053a0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00d      	beq.n	8002cac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d107      	bne.n	8002ca8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ca6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e01a      	b.n	8002ce2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d194      	bne.n	8002bde <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	e000      	b.n	8002ce2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ce0:	2302      	movs	r3, #2
  }
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	00100002 	.word	0x00100002
 8002cf0:	ffff0000 	.word	0xffff0000

08002cf4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b088      	sub	sp, #32
 8002cf8:	af02      	add	r7, sp, #8
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	4608      	mov	r0, r1
 8002cfe:	4611      	mov	r1, r2
 8002d00:	461a      	mov	r2, r3
 8002d02:	4603      	mov	r3, r0
 8002d04:	817b      	strh	r3, [r7, #10]
 8002d06:	460b      	mov	r3, r1
 8002d08:	813b      	strh	r3, [r7, #8]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d0e:	f7ff fa1b 	bl	8002148 <HAL_GetTick>
 8002d12:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b20      	cmp	r3, #32
 8002d1e:	f040 80d9 	bne.w	8002ed4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	2319      	movs	r3, #25
 8002d28:	2201      	movs	r2, #1
 8002d2a:	496d      	ldr	r1, [pc, #436]	@ (8002ee0 <HAL_I2C_Mem_Write+0x1ec>)
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f002 f9d5 	bl	80050dc <I2C_WaitOnFlagUntilTimeout>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002d38:	2302      	movs	r3, #2
 8002d3a:	e0cc      	b.n	8002ed6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d101      	bne.n	8002d4a <HAL_I2C_Mem_Write+0x56>
 8002d46:	2302      	movs	r3, #2
 8002d48:	e0c5      	b.n	8002ed6 <HAL_I2C_Mem_Write+0x1e2>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d007      	beq.n	8002d70 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0201 	orr.w	r2, r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2221      	movs	r2, #33	@ 0x21
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2240      	movs	r2, #64	@ 0x40
 8002d8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6a3a      	ldr	r2, [r7, #32]
 8002d9a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002da0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	4a4d      	ldr	r2, [pc, #308]	@ (8002ee4 <HAL_I2C_Mem_Write+0x1f0>)
 8002db0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002db2:	88f8      	ldrh	r0, [r7, #6]
 8002db4:	893a      	ldrh	r2, [r7, #8]
 8002db6:	8979      	ldrh	r1, [r7, #10]
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	9301      	str	r3, [sp, #4]
 8002dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f001 ff64 	bl	8004c90 <I2C_RequestMemoryWrite>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d052      	beq.n	8002e74 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e081      	b.n	8002ed6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f002 fa9a 	bl	8005310 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00d      	beq.n	8002dfe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de6:	2b04      	cmp	r3, #4
 8002de8:	d107      	bne.n	8002dfa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002df8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e06b      	b.n	8002ed6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e02:	781a      	ldrb	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0e:	1c5a      	adds	r2, r3, #1
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	3b01      	subs	r3, #1
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	695b      	ldr	r3, [r3, #20]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d11b      	bne.n	8002e74 <HAL_I2C_Mem_Write+0x180>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d017      	beq.n	8002e74 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e48:	781a      	ldrb	r2, [r3, #0]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e54:	1c5a      	adds	r2, r3, #1
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1aa      	bne.n	8002dd2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f002 fa8d 	bl	80053a0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00d      	beq.n	8002ea8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e90:	2b04      	cmp	r3, #4
 8002e92:	d107      	bne.n	8002ea4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ea2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e016      	b.n	8002ed6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	e000      	b.n	8002ed6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002ed4:	2302      	movs	r3, #2
  }
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3718      	adds	r7, #24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	00100002 	.word	0x00100002
 8002ee4:	ffff0000 	.word	0xffff0000

08002ee8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b08c      	sub	sp, #48	@ 0x30
 8002eec:	af02      	add	r7, sp, #8
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	4608      	mov	r0, r1
 8002ef2:	4611      	mov	r1, r2
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	817b      	strh	r3, [r7, #10]
 8002efa:	460b      	mov	r3, r1
 8002efc:	813b      	strh	r3, [r7, #8]
 8002efe:	4613      	mov	r3, r2
 8002f00:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002f02:	2300      	movs	r3, #0
 8002f04:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f06:	f7ff f91f 	bl	8002148 <HAL_GetTick>
 8002f0a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b20      	cmp	r3, #32
 8002f16:	f040 8250 	bne.w	80033ba <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	2319      	movs	r3, #25
 8002f20:	2201      	movs	r2, #1
 8002f22:	4982      	ldr	r1, [pc, #520]	@ (800312c <HAL_I2C_Mem_Read+0x244>)
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f002 f8d9 	bl	80050dc <I2C_WaitOnFlagUntilTimeout>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002f30:	2302      	movs	r3, #2
 8002f32:	e243      	b.n	80033bc <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d101      	bne.n	8002f42 <HAL_I2C_Mem_Read+0x5a>
 8002f3e:	2302      	movs	r3, #2
 8002f40:	e23c      	b.n	80033bc <HAL_I2C_Mem_Read+0x4d4>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d007      	beq.n	8002f68 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 0201 	orr.w	r2, r2, #1
 8002f66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2222      	movs	r2, #34	@ 0x22
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2240      	movs	r2, #64	@ 0x40
 8002f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f92:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002f98:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	4a62      	ldr	r2, [pc, #392]	@ (8003130 <HAL_I2C_Mem_Read+0x248>)
 8002fa8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002faa:	88f8      	ldrh	r0, [r7, #6]
 8002fac:	893a      	ldrh	r2, [r7, #8]
 8002fae:	8979      	ldrh	r1, [r7, #10]
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb2:	9301      	str	r3, [sp, #4]
 8002fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fb6:	9300      	str	r3, [sp, #0]
 8002fb8:	4603      	mov	r3, r0
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f001 fefe 	bl	8004dbc <I2C_RequestMemoryRead>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e1f8      	b.n	80033bc <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d113      	bne.n	8002ffa <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61fb      	str	r3, [r7, #28]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	61fb      	str	r3, [r7, #28]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	61fb      	str	r3, [r7, #28]
 8002fe6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	e1cc      	b.n	8003394 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d11e      	bne.n	8003040 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003010:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003012:	b672      	cpsid	i
}
 8003014:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003016:	2300      	movs	r3, #0
 8003018:	61bb      	str	r3, [r7, #24]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	61bb      	str	r3, [r7, #24]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	61bb      	str	r3, [r7, #24]
 800302a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800303a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800303c:	b662      	cpsie	i
}
 800303e:	e035      	b.n	80030ac <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003044:	2b02      	cmp	r3, #2
 8003046:	d11e      	bne.n	8003086 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003056:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003058:	b672      	cpsid	i
}
 800305a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800305c:	2300      	movs	r3, #0
 800305e:	617b      	str	r3, [r7, #20]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	617b      	str	r3, [r7, #20]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003080:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003082:	b662      	cpsie	i
}
 8003084:	e012      	b.n	80030ac <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003094:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003096:	2300      	movs	r3, #0
 8003098:	613b      	str	r3, [r7, #16]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	613b      	str	r3, [r7, #16]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	613b      	str	r3, [r7, #16]
 80030aa:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80030ac:	e172      	b.n	8003394 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030b2:	2b03      	cmp	r3, #3
 80030b4:	f200 811f 	bhi.w	80032f6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d123      	bne.n	8003108 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030c2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f002 f9e5 	bl	8005494 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e173      	b.n	80033bc <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	691a      	ldr	r2, [r3, #16]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e6:	1c5a      	adds	r2, r3, #1
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030f0:	3b01      	subs	r3, #1
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	3b01      	subs	r3, #1
 8003100:	b29a      	uxth	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003106:	e145      	b.n	8003394 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800310c:	2b02      	cmp	r3, #2
 800310e:	d152      	bne.n	80031b6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003116:	2200      	movs	r2, #0
 8003118:	4906      	ldr	r1, [pc, #24]	@ (8003134 <HAL_I2C_Mem_Read+0x24c>)
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f001 ffde 	bl	80050dc <I2C_WaitOnFlagUntilTimeout>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d008      	beq.n	8003138 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e148      	b.n	80033bc <HAL_I2C_Mem_Read+0x4d4>
 800312a:	bf00      	nop
 800312c:	00100002 	.word	0x00100002
 8003130:	ffff0000 	.word	0xffff0000
 8003134:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003138:	b672      	cpsid	i
}
 800313a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800314a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	691a      	ldr	r2, [r3, #16]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315e:	1c5a      	adds	r2, r3, #1
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003168:	3b01      	subs	r3, #1
 800316a:	b29a      	uxth	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003174:	b29b      	uxth	r3, r3
 8003176:	3b01      	subs	r3, #1
 8003178:	b29a      	uxth	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800317e:	b662      	cpsie	i
}
 8003180:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	691a      	ldr	r2, [r3, #16]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318c:	b2d2      	uxtb	r2, r2
 800318e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003194:	1c5a      	adds	r2, r3, #1
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800319e:	3b01      	subs	r3, #1
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	3b01      	subs	r3, #1
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80031b4:	e0ee      	b.n	8003394 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031bc:	2200      	movs	r2, #0
 80031be:	4981      	ldr	r1, [pc, #516]	@ (80033c4 <HAL_I2C_Mem_Read+0x4dc>)
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f001 ff8b 	bl	80050dc <I2C_WaitOnFlagUntilTimeout>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e0f5      	b.n	80033bc <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031de:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80031e0:	b672      	cpsid	i
}
 80031e2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	691a      	ldr	r2, [r3, #16]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ee:	b2d2      	uxtb	r2, r2
 80031f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f6:	1c5a      	adds	r2, r3, #1
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003200:	3b01      	subs	r3, #1
 8003202:	b29a      	uxth	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800320c:	b29b      	uxth	r3, r3
 800320e:	3b01      	subs	r3, #1
 8003210:	b29a      	uxth	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003216:	4b6c      	ldr	r3, [pc, #432]	@ (80033c8 <HAL_I2C_Mem_Read+0x4e0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	08db      	lsrs	r3, r3, #3
 800321c:	4a6b      	ldr	r2, [pc, #428]	@ (80033cc <HAL_I2C_Mem_Read+0x4e4>)
 800321e:	fba2 2303 	umull	r2, r3, r2, r3
 8003222:	0a1a      	lsrs	r2, r3, #8
 8003224:	4613      	mov	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	00da      	lsls	r2, r3, #3
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003230:	6a3b      	ldr	r3, [r7, #32]
 8003232:	3b01      	subs	r3, #1
 8003234:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003236:	6a3b      	ldr	r3, [r7, #32]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d118      	bne.n	800326e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2220      	movs	r2, #32
 8003246:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003256:	f043 0220 	orr.w	r2, r3, #32
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800325e:	b662      	cpsie	i
}
 8003260:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e0a6      	b.n	80033bc <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b04      	cmp	r3, #4
 800327a:	d1d9      	bne.n	8003230 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800328a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	691a      	ldr	r2, [r3, #16]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003296:	b2d2      	uxtb	r2, r2
 8003298:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800329e:	1c5a      	adds	r2, r3, #1
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	3b01      	subs	r3, #1
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80032be:	b662      	cpsie	i
}
 80032c0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	691a      	ldr	r2, [r3, #16]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d4:	1c5a      	adds	r2, r3, #1
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032de:	3b01      	subs	r3, #1
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	3b01      	subs	r3, #1
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80032f4:	e04e      	b.n	8003394 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032f8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f002 f8ca 	bl	8005494 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e058      	b.n	80033bc <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	691a      	ldr	r2, [r3, #16]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331c:	1c5a      	adds	r2, r3, #1
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003326:	3b01      	subs	r3, #1
 8003328:	b29a      	uxth	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003332:	b29b      	uxth	r3, r3
 8003334:	3b01      	subs	r3, #1
 8003336:	b29a      	uxth	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	f003 0304 	and.w	r3, r3, #4
 8003346:	2b04      	cmp	r3, #4
 8003348:	d124      	bne.n	8003394 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800334e:	2b03      	cmp	r3, #3
 8003350:	d107      	bne.n	8003362 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003360:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	691a      	ldr	r2, [r3, #16]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336c:	b2d2      	uxtb	r2, r2
 800336e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003374:	1c5a      	adds	r2, r3, #1
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800337e:	3b01      	subs	r3, #1
 8003380:	b29a      	uxth	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800338a:	b29b      	uxth	r3, r3
 800338c:	3b01      	subs	r3, #1
 800338e:	b29a      	uxth	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003398:	2b00      	cmp	r3, #0
 800339a:	f47f ae88 	bne.w	80030ae <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2220      	movs	r2, #32
 80033a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80033b6:	2300      	movs	r3, #0
 80033b8:	e000      	b.n	80033bc <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80033ba:	2302      	movs	r3, #2
  }
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3728      	adds	r7, #40	@ 0x28
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	00010004 	.word	0x00010004
 80033c8:	20000090 	.word	0x20000090
 80033cc:	14f8b589 	.word	0x14f8b589

080033d0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b088      	sub	sp, #32
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80033d8:	2300      	movs	r3, #0
 80033da:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80033f0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033f8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80033fa:	7bfb      	ldrb	r3, [r7, #15]
 80033fc:	2b10      	cmp	r3, #16
 80033fe:	d003      	beq.n	8003408 <HAL_I2C_EV_IRQHandler+0x38>
 8003400:	7bfb      	ldrb	r3, [r7, #15]
 8003402:	2b40      	cmp	r3, #64	@ 0x40
 8003404:	f040 80b1 	bne.w	800356a <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10d      	bne.n	800343e <HAL_I2C_EV_IRQHandler+0x6e>
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003428:	d003      	beq.n	8003432 <HAL_I2C_EV_IRQHandler+0x62>
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003430:	d101      	bne.n	8003436 <HAL_I2C_EV_IRQHandler+0x66>
 8003432:	2301      	movs	r3, #1
 8003434:	e000      	b.n	8003438 <HAL_I2C_EV_IRQHandler+0x68>
 8003436:	2300      	movs	r3, #0
 8003438:	2b01      	cmp	r3, #1
 800343a:	f000 8114 	beq.w	8003666 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00b      	beq.n	8003460 <HAL_I2C_EV_IRQHandler+0x90>
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800344e:	2b00      	cmp	r3, #0
 8003450:	d006      	beq.n	8003460 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f002 f8a9 	bl	80055aa <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 fd74 	bl	8003f46 <I2C_Master_SB>
 800345e:	e083      	b.n	8003568 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	f003 0308 	and.w	r3, r3, #8
 8003466:	2b00      	cmp	r3, #0
 8003468:	d008      	beq.n	800347c <HAL_I2C_EV_IRQHandler+0xac>
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003470:	2b00      	cmp	r3, #0
 8003472:	d003      	beq.n	800347c <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 fdeb 	bl	8004050 <I2C_Master_ADD10>
 800347a:	e075      	b.n	8003568 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d008      	beq.n	8003498 <HAL_I2C_EV_IRQHandler+0xc8>
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800348c:	2b00      	cmp	r3, #0
 800348e:	d003      	beq.n	8003498 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 fe06 	bl	80040a2 <I2C_Master_ADDR>
 8003496:	e067      	b.n	8003568 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	f003 0304 	and.w	r3, r3, #4
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d036      	beq.n	8003510 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034b0:	f000 80db 	beq.w	800366a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00d      	beq.n	80034da <HAL_I2C_EV_IRQHandler+0x10a>
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d008      	beq.n	80034da <HAL_I2C_EV_IRQHandler+0x10a>
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	f003 0304 	and.w	r3, r3, #4
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d103      	bne.n	80034da <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f9d4 	bl	8003880 <I2C_MasterTransmit_TXE>
 80034d8:	e046      	b.n	8003568 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 80c2 	beq.w	800366a <HAL_I2C_EV_IRQHandler+0x29a>
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 80bc 	beq.w	800366a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80034f2:	7bbb      	ldrb	r3, [r7, #14]
 80034f4:	2b21      	cmp	r3, #33	@ 0x21
 80034f6:	d103      	bne.n	8003500 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 fa5d 	bl	80039b8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034fe:	e0b4      	b.n	800366a <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003500:	7bfb      	ldrb	r3, [r7, #15]
 8003502:	2b40      	cmp	r3, #64	@ 0x40
 8003504:	f040 80b1 	bne.w	800366a <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 facb 	bl	8003aa4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800350e:	e0ac      	b.n	800366a <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800351a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800351e:	f000 80a4 	beq.w	800366a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00d      	beq.n	8003548 <HAL_I2C_EV_IRQHandler+0x178>
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003532:	2b00      	cmp	r3, #0
 8003534:	d008      	beq.n	8003548 <HAL_I2C_EV_IRQHandler+0x178>
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b00      	cmp	r3, #0
 800353e:	d103      	bne.n	8003548 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 fb47 	bl	8003bd4 <I2C_MasterReceive_RXNE>
 8003546:	e00f      	b.n	8003568 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	f003 0304 	and.w	r3, r3, #4
 800354e:	2b00      	cmp	r3, #0
 8003550:	f000 808b 	beq.w	800366a <HAL_I2C_EV_IRQHandler+0x29a>
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800355a:	2b00      	cmp	r3, #0
 800355c:	f000 8085 	beq.w	800366a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 fbff 	bl	8003d64 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003566:	e080      	b.n	800366a <HAL_I2C_EV_IRQHandler+0x29a>
 8003568:	e07f      	b.n	800366a <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356e:	2b00      	cmp	r3, #0
 8003570:	d004      	beq.n	800357c <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	61fb      	str	r3, [r7, #28]
 800357a:	e007      	b.n	800358c <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d011      	beq.n	80035ba <HAL_I2C_EV_IRQHandler+0x1ea>
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00c      	beq.n	80035ba <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d003      	beq.n	80035b0 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80035b0:	69b9      	ldr	r1, [r7, #24]
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 ffcc 	bl	8004550 <I2C_Slave_ADDR>
 80035b8:	e05a      	b.n	8003670 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	f003 0310 	and.w	r3, r3, #16
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d008      	beq.n	80035d6 <HAL_I2C_EV_IRQHandler+0x206>
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f001 f806 	bl	80045e0 <I2C_Slave_STOPF>
 80035d4:	e04c      	b.n	8003670 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80035d6:	7bbb      	ldrb	r3, [r7, #14]
 80035d8:	2b21      	cmp	r3, #33	@ 0x21
 80035da:	d002      	beq.n	80035e2 <HAL_I2C_EV_IRQHandler+0x212>
 80035dc:	7bbb      	ldrb	r3, [r7, #14]
 80035de:	2b29      	cmp	r3, #41	@ 0x29
 80035e0:	d120      	bne.n	8003624 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00d      	beq.n	8003608 <HAL_I2C_EV_IRQHandler+0x238>
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d008      	beq.n	8003608 <HAL_I2C_EV_IRQHandler+0x238>
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	f003 0304 	and.w	r3, r3, #4
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d103      	bne.n	8003608 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 fee9 	bl	80043d8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003606:	e032      	b.n	800366e <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	f003 0304 	and.w	r3, r3, #4
 800360e:	2b00      	cmp	r3, #0
 8003610:	d02d      	beq.n	800366e <HAL_I2C_EV_IRQHandler+0x29e>
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003618:	2b00      	cmp	r3, #0
 800361a:	d028      	beq.n	800366e <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 ff18 	bl	8004452 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003622:	e024      	b.n	800366e <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00d      	beq.n	800364a <HAL_I2C_EV_IRQHandler+0x27a>
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003634:	2b00      	cmp	r3, #0
 8003636:	d008      	beq.n	800364a <HAL_I2C_EV_IRQHandler+0x27a>
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	f003 0304 	and.w	r3, r3, #4
 800363e:	2b00      	cmp	r3, #0
 8003640:	d103      	bne.n	800364a <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 ff25 	bl	8004492 <I2C_SlaveReceive_RXNE>
 8003648:	e012      	b.n	8003670 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00d      	beq.n	8003670 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800365a:	2b00      	cmp	r3, #0
 800365c:	d008      	beq.n	8003670 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 ff55 	bl	800450e <I2C_SlaveReceive_BTF>
 8003664:	e004      	b.n	8003670 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003666:	bf00      	nop
 8003668:	e002      	b.n	8003670 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800366a:	bf00      	nop
 800366c:	e000      	b.n	8003670 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800366e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003670:	3720      	adds	r7, #32
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b08a      	sub	sp, #40	@ 0x28
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800368e:	2300      	movs	r3, #0
 8003690:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003698:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800369a:	6a3b      	ldr	r3, [r7, #32]
 800369c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d015      	beq.n	80036d0 <HAL_I2C_ER_IRQHandler+0x5a>
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d010      	beq.n	80036d0 <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80036ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b0:	f043 0301 	orr.w	r3, r3, #1
 80036b4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80036be:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036ce:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80036d0:	6a3b      	ldr	r3, [r7, #32]
 80036d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00d      	beq.n	80036f6 <HAL_I2C_ER_IRQHandler+0x80>
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d008      	beq.n	80036f6 <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80036e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e6:	f043 0302 	orr.w	r3, r3, #2
 80036ea:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80036f4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80036f6:	6a3b      	ldr	r3, [r7, #32]
 80036f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d03e      	beq.n	800377e <HAL_I2C_ER_IRQHandler+0x108>
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003706:	2b00      	cmp	r3, #0
 8003708:	d039      	beq.n	800377e <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 800370a:	7efb      	ldrb	r3, [r7, #27]
 800370c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003712:	b29b      	uxth	r3, r3
 8003714:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800371c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003722:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003724:	7ebb      	ldrb	r3, [r7, #26]
 8003726:	2b20      	cmp	r3, #32
 8003728:	d112      	bne.n	8003750 <HAL_I2C_ER_IRQHandler+0xda>
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10f      	bne.n	8003750 <HAL_I2C_ER_IRQHandler+0xda>
 8003730:	7cfb      	ldrb	r3, [r7, #19]
 8003732:	2b21      	cmp	r3, #33	@ 0x21
 8003734:	d008      	beq.n	8003748 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003736:	7cfb      	ldrb	r3, [r7, #19]
 8003738:	2b29      	cmp	r3, #41	@ 0x29
 800373a:	d005      	beq.n	8003748 <HAL_I2C_ER_IRQHandler+0xd2>
 800373c:	7cfb      	ldrb	r3, [r7, #19]
 800373e:	2b28      	cmp	r3, #40	@ 0x28
 8003740:	d106      	bne.n	8003750 <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2b21      	cmp	r3, #33	@ 0x21
 8003746:	d103      	bne.n	8003750 <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f001 f879 	bl	8004840 <I2C_Slave_AF>
 800374e:	e016      	b.n	800377e <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003758:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800375a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375c:	f043 0304 	orr.w	r3, r3, #4
 8003760:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003762:	7efb      	ldrb	r3, [r7, #27]
 8003764:	2b10      	cmp	r3, #16
 8003766:	d002      	beq.n	800376e <HAL_I2C_ER_IRQHandler+0xf8>
 8003768:	7efb      	ldrb	r3, [r7, #27]
 800376a:	2b40      	cmp	r3, #64	@ 0x40
 800376c:	d107      	bne.n	800377e <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800377c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800377e:	6a3b      	ldr	r3, [r7, #32]
 8003780:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00d      	beq.n	80037a4 <HAL_I2C_ER_IRQHandler+0x12e>
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800378e:	2b00      	cmp	r3, #0
 8003790:	d008      	beq.n	80037a4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003794:	f043 0308 	orr.w	r3, r3, #8
 8003798:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80037a2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80037a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d008      	beq.n	80037bc <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b0:	431a      	orrs	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f001 f8b6 	bl	8004928 <I2C_ITError>
  }
}
 80037bc:	bf00      	nop
 80037be:	3728      	adds	r7, #40	@ 0x28
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bc80      	pop	{r7}
 80037d4:	4770      	bx	lr

080037d6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b083      	sub	sp, #12
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80037de:	bf00      	nop
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bc80      	pop	{r7}
 80037e6:	4770      	bx	lr

080037e8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bc80      	pop	{r7}
 80037f8:	4770      	bx	lr

080037fa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b083      	sub	sp, #12
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003802:	bf00      	nop
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	bc80      	pop	{r7}
 800380a:	4770      	bx	lr

0800380c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	460b      	mov	r3, r1
 8003816:	70fb      	strb	r3, [r7, #3]
 8003818:	4613      	mov	r3, r2
 800381a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	bc80      	pop	{r7}
 8003824:	4770      	bx	lr

08003826 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003826:	b480      	push	{r7}
 8003828:	b083      	sub	sp, #12
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800382e:	bf00      	nop
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	bc80      	pop	{r7}
 8003836:	4770      	bx	lr

08003838 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	bc80      	pop	{r7}
 8003848:	4770      	bx	lr

0800384a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	bc80      	pop	{r7}
 800385a:	4770      	bx	lr

0800385c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	bc80      	pop	{r7}
 800386c:	4770      	bx	lr

0800386e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	bc80      	pop	{r7}
 800387e:	4770      	bx	lr

08003880 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800388e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003896:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800389c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d150      	bne.n	8003948 <I2C_MasterTransmit_TXE+0xc8>
 80038a6:	7bfb      	ldrb	r3, [r7, #15]
 80038a8:	2b21      	cmp	r3, #33	@ 0x21
 80038aa:	d14d      	bne.n	8003948 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	2b08      	cmp	r3, #8
 80038b0:	d01d      	beq.n	80038ee <I2C_MasterTransmit_TXE+0x6e>
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	2b20      	cmp	r3, #32
 80038b6:	d01a      	beq.n	80038ee <I2C_MasterTransmit_TXE+0x6e>
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80038be:	d016      	beq.n	80038ee <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80038ce:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2211      	movs	r2, #17
 80038d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2220      	movs	r2, #32
 80038e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7ff ff6c 	bl	80037c4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038ec:	e060      	b.n	80039b0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80038fc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800390c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2220      	movs	r2, #32
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b40      	cmp	r3, #64	@ 0x40
 8003926:	d107      	bne.n	8003938 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f7ff ff81 	bl	8003838 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003936:	e03b      	b.n	80039b0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7ff ff3f 	bl	80037c4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003946:	e033      	b.n	80039b0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003948:	7bfb      	ldrb	r3, [r7, #15]
 800394a:	2b21      	cmp	r3, #33	@ 0x21
 800394c:	d005      	beq.n	800395a <I2C_MasterTransmit_TXE+0xda>
 800394e:	7bbb      	ldrb	r3, [r7, #14]
 8003950:	2b40      	cmp	r3, #64	@ 0x40
 8003952:	d12d      	bne.n	80039b0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003954:	7bfb      	ldrb	r3, [r7, #15]
 8003956:	2b22      	cmp	r3, #34	@ 0x22
 8003958:	d12a      	bne.n	80039b0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800395e:	b29b      	uxth	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	d108      	bne.n	8003976 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003972:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003974:	e01c      	b.n	80039b0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b40      	cmp	r3, #64	@ 0x40
 8003980:	d103      	bne.n	800398a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f88e 	bl	8003aa4 <I2C_MemoryTransmit_TXE_BTF>
}
 8003988:	e012      	b.n	80039b0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398e:	781a      	ldrb	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800399a:	1c5a      	adds	r2, r3, #1
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	3b01      	subs	r3, #1
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80039ae:	e7ff      	b.n	80039b0 <I2C_MasterTransmit_TXE+0x130>
 80039b0:	bf00      	nop
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b21      	cmp	r3, #33	@ 0x21
 80039d0:	d164      	bne.n	8003a9c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d012      	beq.n	8003a02 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e0:	781a      	ldrb	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ec:	1c5a      	adds	r2, r3, #1
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	3b01      	subs	r3, #1
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003a00:	e04c      	b.n	8003a9c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	d01d      	beq.n	8003a44 <I2C_MasterTransmit_BTF+0x8c>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2b20      	cmp	r3, #32
 8003a0c:	d01a      	beq.n	8003a44 <I2C_MasterTransmit_BTF+0x8c>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003a14:	d016      	beq.n	8003a44 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003a24:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2211      	movs	r2, #17
 8003a2a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2220      	movs	r2, #32
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f7ff fec1 	bl	80037c4 <HAL_I2C_MasterTxCpltCallback>
}
 8003a42:	e02b      	b.n	8003a9c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003a52:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a62:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b40      	cmp	r3, #64	@ 0x40
 8003a7c:	d107      	bne.n	8003a8e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7ff fed6 	bl	8003838 <HAL_I2C_MemTxCpltCallback>
}
 8003a8c:	e006      	b.n	8003a9c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7ff fe94 	bl	80037c4 <HAL_I2C_MasterTxCpltCallback>
}
 8003a9c:	bf00      	nop
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ab2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d11d      	bne.n	8003af8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d10b      	bne.n	8003adc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ad4:	1c9a      	adds	r2, r3, #2
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003ada:	e077      	b.n	8003bcc <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	121b      	asrs	r3, r3, #8
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003af0:	1c5a      	adds	r2, r3, #1
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003af6:	e069      	b.n	8003bcc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d10b      	bne.n	8003b18 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b10:	1c5a      	adds	r2, r3, #1
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003b16:	e059      	b.n	8003bcc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d152      	bne.n	8003bc6 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003b20:	7bfb      	ldrb	r3, [r7, #15]
 8003b22:	2b22      	cmp	r3, #34	@ 0x22
 8003b24:	d10d      	bne.n	8003b42 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b34:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b3a:	1c5a      	adds	r2, r3, #1
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003b40:	e044      	b.n	8003bcc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d015      	beq.n	8003b78 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
 8003b4e:	2b21      	cmp	r3, #33	@ 0x21
 8003b50:	d112      	bne.n	8003b78 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b56:	781a      	ldrb	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b62:	1c5a      	adds	r2, r3, #1
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003b76:	e029      	b.n	8003bcc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d124      	bne.n	8003bcc <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003b82:	7bfb      	ldrb	r3, [r7, #15]
 8003b84:	2b21      	cmp	r3, #33	@ 0x21
 8003b86:	d121      	bne.n	8003bcc <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003b96:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ba6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7ff fe3a 	bl	8003838 <HAL_I2C_MemTxCpltCallback>
}
 8003bc4:	e002      	b.n	8003bcc <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f7fe ff82 	bl	8002ad0 <I2C_Flush_DR>
}
 8003bcc:	bf00      	nop
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b22      	cmp	r3, #34	@ 0x22
 8003be6:	f040 80b9 	bne.w	8003d5c <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bee:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	2b03      	cmp	r3, #3
 8003bfc:	d921      	bls.n	8003c42 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	691a      	ldr	r2, [r3, #16]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c08:	b2d2      	uxtb	r2, r2
 8003c0a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c10:	1c5a      	adds	r2, r3, #1
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	2b03      	cmp	r3, #3
 8003c2c:	f040 8096 	bne.w	8003d5c <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	685a      	ldr	r2, [r3, #4]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c3e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003c40:	e08c      	b.n	8003d5c <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d07f      	beq.n	8003d4a <I2C_MasterReceive_RXNE+0x176>
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d002      	beq.n	8003c56 <I2C_MasterReceive_RXNE+0x82>
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d179      	bne.n	8003d4a <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f001 fbea 	bl	8005430 <I2C_WaitOnSTOPRequestThroughIT>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d14c      	bne.n	8003cfc <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c70:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c80:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	691a      	ldr	r2, [r3, #16]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8c:	b2d2      	uxtb	r2, r2
 8003c8e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c94:	1c5a      	adds	r2, r3, #1
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2220      	movs	r2, #32
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b40      	cmp	r3, #64	@ 0x40
 8003cba:	d10a      	bne.n	8003cd2 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f7ff fdbd 	bl	800384a <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003cd0:	e044      	b.n	8003d5c <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2b08      	cmp	r3, #8
 8003cde:	d002      	beq.n	8003ce6 <I2C_MasterReceive_RXNE+0x112>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2b20      	cmp	r3, #32
 8003ce4:	d103      	bne.n	8003cee <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	631a      	str	r2, [r3, #48]	@ 0x30
 8003cec:	e002      	b.n	8003cf4 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2212      	movs	r2, #18
 8003cf2:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f7ff fd6e 	bl	80037d6 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003cfa:	e02f      	b.n	8003d5c <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	685a      	ldr	r2, [r3, #4]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003d0a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	691a      	ldr	r2, [r3, #16]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1e:	1c5a      	adds	r2, r3, #1
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2220      	movs	r2, #32
 8003d36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7ff fd8a 	bl	800385c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003d48:	e008      	b.n	8003d5c <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	685a      	ldr	r2, [r3, #4]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d58:	605a      	str	r2, [r3, #4]
}
 8003d5a:	e7ff      	b.n	8003d5c <I2C_MasterReceive_RXNE+0x188>
 8003d5c:	bf00      	nop
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d70:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	2b04      	cmp	r3, #4
 8003d7a:	d11b      	bne.n	8003db4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d8a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	691a      	ldr	r2, [r3, #16]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d96:	b2d2      	uxtb	r2, r2
 8003d98:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9e:	1c5a      	adds	r2, r3, #1
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	3b01      	subs	r3, #1
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003db2:	e0c4      	b.n	8003f3e <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	2b03      	cmp	r3, #3
 8003dbc:	d129      	bne.n	8003e12 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dcc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2b04      	cmp	r3, #4
 8003dd2:	d00a      	beq.n	8003dea <I2C_MasterReceive_BTF+0x86>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d007      	beq.n	8003dea <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003de8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	691a      	ldr	r2, [r3, #16]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df4:	b2d2      	uxtb	r2, r2
 8003df6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfc:	1c5a      	adds	r2, r3, #1
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003e10:	e095      	b.n	8003f3e <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d17d      	bne.n	8003f18 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d002      	beq.n	8003e28 <I2C_MasterReceive_BTF+0xc4>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2b10      	cmp	r3, #16
 8003e26:	d108      	bne.n	8003e3a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e36:	601a      	str	r2, [r3, #0]
 8003e38:	e016      	b.n	8003e68 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2b04      	cmp	r3, #4
 8003e3e:	d002      	beq.n	8003e46 <I2C_MasterReceive_BTF+0xe2>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d108      	bne.n	8003e58 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e54:	601a      	str	r2, [r3, #0]
 8003e56:	e007      	b.n	8003e68 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e66:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	691a      	ldr	r2, [r3, #16]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e72:	b2d2      	uxtb	r2, r2
 8003e74:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7a:	1c5a      	adds	r2, r3, #1
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	3b01      	subs	r3, #1
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	691a      	ldr	r2, [r3, #16]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e98:	b2d2      	uxtb	r2, r2
 8003e9a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea0:	1c5a      	adds	r2, r3, #1
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	3b01      	subs	r3, #1
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003ec2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	2b40      	cmp	r3, #64	@ 0x40
 8003ed6:	d10a      	bne.n	8003eee <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7ff fcaf 	bl	800384a <HAL_I2C_MemRxCpltCallback>
}
 8003eec:	e027      	b.n	8003f3e <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2b08      	cmp	r3, #8
 8003efa:	d002      	beq.n	8003f02 <I2C_MasterReceive_BTF+0x19e>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2b20      	cmp	r3, #32
 8003f00:	d103      	bne.n	8003f0a <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f08:	e002      	b.n	8003f10 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2212      	movs	r2, #18
 8003f0e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7ff fc60 	bl	80037d6 <HAL_I2C_MasterRxCpltCallback>
}
 8003f16:	e012      	b.n	8003f3e <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	691a      	ldr	r2, [r3, #16]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f22:	b2d2      	uxtb	r2, r2
 8003f24:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2a:	1c5a      	adds	r2, r3, #1
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	3b01      	subs	r3, #1
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003f3e:	bf00      	nop
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b083      	sub	sp, #12
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b40      	cmp	r3, #64	@ 0x40
 8003f58:	d117      	bne.n	8003f8a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d109      	bne.n	8003f76 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	461a      	mov	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f72:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003f74:	e067      	b.n	8004046 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	f043 0301 	orr.w	r3, r3, #1
 8003f80:	b2da      	uxtb	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	611a      	str	r2, [r3, #16]
}
 8003f88:	e05d      	b.n	8004046 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f92:	d133      	bne.n	8003ffc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b21      	cmp	r3, #33	@ 0x21
 8003f9e:	d109      	bne.n	8003fb4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003fb0:	611a      	str	r2, [r3, #16]
 8003fb2:	e008      	b.n	8003fc6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	f043 0301 	orr.w	r3, r3, #1
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d004      	beq.n	8003fd8 <I2C_Master_SB+0x92>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d108      	bne.n	8003fea <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d032      	beq.n	8004046 <I2C_Master_SB+0x100>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d02d      	beq.n	8004046 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ff8:	605a      	str	r2, [r3, #4]
}
 8003ffa:	e024      	b.n	8004046 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004000:	2b00      	cmp	r3, #0
 8004002:	d10e      	bne.n	8004022 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004008:	b29b      	uxth	r3, r3
 800400a:	11db      	asrs	r3, r3, #7
 800400c:	b2db      	uxtb	r3, r3
 800400e:	f003 0306 	and.w	r3, r3, #6
 8004012:	b2db      	uxtb	r3, r3
 8004014:	f063 030f 	orn	r3, r3, #15
 8004018:	b2da      	uxtb	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	611a      	str	r2, [r3, #16]
}
 8004020:	e011      	b.n	8004046 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004026:	2b01      	cmp	r3, #1
 8004028:	d10d      	bne.n	8004046 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800402e:	b29b      	uxth	r3, r3
 8004030:	11db      	asrs	r3, r3, #7
 8004032:	b2db      	uxtb	r3, r3
 8004034:	f003 0306 	and.w	r3, r3, #6
 8004038:	b2db      	uxtb	r3, r3
 800403a:	f063 030e 	orn	r3, r3, #14
 800403e:	b2da      	uxtb	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	611a      	str	r2, [r3, #16]
}
 8004046:	bf00      	nop
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	bc80      	pop	{r7}
 800404e:	4770      	bx	lr

08004050 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800405c:	b2da      	uxtb	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004068:	2b00      	cmp	r3, #0
 800406a:	d004      	beq.n	8004076 <I2C_Master_ADD10+0x26>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004072:	2b00      	cmp	r3, #0
 8004074:	d108      	bne.n	8004088 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00c      	beq.n	8004098 <I2C_Master_ADD10+0x48>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004084:	2b00      	cmp	r3, #0
 8004086:	d007      	beq.n	8004098 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004096:	605a      	str	r2, [r3, #4]
  }
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	bc80      	pop	{r7}
 80040a0:	4770      	bx	lr

080040a2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b091      	sub	sp, #68	@ 0x44
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80040b0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040be:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	2b22      	cmp	r3, #34	@ 0x22
 80040ca:	f040 8174 	bne.w	80043b6 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10f      	bne.n	80040f6 <I2C_Master_ADDR+0x54>
 80040d6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80040da:	2b40      	cmp	r3, #64	@ 0x40
 80040dc:	d10b      	bne.n	80040f6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040de:	2300      	movs	r3, #0
 80040e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80040f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f4:	e16b      	b.n	80043ce <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d11d      	bne.n	800413a <I2C_Master_ADDR+0x98>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004106:	d118      	bne.n	800413a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004108:	2300      	movs	r3, #0
 800410a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800411c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800412c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004132:	1c5a      	adds	r2, r3, #1
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	651a      	str	r2, [r3, #80]	@ 0x50
 8004138:	e149      	b.n	80043ce <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800413e:	b29b      	uxth	r3, r3
 8004140:	2b00      	cmp	r3, #0
 8004142:	d113      	bne.n	800416c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004144:	2300      	movs	r3, #0
 8004146:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004158:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004168:	601a      	str	r2, [r3, #0]
 800416a:	e120      	b.n	80043ae <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004170:	b29b      	uxth	r3, r3
 8004172:	2b01      	cmp	r3, #1
 8004174:	f040 808a 	bne.w	800428c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800417a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800417e:	d137      	bne.n	80041f0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800418e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800419a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800419e:	d113      	bne.n	80041c8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041ae:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041b0:	2300      	movs	r3, #0
 80041b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80041c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c6:	e0f2      	b.n	80043ae <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041c8:	2300      	movs	r3, #0
 80041ca:	623b      	str	r3, [r7, #32]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	623b      	str	r3, [r7, #32]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	623b      	str	r3, [r7, #32]
 80041dc:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041ec:	601a      	str	r2, [r3, #0]
 80041ee:	e0de      	b.n	80043ae <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80041f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041f2:	2b08      	cmp	r3, #8
 80041f4:	d02e      	beq.n	8004254 <I2C_Master_ADDR+0x1b2>
 80041f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041f8:	2b20      	cmp	r3, #32
 80041fa:	d02b      	beq.n	8004254 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80041fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041fe:	2b12      	cmp	r3, #18
 8004200:	d102      	bne.n	8004208 <I2C_Master_ADDR+0x166>
 8004202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004204:	2b01      	cmp	r3, #1
 8004206:	d125      	bne.n	8004254 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800420a:	2b04      	cmp	r3, #4
 800420c:	d00e      	beq.n	800422c <I2C_Master_ADDR+0x18a>
 800420e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004210:	2b02      	cmp	r3, #2
 8004212:	d00b      	beq.n	800422c <I2C_Master_ADDR+0x18a>
 8004214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004216:	2b10      	cmp	r3, #16
 8004218:	d008      	beq.n	800422c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004228:	601a      	str	r2, [r3, #0]
 800422a:	e007      	b.n	800423c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800423a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800423c:	2300      	movs	r3, #0
 800423e:	61fb      	str	r3, [r7, #28]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	61fb      	str	r3, [r7, #28]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	61fb      	str	r3, [r7, #28]
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	e0ac      	b.n	80043ae <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004262:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004264:	2300      	movs	r3, #0
 8004266:	61bb      	str	r3, [r7, #24]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	61bb      	str	r3, [r7, #24]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	61bb      	str	r3, [r7, #24]
 8004278:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	e090      	b.n	80043ae <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004290:	b29b      	uxth	r3, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d158      	bne.n	8004348 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004298:	2b04      	cmp	r3, #4
 800429a:	d021      	beq.n	80042e0 <I2C_Master_ADDR+0x23e>
 800429c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d01e      	beq.n	80042e0 <I2C_Master_ADDR+0x23e>
 80042a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042a4:	2b10      	cmp	r3, #16
 80042a6:	d01b      	beq.n	80042e0 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042b6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042b8:	2300      	movs	r3, #0
 80042ba:	617b      	str	r3, [r7, #20]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	617b      	str	r3, [r7, #20]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	617b      	str	r3, [r7, #20]
 80042cc:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	e012      	b.n	8004306 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80042ee:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042f0:	2300      	movs	r3, #0
 80042f2:	613b      	str	r3, [r7, #16]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	613b      	str	r3, [r7, #16]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	613b      	str	r3, [r7, #16]
 8004304:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004310:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004314:	d14b      	bne.n	80043ae <I2C_Master_ADDR+0x30c>
 8004316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004318:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800431c:	d00b      	beq.n	8004336 <I2C_Master_ADDR+0x294>
 800431e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004320:	2b01      	cmp	r3, #1
 8004322:	d008      	beq.n	8004336 <I2C_Master_ADDR+0x294>
 8004324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004326:	2b08      	cmp	r3, #8
 8004328:	d005      	beq.n	8004336 <I2C_Master_ADDR+0x294>
 800432a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800432c:	2b10      	cmp	r3, #16
 800432e:	d002      	beq.n	8004336 <I2C_Master_ADDR+0x294>
 8004330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004332:	2b20      	cmp	r3, #32
 8004334:	d13b      	bne.n	80043ae <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004344:	605a      	str	r2, [r3, #4]
 8004346:	e032      	b.n	80043ae <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004356:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004362:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004366:	d117      	bne.n	8004398 <I2C_Master_ADDR+0x2f6>
 8004368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800436a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800436e:	d00b      	beq.n	8004388 <I2C_Master_ADDR+0x2e6>
 8004370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004372:	2b01      	cmp	r3, #1
 8004374:	d008      	beq.n	8004388 <I2C_Master_ADDR+0x2e6>
 8004376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004378:	2b08      	cmp	r3, #8
 800437a:	d005      	beq.n	8004388 <I2C_Master_ADDR+0x2e6>
 800437c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800437e:	2b10      	cmp	r3, #16
 8004380:	d002      	beq.n	8004388 <I2C_Master_ADDR+0x2e6>
 8004382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004384:	2b20      	cmp	r3, #32
 8004386:	d107      	bne.n	8004398 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004396:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004398:	2300      	movs	r3, #0
 800439a:	60fb      	str	r3, [r7, #12]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	60fb      	str	r3, [r7, #12]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	60fb      	str	r3, [r7, #12]
 80043ac:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80043b4:	e00b      	b.n	80043ce <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043b6:	2300      	movs	r3, #0
 80043b8:	60bb      	str	r3, [r7, #8]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	60bb      	str	r3, [r7, #8]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	60bb      	str	r3, [r7, #8]
 80043ca:	68bb      	ldr	r3, [r7, #8]
}
 80043cc:	e7ff      	b.n	80043ce <I2C_Master_ADDR+0x32c>
 80043ce:	bf00      	nop
 80043d0:	3744      	adds	r7, #68	@ 0x44
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bc80      	pop	{r7}
 80043d6:	4770      	bx	lr

080043d8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043e6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d02b      	beq.n	800444a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f6:	781a      	ldrb	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004402:	1c5a      	adds	r2, r3, #1
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800440c:	b29b      	uxth	r3, r3
 800440e:	3b01      	subs	r3, #1
 8004410:	b29a      	uxth	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800441a:	b29b      	uxth	r3, r3
 800441c:	2b00      	cmp	r3, #0
 800441e:	d114      	bne.n	800444a <I2C_SlaveTransmit_TXE+0x72>
 8004420:	7bfb      	ldrb	r3, [r7, #15]
 8004422:	2b29      	cmp	r3, #41	@ 0x29
 8004424:	d111      	bne.n	800444a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004434:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2221      	movs	r2, #33	@ 0x21
 800443a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2228      	movs	r2, #40	@ 0x28
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f7ff f9cf 	bl	80037e8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800444a:	bf00      	nop
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004452:	b480      	push	{r7}
 8004454:	b083      	sub	sp, #12
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800445e:	b29b      	uxth	r3, r3
 8004460:	2b00      	cmp	r3, #0
 8004462:	d011      	beq.n	8004488 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004468:	781a      	ldrb	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004474:	1c5a      	adds	r2, r3, #1
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800447e:	b29b      	uxth	r3, r3
 8004480:	3b01      	subs	r3, #1
 8004482:	b29a      	uxth	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	bc80      	pop	{r7}
 8004490:	4770      	bx	lr

08004492 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b084      	sub	sp, #16
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044a0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d02c      	beq.n	8004506 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	691a      	ldr	r2, [r3, #16]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b6:	b2d2      	uxtb	r2, r2
 80044b8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044be:	1c5a      	adds	r2, r3, #1
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	3b01      	subs	r3, #1
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d114      	bne.n	8004506 <I2C_SlaveReceive_RXNE+0x74>
 80044dc:	7bfb      	ldrb	r3, [r7, #15]
 80044de:	2b2a      	cmp	r3, #42	@ 0x2a
 80044e0:	d111      	bne.n	8004506 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044f0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2222      	movs	r2, #34	@ 0x22
 80044f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2228      	movs	r2, #40	@ 0x28
 80044fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f7ff f97a 	bl	80037fa <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004506:	bf00      	nop
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800450e:	b480      	push	{r7}
 8004510:	b083      	sub	sp, #12
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800451a:	b29b      	uxth	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	d012      	beq.n	8004546 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	691a      	ldr	r2, [r3, #16]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800452a:	b2d2      	uxtb	r2, r2
 800452c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004532:	1c5a      	adds	r2, r3, #1
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800453c:	b29b      	uxth	r3, r3
 800453e:	3b01      	subs	r3, #1
 8004540:	b29a      	uxth	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004546:	bf00      	nop
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	bc80      	pop	{r7}
 800454e:	4770      	bx	lr

08004550 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800455a:	2300      	movs	r3, #0
 800455c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004564:	b2db      	uxtb	r3, r3
 8004566:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800456a:	2b28      	cmp	r3, #40	@ 0x28
 800456c:	d125      	bne.n	80045ba <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800457c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b00      	cmp	r3, #0
 8004586:	d101      	bne.n	800458c <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004588:	2301      	movs	r3, #1
 800458a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004592:	2b00      	cmp	r3, #0
 8004594:	d103      	bne.n	800459e <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	81bb      	strh	r3, [r7, #12]
 800459c:	e002      	b.n	80045a4 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80045ac:	89ba      	ldrh	r2, [r7, #12]
 80045ae:	7bfb      	ldrb	r3, [r7, #15]
 80045b0:	4619      	mov	r1, r3
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7ff f92a 	bl	800380c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80045b8:	e00e      	b.n	80045d8 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ba:	2300      	movs	r3, #0
 80045bc:	60bb      	str	r3, [r7, #8]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	60bb      	str	r3, [r7, #8]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	60bb      	str	r3, [r7, #8]
 80045ce:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80045d8:	bf00      	nop
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045ee:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80045fe:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004600:	2300      	movs	r3, #0
 8004602:	60bb      	str	r3, [r7, #8]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	60bb      	str	r3, [r7, #8]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f042 0201 	orr.w	r2, r2, #1
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800462c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004638:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800463c:	d172      	bne.n	8004724 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800463e:	7bfb      	ldrb	r3, [r7, #15]
 8004640:	2b22      	cmp	r3, #34	@ 0x22
 8004642:	d002      	beq.n	800464a <I2C_Slave_STOPF+0x6a>
 8004644:	7bfb      	ldrb	r3, [r7, #15]
 8004646:	2b2a      	cmp	r3, #42	@ 0x2a
 8004648:	d135      	bne.n	80046b6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	b29a      	uxth	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800465c:	b29b      	uxth	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d005      	beq.n	800466e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004666:	f043 0204 	orr.w	r2, r3, #4
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800467c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004682:	4618      	mov	r0, r3
 8004684:	f7fd ff4e 	bl	8002524 <HAL_DMA_GetState>
 8004688:	4603      	mov	r3, r0
 800468a:	2b01      	cmp	r3, #1
 800468c:	d049      	beq.n	8004722 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004692:	4a69      	ldr	r2, [pc, #420]	@ (8004838 <I2C_Slave_STOPF+0x258>)
 8004694:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800469a:	4618      	mov	r0, r3
 800469c:	f7fd feca 	bl	8002434 <HAL_DMA_Abort_IT>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d03d      	beq.n	8004722 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80046b0:	4610      	mov	r0, r2
 80046b2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046b4:	e035      	b.n	8004722 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	b29a      	uxth	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d005      	beq.n	80046da <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d2:	f043 0204 	orr.w	r2, r3, #4
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	685a      	ldr	r2, [r3, #4]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046e8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7fd ff18 	bl	8002524 <HAL_DMA_GetState>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d014      	beq.n	8004724 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046fe:	4a4e      	ldr	r2, [pc, #312]	@ (8004838 <I2C_Slave_STOPF+0x258>)
 8004700:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004706:	4618      	mov	r0, r3
 8004708:	f7fd fe94 	bl	8002434 <HAL_DMA_Abort_IT>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d008      	beq.n	8004724 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004716:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800471c:	4610      	mov	r0, r2
 800471e:	4798      	blx	r3
 8004720:	e000      	b.n	8004724 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004722:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004728:	b29b      	uxth	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d03e      	beq.n	80047ac <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	f003 0304 	and.w	r3, r3, #4
 8004738:	2b04      	cmp	r3, #4
 800473a:	d112      	bne.n	8004762 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	691a      	ldr	r2, [r3, #16]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004746:	b2d2      	uxtb	r2, r2
 8004748:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474e:	1c5a      	adds	r2, r3, #1
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004758:	b29b      	uxth	r3, r3
 800475a:	3b01      	subs	r3, #1
 800475c:	b29a      	uxth	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800476c:	2b40      	cmp	r3, #64	@ 0x40
 800476e:	d112      	bne.n	8004796 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	691a      	ldr	r2, [r3, #16]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477a:	b2d2      	uxtb	r2, r2
 800477c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004782:	1c5a      	adds	r2, r3, #1
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800478c:	b29b      	uxth	r3, r3
 800478e:	3b01      	subs	r3, #1
 8004790:	b29a      	uxth	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800479a:	b29b      	uxth	r3, r3
 800479c:	2b00      	cmp	r3, #0
 800479e:	d005      	beq.n	80047ac <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a4:	f043 0204 	orr.w	r2, r3, #4
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d003      	beq.n	80047bc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 f8b7 	bl	8004928 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80047ba:	e039      	b.n	8004830 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80047bc:	7bfb      	ldrb	r3, [r7, #15]
 80047be:	2b2a      	cmp	r3, #42	@ 0x2a
 80047c0:	d109      	bne.n	80047d6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2228      	movs	r2, #40	@ 0x28
 80047cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f7ff f812 	bl	80037fa <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b28      	cmp	r3, #40	@ 0x28
 80047e0:	d111      	bne.n	8004806 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a15      	ldr	r2, [pc, #84]	@ (800483c <I2C_Slave_STOPF+0x25c>)
 80047e6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2220      	movs	r2, #32
 80047f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7ff f811 	bl	8003826 <HAL_I2C_ListenCpltCallback>
}
 8004804:	e014      	b.n	8004830 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800480a:	2b22      	cmp	r3, #34	@ 0x22
 800480c:	d002      	beq.n	8004814 <I2C_Slave_STOPF+0x234>
 800480e:	7bfb      	ldrb	r3, [r7, #15]
 8004810:	2b22      	cmp	r3, #34	@ 0x22
 8004812:	d10d      	bne.n	8004830 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2220      	movs	r2, #32
 800481e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f7fe ffe5 	bl	80037fa <HAL_I2C_SlaveRxCpltCallback>
}
 8004830:	bf00      	nop
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	08004f8d 	.word	0x08004f8d
 800483c:	ffff0000 	.word	0xffff0000

08004840 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800484e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004854:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	2b08      	cmp	r3, #8
 800485a:	d002      	beq.n	8004862 <I2C_Slave_AF+0x22>
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	2b20      	cmp	r3, #32
 8004860:	d129      	bne.n	80048b6 <I2C_Slave_AF+0x76>
 8004862:	7bfb      	ldrb	r3, [r7, #15]
 8004864:	2b28      	cmp	r3, #40	@ 0x28
 8004866:	d126      	bne.n	80048b6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a2e      	ldr	r2, [pc, #184]	@ (8004924 <I2C_Slave_AF+0xe4>)
 800486c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	685a      	ldr	r2, [r3, #4]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800487c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004886:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004896:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2220      	movs	r2, #32
 80048a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f7fe ffb9 	bl	8003826 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80048b4:	e031      	b.n	800491a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80048b6:	7bfb      	ldrb	r3, [r7, #15]
 80048b8:	2b21      	cmp	r3, #33	@ 0x21
 80048ba:	d129      	bne.n	8004910 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a19      	ldr	r2, [pc, #100]	@ (8004924 <I2C_Slave_AF+0xe4>)
 80048c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2221      	movs	r2, #33	@ 0x21
 80048c6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2220      	movs	r2, #32
 80048cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	685a      	ldr	r2, [r3, #4]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80048e6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80048f0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004900:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7fe f8e4 	bl	8002ad0 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f7fe ff6d 	bl	80037e8 <HAL_I2C_SlaveTxCpltCallback>
}
 800490e:	e004      	b.n	800491a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004918:	615a      	str	r2, [r3, #20]
}
 800491a:	bf00      	nop
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	ffff0000 	.word	0xffff0000

08004928 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004936:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800493e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004940:	7bbb      	ldrb	r3, [r7, #14]
 8004942:	2b10      	cmp	r3, #16
 8004944:	d002      	beq.n	800494c <I2C_ITError+0x24>
 8004946:	7bbb      	ldrb	r3, [r7, #14]
 8004948:	2b40      	cmp	r3, #64	@ 0x40
 800494a:	d10a      	bne.n	8004962 <I2C_ITError+0x3a>
 800494c:	7bfb      	ldrb	r3, [r7, #15]
 800494e:	2b22      	cmp	r3, #34	@ 0x22
 8004950:	d107      	bne.n	8004962 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004960:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004962:	7bfb      	ldrb	r3, [r7, #15]
 8004964:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004968:	2b28      	cmp	r3, #40	@ 0x28
 800496a:	d107      	bne.n	800497c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2228      	movs	r2, #40	@ 0x28
 8004976:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800497a:	e015      	b.n	80049a8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004986:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800498a:	d00a      	beq.n	80049a2 <I2C_ITError+0x7a>
 800498c:	7bfb      	ldrb	r3, [r7, #15]
 800498e:	2b60      	cmp	r3, #96	@ 0x60
 8004990:	d007      	beq.n	80049a2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2220      	movs	r2, #32
 8004996:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049b6:	d162      	bne.n	8004a7e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	685a      	ldr	r2, [r3, #4]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049c6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049cc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d020      	beq.n	8004a18 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049da:	4a6a      	ldr	r2, [pc, #424]	@ (8004b84 <I2C_ITError+0x25c>)
 80049dc:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7fd fd26 	bl	8002434 <HAL_DMA_Abort_IT>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f000 8089 	beq.w	8004b02 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f022 0201 	bic.w	r2, r2, #1
 80049fe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2220      	movs	r2, #32
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004a12:	4610      	mov	r0, r2
 8004a14:	4798      	blx	r3
 8004a16:	e074      	b.n	8004b02 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a1c:	4a59      	ldr	r2, [pc, #356]	@ (8004b84 <I2C_ITError+0x25c>)
 8004a1e:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7fd fd05 	bl	8002434 <HAL_DMA_Abort_IT>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d068      	beq.n	8004b02 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a3a:	2b40      	cmp	r3, #64	@ 0x40
 8004a3c:	d10b      	bne.n	8004a56 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	691a      	ldr	r2, [r3, #16]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a48:	b2d2      	uxtb	r2, r2
 8004a4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a50:	1c5a      	adds	r2, r3, #1
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0201 	bic.w	r2, r2, #1
 8004a64:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2220      	movs	r2, #32
 8004a6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004a78:	4610      	mov	r0, r2
 8004a7a:	4798      	blx	r3
 8004a7c:	e041      	b.n	8004b02 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b60      	cmp	r3, #96	@ 0x60
 8004a88:	d125      	bne.n	8004ad6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2220      	movs	r2, #32
 8004a8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aa2:	2b40      	cmp	r3, #64	@ 0x40
 8004aa4:	d10b      	bne.n	8004abe <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	691a      	ldr	r2, [r3, #16]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab0:	b2d2      	uxtb	r2, r2
 8004ab2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab8:	1c5a      	adds	r2, r3, #1
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 0201 	bic.w	r2, r2, #1
 8004acc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f7fe fecd 	bl	800386e <HAL_I2C_AbortCpltCallback>
 8004ad4:	e015      	b.n	8004b02 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ae0:	2b40      	cmp	r3, #64	@ 0x40
 8004ae2:	d10b      	bne.n	8004afc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	691a      	ldr	r2, [r3, #16]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aee:	b2d2      	uxtb	r2, r2
 8004af0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af6:	1c5a      	adds	r2, r3, #1
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f7fe fead 	bl	800385c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b06:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d10e      	bne.n	8004b30 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d109      	bne.n	8004b30 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d104      	bne.n	8004b30 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d007      	beq.n	8004b40 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	685a      	ldr	r2, [r3, #4]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004b3e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b46:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4c:	f003 0304 	and.w	r3, r3, #4
 8004b50:	2b04      	cmp	r3, #4
 8004b52:	d113      	bne.n	8004b7c <I2C_ITError+0x254>
 8004b54:	7bfb      	ldrb	r3, [r7, #15]
 8004b56:	2b28      	cmp	r3, #40	@ 0x28
 8004b58:	d110      	bne.n	8004b7c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a0a      	ldr	r2, [pc, #40]	@ (8004b88 <I2C_ITError+0x260>)
 8004b5e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2220      	movs	r2, #32
 8004b6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7fe fe55 	bl	8003826 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b7c:	bf00      	nop
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	08004f8d 	.word	0x08004f8d
 8004b88:	ffff0000 	.word	0xffff0000

08004b8c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b088      	sub	sp, #32
 8004b90:	af02      	add	r7, sp, #8
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	607a      	str	r2, [r7, #4]
 8004b96:	603b      	str	r3, [r7, #0]
 8004b98:	460b      	mov	r3, r1
 8004b9a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ba0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	d006      	beq.n	8004bb6 <I2C_MasterRequestWrite+0x2a>
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d003      	beq.n	8004bb6 <I2C_MasterRequestWrite+0x2a>
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004bb4:	d108      	bne.n	8004bc8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bc4:	601a      	str	r2, [r3, #0]
 8004bc6:	e00b      	b.n	8004be0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bcc:	2b12      	cmp	r3, #18
 8004bce:	d107      	bne.n	8004be0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bde:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f000 fa75 	bl	80050dc <I2C_WaitOnFlagUntilTimeout>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00d      	beq.n	8004c14 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c06:	d103      	bne.n	8004c10 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c0e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e035      	b.n	8004c80 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c1c:	d108      	bne.n	8004c30 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c1e:	897b      	ldrh	r3, [r7, #10]
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	461a      	mov	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004c2c:	611a      	str	r2, [r3, #16]
 8004c2e:	e01b      	b.n	8004c68 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004c30:	897b      	ldrh	r3, [r7, #10]
 8004c32:	11db      	asrs	r3, r3, #7
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	f003 0306 	and.w	r3, r3, #6
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	f063 030f 	orn	r3, r3, #15
 8004c40:	b2da      	uxtb	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	490e      	ldr	r1, [pc, #56]	@ (8004c88 <I2C_MasterRequestWrite+0xfc>)
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f000 fabe 	bl	80051d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d001      	beq.n	8004c5e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e010      	b.n	8004c80 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004c5e:	897b      	ldrh	r3, [r7, #10]
 8004c60:	b2da      	uxtb	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	4907      	ldr	r1, [pc, #28]	@ (8004c8c <I2C_MasterRequestWrite+0x100>)
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f000 faae 	bl	80051d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e000      	b.n	8004c80 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3718      	adds	r7, #24
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	00010008 	.word	0x00010008
 8004c8c:	00010002 	.word	0x00010002

08004c90 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b088      	sub	sp, #32
 8004c94:	af02      	add	r7, sp, #8
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	4608      	mov	r0, r1
 8004c9a:	4611      	mov	r1, r2
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	817b      	strh	r3, [r7, #10]
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	813b      	strh	r3, [r7, #8]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cb8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	6a3b      	ldr	r3, [r7, #32]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f000 fa08 	bl	80050dc <I2C_WaitOnFlagUntilTimeout>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00d      	beq.n	8004cee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ce0:	d103      	bne.n	8004cea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ce8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e05f      	b.n	8004dae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004cee:	897b      	ldrh	r3, [r7, #10]
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004cfc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d00:	6a3a      	ldr	r2, [r7, #32]
 8004d02:	492d      	ldr	r1, [pc, #180]	@ (8004db8 <I2C_RequestMemoryWrite+0x128>)
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f000 fa63 	bl	80051d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d001      	beq.n	8004d14 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e04c      	b.n	8004dae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d14:	2300      	movs	r3, #0
 8004d16:	617b      	str	r3, [r7, #20]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	617b      	str	r3, [r7, #20]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	617b      	str	r3, [r7, #20]
 8004d28:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d2c:	6a39      	ldr	r1, [r7, #32]
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f000 faee 	bl	8005310 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00d      	beq.n	8004d56 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3e:	2b04      	cmp	r3, #4
 8004d40:	d107      	bne.n	8004d52 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d50:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e02b      	b.n	8004dae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d56:	88fb      	ldrh	r3, [r7, #6]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d105      	bne.n	8004d68 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d5c:	893b      	ldrh	r3, [r7, #8]
 8004d5e:	b2da      	uxtb	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	611a      	str	r2, [r3, #16]
 8004d66:	e021      	b.n	8004dac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d68:	893b      	ldrh	r3, [r7, #8]
 8004d6a:	0a1b      	lsrs	r3, r3, #8
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	b2da      	uxtb	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d78:	6a39      	ldr	r1, [r7, #32]
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f000 fac8 	bl	8005310 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00d      	beq.n	8004da2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d8a:	2b04      	cmp	r3, #4
 8004d8c:	d107      	bne.n	8004d9e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d9c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e005      	b.n	8004dae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004da2:	893b      	ldrh	r3, [r7, #8]
 8004da4:	b2da      	uxtb	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	00010002 	.word	0x00010002

08004dbc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b088      	sub	sp, #32
 8004dc0:	af02      	add	r7, sp, #8
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	4608      	mov	r0, r1
 8004dc6:	4611      	mov	r1, r2
 8004dc8:	461a      	mov	r2, r3
 8004dca:	4603      	mov	r3, r0
 8004dcc:	817b      	strh	r3, [r7, #10]
 8004dce:	460b      	mov	r3, r1
 8004dd0:	813b      	strh	r3, [r7, #8]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004de4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004df4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df8:	9300      	str	r3, [sp, #0]
 8004dfa:	6a3b      	ldr	r3, [r7, #32]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f000 f96a 	bl	80050dc <I2C_WaitOnFlagUntilTimeout>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00d      	beq.n	8004e2a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e1c:	d103      	bne.n	8004e26 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e24:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e0aa      	b.n	8004f80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e2a:	897b      	ldrh	r3, [r7, #10]
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	461a      	mov	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004e38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3c:	6a3a      	ldr	r2, [r7, #32]
 8004e3e:	4952      	ldr	r1, [pc, #328]	@ (8004f88 <I2C_RequestMemoryRead+0x1cc>)
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f000 f9c5 	bl	80051d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d001      	beq.n	8004e50 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e097      	b.n	8004f80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e50:	2300      	movs	r3, #0
 8004e52:	617b      	str	r3, [r7, #20]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	617b      	str	r3, [r7, #20]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	617b      	str	r3, [r7, #20]
 8004e64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e68:	6a39      	ldr	r1, [r7, #32]
 8004e6a:	68f8      	ldr	r0, [r7, #12]
 8004e6c:	f000 fa50 	bl	8005310 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00d      	beq.n	8004e92 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e7a:	2b04      	cmp	r3, #4
 8004e7c:	d107      	bne.n	8004e8e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e076      	b.n	8004f80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e92:	88fb      	ldrh	r3, [r7, #6]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d105      	bne.n	8004ea4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e98:	893b      	ldrh	r3, [r7, #8]
 8004e9a:	b2da      	uxtb	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	611a      	str	r2, [r3, #16]
 8004ea2:	e021      	b.n	8004ee8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004ea4:	893b      	ldrh	r3, [r7, #8]
 8004ea6:	0a1b      	lsrs	r3, r3, #8
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	b2da      	uxtb	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eb4:	6a39      	ldr	r1, [r7, #32]
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f000 fa2a 	bl	8005310 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00d      	beq.n	8004ede <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec6:	2b04      	cmp	r3, #4
 8004ec8:	d107      	bne.n	8004eda <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ed8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e050      	b.n	8004f80 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ede:	893b      	ldrh	r3, [r7, #8]
 8004ee0:	b2da      	uxtb	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ee8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eea:	6a39      	ldr	r1, [r7, #32]
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f000 fa0f 	bl	8005310 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00d      	beq.n	8004f14 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efc:	2b04      	cmp	r3, #4
 8004efe:	d107      	bne.n	8004f10 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f0e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e035      	b.n	8004f80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f22:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f26:	9300      	str	r3, [sp, #0]
 8004f28:	6a3b      	ldr	r3, [r7, #32]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f000 f8d3 	bl	80050dc <I2C_WaitOnFlagUntilTimeout>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00d      	beq.n	8004f58 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f4a:	d103      	bne.n	8004f54 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f52:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e013      	b.n	8004f80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004f58:	897b      	ldrh	r3, [r7, #10]
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	f043 0301 	orr.w	r3, r3, #1
 8004f60:	b2da      	uxtb	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6a:	6a3a      	ldr	r2, [r7, #32]
 8004f6c:	4906      	ldr	r1, [pc, #24]	@ (8004f88 <I2C_RequestMemoryRead+0x1cc>)
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f000 f92e 	bl	80051d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e000      	b.n	8004f80 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3718      	adds	r7, #24
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	00010002 	.word	0x00010002

08004f8c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f94:	2300      	movs	r3, #0
 8004f96:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f9c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fa4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004fa6:	4b4b      	ldr	r3, [pc, #300]	@ (80050d4 <I2C_DMAAbort+0x148>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	08db      	lsrs	r3, r3, #3
 8004fac:	4a4a      	ldr	r2, [pc, #296]	@ (80050d8 <I2C_DMAAbort+0x14c>)
 8004fae:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb2:	0a1a      	lsrs	r2, r3, #8
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	4413      	add	r3, r2
 8004fba:	00da      	lsls	r2, r3, #3
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d106      	bne.n	8004fd4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fca:	f043 0220 	orr.w	r2, r3, #32
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004fd2:	e00a      	b.n	8004fea <I2C_DMAAbort+0x5e>
    }
    count--;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fe4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fe8:	d0ea      	beq.n	8004fc0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d003      	beq.n	800500a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005006:	2200      	movs	r2, #0
 8005008:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005018:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	2200      	movs	r2, #0
 800501e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005024:	2b00      	cmp	r3, #0
 8005026:	d003      	beq.n	8005030 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800502c:	2200      	movs	r2, #0
 800502e:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005034:	2b00      	cmp	r3, #0
 8005036:	d003      	beq.n	8005040 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800503c:	2200      	movs	r2, #0
 800503e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f022 0201 	bic.w	r2, r2, #1
 800504e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005056:	b2db      	uxtb	r3, r3
 8005058:	2b60      	cmp	r3, #96	@ 0x60
 800505a:	d10e      	bne.n	800507a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	2220      	movs	r2, #32
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	2200      	movs	r2, #0
 8005070:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005072:	6978      	ldr	r0, [r7, #20]
 8005074:	f7fe fbfb 	bl	800386e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005078:	e027      	b.n	80050ca <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800507a:	7cfb      	ldrb	r3, [r7, #19]
 800507c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005080:	2b28      	cmp	r3, #40	@ 0x28
 8005082:	d117      	bne.n	80050b4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f042 0201 	orr.w	r2, r2, #1
 8005092:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80050a2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	2200      	movs	r2, #0
 80050a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	2228      	movs	r2, #40	@ 0x28
 80050ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80050b2:	e007      	b.n	80050c4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	2220      	movs	r2, #32
 80050b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80050c4:	6978      	ldr	r0, [r7, #20]
 80050c6:	f7fe fbc9 	bl	800385c <HAL_I2C_ErrorCallback>
}
 80050ca:	bf00      	nop
 80050cc:	3718      	adds	r7, #24
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	20000090 	.word	0x20000090
 80050d8:	14f8b589 	.word	0x14f8b589

080050dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	603b      	str	r3, [r7, #0]
 80050e8:	4613      	mov	r3, r2
 80050ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050ec:	e048      	b.n	8005180 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f4:	d044      	beq.n	8005180 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050f6:	f7fd f827 	bl	8002148 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	683a      	ldr	r2, [r7, #0]
 8005102:	429a      	cmp	r2, r3
 8005104:	d302      	bcc.n	800510c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d139      	bne.n	8005180 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	0c1b      	lsrs	r3, r3, #16
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b01      	cmp	r3, #1
 8005114:	d10d      	bne.n	8005132 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	695b      	ldr	r3, [r3, #20]
 800511c:	43da      	mvns	r2, r3
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	4013      	ands	r3, r2
 8005122:	b29b      	uxth	r3, r3
 8005124:	2b00      	cmp	r3, #0
 8005126:	bf0c      	ite	eq
 8005128:	2301      	moveq	r3, #1
 800512a:	2300      	movne	r3, #0
 800512c:	b2db      	uxtb	r3, r3
 800512e:	461a      	mov	r2, r3
 8005130:	e00c      	b.n	800514c <I2C_WaitOnFlagUntilTimeout+0x70>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	43da      	mvns	r2, r3
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	4013      	ands	r3, r2
 800513e:	b29b      	uxth	r3, r3
 8005140:	2b00      	cmp	r3, #0
 8005142:	bf0c      	ite	eq
 8005144:	2301      	moveq	r3, #1
 8005146:	2300      	movne	r3, #0
 8005148:	b2db      	uxtb	r3, r3
 800514a:	461a      	mov	r2, r3
 800514c:	79fb      	ldrb	r3, [r7, #7]
 800514e:	429a      	cmp	r2, r3
 8005150:	d116      	bne.n	8005180 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2220      	movs	r2, #32
 800515c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800516c:	f043 0220 	orr.w	r2, r3, #32
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e023      	b.n	80051c8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	0c1b      	lsrs	r3, r3, #16
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b01      	cmp	r3, #1
 8005188:	d10d      	bne.n	80051a6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	43da      	mvns	r2, r3
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	4013      	ands	r3, r2
 8005196:	b29b      	uxth	r3, r3
 8005198:	2b00      	cmp	r3, #0
 800519a:	bf0c      	ite	eq
 800519c:	2301      	moveq	r3, #1
 800519e:	2300      	movne	r3, #0
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	461a      	mov	r2, r3
 80051a4:	e00c      	b.n	80051c0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	43da      	mvns	r2, r3
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	4013      	ands	r3, r2
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	bf0c      	ite	eq
 80051b8:	2301      	moveq	r3, #1
 80051ba:	2300      	movne	r3, #0
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	461a      	mov	r2, r3
 80051c0:	79fb      	ldrb	r3, [r7, #7]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d093      	beq.n	80050ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
 80051dc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051de:	e071      	b.n	80052c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051ee:	d123      	bne.n	8005238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051fe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005208:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2220      	movs	r2, #32
 8005214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005224:	f043 0204 	orr.w	r2, r3, #4
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e067      	b.n	8005308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800523e:	d041      	beq.n	80052c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005240:	f7fc ff82 	bl	8002148 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	429a      	cmp	r2, r3
 800524e:	d302      	bcc.n	8005256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d136      	bne.n	80052c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	0c1b      	lsrs	r3, r3, #16
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b01      	cmp	r3, #1
 800525e:	d10c      	bne.n	800527a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	43da      	mvns	r2, r3
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	4013      	ands	r3, r2
 800526c:	b29b      	uxth	r3, r3
 800526e:	2b00      	cmp	r3, #0
 8005270:	bf14      	ite	ne
 8005272:	2301      	movne	r3, #1
 8005274:	2300      	moveq	r3, #0
 8005276:	b2db      	uxtb	r3, r3
 8005278:	e00b      	b.n	8005292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	43da      	mvns	r2, r3
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	4013      	ands	r3, r2
 8005286:	b29b      	uxth	r3, r3
 8005288:	2b00      	cmp	r3, #0
 800528a:	bf14      	ite	ne
 800528c:	2301      	movne	r3, #1
 800528e:	2300      	moveq	r3, #0
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d016      	beq.n	80052c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2220      	movs	r2, #32
 80052a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b0:	f043 0220 	orr.w	r2, r3, #32
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e021      	b.n	8005308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	0c1b      	lsrs	r3, r3, #16
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d10c      	bne.n	80052e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	695b      	ldr	r3, [r3, #20]
 80052d4:	43da      	mvns	r2, r3
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	4013      	ands	r3, r2
 80052da:	b29b      	uxth	r3, r3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	bf14      	ite	ne
 80052e0:	2301      	movne	r3, #1
 80052e2:	2300      	moveq	r3, #0
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	e00b      	b.n	8005300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	43da      	mvns	r2, r3
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	4013      	ands	r3, r2
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	bf14      	ite	ne
 80052fa:	2301      	movne	r3, #1
 80052fc:	2300      	moveq	r3, #0
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b00      	cmp	r3, #0
 8005302:	f47f af6d 	bne.w	80051e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800531c:	e034      	b.n	8005388 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f000 f915 	bl	800554e <I2C_IsAcknowledgeFailed>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e034      	b.n	8005398 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005334:	d028      	beq.n	8005388 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005336:	f7fc ff07 	bl	8002148 <HAL_GetTick>
 800533a:	4602      	mov	r2, r0
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	68ba      	ldr	r2, [r7, #8]
 8005342:	429a      	cmp	r2, r3
 8005344:	d302      	bcc.n	800534c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d11d      	bne.n	8005388 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005356:	2b80      	cmp	r3, #128	@ 0x80
 8005358:	d016      	beq.n	8005388 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2220      	movs	r2, #32
 8005364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005374:	f043 0220 	orr.w	r2, r3, #32
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e007      	b.n	8005398 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005392:	2b80      	cmp	r3, #128	@ 0x80
 8005394:	d1c3      	bne.n	800531e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053ac:	e034      	b.n	8005418 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	f000 f8cd 	bl	800554e <I2C_IsAcknowledgeFailed>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d001      	beq.n	80053be <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e034      	b.n	8005428 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c4:	d028      	beq.n	8005418 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053c6:	f7fc febf 	bl	8002148 <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	68ba      	ldr	r2, [r7, #8]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d302      	bcc.n	80053dc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d11d      	bne.n	8005418 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	f003 0304 	and.w	r3, r3, #4
 80053e6:	2b04      	cmp	r3, #4
 80053e8:	d016      	beq.n	8005418 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2220      	movs	r2, #32
 80053f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005404:	f043 0220 	orr.w	r2, r3, #32
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e007      	b.n	8005428 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	f003 0304 	and.w	r3, r3, #4
 8005422:	2b04      	cmp	r3, #4
 8005424:	d1c3      	bne.n	80053ae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005438:	2300      	movs	r3, #0
 800543a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800543c:	4b13      	ldr	r3, [pc, #76]	@ (800548c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	08db      	lsrs	r3, r3, #3
 8005442:	4a13      	ldr	r2, [pc, #76]	@ (8005490 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005444:	fba2 2303 	umull	r2, r3, r2, r3
 8005448:	0a1a      	lsrs	r2, r3, #8
 800544a:	4613      	mov	r3, r2
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	4413      	add	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	3b01      	subs	r3, #1
 8005456:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d107      	bne.n	800546e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005462:	f043 0220 	orr.w	r2, r3, #32
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e008      	b.n	8005480 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005478:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800547c:	d0e9      	beq.n	8005452 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3714      	adds	r7, #20
 8005484:	46bd      	mov	sp, r7
 8005486:	bc80      	pop	{r7}
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	20000090 	.word	0x20000090
 8005490:	14f8b589 	.word	0x14f8b589

08005494 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054a0:	e049      	b.n	8005536 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	f003 0310 	and.w	r3, r3, #16
 80054ac:	2b10      	cmp	r3, #16
 80054ae:	d119      	bne.n	80054e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f06f 0210 	mvn.w	r2, #16
 80054b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2220      	movs	r2, #32
 80054c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e030      	b.n	8005546 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054e4:	f7fc fe30 	bl	8002148 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d302      	bcc.n	80054fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d11d      	bne.n	8005536 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	695b      	ldr	r3, [r3, #20]
 8005500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005504:	2b40      	cmp	r3, #64	@ 0x40
 8005506:	d016      	beq.n	8005536 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2220      	movs	r2, #32
 8005512:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005522:	f043 0220 	orr.w	r2, r3, #32
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e007      	b.n	8005546 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005540:	2b40      	cmp	r3, #64	@ 0x40
 8005542:	d1ae      	bne.n	80054a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800554e:	b480      	push	{r7}
 8005550:	b083      	sub	sp, #12
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	695b      	ldr	r3, [r3, #20]
 800555c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005560:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005564:	d11b      	bne.n	800559e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800556e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2220      	movs	r2, #32
 800557a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800558a:	f043 0204 	orr.w	r2, r3, #4
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e000      	b.n	80055a0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bc80      	pop	{r7}
 80055a8:	4770      	bx	lr

080055aa <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b083      	sub	sp, #12
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b6:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80055ba:	d103      	bne.n	80055c4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80055c2:	e007      	b.n	80055d4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80055cc:	d102      	bne.n	80055d4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2208      	movs	r2, #8
 80055d2:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	bc80      	pop	{r7}
 80055dc:	4770      	bx	lr
	...

080055e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e272      	b.n	8005ad8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f000 8087 	beq.w	800570e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005600:	4b92      	ldr	r3, [pc, #584]	@ (800584c <HAL_RCC_OscConfig+0x26c>)
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f003 030c 	and.w	r3, r3, #12
 8005608:	2b04      	cmp	r3, #4
 800560a:	d00c      	beq.n	8005626 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800560c:	4b8f      	ldr	r3, [pc, #572]	@ (800584c <HAL_RCC_OscConfig+0x26c>)
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f003 030c 	and.w	r3, r3, #12
 8005614:	2b08      	cmp	r3, #8
 8005616:	d112      	bne.n	800563e <HAL_RCC_OscConfig+0x5e>
 8005618:	4b8c      	ldr	r3, [pc, #560]	@ (800584c <HAL_RCC_OscConfig+0x26c>)
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005620:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005624:	d10b      	bne.n	800563e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005626:	4b89      	ldr	r3, [pc, #548]	@ (800584c <HAL_RCC_OscConfig+0x26c>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d06c      	beq.n	800570c <HAL_RCC_OscConfig+0x12c>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d168      	bne.n	800570c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e24c      	b.n	8005ad8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005646:	d106      	bne.n	8005656 <HAL_RCC_OscConfig+0x76>
 8005648:	4b80      	ldr	r3, [pc, #512]	@ (800584c <HAL_RCC_OscConfig+0x26c>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a7f      	ldr	r2, [pc, #508]	@ (800584c <HAL_RCC_OscConfig+0x26c>)
 800564e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005652:	6013      	str	r3, [r2, #0]
 8005654:	e02e      	b.n	80056b4 <HAL_RCC_OscConfig+0xd4>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10c      	bne.n	8005678 <HAL_RCC_OscConfig+0x98>
 800565e:	4b7b      	ldr	r3, [pc, #492]	@ (800584c <HAL_RCC_OscConfig+0x26c>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a7a      	ldr	r2, [pc, #488]	@ (800584c <HAL_RCC_OscConfig+0x26c>)
 8005664:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005668:	6013      	str	r3, [r2, #0]
 800566a:	4b78      	ldr	r3, [pc, #480]	@ (800584c <HAL_RCC_OscConfig+0x26c>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a77      	ldr	r2, [pc, #476]	@ (800584c <HAL_RCC_OscConfig+0x26c>)
 8005670:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005674:	6013      	str	r3, [r2, #0]
 8005676:	e01d      	b.n	80056b4 <HAL_RCC_OscConfig+0xd4>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005680:	d10c      	bne.n	800569c <HAL_RCC_OscConfig+0xbc>
 8005682:	4b72      	ldr	r3, [pc, #456]	@ (800584c <HAL_RCC_OscConfig+0x26c>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a71      	ldr	r2, [pc, #452]	@ (800584c <HAL_RCC_OscConfig+0x26c>)
 8005688:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800568c:	6013      	str	r3, [r2, #0]
 800568e:	4b6f      	ldr	r3, [pc, #444]	@ (800584c <HAL_RCC_OscConfig+0x26c>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a6e      	ldr	r2, [pc, #440]	@ (800584c <HAL_RCC_OscConfig+0x26c>)
 8005694:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005698:	6013      	str	r3, [r2, #0]
 800569a:	e00b      	b.n	80056b4 <HAL_RCC_OscConfig+0xd4>
 800569c:	4b6b      	ldr	r3, [pc, #428]	@ (800584c <HAL_RCC_OscConfig+0x26c>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a6a      	ldr	r2, [pc, #424]	@ (800584c <HAL_RCC_OscConfig+0x26c>)
 80056a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056a6:	6013      	str	r3, [r2, #0]
 80056a8:	4b68      	ldr	r3, [pc, #416]	@ (800584c <HAL_RCC_OscConfig+0x26c>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a67      	ldr	r2, [pc, #412]	@ (800584c <HAL_RCC_OscConfig+0x26c>)
 80056ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d013      	beq.n	80056e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056bc:	f7fc fd44 	bl	8002148 <HAL_GetTick>
 80056c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056c2:	e008      	b.n	80056d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056c4:	f7fc fd40 	bl	8002148 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	2b64      	cmp	r3, #100	@ 0x64
 80056d0:	d901      	bls.n	80056d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e200      	b.n	8005ad8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056d6:	4b5d      	ldr	r3, [pc, #372]	@ (800584c <HAL_RCC_OscConfig+0x26c>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d0f0      	beq.n	80056c4 <HAL_RCC_OscConfig+0xe4>
 80056e2:	e014      	b.n	800570e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056e4:	f7fc fd30 	bl	8002148 <HAL_GetTick>
 80056e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056ea:	e008      	b.n	80056fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056ec:	f7fc fd2c 	bl	8002148 <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	2b64      	cmp	r3, #100	@ 0x64
 80056f8:	d901      	bls.n	80056fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e1ec      	b.n	8005ad8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056fe:	4b53      	ldr	r3, [pc, #332]	@ (800584c <HAL_RCC_OscConfig+0x26c>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1f0      	bne.n	80056ec <HAL_RCC_OscConfig+0x10c>
 800570a:	e000      	b.n	800570e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800570c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0302 	and.w	r3, r3, #2
 8005716:	2b00      	cmp	r3, #0
 8005718:	d063      	beq.n	80057e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800571a:	4b4c      	ldr	r3, [pc, #304]	@ (800584c <HAL_RCC_OscConfig+0x26c>)
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f003 030c 	and.w	r3, r3, #12
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00b      	beq.n	800573e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005726:	4b49      	ldr	r3, [pc, #292]	@ (800584c <HAL_RCC_OscConfig+0x26c>)
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	f003 030c 	and.w	r3, r3, #12
 800572e:	2b08      	cmp	r3, #8
 8005730:	d11c      	bne.n	800576c <HAL_RCC_OscConfig+0x18c>
 8005732:	4b46      	ldr	r3, [pc, #280]	@ (800584c <HAL_RCC_OscConfig+0x26c>)
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d116      	bne.n	800576c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800573e:	4b43      	ldr	r3, [pc, #268]	@ (800584c <HAL_RCC_OscConfig+0x26c>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0302 	and.w	r3, r3, #2
 8005746:	2b00      	cmp	r3, #0
 8005748:	d005      	beq.n	8005756 <HAL_RCC_OscConfig+0x176>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	2b01      	cmp	r3, #1
 8005750:	d001      	beq.n	8005756 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e1c0      	b.n	8005ad8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005756:	4b3d      	ldr	r3, [pc, #244]	@ (800584c <HAL_RCC_OscConfig+0x26c>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	00db      	lsls	r3, r3, #3
 8005764:	4939      	ldr	r1, [pc, #228]	@ (800584c <HAL_RCC_OscConfig+0x26c>)
 8005766:	4313      	orrs	r3, r2
 8005768:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800576a:	e03a      	b.n	80057e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d020      	beq.n	80057b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005774:	4b36      	ldr	r3, [pc, #216]	@ (8005850 <HAL_RCC_OscConfig+0x270>)
 8005776:	2201      	movs	r2, #1
 8005778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800577a:	f7fc fce5 	bl	8002148 <HAL_GetTick>
 800577e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005780:	e008      	b.n	8005794 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005782:	f7fc fce1 	bl	8002148 <HAL_GetTick>
 8005786:	4602      	mov	r2, r0
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	2b02      	cmp	r3, #2
 800578e:	d901      	bls.n	8005794 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e1a1      	b.n	8005ad8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005794:	4b2d      	ldr	r3, [pc, #180]	@ (800584c <HAL_RCC_OscConfig+0x26c>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0302 	and.w	r3, r3, #2
 800579c:	2b00      	cmp	r3, #0
 800579e:	d0f0      	beq.n	8005782 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057a0:	4b2a      	ldr	r3, [pc, #168]	@ (800584c <HAL_RCC_OscConfig+0x26c>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	695b      	ldr	r3, [r3, #20]
 80057ac:	00db      	lsls	r3, r3, #3
 80057ae:	4927      	ldr	r1, [pc, #156]	@ (800584c <HAL_RCC_OscConfig+0x26c>)
 80057b0:	4313      	orrs	r3, r2
 80057b2:	600b      	str	r3, [r1, #0]
 80057b4:	e015      	b.n	80057e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057b6:	4b26      	ldr	r3, [pc, #152]	@ (8005850 <HAL_RCC_OscConfig+0x270>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057bc:	f7fc fcc4 	bl	8002148 <HAL_GetTick>
 80057c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057c2:	e008      	b.n	80057d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057c4:	f7fc fcc0 	bl	8002148 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d901      	bls.n	80057d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e180      	b.n	8005ad8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057d6:	4b1d      	ldr	r3, [pc, #116]	@ (800584c <HAL_RCC_OscConfig+0x26c>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0302 	and.w	r3, r3, #2
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1f0      	bne.n	80057c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0308 	and.w	r3, r3, #8
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d03a      	beq.n	8005864 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d019      	beq.n	800582a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057f6:	4b17      	ldr	r3, [pc, #92]	@ (8005854 <HAL_RCC_OscConfig+0x274>)
 80057f8:	2201      	movs	r2, #1
 80057fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057fc:	f7fc fca4 	bl	8002148 <HAL_GetTick>
 8005800:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005802:	e008      	b.n	8005816 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005804:	f7fc fca0 	bl	8002148 <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	2b02      	cmp	r3, #2
 8005810:	d901      	bls.n	8005816 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e160      	b.n	8005ad8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005816:	4b0d      	ldr	r3, [pc, #52]	@ (800584c <HAL_RCC_OscConfig+0x26c>)
 8005818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800581a:	f003 0302 	and.w	r3, r3, #2
 800581e:	2b00      	cmp	r3, #0
 8005820:	d0f0      	beq.n	8005804 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005822:	2001      	movs	r0, #1
 8005824:	f000 face 	bl	8005dc4 <RCC_Delay>
 8005828:	e01c      	b.n	8005864 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800582a:	4b0a      	ldr	r3, [pc, #40]	@ (8005854 <HAL_RCC_OscConfig+0x274>)
 800582c:	2200      	movs	r2, #0
 800582e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005830:	f7fc fc8a 	bl	8002148 <HAL_GetTick>
 8005834:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005836:	e00f      	b.n	8005858 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005838:	f7fc fc86 	bl	8002148 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	2b02      	cmp	r3, #2
 8005844:	d908      	bls.n	8005858 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e146      	b.n	8005ad8 <HAL_RCC_OscConfig+0x4f8>
 800584a:	bf00      	nop
 800584c:	40021000 	.word	0x40021000
 8005850:	42420000 	.word	0x42420000
 8005854:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005858:	4b92      	ldr	r3, [pc, #584]	@ (8005aa4 <HAL_RCC_OscConfig+0x4c4>)
 800585a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800585c:	f003 0302 	and.w	r3, r3, #2
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1e9      	bne.n	8005838 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0304 	and.w	r3, r3, #4
 800586c:	2b00      	cmp	r3, #0
 800586e:	f000 80a6 	beq.w	80059be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005872:	2300      	movs	r3, #0
 8005874:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005876:	4b8b      	ldr	r3, [pc, #556]	@ (8005aa4 <HAL_RCC_OscConfig+0x4c4>)
 8005878:	69db      	ldr	r3, [r3, #28]
 800587a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d10d      	bne.n	800589e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005882:	4b88      	ldr	r3, [pc, #544]	@ (8005aa4 <HAL_RCC_OscConfig+0x4c4>)
 8005884:	69db      	ldr	r3, [r3, #28]
 8005886:	4a87      	ldr	r2, [pc, #540]	@ (8005aa4 <HAL_RCC_OscConfig+0x4c4>)
 8005888:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800588c:	61d3      	str	r3, [r2, #28]
 800588e:	4b85      	ldr	r3, [pc, #532]	@ (8005aa4 <HAL_RCC_OscConfig+0x4c4>)
 8005890:	69db      	ldr	r3, [r3, #28]
 8005892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005896:	60bb      	str	r3, [r7, #8]
 8005898:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800589a:	2301      	movs	r3, #1
 800589c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800589e:	4b82      	ldr	r3, [pc, #520]	@ (8005aa8 <HAL_RCC_OscConfig+0x4c8>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d118      	bne.n	80058dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058aa:	4b7f      	ldr	r3, [pc, #508]	@ (8005aa8 <HAL_RCC_OscConfig+0x4c8>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a7e      	ldr	r2, [pc, #504]	@ (8005aa8 <HAL_RCC_OscConfig+0x4c8>)
 80058b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058b6:	f7fc fc47 	bl	8002148 <HAL_GetTick>
 80058ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058bc:	e008      	b.n	80058d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058be:	f7fc fc43 	bl	8002148 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	2b64      	cmp	r3, #100	@ 0x64
 80058ca:	d901      	bls.n	80058d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e103      	b.n	8005ad8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058d0:	4b75      	ldr	r3, [pc, #468]	@ (8005aa8 <HAL_RCC_OscConfig+0x4c8>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d0f0      	beq.n	80058be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d106      	bne.n	80058f2 <HAL_RCC_OscConfig+0x312>
 80058e4:	4b6f      	ldr	r3, [pc, #444]	@ (8005aa4 <HAL_RCC_OscConfig+0x4c4>)
 80058e6:	6a1b      	ldr	r3, [r3, #32]
 80058e8:	4a6e      	ldr	r2, [pc, #440]	@ (8005aa4 <HAL_RCC_OscConfig+0x4c4>)
 80058ea:	f043 0301 	orr.w	r3, r3, #1
 80058ee:	6213      	str	r3, [r2, #32]
 80058f0:	e02d      	b.n	800594e <HAL_RCC_OscConfig+0x36e>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10c      	bne.n	8005914 <HAL_RCC_OscConfig+0x334>
 80058fa:	4b6a      	ldr	r3, [pc, #424]	@ (8005aa4 <HAL_RCC_OscConfig+0x4c4>)
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	4a69      	ldr	r2, [pc, #420]	@ (8005aa4 <HAL_RCC_OscConfig+0x4c4>)
 8005900:	f023 0301 	bic.w	r3, r3, #1
 8005904:	6213      	str	r3, [r2, #32]
 8005906:	4b67      	ldr	r3, [pc, #412]	@ (8005aa4 <HAL_RCC_OscConfig+0x4c4>)
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	4a66      	ldr	r2, [pc, #408]	@ (8005aa4 <HAL_RCC_OscConfig+0x4c4>)
 800590c:	f023 0304 	bic.w	r3, r3, #4
 8005910:	6213      	str	r3, [r2, #32]
 8005912:	e01c      	b.n	800594e <HAL_RCC_OscConfig+0x36e>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	2b05      	cmp	r3, #5
 800591a:	d10c      	bne.n	8005936 <HAL_RCC_OscConfig+0x356>
 800591c:	4b61      	ldr	r3, [pc, #388]	@ (8005aa4 <HAL_RCC_OscConfig+0x4c4>)
 800591e:	6a1b      	ldr	r3, [r3, #32]
 8005920:	4a60      	ldr	r2, [pc, #384]	@ (8005aa4 <HAL_RCC_OscConfig+0x4c4>)
 8005922:	f043 0304 	orr.w	r3, r3, #4
 8005926:	6213      	str	r3, [r2, #32]
 8005928:	4b5e      	ldr	r3, [pc, #376]	@ (8005aa4 <HAL_RCC_OscConfig+0x4c4>)
 800592a:	6a1b      	ldr	r3, [r3, #32]
 800592c:	4a5d      	ldr	r2, [pc, #372]	@ (8005aa4 <HAL_RCC_OscConfig+0x4c4>)
 800592e:	f043 0301 	orr.w	r3, r3, #1
 8005932:	6213      	str	r3, [r2, #32]
 8005934:	e00b      	b.n	800594e <HAL_RCC_OscConfig+0x36e>
 8005936:	4b5b      	ldr	r3, [pc, #364]	@ (8005aa4 <HAL_RCC_OscConfig+0x4c4>)
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	4a5a      	ldr	r2, [pc, #360]	@ (8005aa4 <HAL_RCC_OscConfig+0x4c4>)
 800593c:	f023 0301 	bic.w	r3, r3, #1
 8005940:	6213      	str	r3, [r2, #32]
 8005942:	4b58      	ldr	r3, [pc, #352]	@ (8005aa4 <HAL_RCC_OscConfig+0x4c4>)
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	4a57      	ldr	r2, [pc, #348]	@ (8005aa4 <HAL_RCC_OscConfig+0x4c4>)
 8005948:	f023 0304 	bic.w	r3, r3, #4
 800594c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d015      	beq.n	8005982 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005956:	f7fc fbf7 	bl	8002148 <HAL_GetTick>
 800595a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800595c:	e00a      	b.n	8005974 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800595e:	f7fc fbf3 	bl	8002148 <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	f241 3288 	movw	r2, #5000	@ 0x1388
 800596c:	4293      	cmp	r3, r2
 800596e:	d901      	bls.n	8005974 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	e0b1      	b.n	8005ad8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005974:	4b4b      	ldr	r3, [pc, #300]	@ (8005aa4 <HAL_RCC_OscConfig+0x4c4>)
 8005976:	6a1b      	ldr	r3, [r3, #32]
 8005978:	f003 0302 	and.w	r3, r3, #2
 800597c:	2b00      	cmp	r3, #0
 800597e:	d0ee      	beq.n	800595e <HAL_RCC_OscConfig+0x37e>
 8005980:	e014      	b.n	80059ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005982:	f7fc fbe1 	bl	8002148 <HAL_GetTick>
 8005986:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005988:	e00a      	b.n	80059a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800598a:	f7fc fbdd 	bl	8002148 <HAL_GetTick>
 800598e:	4602      	mov	r2, r0
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005998:	4293      	cmp	r3, r2
 800599a:	d901      	bls.n	80059a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e09b      	b.n	8005ad8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059a0:	4b40      	ldr	r3, [pc, #256]	@ (8005aa4 <HAL_RCC_OscConfig+0x4c4>)
 80059a2:	6a1b      	ldr	r3, [r3, #32]
 80059a4:	f003 0302 	and.w	r3, r3, #2
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1ee      	bne.n	800598a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80059ac:	7dfb      	ldrb	r3, [r7, #23]
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d105      	bne.n	80059be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059b2:	4b3c      	ldr	r3, [pc, #240]	@ (8005aa4 <HAL_RCC_OscConfig+0x4c4>)
 80059b4:	69db      	ldr	r3, [r3, #28]
 80059b6:	4a3b      	ldr	r2, [pc, #236]	@ (8005aa4 <HAL_RCC_OscConfig+0x4c4>)
 80059b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f000 8087 	beq.w	8005ad6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059c8:	4b36      	ldr	r3, [pc, #216]	@ (8005aa4 <HAL_RCC_OscConfig+0x4c4>)
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f003 030c 	and.w	r3, r3, #12
 80059d0:	2b08      	cmp	r3, #8
 80059d2:	d061      	beq.n	8005a98 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	69db      	ldr	r3, [r3, #28]
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d146      	bne.n	8005a6a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059dc:	4b33      	ldr	r3, [pc, #204]	@ (8005aac <HAL_RCC_OscConfig+0x4cc>)
 80059de:	2200      	movs	r2, #0
 80059e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059e2:	f7fc fbb1 	bl	8002148 <HAL_GetTick>
 80059e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059e8:	e008      	b.n	80059fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059ea:	f7fc fbad 	bl	8002148 <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d901      	bls.n	80059fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e06d      	b.n	8005ad8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059fc:	4b29      	ldr	r3, [pc, #164]	@ (8005aa4 <HAL_RCC_OscConfig+0x4c4>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1f0      	bne.n	80059ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a1b      	ldr	r3, [r3, #32]
 8005a0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a10:	d108      	bne.n	8005a24 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005a12:	4b24      	ldr	r3, [pc, #144]	@ (8005aa4 <HAL_RCC_OscConfig+0x4c4>)
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	4921      	ldr	r1, [pc, #132]	@ (8005aa4 <HAL_RCC_OscConfig+0x4c4>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a24:	4b1f      	ldr	r3, [pc, #124]	@ (8005aa4 <HAL_RCC_OscConfig+0x4c4>)
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a19      	ldr	r1, [r3, #32]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a34:	430b      	orrs	r3, r1
 8005a36:	491b      	ldr	r1, [pc, #108]	@ (8005aa4 <HAL_RCC_OscConfig+0x4c4>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a3c:	4b1b      	ldr	r3, [pc, #108]	@ (8005aac <HAL_RCC_OscConfig+0x4cc>)
 8005a3e:	2201      	movs	r2, #1
 8005a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a42:	f7fc fb81 	bl	8002148 <HAL_GetTick>
 8005a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a48:	e008      	b.n	8005a5c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a4a:	f7fc fb7d 	bl	8002148 <HAL_GetTick>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d901      	bls.n	8005a5c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e03d      	b.n	8005ad8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a5c:	4b11      	ldr	r3, [pc, #68]	@ (8005aa4 <HAL_RCC_OscConfig+0x4c4>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d0f0      	beq.n	8005a4a <HAL_RCC_OscConfig+0x46a>
 8005a68:	e035      	b.n	8005ad6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a6a:	4b10      	ldr	r3, [pc, #64]	@ (8005aac <HAL_RCC_OscConfig+0x4cc>)
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a70:	f7fc fb6a 	bl	8002148 <HAL_GetTick>
 8005a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a76:	e008      	b.n	8005a8a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a78:	f7fc fb66 	bl	8002148 <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d901      	bls.n	8005a8a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e026      	b.n	8005ad8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a8a:	4b06      	ldr	r3, [pc, #24]	@ (8005aa4 <HAL_RCC_OscConfig+0x4c4>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1f0      	bne.n	8005a78 <HAL_RCC_OscConfig+0x498>
 8005a96:	e01e      	b.n	8005ad6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	69db      	ldr	r3, [r3, #28]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d107      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e019      	b.n	8005ad8 <HAL_RCC_OscConfig+0x4f8>
 8005aa4:	40021000 	.word	0x40021000
 8005aa8:	40007000 	.word	0x40007000
 8005aac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8005ae0 <HAL_RCC_OscConfig+0x500>)
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a1b      	ldr	r3, [r3, #32]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d106      	bne.n	8005ad2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d001      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e000      	b.n	8005ad8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3718      	adds	r7, #24
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	40021000 	.word	0x40021000

08005ae4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d101      	bne.n	8005af8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e0d0      	b.n	8005c9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005af8:	4b6a      	ldr	r3, [pc, #424]	@ (8005ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0307 	and.w	r3, r3, #7
 8005b00:	683a      	ldr	r2, [r7, #0]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d910      	bls.n	8005b28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b06:	4b67      	ldr	r3, [pc, #412]	@ (8005ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f023 0207 	bic.w	r2, r3, #7
 8005b0e:	4965      	ldr	r1, [pc, #404]	@ (8005ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b16:	4b63      	ldr	r3, [pc, #396]	@ (8005ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0307 	and.w	r3, r3, #7
 8005b1e:	683a      	ldr	r2, [r7, #0]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d001      	beq.n	8005b28 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e0b8      	b.n	8005c9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0302 	and.w	r3, r3, #2
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d020      	beq.n	8005b76 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0304 	and.w	r3, r3, #4
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d005      	beq.n	8005b4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b40:	4b59      	ldr	r3, [pc, #356]	@ (8005ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	4a58      	ldr	r2, [pc, #352]	@ (8005ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b46:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005b4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0308 	and.w	r3, r3, #8
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d005      	beq.n	8005b64 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b58:	4b53      	ldr	r3, [pc, #332]	@ (8005ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	4a52      	ldr	r2, [pc, #328]	@ (8005ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b5e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005b62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b64:	4b50      	ldr	r3, [pc, #320]	@ (8005ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	494d      	ldr	r1, [pc, #308]	@ (8005ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b72:	4313      	orrs	r3, r2
 8005b74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d040      	beq.n	8005c04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d107      	bne.n	8005b9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b8a:	4b47      	ldr	r3, [pc, #284]	@ (8005ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d115      	bne.n	8005bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e07f      	b.n	8005c9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d107      	bne.n	8005bb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ba2:	4b41      	ldr	r3, [pc, #260]	@ (8005ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d109      	bne.n	8005bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e073      	b.n	8005c9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bb2:	4b3d      	ldr	r3, [pc, #244]	@ (8005ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0302 	and.w	r3, r3, #2
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d101      	bne.n	8005bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e06b      	b.n	8005c9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bc2:	4b39      	ldr	r3, [pc, #228]	@ (8005ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	f023 0203 	bic.w	r2, r3, #3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	4936      	ldr	r1, [pc, #216]	@ (8005ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005bd4:	f7fc fab8 	bl	8002148 <HAL_GetTick>
 8005bd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bda:	e00a      	b.n	8005bf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bdc:	f7fc fab4 	bl	8002148 <HAL_GetTick>
 8005be0:	4602      	mov	r2, r0
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d901      	bls.n	8005bf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e053      	b.n	8005c9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bf2:	4b2d      	ldr	r3, [pc, #180]	@ (8005ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	f003 020c 	and.w	r2, r3, #12
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d1eb      	bne.n	8005bdc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c04:	4b27      	ldr	r3, [pc, #156]	@ (8005ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 0307 	and.w	r3, r3, #7
 8005c0c:	683a      	ldr	r2, [r7, #0]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d210      	bcs.n	8005c34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c12:	4b24      	ldr	r3, [pc, #144]	@ (8005ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f023 0207 	bic.w	r2, r3, #7
 8005c1a:	4922      	ldr	r1, [pc, #136]	@ (8005ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c22:	4b20      	ldr	r3, [pc, #128]	@ (8005ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0307 	and.w	r3, r3, #7
 8005c2a:	683a      	ldr	r2, [r7, #0]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d001      	beq.n	8005c34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e032      	b.n	8005c9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 0304 	and.w	r3, r3, #4
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d008      	beq.n	8005c52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c40:	4b19      	ldr	r3, [pc, #100]	@ (8005ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	4916      	ldr	r1, [pc, #88]	@ (8005ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0308 	and.w	r3, r3, #8
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d009      	beq.n	8005c72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005c5e:	4b12      	ldr	r3, [pc, #72]	@ (8005ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	00db      	lsls	r3, r3, #3
 8005c6c:	490e      	ldr	r1, [pc, #56]	@ (8005ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005c72:	f000 f821 	bl	8005cb8 <HAL_RCC_GetSysClockFreq>
 8005c76:	4602      	mov	r2, r0
 8005c78:	4b0b      	ldr	r3, [pc, #44]	@ (8005ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	091b      	lsrs	r3, r3, #4
 8005c7e:	f003 030f 	and.w	r3, r3, #15
 8005c82:	490a      	ldr	r1, [pc, #40]	@ (8005cac <HAL_RCC_ClockConfig+0x1c8>)
 8005c84:	5ccb      	ldrb	r3, [r1, r3]
 8005c86:	fa22 f303 	lsr.w	r3, r2, r3
 8005c8a:	4a09      	ldr	r2, [pc, #36]	@ (8005cb0 <HAL_RCC_ClockConfig+0x1cc>)
 8005c8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005c8e:	4b09      	ldr	r3, [pc, #36]	@ (8005cb4 <HAL_RCC_ClockConfig+0x1d0>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7fc fa16 	bl	80020c4 <HAL_InitTick>

  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	40022000 	.word	0x40022000
 8005ca8:	40021000 	.word	0x40021000
 8005cac:	08009e98 	.word	0x08009e98
 8005cb0:	20000090 	.word	0x20000090
 8005cb4:	20000094 	.word	0x20000094

08005cb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b087      	sub	sp, #28
 8005cbc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	60fb      	str	r3, [r7, #12]
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	60bb      	str	r3, [r7, #8]
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	617b      	str	r3, [r7, #20]
 8005cca:	2300      	movs	r3, #0
 8005ccc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005cd2:	4b1e      	ldr	r3, [pc, #120]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0x94>)
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f003 030c 	and.w	r3, r3, #12
 8005cde:	2b04      	cmp	r3, #4
 8005ce0:	d002      	beq.n	8005ce8 <HAL_RCC_GetSysClockFreq+0x30>
 8005ce2:	2b08      	cmp	r3, #8
 8005ce4:	d003      	beq.n	8005cee <HAL_RCC_GetSysClockFreq+0x36>
 8005ce6:	e027      	b.n	8005d38 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005ce8:	4b19      	ldr	r3, [pc, #100]	@ (8005d50 <HAL_RCC_GetSysClockFreq+0x98>)
 8005cea:	613b      	str	r3, [r7, #16]
      break;
 8005cec:	e027      	b.n	8005d3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	0c9b      	lsrs	r3, r3, #18
 8005cf2:	f003 030f 	and.w	r3, r3, #15
 8005cf6:	4a17      	ldr	r2, [pc, #92]	@ (8005d54 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005cf8:	5cd3      	ldrb	r3, [r2, r3]
 8005cfa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d010      	beq.n	8005d28 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005d06:	4b11      	ldr	r3, [pc, #68]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0x94>)
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	0c5b      	lsrs	r3, r3, #17
 8005d0c:	f003 0301 	and.w	r3, r3, #1
 8005d10:	4a11      	ldr	r2, [pc, #68]	@ (8005d58 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005d12:	5cd3      	ldrb	r3, [r2, r3]
 8005d14:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a0d      	ldr	r2, [pc, #52]	@ (8005d50 <HAL_RCC_GetSysClockFreq+0x98>)
 8005d1a:	fb03 f202 	mul.w	r2, r3, r2
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d24:	617b      	str	r3, [r7, #20]
 8005d26:	e004      	b.n	8005d32 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a0c      	ldr	r2, [pc, #48]	@ (8005d5c <HAL_RCC_GetSysClockFreq+0xa4>)
 8005d2c:	fb02 f303 	mul.w	r3, r2, r3
 8005d30:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	613b      	str	r3, [r7, #16]
      break;
 8005d36:	e002      	b.n	8005d3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005d38:	4b05      	ldr	r3, [pc, #20]	@ (8005d50 <HAL_RCC_GetSysClockFreq+0x98>)
 8005d3a:	613b      	str	r3, [r7, #16]
      break;
 8005d3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d3e:	693b      	ldr	r3, [r7, #16]
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	371c      	adds	r7, #28
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bc80      	pop	{r7}
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	40021000 	.word	0x40021000
 8005d50:	007a1200 	.word	0x007a1200
 8005d54:	08009eb0 	.word	0x08009eb0
 8005d58:	08009ec0 	.word	0x08009ec0
 8005d5c:	003d0900 	.word	0x003d0900

08005d60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d60:	b480      	push	{r7}
 8005d62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d64:	4b02      	ldr	r3, [pc, #8]	@ (8005d70 <HAL_RCC_GetHCLKFreq+0x10>)
 8005d66:	681b      	ldr	r3, [r3, #0]
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bc80      	pop	{r7}
 8005d6e:	4770      	bx	lr
 8005d70:	20000090 	.word	0x20000090

08005d74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005d78:	f7ff fff2 	bl	8005d60 <HAL_RCC_GetHCLKFreq>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	4b05      	ldr	r3, [pc, #20]	@ (8005d94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	0a1b      	lsrs	r3, r3, #8
 8005d84:	f003 0307 	and.w	r3, r3, #7
 8005d88:	4903      	ldr	r1, [pc, #12]	@ (8005d98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d8a:	5ccb      	ldrb	r3, [r1, r3]
 8005d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	40021000 	.word	0x40021000
 8005d98:	08009ea8 	.word	0x08009ea8

08005d9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005da0:	f7ff ffde 	bl	8005d60 <HAL_RCC_GetHCLKFreq>
 8005da4:	4602      	mov	r2, r0
 8005da6:	4b05      	ldr	r3, [pc, #20]	@ (8005dbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	0adb      	lsrs	r3, r3, #11
 8005dac:	f003 0307 	and.w	r3, r3, #7
 8005db0:	4903      	ldr	r1, [pc, #12]	@ (8005dc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005db2:	5ccb      	ldrb	r3, [r1, r3]
 8005db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	40021000 	.word	0x40021000
 8005dc0:	08009ea8 	.word	0x08009ea8

08005dc4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8005df8 <RCC_Delay+0x34>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a0a      	ldr	r2, [pc, #40]	@ (8005dfc <RCC_Delay+0x38>)
 8005dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd6:	0a5b      	lsrs	r3, r3, #9
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	fb02 f303 	mul.w	r3, r2, r3
 8005dde:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005de0:	bf00      	nop
  }
  while (Delay --);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	1e5a      	subs	r2, r3, #1
 8005de6:	60fa      	str	r2, [r7, #12]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1f9      	bne.n	8005de0 <RCC_Delay+0x1c>
}
 8005dec:	bf00      	nop
 8005dee:	bf00      	nop
 8005df0:	3714      	adds	r7, #20
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bc80      	pop	{r7}
 8005df6:	4770      	bx	lr
 8005df8:	20000090 	.word	0x20000090
 8005dfc:	10624dd3 	.word	0x10624dd3

08005e00 <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	460b      	mov	r3, r1
 8005e0a:	607a      	str	r2, [r7, #4]
 8005e0c:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d101      	bne.n	8005e18 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e062      	b.n	8005ede <HAL_MultiProcessor_Init+0xde>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d106      	bne.n	8005e32 <HAL_MultiProcessor_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e2c:	68f8      	ldr	r0, [r7, #12]
 8005e2e:	f7fb ff93 	bl	8001d58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2224      	movs	r2, #36	@ 0x24
 8005e36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68da      	ldr	r2, [r3, #12]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e48:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f000 fd82 	bl	8006954 <UART_SetConfig>

  /* In Multi-Processor mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	691a      	ldr	r2, [r3, #16]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005e5e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	695a      	ldr	r2, [r3, #20]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005e6e:	615a      	str	r2, [r3, #20]

  /* Set the USART address node */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	691a      	ldr	r2, [r3, #16]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f022 020f 	bic.w	r2, r2, #15
 8005e7e:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, Address);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	6919      	ldr	r1, [r3, #16]
 8005e86:	7afa      	ldrb	r2, [r7, #11]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	430a      	orrs	r2, r1
 8005e8e:	611a      	str	r2, [r3, #16]

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68da      	ldr	r2, [r3, #12]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e9e:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68d9      	ldr	r1, [r3, #12]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	430a      	orrs	r2, r1
 8005eae:	60da      	str	r2, [r3, #12]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68da      	ldr	r2, [r3, #12]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ebe:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2220      	movs	r2, #32
 8005eca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2220      	movs	r2, #32
 8005ed2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3710      	adds	r7, #16
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	b08a      	sub	sp, #40	@ 0x28
 8005eea:	af02      	add	r7, sp, #8
 8005eec:	60f8      	str	r0, [r7, #12]
 8005eee:	60b9      	str	r1, [r7, #8]
 8005ef0:	603b      	str	r3, [r7, #0]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	2b20      	cmp	r3, #32
 8005f04:	d175      	bne.n	8005ff2 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d002      	beq.n	8005f12 <HAL_UART_Transmit+0x2c>
 8005f0c:	88fb      	ldrh	r3, [r7, #6]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d101      	bne.n	8005f16 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e06e      	b.n	8005ff4 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2221      	movs	r2, #33	@ 0x21
 8005f20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f24:	f7fc f910 	bl	8002148 <HAL_GetTick>
 8005f28:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	88fa      	ldrh	r2, [r7, #6]
 8005f2e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	88fa      	ldrh	r2, [r7, #6]
 8005f34:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f3e:	d108      	bne.n	8005f52 <HAL_UART_Transmit+0x6c>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d104      	bne.n	8005f52 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	61bb      	str	r3, [r7, #24]
 8005f50:	e003      	b.n	8005f5a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f56:	2300      	movs	r3, #0
 8005f58:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f5a:	e02e      	b.n	8005fba <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	2200      	movs	r2, #0
 8005f64:	2180      	movs	r1, #128	@ 0x80
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f000 fb00 	bl	800656c <UART_WaitOnFlagUntilTimeout>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d005      	beq.n	8005f7e <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2220      	movs	r2, #32
 8005f76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e03a      	b.n	8005ff4 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d10b      	bne.n	8005f9c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	881b      	ldrh	r3, [r3, #0]
 8005f88:	461a      	mov	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f92:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	3302      	adds	r3, #2
 8005f98:	61bb      	str	r3, [r7, #24]
 8005f9a:	e007      	b.n	8005fac <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	781a      	ldrb	r2, [r3, #0]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	3301      	adds	r3, #1
 8005faa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1cb      	bne.n	8005f5c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	9300      	str	r3, [sp, #0]
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	2140      	movs	r1, #64	@ 0x40
 8005fce:	68f8      	ldr	r0, [r7, #12]
 8005fd0:	f000 facc 	bl	800656c <UART_WaitOnFlagUntilTimeout>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d005      	beq.n	8005fe6 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2220      	movs	r2, #32
 8005fde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e006      	b.n	8005ff4 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2220      	movs	r2, #32
 8005fea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	e000      	b.n	8005ff4 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005ff2:	2302      	movs	r3, #2
  }
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3720      	adds	r7, #32
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b0ba      	sub	sp, #232	@ 0xe8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006022:	2300      	movs	r3, #0
 8006024:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006028:	2300      	movs	r3, #0
 800602a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800602e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006032:	f003 030f 	and.w	r3, r3, #15
 8006036:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800603a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800603e:	2b00      	cmp	r3, #0
 8006040:	d10f      	bne.n	8006062 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006046:	f003 0320 	and.w	r3, r3, #32
 800604a:	2b00      	cmp	r3, #0
 800604c:	d009      	beq.n	8006062 <HAL_UART_IRQHandler+0x66>
 800604e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006052:	f003 0320 	and.w	r3, r3, #32
 8006056:	2b00      	cmp	r3, #0
 8006058:	d003      	beq.n	8006062 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 fbbc 	bl	80067d8 <UART_Receive_IT>
      return;
 8006060:	e25b      	b.n	800651a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006062:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006066:	2b00      	cmp	r3, #0
 8006068:	f000 80de 	beq.w	8006228 <HAL_UART_IRQHandler+0x22c>
 800606c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006070:	f003 0301 	and.w	r3, r3, #1
 8006074:	2b00      	cmp	r3, #0
 8006076:	d106      	bne.n	8006086 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800607c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006080:	2b00      	cmp	r3, #0
 8006082:	f000 80d1 	beq.w	8006228 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800608a:	f003 0301 	and.w	r3, r3, #1
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00b      	beq.n	80060aa <HAL_UART_IRQHandler+0xae>
 8006092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006096:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800609a:	2b00      	cmp	r3, #0
 800609c:	d005      	beq.n	80060aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060a2:	f043 0201 	orr.w	r2, r3, #1
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060ae:	f003 0304 	and.w	r3, r3, #4
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00b      	beq.n	80060ce <HAL_UART_IRQHandler+0xd2>
 80060b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d005      	beq.n	80060ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060c6:	f043 0202 	orr.w	r2, r3, #2
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060d2:	f003 0302 	and.w	r3, r3, #2
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00b      	beq.n	80060f2 <HAL_UART_IRQHandler+0xf6>
 80060da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060de:	f003 0301 	and.w	r3, r3, #1
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d005      	beq.n	80060f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ea:	f043 0204 	orr.w	r2, r3, #4
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80060f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060f6:	f003 0308 	and.w	r3, r3, #8
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d011      	beq.n	8006122 <HAL_UART_IRQHandler+0x126>
 80060fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006102:	f003 0320 	and.w	r3, r3, #32
 8006106:	2b00      	cmp	r3, #0
 8006108:	d105      	bne.n	8006116 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800610a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800610e:	f003 0301 	and.w	r3, r3, #1
 8006112:	2b00      	cmp	r3, #0
 8006114:	d005      	beq.n	8006122 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800611a:	f043 0208 	orr.w	r2, r3, #8
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006126:	2b00      	cmp	r3, #0
 8006128:	f000 81f2 	beq.w	8006510 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800612c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006130:	f003 0320 	and.w	r3, r3, #32
 8006134:	2b00      	cmp	r3, #0
 8006136:	d008      	beq.n	800614a <HAL_UART_IRQHandler+0x14e>
 8006138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800613c:	f003 0320 	and.w	r3, r3, #32
 8006140:	2b00      	cmp	r3, #0
 8006142:	d002      	beq.n	800614a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 fb47 	bl	80067d8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	695b      	ldr	r3, [r3, #20]
 8006150:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006154:	2b00      	cmp	r3, #0
 8006156:	bf14      	ite	ne
 8006158:	2301      	movne	r3, #1
 800615a:	2300      	moveq	r3, #0
 800615c:	b2db      	uxtb	r3, r3
 800615e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006166:	f003 0308 	and.w	r3, r3, #8
 800616a:	2b00      	cmp	r3, #0
 800616c:	d103      	bne.n	8006176 <HAL_UART_IRQHandler+0x17a>
 800616e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006172:	2b00      	cmp	r3, #0
 8006174:	d04f      	beq.n	8006216 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 fa51 	bl	800661e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006186:	2b00      	cmp	r3, #0
 8006188:	d041      	beq.n	800620e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	3314      	adds	r3, #20
 8006190:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006194:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006198:	e853 3f00 	ldrex	r3, [r3]
 800619c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80061a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80061a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	3314      	adds	r3, #20
 80061b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80061b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80061ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80061c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80061c6:	e841 2300 	strex	r3, r2, [r1]
 80061ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80061ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1d9      	bne.n	800618a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d013      	beq.n	8006206 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061e2:	4a7e      	ldr	r2, [pc, #504]	@ (80063dc <HAL_UART_IRQHandler+0x3e0>)
 80061e4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7fc f922 	bl	8002434 <HAL_DMA_Abort_IT>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d016      	beq.n	8006224 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006200:	4610      	mov	r0, r2
 8006202:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006204:	e00e      	b.n	8006224 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 f99c 	bl	8006544 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800620c:	e00a      	b.n	8006224 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 f998 	bl	8006544 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006214:	e006      	b.n	8006224 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 f994 	bl	8006544 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006222:	e175      	b.n	8006510 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006224:	bf00      	nop
    return;
 8006226:	e173      	b.n	8006510 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800622c:	2b01      	cmp	r3, #1
 800622e:	f040 814f 	bne.w	80064d0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006236:	f003 0310 	and.w	r3, r3, #16
 800623a:	2b00      	cmp	r3, #0
 800623c:	f000 8148 	beq.w	80064d0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006244:	f003 0310 	and.w	r3, r3, #16
 8006248:	2b00      	cmp	r3, #0
 800624a:	f000 8141 	beq.w	80064d0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800624e:	2300      	movs	r3, #0
 8006250:	60bb      	str	r3, [r7, #8]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	60bb      	str	r3, [r7, #8]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	60bb      	str	r3, [r7, #8]
 8006262:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800626e:	2b00      	cmp	r3, #0
 8006270:	f000 80b6 	beq.w	80063e0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006280:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006284:	2b00      	cmp	r3, #0
 8006286:	f000 8145 	beq.w	8006514 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800628e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006292:	429a      	cmp	r2, r3
 8006294:	f080 813e 	bcs.w	8006514 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800629e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	2b20      	cmp	r3, #32
 80062a8:	f000 8088 	beq.w	80063bc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	330c      	adds	r3, #12
 80062b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80062ba:	e853 3f00 	ldrex	r3, [r3]
 80062be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80062c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80062c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062ca:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	330c      	adds	r3, #12
 80062d4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80062d8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80062dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80062e4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80062e8:	e841 2300 	strex	r3, r2, [r1]
 80062ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80062f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1d9      	bne.n	80062ac <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	3314      	adds	r3, #20
 80062fe:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006300:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006302:	e853 3f00 	ldrex	r3, [r3]
 8006306:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006308:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800630a:	f023 0301 	bic.w	r3, r3, #1
 800630e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	3314      	adds	r3, #20
 8006318:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800631c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006320:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006322:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006324:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006328:	e841 2300 	strex	r3, r2, [r1]
 800632c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800632e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1e1      	bne.n	80062f8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	3314      	adds	r3, #20
 800633a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800633e:	e853 3f00 	ldrex	r3, [r3]
 8006342:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006344:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006346:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800634a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	3314      	adds	r3, #20
 8006354:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006358:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800635a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800635e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006360:	e841 2300 	strex	r3, r2, [r1]
 8006364:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006366:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1e3      	bne.n	8006334 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2220      	movs	r2, #32
 8006370:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	330c      	adds	r3, #12
 8006380:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006382:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006384:	e853 3f00 	ldrex	r3, [r3]
 8006388:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800638a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800638c:	f023 0310 	bic.w	r3, r3, #16
 8006390:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	330c      	adds	r3, #12
 800639a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800639e:	65ba      	str	r2, [r7, #88]	@ 0x58
 80063a0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80063a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80063a6:	e841 2300 	strex	r3, r2, [r1]
 80063aa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80063ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1e3      	bne.n	800637a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7fc f801 	bl	80023be <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2202      	movs	r2, #2
 80063c0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	4619      	mov	r1, r3
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 f8bf 	bl	8006556 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80063d8:	e09c      	b.n	8006514 <HAL_UART_IRQHandler+0x518>
 80063da:	bf00      	nop
 80063dc:	080066e3 	.word	0x080066e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	f000 808e 	beq.w	8006518 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80063fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006400:	2b00      	cmp	r3, #0
 8006402:	f000 8089 	beq.w	8006518 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	330c      	adds	r3, #12
 800640c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006410:	e853 3f00 	ldrex	r3, [r3]
 8006414:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006418:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800641c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	330c      	adds	r3, #12
 8006426:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800642a:	647a      	str	r2, [r7, #68]	@ 0x44
 800642c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006430:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006432:	e841 2300 	strex	r3, r2, [r1]
 8006436:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006438:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1e3      	bne.n	8006406 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	3314      	adds	r3, #20
 8006444:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006448:	e853 3f00 	ldrex	r3, [r3]
 800644c:	623b      	str	r3, [r7, #32]
   return(result);
 800644e:	6a3b      	ldr	r3, [r7, #32]
 8006450:	f023 0301 	bic.w	r3, r3, #1
 8006454:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	3314      	adds	r3, #20
 800645e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006462:	633a      	str	r2, [r7, #48]	@ 0x30
 8006464:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006466:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006468:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800646a:	e841 2300 	strex	r3, r2, [r1]
 800646e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1e3      	bne.n	800643e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2220      	movs	r2, #32
 800647a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	330c      	adds	r3, #12
 800648a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	e853 3f00 	ldrex	r3, [r3]
 8006492:	60fb      	str	r3, [r7, #12]
   return(result);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f023 0310 	bic.w	r3, r3, #16
 800649a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	330c      	adds	r3, #12
 80064a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80064a8:	61fa      	str	r2, [r7, #28]
 80064aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ac:	69b9      	ldr	r1, [r7, #24]
 80064ae:	69fa      	ldr	r2, [r7, #28]
 80064b0:	e841 2300 	strex	r3, r2, [r1]
 80064b4:	617b      	str	r3, [r7, #20]
   return(result);
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d1e3      	bne.n	8006484 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2202      	movs	r2, #2
 80064c0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80064c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80064c6:	4619      	mov	r1, r3
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 f844 	bl	8006556 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80064ce:	e023      	b.n	8006518 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80064d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d009      	beq.n	80064f0 <HAL_UART_IRQHandler+0x4f4>
 80064dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d003      	beq.n	80064f0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 f90e 	bl	800670a <UART_Transmit_IT>
    return;
 80064ee:	e014      	b.n	800651a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80064f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00e      	beq.n	800651a <HAL_UART_IRQHandler+0x51e>
 80064fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006504:	2b00      	cmp	r3, #0
 8006506:	d008      	beq.n	800651a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 f94d 	bl	80067a8 <UART_EndTransmit_IT>
    return;
 800650e:	e004      	b.n	800651a <HAL_UART_IRQHandler+0x51e>
    return;
 8006510:	bf00      	nop
 8006512:	e002      	b.n	800651a <HAL_UART_IRQHandler+0x51e>
      return;
 8006514:	bf00      	nop
 8006516:	e000      	b.n	800651a <HAL_UART_IRQHandler+0x51e>
      return;
 8006518:	bf00      	nop
  }
}
 800651a:	37e8      	adds	r7, #232	@ 0xe8
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006528:	bf00      	nop
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	bc80      	pop	{r7}
 8006530:	4770      	bx	lr

08006532 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006532:	b480      	push	{r7}
 8006534:	b083      	sub	sp, #12
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800653a:	bf00      	nop
 800653c:	370c      	adds	r7, #12
 800653e:	46bd      	mov	sp, r7
 8006540:	bc80      	pop	{r7}
 8006542:	4770      	bx	lr

08006544 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800654c:	bf00      	nop
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	bc80      	pop	{r7}
 8006554:	4770      	bx	lr

08006556 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006556:	b480      	push	{r7}
 8006558:	b083      	sub	sp, #12
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
 800655e:	460b      	mov	r3, r1
 8006560:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006562:	bf00      	nop
 8006564:	370c      	adds	r7, #12
 8006566:	46bd      	mov	sp, r7
 8006568:	bc80      	pop	{r7}
 800656a:	4770      	bx	lr

0800656c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b086      	sub	sp, #24
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	603b      	str	r3, [r7, #0]
 8006578:	4613      	mov	r3, r2
 800657a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800657c:	e03b      	b.n	80065f6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800657e:	6a3b      	ldr	r3, [r7, #32]
 8006580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006584:	d037      	beq.n	80065f6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006586:	f7fb fddf 	bl	8002148 <HAL_GetTick>
 800658a:	4602      	mov	r2, r0
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	6a3a      	ldr	r2, [r7, #32]
 8006592:	429a      	cmp	r2, r3
 8006594:	d302      	bcc.n	800659c <UART_WaitOnFlagUntilTimeout+0x30>
 8006596:	6a3b      	ldr	r3, [r7, #32]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d101      	bne.n	80065a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	e03a      	b.n	8006616 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	f003 0304 	and.w	r3, r3, #4
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d023      	beq.n	80065f6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	2b80      	cmp	r3, #128	@ 0x80
 80065b2:	d020      	beq.n	80065f6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	2b40      	cmp	r3, #64	@ 0x40
 80065b8:	d01d      	beq.n	80065f6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0308 	and.w	r3, r3, #8
 80065c4:	2b08      	cmp	r3, #8
 80065c6:	d116      	bne.n	80065f6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80065c8:	2300      	movs	r3, #0
 80065ca:	617b      	str	r3, [r7, #20]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	617b      	str	r3, [r7, #20]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	617b      	str	r3, [r7, #20]
 80065dc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f000 f81d 	bl	800661e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2208      	movs	r2, #8
 80065e8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e00f      	b.n	8006616 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	4013      	ands	r3, r2
 8006600:	68ba      	ldr	r2, [r7, #8]
 8006602:	429a      	cmp	r2, r3
 8006604:	bf0c      	ite	eq
 8006606:	2301      	moveq	r3, #1
 8006608:	2300      	movne	r3, #0
 800660a:	b2db      	uxtb	r3, r3
 800660c:	461a      	mov	r2, r3
 800660e:	79fb      	ldrb	r3, [r7, #7]
 8006610:	429a      	cmp	r2, r3
 8006612:	d0b4      	beq.n	800657e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3718      	adds	r7, #24
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}

0800661e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800661e:	b480      	push	{r7}
 8006620:	b095      	sub	sp, #84	@ 0x54
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	330c      	adds	r3, #12
 800662c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006630:	e853 3f00 	ldrex	r3, [r3]
 8006634:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006638:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800663c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	330c      	adds	r3, #12
 8006644:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006646:	643a      	str	r2, [r7, #64]	@ 0x40
 8006648:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800664c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800664e:	e841 2300 	strex	r3, r2, [r1]
 8006652:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006656:	2b00      	cmp	r3, #0
 8006658:	d1e5      	bne.n	8006626 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	3314      	adds	r3, #20
 8006660:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006662:	6a3b      	ldr	r3, [r7, #32]
 8006664:	e853 3f00 	ldrex	r3, [r3]
 8006668:	61fb      	str	r3, [r7, #28]
   return(result);
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	f023 0301 	bic.w	r3, r3, #1
 8006670:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	3314      	adds	r3, #20
 8006678:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800667a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800667c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006680:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006682:	e841 2300 	strex	r3, r2, [r1]
 8006686:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1e5      	bne.n	800665a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006692:	2b01      	cmp	r3, #1
 8006694:	d119      	bne.n	80066ca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	330c      	adds	r3, #12
 800669c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	e853 3f00 	ldrex	r3, [r3]
 80066a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	f023 0310 	bic.w	r3, r3, #16
 80066ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	330c      	adds	r3, #12
 80066b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066b6:	61ba      	str	r2, [r7, #24]
 80066b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ba:	6979      	ldr	r1, [r7, #20]
 80066bc:	69ba      	ldr	r2, [r7, #24]
 80066be:	e841 2300 	strex	r3, r2, [r1]
 80066c2:	613b      	str	r3, [r7, #16]
   return(result);
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1e5      	bne.n	8006696 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2220      	movs	r2, #32
 80066ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80066d8:	bf00      	nop
 80066da:	3754      	adds	r7, #84	@ 0x54
 80066dc:	46bd      	mov	sp, r7
 80066de:	bc80      	pop	{r7}
 80066e0:	4770      	bx	lr

080066e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b084      	sub	sp, #16
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2200      	movs	r2, #0
 80066f4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f7ff ff21 	bl	8006544 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006702:	bf00      	nop
 8006704:	3710      	adds	r7, #16
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}

0800670a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800670a:	b480      	push	{r7}
 800670c:	b085      	sub	sp, #20
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006718:	b2db      	uxtb	r3, r3
 800671a:	2b21      	cmp	r3, #33	@ 0x21
 800671c:	d13e      	bne.n	800679c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006726:	d114      	bne.n	8006752 <UART_Transmit_IT+0x48>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d110      	bne.n	8006752 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a1b      	ldr	r3, [r3, #32]
 8006734:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	881b      	ldrh	r3, [r3, #0]
 800673a:	461a      	mov	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006744:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	1c9a      	adds	r2, r3, #2
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	621a      	str	r2, [r3, #32]
 8006750:	e008      	b.n	8006764 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	1c59      	adds	r1, r3, #1
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	6211      	str	r1, [r2, #32]
 800675c:	781a      	ldrb	r2, [r3, #0]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006768:	b29b      	uxth	r3, r3
 800676a:	3b01      	subs	r3, #1
 800676c:	b29b      	uxth	r3, r3
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	4619      	mov	r1, r3
 8006772:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006774:	2b00      	cmp	r3, #0
 8006776:	d10f      	bne.n	8006798 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68da      	ldr	r2, [r3, #12]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006786:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68da      	ldr	r2, [r3, #12]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006796:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006798:	2300      	movs	r3, #0
 800679a:	e000      	b.n	800679e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800679c:	2302      	movs	r3, #2
  }
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3714      	adds	r7, #20
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bc80      	pop	{r7}
 80067a6:	4770      	bx	lr

080067a8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68da      	ldr	r2, [r3, #12]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067be:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2220      	movs	r2, #32
 80067c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f7ff fea9 	bl	8006520 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3708      	adds	r7, #8
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b08c      	sub	sp, #48	@ 0x30
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	2b22      	cmp	r3, #34	@ 0x22
 80067ea:	f040 80ae 	bne.w	800694a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067f6:	d117      	bne.n	8006828 <UART_Receive_IT+0x50>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d113      	bne.n	8006828 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006800:	2300      	movs	r3, #0
 8006802:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006808:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	b29b      	uxth	r3, r3
 8006812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006816:	b29a      	uxth	r2, r3
 8006818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800681a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006820:	1c9a      	adds	r2, r3, #2
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	629a      	str	r2, [r3, #40]	@ 0x28
 8006826:	e026      	b.n	8006876 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800682c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800682e:	2300      	movs	r3, #0
 8006830:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800683a:	d007      	beq.n	800684c <UART_Receive_IT+0x74>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d10a      	bne.n	800685a <UART_Receive_IT+0x82>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d106      	bne.n	800685a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	b2da      	uxtb	r2, r3
 8006854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006856:	701a      	strb	r2, [r3, #0]
 8006858:	e008      	b.n	800686c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	b2db      	uxtb	r3, r3
 8006862:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006866:	b2da      	uxtb	r2, r3
 8006868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800686a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006870:	1c5a      	adds	r2, r3, #1
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800687a:	b29b      	uxth	r3, r3
 800687c:	3b01      	subs	r3, #1
 800687e:	b29b      	uxth	r3, r3
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	4619      	mov	r1, r3
 8006884:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006886:	2b00      	cmp	r3, #0
 8006888:	d15d      	bne.n	8006946 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68da      	ldr	r2, [r3, #12]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f022 0220 	bic.w	r2, r2, #32
 8006898:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68da      	ldr	r2, [r3, #12]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80068a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	695a      	ldr	r2, [r3, #20]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f022 0201 	bic.w	r2, r2, #1
 80068b8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2220      	movs	r2, #32
 80068be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d135      	bne.n	800693c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	330c      	adds	r3, #12
 80068dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	e853 3f00 	ldrex	r3, [r3]
 80068e4:	613b      	str	r3, [r7, #16]
   return(result);
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	f023 0310 	bic.w	r3, r3, #16
 80068ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	330c      	adds	r3, #12
 80068f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068f6:	623a      	str	r2, [r7, #32]
 80068f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fa:	69f9      	ldr	r1, [r7, #28]
 80068fc:	6a3a      	ldr	r2, [r7, #32]
 80068fe:	e841 2300 	strex	r3, r2, [r1]
 8006902:	61bb      	str	r3, [r7, #24]
   return(result);
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d1e5      	bne.n	80068d6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 0310 	and.w	r3, r3, #16
 8006914:	2b10      	cmp	r3, #16
 8006916:	d10a      	bne.n	800692e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006918:	2300      	movs	r3, #0
 800691a:	60fb      	str	r3, [r7, #12]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	60fb      	str	r3, [r7, #12]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	60fb      	str	r3, [r7, #12]
 800692c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006932:	4619      	mov	r1, r3
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f7ff fe0e 	bl	8006556 <HAL_UARTEx_RxEventCallback>
 800693a:	e002      	b.n	8006942 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f7ff fdf8 	bl	8006532 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006942:	2300      	movs	r3, #0
 8006944:	e002      	b.n	800694c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006946:	2300      	movs	r3, #0
 8006948:	e000      	b.n	800694c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800694a:	2302      	movs	r3, #2
  }
}
 800694c:	4618      	mov	r0, r3
 800694e:	3730      	adds	r7, #48	@ 0x30
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	68da      	ldr	r2, [r3, #12]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	430a      	orrs	r2, r1
 8006970:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	689a      	ldr	r2, [r3, #8]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	431a      	orrs	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	695b      	ldr	r3, [r3, #20]
 8006980:	4313      	orrs	r3, r2
 8006982:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800698e:	f023 030c 	bic.w	r3, r3, #12
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	6812      	ldr	r2, [r2, #0]
 8006996:	68b9      	ldr	r1, [r7, #8]
 8006998:	430b      	orrs	r3, r1
 800699a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	695b      	ldr	r3, [r3, #20]
 80069a2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	699a      	ldr	r2, [r3, #24]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	430a      	orrs	r2, r1
 80069b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a2c      	ldr	r2, [pc, #176]	@ (8006a68 <UART_SetConfig+0x114>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d103      	bne.n	80069c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80069bc:	f7ff f9ee 	bl	8005d9c <HAL_RCC_GetPCLK2Freq>
 80069c0:	60f8      	str	r0, [r7, #12]
 80069c2:	e002      	b.n	80069ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80069c4:	f7ff f9d6 	bl	8005d74 <HAL_RCC_GetPCLK1Freq>
 80069c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	4613      	mov	r3, r2
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	4413      	add	r3, r2
 80069d2:	009a      	lsls	r2, r3, #2
 80069d4:	441a      	add	r2, r3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80069e0:	4a22      	ldr	r2, [pc, #136]	@ (8006a6c <UART_SetConfig+0x118>)
 80069e2:	fba2 2303 	umull	r2, r3, r2, r3
 80069e6:	095b      	lsrs	r3, r3, #5
 80069e8:	0119      	lsls	r1, r3, #4
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	4613      	mov	r3, r2
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	4413      	add	r3, r2
 80069f2:	009a      	lsls	r2, r3, #2
 80069f4:	441a      	add	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a00:	4b1a      	ldr	r3, [pc, #104]	@ (8006a6c <UART_SetConfig+0x118>)
 8006a02:	fba3 0302 	umull	r0, r3, r3, r2
 8006a06:	095b      	lsrs	r3, r3, #5
 8006a08:	2064      	movs	r0, #100	@ 0x64
 8006a0a:	fb00 f303 	mul.w	r3, r0, r3
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	011b      	lsls	r3, r3, #4
 8006a12:	3332      	adds	r3, #50	@ 0x32
 8006a14:	4a15      	ldr	r2, [pc, #84]	@ (8006a6c <UART_SetConfig+0x118>)
 8006a16:	fba2 2303 	umull	r2, r3, r2, r3
 8006a1a:	095b      	lsrs	r3, r3, #5
 8006a1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006a20:	4419      	add	r1, r3
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	4613      	mov	r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	4413      	add	r3, r2
 8006a2a:	009a      	lsls	r2, r3, #2
 8006a2c:	441a      	add	r2, r3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a38:	4b0c      	ldr	r3, [pc, #48]	@ (8006a6c <UART_SetConfig+0x118>)
 8006a3a:	fba3 0302 	umull	r0, r3, r3, r2
 8006a3e:	095b      	lsrs	r3, r3, #5
 8006a40:	2064      	movs	r0, #100	@ 0x64
 8006a42:	fb00 f303 	mul.w	r3, r0, r3
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	011b      	lsls	r3, r3, #4
 8006a4a:	3332      	adds	r3, #50	@ 0x32
 8006a4c:	4a07      	ldr	r2, [pc, #28]	@ (8006a6c <UART_SetConfig+0x118>)
 8006a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a52:	095b      	lsrs	r3, r3, #5
 8006a54:	f003 020f 	and.w	r2, r3, #15
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	440a      	add	r2, r1
 8006a5e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006a60:	bf00      	nop
 8006a62:	3710      	adds	r7, #16
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	40013800 	.word	0x40013800
 8006a6c:	51eb851f 	.word	0x51eb851f

08006a70 <__cvt>:
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a76:	461d      	mov	r5, r3
 8006a78:	bfbb      	ittet	lt
 8006a7a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006a7e:	461d      	movlt	r5, r3
 8006a80:	2300      	movge	r3, #0
 8006a82:	232d      	movlt	r3, #45	@ 0x2d
 8006a84:	b088      	sub	sp, #32
 8006a86:	4614      	mov	r4, r2
 8006a88:	bfb8      	it	lt
 8006a8a:	4614      	movlt	r4, r2
 8006a8c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006a8e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006a90:	7013      	strb	r3, [r2, #0]
 8006a92:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006a94:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006a98:	f023 0820 	bic.w	r8, r3, #32
 8006a9c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006aa0:	d005      	beq.n	8006aae <__cvt+0x3e>
 8006aa2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006aa6:	d100      	bne.n	8006aaa <__cvt+0x3a>
 8006aa8:	3601      	adds	r6, #1
 8006aaa:	2302      	movs	r3, #2
 8006aac:	e000      	b.n	8006ab0 <__cvt+0x40>
 8006aae:	2303      	movs	r3, #3
 8006ab0:	aa07      	add	r2, sp, #28
 8006ab2:	9204      	str	r2, [sp, #16]
 8006ab4:	aa06      	add	r2, sp, #24
 8006ab6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006aba:	e9cd 3600 	strd	r3, r6, [sp]
 8006abe:	4622      	mov	r2, r4
 8006ac0:	462b      	mov	r3, r5
 8006ac2:	f000 fe6d 	bl	80077a0 <_dtoa_r>
 8006ac6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006aca:	4607      	mov	r7, r0
 8006acc:	d119      	bne.n	8006b02 <__cvt+0x92>
 8006ace:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006ad0:	07db      	lsls	r3, r3, #31
 8006ad2:	d50e      	bpl.n	8006af2 <__cvt+0x82>
 8006ad4:	eb00 0906 	add.w	r9, r0, r6
 8006ad8:	2200      	movs	r2, #0
 8006ada:	2300      	movs	r3, #0
 8006adc:	4620      	mov	r0, r4
 8006ade:	4629      	mov	r1, r5
 8006ae0:	f7f9 ff62 	bl	80009a8 <__aeabi_dcmpeq>
 8006ae4:	b108      	cbz	r0, 8006aea <__cvt+0x7a>
 8006ae6:	f8cd 901c 	str.w	r9, [sp, #28]
 8006aea:	2230      	movs	r2, #48	@ 0x30
 8006aec:	9b07      	ldr	r3, [sp, #28]
 8006aee:	454b      	cmp	r3, r9
 8006af0:	d31e      	bcc.n	8006b30 <__cvt+0xc0>
 8006af2:	4638      	mov	r0, r7
 8006af4:	9b07      	ldr	r3, [sp, #28]
 8006af6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006af8:	1bdb      	subs	r3, r3, r7
 8006afa:	6013      	str	r3, [r2, #0]
 8006afc:	b008      	add	sp, #32
 8006afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b02:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006b06:	eb00 0906 	add.w	r9, r0, r6
 8006b0a:	d1e5      	bne.n	8006ad8 <__cvt+0x68>
 8006b0c:	7803      	ldrb	r3, [r0, #0]
 8006b0e:	2b30      	cmp	r3, #48	@ 0x30
 8006b10:	d10a      	bne.n	8006b28 <__cvt+0xb8>
 8006b12:	2200      	movs	r2, #0
 8006b14:	2300      	movs	r3, #0
 8006b16:	4620      	mov	r0, r4
 8006b18:	4629      	mov	r1, r5
 8006b1a:	f7f9 ff45 	bl	80009a8 <__aeabi_dcmpeq>
 8006b1e:	b918      	cbnz	r0, 8006b28 <__cvt+0xb8>
 8006b20:	f1c6 0601 	rsb	r6, r6, #1
 8006b24:	f8ca 6000 	str.w	r6, [sl]
 8006b28:	f8da 3000 	ldr.w	r3, [sl]
 8006b2c:	4499      	add	r9, r3
 8006b2e:	e7d3      	b.n	8006ad8 <__cvt+0x68>
 8006b30:	1c59      	adds	r1, r3, #1
 8006b32:	9107      	str	r1, [sp, #28]
 8006b34:	701a      	strb	r2, [r3, #0]
 8006b36:	e7d9      	b.n	8006aec <__cvt+0x7c>

08006b38 <__exponent>:
 8006b38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b3a:	2900      	cmp	r1, #0
 8006b3c:	bfb6      	itet	lt
 8006b3e:	232d      	movlt	r3, #45	@ 0x2d
 8006b40:	232b      	movge	r3, #43	@ 0x2b
 8006b42:	4249      	neglt	r1, r1
 8006b44:	2909      	cmp	r1, #9
 8006b46:	7002      	strb	r2, [r0, #0]
 8006b48:	7043      	strb	r3, [r0, #1]
 8006b4a:	dd29      	ble.n	8006ba0 <__exponent+0x68>
 8006b4c:	f10d 0307 	add.w	r3, sp, #7
 8006b50:	461d      	mov	r5, r3
 8006b52:	270a      	movs	r7, #10
 8006b54:	fbb1 f6f7 	udiv	r6, r1, r7
 8006b58:	461a      	mov	r2, r3
 8006b5a:	fb07 1416 	mls	r4, r7, r6, r1
 8006b5e:	3430      	adds	r4, #48	@ 0x30
 8006b60:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006b64:	460c      	mov	r4, r1
 8006b66:	2c63      	cmp	r4, #99	@ 0x63
 8006b68:	4631      	mov	r1, r6
 8006b6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006b6e:	dcf1      	bgt.n	8006b54 <__exponent+0x1c>
 8006b70:	3130      	adds	r1, #48	@ 0x30
 8006b72:	1e94      	subs	r4, r2, #2
 8006b74:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006b78:	4623      	mov	r3, r4
 8006b7a:	1c41      	adds	r1, r0, #1
 8006b7c:	42ab      	cmp	r3, r5
 8006b7e:	d30a      	bcc.n	8006b96 <__exponent+0x5e>
 8006b80:	f10d 0309 	add.w	r3, sp, #9
 8006b84:	1a9b      	subs	r3, r3, r2
 8006b86:	42ac      	cmp	r4, r5
 8006b88:	bf88      	it	hi
 8006b8a:	2300      	movhi	r3, #0
 8006b8c:	3302      	adds	r3, #2
 8006b8e:	4403      	add	r3, r0
 8006b90:	1a18      	subs	r0, r3, r0
 8006b92:	b003      	add	sp, #12
 8006b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b96:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006b9a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006b9e:	e7ed      	b.n	8006b7c <__exponent+0x44>
 8006ba0:	2330      	movs	r3, #48	@ 0x30
 8006ba2:	3130      	adds	r1, #48	@ 0x30
 8006ba4:	7083      	strb	r3, [r0, #2]
 8006ba6:	70c1      	strb	r1, [r0, #3]
 8006ba8:	1d03      	adds	r3, r0, #4
 8006baa:	e7f1      	b.n	8006b90 <__exponent+0x58>

08006bac <_printf_float>:
 8006bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb0:	b091      	sub	sp, #68	@ 0x44
 8006bb2:	460c      	mov	r4, r1
 8006bb4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006bb8:	4616      	mov	r6, r2
 8006bba:	461f      	mov	r7, r3
 8006bbc:	4605      	mov	r5, r0
 8006bbe:	f000 fce1 	bl	8007584 <_localeconv_r>
 8006bc2:	6803      	ldr	r3, [r0, #0]
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	9308      	str	r3, [sp, #32]
 8006bc8:	f7f9 fac2 	bl	8000150 <strlen>
 8006bcc:	2300      	movs	r3, #0
 8006bce:	930e      	str	r3, [sp, #56]	@ 0x38
 8006bd0:	f8d8 3000 	ldr.w	r3, [r8]
 8006bd4:	9009      	str	r0, [sp, #36]	@ 0x24
 8006bd6:	3307      	adds	r3, #7
 8006bd8:	f023 0307 	bic.w	r3, r3, #7
 8006bdc:	f103 0208 	add.w	r2, r3, #8
 8006be0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006be4:	f8d4 b000 	ldr.w	fp, [r4]
 8006be8:	f8c8 2000 	str.w	r2, [r8]
 8006bec:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006bf0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006bf4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006bf6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8006bfe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006c02:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006c06:	4b9c      	ldr	r3, [pc, #624]	@ (8006e78 <_printf_float+0x2cc>)
 8006c08:	f7f9 ff00 	bl	8000a0c <__aeabi_dcmpun>
 8006c0c:	bb70      	cbnz	r0, 8006c6c <_printf_float+0xc0>
 8006c0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006c12:	f04f 32ff 	mov.w	r2, #4294967295
 8006c16:	4b98      	ldr	r3, [pc, #608]	@ (8006e78 <_printf_float+0x2cc>)
 8006c18:	f7f9 feda 	bl	80009d0 <__aeabi_dcmple>
 8006c1c:	bb30      	cbnz	r0, 8006c6c <_printf_float+0xc0>
 8006c1e:	2200      	movs	r2, #0
 8006c20:	2300      	movs	r3, #0
 8006c22:	4640      	mov	r0, r8
 8006c24:	4649      	mov	r1, r9
 8006c26:	f7f9 fec9 	bl	80009bc <__aeabi_dcmplt>
 8006c2a:	b110      	cbz	r0, 8006c32 <_printf_float+0x86>
 8006c2c:	232d      	movs	r3, #45	@ 0x2d
 8006c2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c32:	4a92      	ldr	r2, [pc, #584]	@ (8006e7c <_printf_float+0x2d0>)
 8006c34:	4b92      	ldr	r3, [pc, #584]	@ (8006e80 <_printf_float+0x2d4>)
 8006c36:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006c3a:	bf94      	ite	ls
 8006c3c:	4690      	movls	r8, r2
 8006c3e:	4698      	movhi	r8, r3
 8006c40:	2303      	movs	r3, #3
 8006c42:	f04f 0900 	mov.w	r9, #0
 8006c46:	6123      	str	r3, [r4, #16]
 8006c48:	f02b 0304 	bic.w	r3, fp, #4
 8006c4c:	6023      	str	r3, [r4, #0]
 8006c4e:	4633      	mov	r3, r6
 8006c50:	4621      	mov	r1, r4
 8006c52:	4628      	mov	r0, r5
 8006c54:	9700      	str	r7, [sp, #0]
 8006c56:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006c58:	f000 f9d4 	bl	8007004 <_printf_common>
 8006c5c:	3001      	adds	r0, #1
 8006c5e:	f040 8090 	bne.w	8006d82 <_printf_float+0x1d6>
 8006c62:	f04f 30ff 	mov.w	r0, #4294967295
 8006c66:	b011      	add	sp, #68	@ 0x44
 8006c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c6c:	4642      	mov	r2, r8
 8006c6e:	464b      	mov	r3, r9
 8006c70:	4640      	mov	r0, r8
 8006c72:	4649      	mov	r1, r9
 8006c74:	f7f9 feca 	bl	8000a0c <__aeabi_dcmpun>
 8006c78:	b148      	cbz	r0, 8006c8e <_printf_float+0xe2>
 8006c7a:	464b      	mov	r3, r9
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	bfb8      	it	lt
 8006c80:	232d      	movlt	r3, #45	@ 0x2d
 8006c82:	4a80      	ldr	r2, [pc, #512]	@ (8006e84 <_printf_float+0x2d8>)
 8006c84:	bfb8      	it	lt
 8006c86:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006c8a:	4b7f      	ldr	r3, [pc, #508]	@ (8006e88 <_printf_float+0x2dc>)
 8006c8c:	e7d3      	b.n	8006c36 <_printf_float+0x8a>
 8006c8e:	6863      	ldr	r3, [r4, #4]
 8006c90:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006c94:	1c5a      	adds	r2, r3, #1
 8006c96:	d13f      	bne.n	8006d18 <_printf_float+0x16c>
 8006c98:	2306      	movs	r3, #6
 8006c9a:	6063      	str	r3, [r4, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006ca2:	6023      	str	r3, [r4, #0]
 8006ca4:	9206      	str	r2, [sp, #24]
 8006ca6:	aa0e      	add	r2, sp, #56	@ 0x38
 8006ca8:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006cac:	aa0d      	add	r2, sp, #52	@ 0x34
 8006cae:	9203      	str	r2, [sp, #12]
 8006cb0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006cb4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006cb8:	6863      	ldr	r3, [r4, #4]
 8006cba:	4642      	mov	r2, r8
 8006cbc:	9300      	str	r3, [sp, #0]
 8006cbe:	4628      	mov	r0, r5
 8006cc0:	464b      	mov	r3, r9
 8006cc2:	910a      	str	r1, [sp, #40]	@ 0x28
 8006cc4:	f7ff fed4 	bl	8006a70 <__cvt>
 8006cc8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006cca:	4680      	mov	r8, r0
 8006ccc:	2947      	cmp	r1, #71	@ 0x47
 8006cce:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006cd0:	d128      	bne.n	8006d24 <_printf_float+0x178>
 8006cd2:	1cc8      	adds	r0, r1, #3
 8006cd4:	db02      	blt.n	8006cdc <_printf_float+0x130>
 8006cd6:	6863      	ldr	r3, [r4, #4]
 8006cd8:	4299      	cmp	r1, r3
 8006cda:	dd40      	ble.n	8006d5e <_printf_float+0x1b2>
 8006cdc:	f1aa 0a02 	sub.w	sl, sl, #2
 8006ce0:	fa5f fa8a 	uxtb.w	sl, sl
 8006ce4:	4652      	mov	r2, sl
 8006ce6:	3901      	subs	r1, #1
 8006ce8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006cec:	910d      	str	r1, [sp, #52]	@ 0x34
 8006cee:	f7ff ff23 	bl	8006b38 <__exponent>
 8006cf2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006cf4:	4681      	mov	r9, r0
 8006cf6:	1813      	adds	r3, r2, r0
 8006cf8:	2a01      	cmp	r2, #1
 8006cfa:	6123      	str	r3, [r4, #16]
 8006cfc:	dc02      	bgt.n	8006d04 <_printf_float+0x158>
 8006cfe:	6822      	ldr	r2, [r4, #0]
 8006d00:	07d2      	lsls	r2, r2, #31
 8006d02:	d501      	bpl.n	8006d08 <_printf_float+0x15c>
 8006d04:	3301      	adds	r3, #1
 8006d06:	6123      	str	r3, [r4, #16]
 8006d08:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d09e      	beq.n	8006c4e <_printf_float+0xa2>
 8006d10:	232d      	movs	r3, #45	@ 0x2d
 8006d12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d16:	e79a      	b.n	8006c4e <_printf_float+0xa2>
 8006d18:	2947      	cmp	r1, #71	@ 0x47
 8006d1a:	d1bf      	bne.n	8006c9c <_printf_float+0xf0>
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1bd      	bne.n	8006c9c <_printf_float+0xf0>
 8006d20:	2301      	movs	r3, #1
 8006d22:	e7ba      	b.n	8006c9a <_printf_float+0xee>
 8006d24:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006d28:	d9dc      	bls.n	8006ce4 <_printf_float+0x138>
 8006d2a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006d2e:	d118      	bne.n	8006d62 <_printf_float+0x1b6>
 8006d30:	2900      	cmp	r1, #0
 8006d32:	6863      	ldr	r3, [r4, #4]
 8006d34:	dd0b      	ble.n	8006d4e <_printf_float+0x1a2>
 8006d36:	6121      	str	r1, [r4, #16]
 8006d38:	b913      	cbnz	r3, 8006d40 <_printf_float+0x194>
 8006d3a:	6822      	ldr	r2, [r4, #0]
 8006d3c:	07d0      	lsls	r0, r2, #31
 8006d3e:	d502      	bpl.n	8006d46 <_printf_float+0x19a>
 8006d40:	3301      	adds	r3, #1
 8006d42:	440b      	add	r3, r1
 8006d44:	6123      	str	r3, [r4, #16]
 8006d46:	f04f 0900 	mov.w	r9, #0
 8006d4a:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006d4c:	e7dc      	b.n	8006d08 <_printf_float+0x15c>
 8006d4e:	b913      	cbnz	r3, 8006d56 <_printf_float+0x1aa>
 8006d50:	6822      	ldr	r2, [r4, #0]
 8006d52:	07d2      	lsls	r2, r2, #31
 8006d54:	d501      	bpl.n	8006d5a <_printf_float+0x1ae>
 8006d56:	3302      	adds	r3, #2
 8006d58:	e7f4      	b.n	8006d44 <_printf_float+0x198>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e7f2      	b.n	8006d44 <_printf_float+0x198>
 8006d5e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006d62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d64:	4299      	cmp	r1, r3
 8006d66:	db05      	blt.n	8006d74 <_printf_float+0x1c8>
 8006d68:	6823      	ldr	r3, [r4, #0]
 8006d6a:	6121      	str	r1, [r4, #16]
 8006d6c:	07d8      	lsls	r0, r3, #31
 8006d6e:	d5ea      	bpl.n	8006d46 <_printf_float+0x19a>
 8006d70:	1c4b      	adds	r3, r1, #1
 8006d72:	e7e7      	b.n	8006d44 <_printf_float+0x198>
 8006d74:	2900      	cmp	r1, #0
 8006d76:	bfcc      	ite	gt
 8006d78:	2201      	movgt	r2, #1
 8006d7a:	f1c1 0202 	rsble	r2, r1, #2
 8006d7e:	4413      	add	r3, r2
 8006d80:	e7e0      	b.n	8006d44 <_printf_float+0x198>
 8006d82:	6823      	ldr	r3, [r4, #0]
 8006d84:	055a      	lsls	r2, r3, #21
 8006d86:	d407      	bmi.n	8006d98 <_printf_float+0x1ec>
 8006d88:	6923      	ldr	r3, [r4, #16]
 8006d8a:	4642      	mov	r2, r8
 8006d8c:	4631      	mov	r1, r6
 8006d8e:	4628      	mov	r0, r5
 8006d90:	47b8      	blx	r7
 8006d92:	3001      	adds	r0, #1
 8006d94:	d12b      	bne.n	8006dee <_printf_float+0x242>
 8006d96:	e764      	b.n	8006c62 <_printf_float+0xb6>
 8006d98:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006d9c:	f240 80dc 	bls.w	8006f58 <_printf_float+0x3ac>
 8006da0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006da4:	2200      	movs	r2, #0
 8006da6:	2300      	movs	r3, #0
 8006da8:	f7f9 fdfe 	bl	80009a8 <__aeabi_dcmpeq>
 8006dac:	2800      	cmp	r0, #0
 8006dae:	d033      	beq.n	8006e18 <_printf_float+0x26c>
 8006db0:	2301      	movs	r3, #1
 8006db2:	4631      	mov	r1, r6
 8006db4:	4628      	mov	r0, r5
 8006db6:	4a35      	ldr	r2, [pc, #212]	@ (8006e8c <_printf_float+0x2e0>)
 8006db8:	47b8      	blx	r7
 8006dba:	3001      	adds	r0, #1
 8006dbc:	f43f af51 	beq.w	8006c62 <_printf_float+0xb6>
 8006dc0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006dc4:	4543      	cmp	r3, r8
 8006dc6:	db02      	blt.n	8006dce <_printf_float+0x222>
 8006dc8:	6823      	ldr	r3, [r4, #0]
 8006dca:	07d8      	lsls	r0, r3, #31
 8006dcc:	d50f      	bpl.n	8006dee <_printf_float+0x242>
 8006dce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006dd2:	4631      	mov	r1, r6
 8006dd4:	4628      	mov	r0, r5
 8006dd6:	47b8      	blx	r7
 8006dd8:	3001      	adds	r0, #1
 8006dda:	f43f af42 	beq.w	8006c62 <_printf_float+0xb6>
 8006dde:	f04f 0900 	mov.w	r9, #0
 8006de2:	f108 38ff 	add.w	r8, r8, #4294967295
 8006de6:	f104 0a1a 	add.w	sl, r4, #26
 8006dea:	45c8      	cmp	r8, r9
 8006dec:	dc09      	bgt.n	8006e02 <_printf_float+0x256>
 8006dee:	6823      	ldr	r3, [r4, #0]
 8006df0:	079b      	lsls	r3, r3, #30
 8006df2:	f100 8102 	bmi.w	8006ffa <_printf_float+0x44e>
 8006df6:	68e0      	ldr	r0, [r4, #12]
 8006df8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006dfa:	4298      	cmp	r0, r3
 8006dfc:	bfb8      	it	lt
 8006dfe:	4618      	movlt	r0, r3
 8006e00:	e731      	b.n	8006c66 <_printf_float+0xba>
 8006e02:	2301      	movs	r3, #1
 8006e04:	4652      	mov	r2, sl
 8006e06:	4631      	mov	r1, r6
 8006e08:	4628      	mov	r0, r5
 8006e0a:	47b8      	blx	r7
 8006e0c:	3001      	adds	r0, #1
 8006e0e:	f43f af28 	beq.w	8006c62 <_printf_float+0xb6>
 8006e12:	f109 0901 	add.w	r9, r9, #1
 8006e16:	e7e8      	b.n	8006dea <_printf_float+0x23e>
 8006e18:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	dc38      	bgt.n	8006e90 <_printf_float+0x2e4>
 8006e1e:	2301      	movs	r3, #1
 8006e20:	4631      	mov	r1, r6
 8006e22:	4628      	mov	r0, r5
 8006e24:	4a19      	ldr	r2, [pc, #100]	@ (8006e8c <_printf_float+0x2e0>)
 8006e26:	47b8      	blx	r7
 8006e28:	3001      	adds	r0, #1
 8006e2a:	f43f af1a 	beq.w	8006c62 <_printf_float+0xb6>
 8006e2e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006e32:	ea59 0303 	orrs.w	r3, r9, r3
 8006e36:	d102      	bne.n	8006e3e <_printf_float+0x292>
 8006e38:	6823      	ldr	r3, [r4, #0]
 8006e3a:	07d9      	lsls	r1, r3, #31
 8006e3c:	d5d7      	bpl.n	8006dee <_printf_float+0x242>
 8006e3e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006e42:	4631      	mov	r1, r6
 8006e44:	4628      	mov	r0, r5
 8006e46:	47b8      	blx	r7
 8006e48:	3001      	adds	r0, #1
 8006e4a:	f43f af0a 	beq.w	8006c62 <_printf_float+0xb6>
 8006e4e:	f04f 0a00 	mov.w	sl, #0
 8006e52:	f104 0b1a 	add.w	fp, r4, #26
 8006e56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e58:	425b      	negs	r3, r3
 8006e5a:	4553      	cmp	r3, sl
 8006e5c:	dc01      	bgt.n	8006e62 <_printf_float+0x2b6>
 8006e5e:	464b      	mov	r3, r9
 8006e60:	e793      	b.n	8006d8a <_printf_float+0x1de>
 8006e62:	2301      	movs	r3, #1
 8006e64:	465a      	mov	r2, fp
 8006e66:	4631      	mov	r1, r6
 8006e68:	4628      	mov	r0, r5
 8006e6a:	47b8      	blx	r7
 8006e6c:	3001      	adds	r0, #1
 8006e6e:	f43f aef8 	beq.w	8006c62 <_printf_float+0xb6>
 8006e72:	f10a 0a01 	add.w	sl, sl, #1
 8006e76:	e7ee      	b.n	8006e56 <_printf_float+0x2aa>
 8006e78:	7fefffff 	.word	0x7fefffff
 8006e7c:	08009ec2 	.word	0x08009ec2
 8006e80:	08009ec6 	.word	0x08009ec6
 8006e84:	08009eca 	.word	0x08009eca
 8006e88:	08009ece 	.word	0x08009ece
 8006e8c:	08009ed2 	.word	0x08009ed2
 8006e90:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006e92:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006e96:	4553      	cmp	r3, sl
 8006e98:	bfa8      	it	ge
 8006e9a:	4653      	movge	r3, sl
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	4699      	mov	r9, r3
 8006ea0:	dc36      	bgt.n	8006f10 <_printf_float+0x364>
 8006ea2:	f04f 0b00 	mov.w	fp, #0
 8006ea6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006eaa:	f104 021a 	add.w	r2, r4, #26
 8006eae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006eb0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006eb2:	eba3 0309 	sub.w	r3, r3, r9
 8006eb6:	455b      	cmp	r3, fp
 8006eb8:	dc31      	bgt.n	8006f1e <_printf_float+0x372>
 8006eba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ebc:	459a      	cmp	sl, r3
 8006ebe:	dc3a      	bgt.n	8006f36 <_printf_float+0x38a>
 8006ec0:	6823      	ldr	r3, [r4, #0]
 8006ec2:	07da      	lsls	r2, r3, #31
 8006ec4:	d437      	bmi.n	8006f36 <_printf_float+0x38a>
 8006ec6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ec8:	ebaa 0903 	sub.w	r9, sl, r3
 8006ecc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ece:	ebaa 0303 	sub.w	r3, sl, r3
 8006ed2:	4599      	cmp	r9, r3
 8006ed4:	bfa8      	it	ge
 8006ed6:	4699      	movge	r9, r3
 8006ed8:	f1b9 0f00 	cmp.w	r9, #0
 8006edc:	dc33      	bgt.n	8006f46 <_printf_float+0x39a>
 8006ede:	f04f 0800 	mov.w	r8, #0
 8006ee2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ee6:	f104 0b1a 	add.w	fp, r4, #26
 8006eea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006eec:	ebaa 0303 	sub.w	r3, sl, r3
 8006ef0:	eba3 0309 	sub.w	r3, r3, r9
 8006ef4:	4543      	cmp	r3, r8
 8006ef6:	f77f af7a 	ble.w	8006dee <_printf_float+0x242>
 8006efa:	2301      	movs	r3, #1
 8006efc:	465a      	mov	r2, fp
 8006efe:	4631      	mov	r1, r6
 8006f00:	4628      	mov	r0, r5
 8006f02:	47b8      	blx	r7
 8006f04:	3001      	adds	r0, #1
 8006f06:	f43f aeac 	beq.w	8006c62 <_printf_float+0xb6>
 8006f0a:	f108 0801 	add.w	r8, r8, #1
 8006f0e:	e7ec      	b.n	8006eea <_printf_float+0x33e>
 8006f10:	4642      	mov	r2, r8
 8006f12:	4631      	mov	r1, r6
 8006f14:	4628      	mov	r0, r5
 8006f16:	47b8      	blx	r7
 8006f18:	3001      	adds	r0, #1
 8006f1a:	d1c2      	bne.n	8006ea2 <_printf_float+0x2f6>
 8006f1c:	e6a1      	b.n	8006c62 <_printf_float+0xb6>
 8006f1e:	2301      	movs	r3, #1
 8006f20:	4631      	mov	r1, r6
 8006f22:	4628      	mov	r0, r5
 8006f24:	920a      	str	r2, [sp, #40]	@ 0x28
 8006f26:	47b8      	blx	r7
 8006f28:	3001      	adds	r0, #1
 8006f2a:	f43f ae9a 	beq.w	8006c62 <_printf_float+0xb6>
 8006f2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006f30:	f10b 0b01 	add.w	fp, fp, #1
 8006f34:	e7bb      	b.n	8006eae <_printf_float+0x302>
 8006f36:	4631      	mov	r1, r6
 8006f38:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006f3c:	4628      	mov	r0, r5
 8006f3e:	47b8      	blx	r7
 8006f40:	3001      	adds	r0, #1
 8006f42:	d1c0      	bne.n	8006ec6 <_printf_float+0x31a>
 8006f44:	e68d      	b.n	8006c62 <_printf_float+0xb6>
 8006f46:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006f48:	464b      	mov	r3, r9
 8006f4a:	4631      	mov	r1, r6
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	4442      	add	r2, r8
 8006f50:	47b8      	blx	r7
 8006f52:	3001      	adds	r0, #1
 8006f54:	d1c3      	bne.n	8006ede <_printf_float+0x332>
 8006f56:	e684      	b.n	8006c62 <_printf_float+0xb6>
 8006f58:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006f5c:	f1ba 0f01 	cmp.w	sl, #1
 8006f60:	dc01      	bgt.n	8006f66 <_printf_float+0x3ba>
 8006f62:	07db      	lsls	r3, r3, #31
 8006f64:	d536      	bpl.n	8006fd4 <_printf_float+0x428>
 8006f66:	2301      	movs	r3, #1
 8006f68:	4642      	mov	r2, r8
 8006f6a:	4631      	mov	r1, r6
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	47b8      	blx	r7
 8006f70:	3001      	adds	r0, #1
 8006f72:	f43f ae76 	beq.w	8006c62 <_printf_float+0xb6>
 8006f76:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006f7a:	4631      	mov	r1, r6
 8006f7c:	4628      	mov	r0, r5
 8006f7e:	47b8      	blx	r7
 8006f80:	3001      	adds	r0, #1
 8006f82:	f43f ae6e 	beq.w	8006c62 <_printf_float+0xb6>
 8006f86:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f92:	f7f9 fd09 	bl	80009a8 <__aeabi_dcmpeq>
 8006f96:	b9c0      	cbnz	r0, 8006fca <_printf_float+0x41e>
 8006f98:	4653      	mov	r3, sl
 8006f9a:	f108 0201 	add.w	r2, r8, #1
 8006f9e:	4631      	mov	r1, r6
 8006fa0:	4628      	mov	r0, r5
 8006fa2:	47b8      	blx	r7
 8006fa4:	3001      	adds	r0, #1
 8006fa6:	d10c      	bne.n	8006fc2 <_printf_float+0x416>
 8006fa8:	e65b      	b.n	8006c62 <_printf_float+0xb6>
 8006faa:	2301      	movs	r3, #1
 8006fac:	465a      	mov	r2, fp
 8006fae:	4631      	mov	r1, r6
 8006fb0:	4628      	mov	r0, r5
 8006fb2:	47b8      	blx	r7
 8006fb4:	3001      	adds	r0, #1
 8006fb6:	f43f ae54 	beq.w	8006c62 <_printf_float+0xb6>
 8006fba:	f108 0801 	add.w	r8, r8, #1
 8006fbe:	45d0      	cmp	r8, sl
 8006fc0:	dbf3      	blt.n	8006faa <_printf_float+0x3fe>
 8006fc2:	464b      	mov	r3, r9
 8006fc4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006fc8:	e6e0      	b.n	8006d8c <_printf_float+0x1e0>
 8006fca:	f04f 0800 	mov.w	r8, #0
 8006fce:	f104 0b1a 	add.w	fp, r4, #26
 8006fd2:	e7f4      	b.n	8006fbe <_printf_float+0x412>
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	4642      	mov	r2, r8
 8006fd8:	e7e1      	b.n	8006f9e <_printf_float+0x3f2>
 8006fda:	2301      	movs	r3, #1
 8006fdc:	464a      	mov	r2, r9
 8006fde:	4631      	mov	r1, r6
 8006fe0:	4628      	mov	r0, r5
 8006fe2:	47b8      	blx	r7
 8006fe4:	3001      	adds	r0, #1
 8006fe6:	f43f ae3c 	beq.w	8006c62 <_printf_float+0xb6>
 8006fea:	f108 0801 	add.w	r8, r8, #1
 8006fee:	68e3      	ldr	r3, [r4, #12]
 8006ff0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006ff2:	1a5b      	subs	r3, r3, r1
 8006ff4:	4543      	cmp	r3, r8
 8006ff6:	dcf0      	bgt.n	8006fda <_printf_float+0x42e>
 8006ff8:	e6fd      	b.n	8006df6 <_printf_float+0x24a>
 8006ffa:	f04f 0800 	mov.w	r8, #0
 8006ffe:	f104 0919 	add.w	r9, r4, #25
 8007002:	e7f4      	b.n	8006fee <_printf_float+0x442>

08007004 <_printf_common>:
 8007004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007008:	4616      	mov	r6, r2
 800700a:	4698      	mov	r8, r3
 800700c:	688a      	ldr	r2, [r1, #8]
 800700e:	690b      	ldr	r3, [r1, #16]
 8007010:	4607      	mov	r7, r0
 8007012:	4293      	cmp	r3, r2
 8007014:	bfb8      	it	lt
 8007016:	4613      	movlt	r3, r2
 8007018:	6033      	str	r3, [r6, #0]
 800701a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800701e:	460c      	mov	r4, r1
 8007020:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007024:	b10a      	cbz	r2, 800702a <_printf_common+0x26>
 8007026:	3301      	adds	r3, #1
 8007028:	6033      	str	r3, [r6, #0]
 800702a:	6823      	ldr	r3, [r4, #0]
 800702c:	0699      	lsls	r1, r3, #26
 800702e:	bf42      	ittt	mi
 8007030:	6833      	ldrmi	r3, [r6, #0]
 8007032:	3302      	addmi	r3, #2
 8007034:	6033      	strmi	r3, [r6, #0]
 8007036:	6825      	ldr	r5, [r4, #0]
 8007038:	f015 0506 	ands.w	r5, r5, #6
 800703c:	d106      	bne.n	800704c <_printf_common+0x48>
 800703e:	f104 0a19 	add.w	sl, r4, #25
 8007042:	68e3      	ldr	r3, [r4, #12]
 8007044:	6832      	ldr	r2, [r6, #0]
 8007046:	1a9b      	subs	r3, r3, r2
 8007048:	42ab      	cmp	r3, r5
 800704a:	dc2b      	bgt.n	80070a4 <_printf_common+0xa0>
 800704c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007050:	6822      	ldr	r2, [r4, #0]
 8007052:	3b00      	subs	r3, #0
 8007054:	bf18      	it	ne
 8007056:	2301      	movne	r3, #1
 8007058:	0692      	lsls	r2, r2, #26
 800705a:	d430      	bmi.n	80070be <_printf_common+0xba>
 800705c:	4641      	mov	r1, r8
 800705e:	4638      	mov	r0, r7
 8007060:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007064:	47c8      	blx	r9
 8007066:	3001      	adds	r0, #1
 8007068:	d023      	beq.n	80070b2 <_printf_common+0xae>
 800706a:	6823      	ldr	r3, [r4, #0]
 800706c:	6922      	ldr	r2, [r4, #16]
 800706e:	f003 0306 	and.w	r3, r3, #6
 8007072:	2b04      	cmp	r3, #4
 8007074:	bf14      	ite	ne
 8007076:	2500      	movne	r5, #0
 8007078:	6833      	ldreq	r3, [r6, #0]
 800707a:	f04f 0600 	mov.w	r6, #0
 800707e:	bf08      	it	eq
 8007080:	68e5      	ldreq	r5, [r4, #12]
 8007082:	f104 041a 	add.w	r4, r4, #26
 8007086:	bf08      	it	eq
 8007088:	1aed      	subeq	r5, r5, r3
 800708a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800708e:	bf08      	it	eq
 8007090:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007094:	4293      	cmp	r3, r2
 8007096:	bfc4      	itt	gt
 8007098:	1a9b      	subgt	r3, r3, r2
 800709a:	18ed      	addgt	r5, r5, r3
 800709c:	42b5      	cmp	r5, r6
 800709e:	d11a      	bne.n	80070d6 <_printf_common+0xd2>
 80070a0:	2000      	movs	r0, #0
 80070a2:	e008      	b.n	80070b6 <_printf_common+0xb2>
 80070a4:	2301      	movs	r3, #1
 80070a6:	4652      	mov	r2, sl
 80070a8:	4641      	mov	r1, r8
 80070aa:	4638      	mov	r0, r7
 80070ac:	47c8      	blx	r9
 80070ae:	3001      	adds	r0, #1
 80070b0:	d103      	bne.n	80070ba <_printf_common+0xb6>
 80070b2:	f04f 30ff 	mov.w	r0, #4294967295
 80070b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ba:	3501      	adds	r5, #1
 80070bc:	e7c1      	b.n	8007042 <_printf_common+0x3e>
 80070be:	2030      	movs	r0, #48	@ 0x30
 80070c0:	18e1      	adds	r1, r4, r3
 80070c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80070c6:	1c5a      	adds	r2, r3, #1
 80070c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80070cc:	4422      	add	r2, r4
 80070ce:	3302      	adds	r3, #2
 80070d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80070d4:	e7c2      	b.n	800705c <_printf_common+0x58>
 80070d6:	2301      	movs	r3, #1
 80070d8:	4622      	mov	r2, r4
 80070da:	4641      	mov	r1, r8
 80070dc:	4638      	mov	r0, r7
 80070de:	47c8      	blx	r9
 80070e0:	3001      	adds	r0, #1
 80070e2:	d0e6      	beq.n	80070b2 <_printf_common+0xae>
 80070e4:	3601      	adds	r6, #1
 80070e6:	e7d9      	b.n	800709c <_printf_common+0x98>

080070e8 <_printf_i>:
 80070e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070ec:	7e0f      	ldrb	r7, [r1, #24]
 80070ee:	4691      	mov	r9, r2
 80070f0:	2f78      	cmp	r7, #120	@ 0x78
 80070f2:	4680      	mov	r8, r0
 80070f4:	460c      	mov	r4, r1
 80070f6:	469a      	mov	sl, r3
 80070f8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80070fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80070fe:	d807      	bhi.n	8007110 <_printf_i+0x28>
 8007100:	2f62      	cmp	r7, #98	@ 0x62
 8007102:	d80a      	bhi.n	800711a <_printf_i+0x32>
 8007104:	2f00      	cmp	r7, #0
 8007106:	f000 80d3 	beq.w	80072b0 <_printf_i+0x1c8>
 800710a:	2f58      	cmp	r7, #88	@ 0x58
 800710c:	f000 80ba 	beq.w	8007284 <_printf_i+0x19c>
 8007110:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007114:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007118:	e03a      	b.n	8007190 <_printf_i+0xa8>
 800711a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800711e:	2b15      	cmp	r3, #21
 8007120:	d8f6      	bhi.n	8007110 <_printf_i+0x28>
 8007122:	a101      	add	r1, pc, #4	@ (adr r1, 8007128 <_printf_i+0x40>)
 8007124:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007128:	08007181 	.word	0x08007181
 800712c:	08007195 	.word	0x08007195
 8007130:	08007111 	.word	0x08007111
 8007134:	08007111 	.word	0x08007111
 8007138:	08007111 	.word	0x08007111
 800713c:	08007111 	.word	0x08007111
 8007140:	08007195 	.word	0x08007195
 8007144:	08007111 	.word	0x08007111
 8007148:	08007111 	.word	0x08007111
 800714c:	08007111 	.word	0x08007111
 8007150:	08007111 	.word	0x08007111
 8007154:	08007297 	.word	0x08007297
 8007158:	080071bf 	.word	0x080071bf
 800715c:	08007251 	.word	0x08007251
 8007160:	08007111 	.word	0x08007111
 8007164:	08007111 	.word	0x08007111
 8007168:	080072b9 	.word	0x080072b9
 800716c:	08007111 	.word	0x08007111
 8007170:	080071bf 	.word	0x080071bf
 8007174:	08007111 	.word	0x08007111
 8007178:	08007111 	.word	0x08007111
 800717c:	08007259 	.word	0x08007259
 8007180:	6833      	ldr	r3, [r6, #0]
 8007182:	1d1a      	adds	r2, r3, #4
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	6032      	str	r2, [r6, #0]
 8007188:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800718c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007190:	2301      	movs	r3, #1
 8007192:	e09e      	b.n	80072d2 <_printf_i+0x1ea>
 8007194:	6833      	ldr	r3, [r6, #0]
 8007196:	6820      	ldr	r0, [r4, #0]
 8007198:	1d19      	adds	r1, r3, #4
 800719a:	6031      	str	r1, [r6, #0]
 800719c:	0606      	lsls	r6, r0, #24
 800719e:	d501      	bpl.n	80071a4 <_printf_i+0xbc>
 80071a0:	681d      	ldr	r5, [r3, #0]
 80071a2:	e003      	b.n	80071ac <_printf_i+0xc4>
 80071a4:	0645      	lsls	r5, r0, #25
 80071a6:	d5fb      	bpl.n	80071a0 <_printf_i+0xb8>
 80071a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80071ac:	2d00      	cmp	r5, #0
 80071ae:	da03      	bge.n	80071b8 <_printf_i+0xd0>
 80071b0:	232d      	movs	r3, #45	@ 0x2d
 80071b2:	426d      	negs	r5, r5
 80071b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071b8:	230a      	movs	r3, #10
 80071ba:	4859      	ldr	r0, [pc, #356]	@ (8007320 <_printf_i+0x238>)
 80071bc:	e011      	b.n	80071e2 <_printf_i+0xfa>
 80071be:	6821      	ldr	r1, [r4, #0]
 80071c0:	6833      	ldr	r3, [r6, #0]
 80071c2:	0608      	lsls	r0, r1, #24
 80071c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80071c8:	d402      	bmi.n	80071d0 <_printf_i+0xe8>
 80071ca:	0649      	lsls	r1, r1, #25
 80071cc:	bf48      	it	mi
 80071ce:	b2ad      	uxthmi	r5, r5
 80071d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80071d2:	6033      	str	r3, [r6, #0]
 80071d4:	bf14      	ite	ne
 80071d6:	230a      	movne	r3, #10
 80071d8:	2308      	moveq	r3, #8
 80071da:	4851      	ldr	r0, [pc, #324]	@ (8007320 <_printf_i+0x238>)
 80071dc:	2100      	movs	r1, #0
 80071de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80071e2:	6866      	ldr	r6, [r4, #4]
 80071e4:	2e00      	cmp	r6, #0
 80071e6:	bfa8      	it	ge
 80071e8:	6821      	ldrge	r1, [r4, #0]
 80071ea:	60a6      	str	r6, [r4, #8]
 80071ec:	bfa4      	itt	ge
 80071ee:	f021 0104 	bicge.w	r1, r1, #4
 80071f2:	6021      	strge	r1, [r4, #0]
 80071f4:	b90d      	cbnz	r5, 80071fa <_printf_i+0x112>
 80071f6:	2e00      	cmp	r6, #0
 80071f8:	d04b      	beq.n	8007292 <_printf_i+0x1aa>
 80071fa:	4616      	mov	r6, r2
 80071fc:	fbb5 f1f3 	udiv	r1, r5, r3
 8007200:	fb03 5711 	mls	r7, r3, r1, r5
 8007204:	5dc7      	ldrb	r7, [r0, r7]
 8007206:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800720a:	462f      	mov	r7, r5
 800720c:	42bb      	cmp	r3, r7
 800720e:	460d      	mov	r5, r1
 8007210:	d9f4      	bls.n	80071fc <_printf_i+0x114>
 8007212:	2b08      	cmp	r3, #8
 8007214:	d10b      	bne.n	800722e <_printf_i+0x146>
 8007216:	6823      	ldr	r3, [r4, #0]
 8007218:	07df      	lsls	r7, r3, #31
 800721a:	d508      	bpl.n	800722e <_printf_i+0x146>
 800721c:	6923      	ldr	r3, [r4, #16]
 800721e:	6861      	ldr	r1, [r4, #4]
 8007220:	4299      	cmp	r1, r3
 8007222:	bfde      	ittt	le
 8007224:	2330      	movle	r3, #48	@ 0x30
 8007226:	f806 3c01 	strble.w	r3, [r6, #-1]
 800722a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800722e:	1b92      	subs	r2, r2, r6
 8007230:	6122      	str	r2, [r4, #16]
 8007232:	464b      	mov	r3, r9
 8007234:	4621      	mov	r1, r4
 8007236:	4640      	mov	r0, r8
 8007238:	f8cd a000 	str.w	sl, [sp]
 800723c:	aa03      	add	r2, sp, #12
 800723e:	f7ff fee1 	bl	8007004 <_printf_common>
 8007242:	3001      	adds	r0, #1
 8007244:	d14a      	bne.n	80072dc <_printf_i+0x1f4>
 8007246:	f04f 30ff 	mov.w	r0, #4294967295
 800724a:	b004      	add	sp, #16
 800724c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007250:	6823      	ldr	r3, [r4, #0]
 8007252:	f043 0320 	orr.w	r3, r3, #32
 8007256:	6023      	str	r3, [r4, #0]
 8007258:	2778      	movs	r7, #120	@ 0x78
 800725a:	4832      	ldr	r0, [pc, #200]	@ (8007324 <_printf_i+0x23c>)
 800725c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007260:	6823      	ldr	r3, [r4, #0]
 8007262:	6831      	ldr	r1, [r6, #0]
 8007264:	061f      	lsls	r7, r3, #24
 8007266:	f851 5b04 	ldr.w	r5, [r1], #4
 800726a:	d402      	bmi.n	8007272 <_printf_i+0x18a>
 800726c:	065f      	lsls	r7, r3, #25
 800726e:	bf48      	it	mi
 8007270:	b2ad      	uxthmi	r5, r5
 8007272:	6031      	str	r1, [r6, #0]
 8007274:	07d9      	lsls	r1, r3, #31
 8007276:	bf44      	itt	mi
 8007278:	f043 0320 	orrmi.w	r3, r3, #32
 800727c:	6023      	strmi	r3, [r4, #0]
 800727e:	b11d      	cbz	r5, 8007288 <_printf_i+0x1a0>
 8007280:	2310      	movs	r3, #16
 8007282:	e7ab      	b.n	80071dc <_printf_i+0xf4>
 8007284:	4826      	ldr	r0, [pc, #152]	@ (8007320 <_printf_i+0x238>)
 8007286:	e7e9      	b.n	800725c <_printf_i+0x174>
 8007288:	6823      	ldr	r3, [r4, #0]
 800728a:	f023 0320 	bic.w	r3, r3, #32
 800728e:	6023      	str	r3, [r4, #0]
 8007290:	e7f6      	b.n	8007280 <_printf_i+0x198>
 8007292:	4616      	mov	r6, r2
 8007294:	e7bd      	b.n	8007212 <_printf_i+0x12a>
 8007296:	6833      	ldr	r3, [r6, #0]
 8007298:	6825      	ldr	r5, [r4, #0]
 800729a:	1d18      	adds	r0, r3, #4
 800729c:	6961      	ldr	r1, [r4, #20]
 800729e:	6030      	str	r0, [r6, #0]
 80072a0:	062e      	lsls	r6, r5, #24
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	d501      	bpl.n	80072aa <_printf_i+0x1c2>
 80072a6:	6019      	str	r1, [r3, #0]
 80072a8:	e002      	b.n	80072b0 <_printf_i+0x1c8>
 80072aa:	0668      	lsls	r0, r5, #25
 80072ac:	d5fb      	bpl.n	80072a6 <_printf_i+0x1be>
 80072ae:	8019      	strh	r1, [r3, #0]
 80072b0:	2300      	movs	r3, #0
 80072b2:	4616      	mov	r6, r2
 80072b4:	6123      	str	r3, [r4, #16]
 80072b6:	e7bc      	b.n	8007232 <_printf_i+0x14a>
 80072b8:	6833      	ldr	r3, [r6, #0]
 80072ba:	2100      	movs	r1, #0
 80072bc:	1d1a      	adds	r2, r3, #4
 80072be:	6032      	str	r2, [r6, #0]
 80072c0:	681e      	ldr	r6, [r3, #0]
 80072c2:	6862      	ldr	r2, [r4, #4]
 80072c4:	4630      	mov	r0, r6
 80072c6:	f000 f9d4 	bl	8007672 <memchr>
 80072ca:	b108      	cbz	r0, 80072d0 <_printf_i+0x1e8>
 80072cc:	1b80      	subs	r0, r0, r6
 80072ce:	6060      	str	r0, [r4, #4]
 80072d0:	6863      	ldr	r3, [r4, #4]
 80072d2:	6123      	str	r3, [r4, #16]
 80072d4:	2300      	movs	r3, #0
 80072d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072da:	e7aa      	b.n	8007232 <_printf_i+0x14a>
 80072dc:	4632      	mov	r2, r6
 80072de:	4649      	mov	r1, r9
 80072e0:	4640      	mov	r0, r8
 80072e2:	6923      	ldr	r3, [r4, #16]
 80072e4:	47d0      	blx	sl
 80072e6:	3001      	adds	r0, #1
 80072e8:	d0ad      	beq.n	8007246 <_printf_i+0x15e>
 80072ea:	6823      	ldr	r3, [r4, #0]
 80072ec:	079b      	lsls	r3, r3, #30
 80072ee:	d413      	bmi.n	8007318 <_printf_i+0x230>
 80072f0:	68e0      	ldr	r0, [r4, #12]
 80072f2:	9b03      	ldr	r3, [sp, #12]
 80072f4:	4298      	cmp	r0, r3
 80072f6:	bfb8      	it	lt
 80072f8:	4618      	movlt	r0, r3
 80072fa:	e7a6      	b.n	800724a <_printf_i+0x162>
 80072fc:	2301      	movs	r3, #1
 80072fe:	4632      	mov	r2, r6
 8007300:	4649      	mov	r1, r9
 8007302:	4640      	mov	r0, r8
 8007304:	47d0      	blx	sl
 8007306:	3001      	adds	r0, #1
 8007308:	d09d      	beq.n	8007246 <_printf_i+0x15e>
 800730a:	3501      	adds	r5, #1
 800730c:	68e3      	ldr	r3, [r4, #12]
 800730e:	9903      	ldr	r1, [sp, #12]
 8007310:	1a5b      	subs	r3, r3, r1
 8007312:	42ab      	cmp	r3, r5
 8007314:	dcf2      	bgt.n	80072fc <_printf_i+0x214>
 8007316:	e7eb      	b.n	80072f0 <_printf_i+0x208>
 8007318:	2500      	movs	r5, #0
 800731a:	f104 0619 	add.w	r6, r4, #25
 800731e:	e7f5      	b.n	800730c <_printf_i+0x224>
 8007320:	08009ed4 	.word	0x08009ed4
 8007324:	08009ee5 	.word	0x08009ee5

08007328 <std>:
 8007328:	2300      	movs	r3, #0
 800732a:	b510      	push	{r4, lr}
 800732c:	4604      	mov	r4, r0
 800732e:	e9c0 3300 	strd	r3, r3, [r0]
 8007332:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007336:	6083      	str	r3, [r0, #8]
 8007338:	8181      	strh	r1, [r0, #12]
 800733a:	6643      	str	r3, [r0, #100]	@ 0x64
 800733c:	81c2      	strh	r2, [r0, #14]
 800733e:	6183      	str	r3, [r0, #24]
 8007340:	4619      	mov	r1, r3
 8007342:	2208      	movs	r2, #8
 8007344:	305c      	adds	r0, #92	@ 0x5c
 8007346:	f000 f914 	bl	8007572 <memset>
 800734a:	4b0d      	ldr	r3, [pc, #52]	@ (8007380 <std+0x58>)
 800734c:	6224      	str	r4, [r4, #32]
 800734e:	6263      	str	r3, [r4, #36]	@ 0x24
 8007350:	4b0c      	ldr	r3, [pc, #48]	@ (8007384 <std+0x5c>)
 8007352:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007354:	4b0c      	ldr	r3, [pc, #48]	@ (8007388 <std+0x60>)
 8007356:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007358:	4b0c      	ldr	r3, [pc, #48]	@ (800738c <std+0x64>)
 800735a:	6323      	str	r3, [r4, #48]	@ 0x30
 800735c:	4b0c      	ldr	r3, [pc, #48]	@ (8007390 <std+0x68>)
 800735e:	429c      	cmp	r4, r3
 8007360:	d006      	beq.n	8007370 <std+0x48>
 8007362:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007366:	4294      	cmp	r4, r2
 8007368:	d002      	beq.n	8007370 <std+0x48>
 800736a:	33d0      	adds	r3, #208	@ 0xd0
 800736c:	429c      	cmp	r4, r3
 800736e:	d105      	bne.n	800737c <std+0x54>
 8007370:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007378:	f000 b978 	b.w	800766c <__retarget_lock_init_recursive>
 800737c:	bd10      	pop	{r4, pc}
 800737e:	bf00      	nop
 8007380:	080074ed 	.word	0x080074ed
 8007384:	0800750f 	.word	0x0800750f
 8007388:	08007547 	.word	0x08007547
 800738c:	0800756b 	.word	0x0800756b
 8007390:	200004f4 	.word	0x200004f4

08007394 <stdio_exit_handler>:
 8007394:	4a02      	ldr	r2, [pc, #8]	@ (80073a0 <stdio_exit_handler+0xc>)
 8007396:	4903      	ldr	r1, [pc, #12]	@ (80073a4 <stdio_exit_handler+0x10>)
 8007398:	4803      	ldr	r0, [pc, #12]	@ (80073a8 <stdio_exit_handler+0x14>)
 800739a:	f000 b869 	b.w	8007470 <_fwalk_sglue>
 800739e:	bf00      	nop
 80073a0:	2000009c 	.word	0x2000009c
 80073a4:	08008fdd 	.word	0x08008fdd
 80073a8:	200000ac 	.word	0x200000ac

080073ac <cleanup_stdio>:
 80073ac:	6841      	ldr	r1, [r0, #4]
 80073ae:	4b0c      	ldr	r3, [pc, #48]	@ (80073e0 <cleanup_stdio+0x34>)
 80073b0:	b510      	push	{r4, lr}
 80073b2:	4299      	cmp	r1, r3
 80073b4:	4604      	mov	r4, r0
 80073b6:	d001      	beq.n	80073bc <cleanup_stdio+0x10>
 80073b8:	f001 fe10 	bl	8008fdc <_fflush_r>
 80073bc:	68a1      	ldr	r1, [r4, #8]
 80073be:	4b09      	ldr	r3, [pc, #36]	@ (80073e4 <cleanup_stdio+0x38>)
 80073c0:	4299      	cmp	r1, r3
 80073c2:	d002      	beq.n	80073ca <cleanup_stdio+0x1e>
 80073c4:	4620      	mov	r0, r4
 80073c6:	f001 fe09 	bl	8008fdc <_fflush_r>
 80073ca:	68e1      	ldr	r1, [r4, #12]
 80073cc:	4b06      	ldr	r3, [pc, #24]	@ (80073e8 <cleanup_stdio+0x3c>)
 80073ce:	4299      	cmp	r1, r3
 80073d0:	d004      	beq.n	80073dc <cleanup_stdio+0x30>
 80073d2:	4620      	mov	r0, r4
 80073d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073d8:	f001 be00 	b.w	8008fdc <_fflush_r>
 80073dc:	bd10      	pop	{r4, pc}
 80073de:	bf00      	nop
 80073e0:	200004f4 	.word	0x200004f4
 80073e4:	2000055c 	.word	0x2000055c
 80073e8:	200005c4 	.word	0x200005c4

080073ec <global_stdio_init.part.0>:
 80073ec:	b510      	push	{r4, lr}
 80073ee:	4b0b      	ldr	r3, [pc, #44]	@ (800741c <global_stdio_init.part.0+0x30>)
 80073f0:	4c0b      	ldr	r4, [pc, #44]	@ (8007420 <global_stdio_init.part.0+0x34>)
 80073f2:	4a0c      	ldr	r2, [pc, #48]	@ (8007424 <global_stdio_init.part.0+0x38>)
 80073f4:	4620      	mov	r0, r4
 80073f6:	601a      	str	r2, [r3, #0]
 80073f8:	2104      	movs	r1, #4
 80073fa:	2200      	movs	r2, #0
 80073fc:	f7ff ff94 	bl	8007328 <std>
 8007400:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007404:	2201      	movs	r2, #1
 8007406:	2109      	movs	r1, #9
 8007408:	f7ff ff8e 	bl	8007328 <std>
 800740c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007410:	2202      	movs	r2, #2
 8007412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007416:	2112      	movs	r1, #18
 8007418:	f7ff bf86 	b.w	8007328 <std>
 800741c:	2000062c 	.word	0x2000062c
 8007420:	200004f4 	.word	0x200004f4
 8007424:	08007395 	.word	0x08007395

08007428 <__sfp_lock_acquire>:
 8007428:	4801      	ldr	r0, [pc, #4]	@ (8007430 <__sfp_lock_acquire+0x8>)
 800742a:	f000 b920 	b.w	800766e <__retarget_lock_acquire_recursive>
 800742e:	bf00      	nop
 8007430:	20000635 	.word	0x20000635

08007434 <__sfp_lock_release>:
 8007434:	4801      	ldr	r0, [pc, #4]	@ (800743c <__sfp_lock_release+0x8>)
 8007436:	f000 b91b 	b.w	8007670 <__retarget_lock_release_recursive>
 800743a:	bf00      	nop
 800743c:	20000635 	.word	0x20000635

08007440 <__sinit>:
 8007440:	b510      	push	{r4, lr}
 8007442:	4604      	mov	r4, r0
 8007444:	f7ff fff0 	bl	8007428 <__sfp_lock_acquire>
 8007448:	6a23      	ldr	r3, [r4, #32]
 800744a:	b11b      	cbz	r3, 8007454 <__sinit+0x14>
 800744c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007450:	f7ff bff0 	b.w	8007434 <__sfp_lock_release>
 8007454:	4b04      	ldr	r3, [pc, #16]	@ (8007468 <__sinit+0x28>)
 8007456:	6223      	str	r3, [r4, #32]
 8007458:	4b04      	ldr	r3, [pc, #16]	@ (800746c <__sinit+0x2c>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d1f5      	bne.n	800744c <__sinit+0xc>
 8007460:	f7ff ffc4 	bl	80073ec <global_stdio_init.part.0>
 8007464:	e7f2      	b.n	800744c <__sinit+0xc>
 8007466:	bf00      	nop
 8007468:	080073ad 	.word	0x080073ad
 800746c:	2000062c 	.word	0x2000062c

08007470 <_fwalk_sglue>:
 8007470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007474:	4607      	mov	r7, r0
 8007476:	4688      	mov	r8, r1
 8007478:	4614      	mov	r4, r2
 800747a:	2600      	movs	r6, #0
 800747c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007480:	f1b9 0901 	subs.w	r9, r9, #1
 8007484:	d505      	bpl.n	8007492 <_fwalk_sglue+0x22>
 8007486:	6824      	ldr	r4, [r4, #0]
 8007488:	2c00      	cmp	r4, #0
 800748a:	d1f7      	bne.n	800747c <_fwalk_sglue+0xc>
 800748c:	4630      	mov	r0, r6
 800748e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007492:	89ab      	ldrh	r3, [r5, #12]
 8007494:	2b01      	cmp	r3, #1
 8007496:	d907      	bls.n	80074a8 <_fwalk_sglue+0x38>
 8007498:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800749c:	3301      	adds	r3, #1
 800749e:	d003      	beq.n	80074a8 <_fwalk_sglue+0x38>
 80074a0:	4629      	mov	r1, r5
 80074a2:	4638      	mov	r0, r7
 80074a4:	47c0      	blx	r8
 80074a6:	4306      	orrs	r6, r0
 80074a8:	3568      	adds	r5, #104	@ 0x68
 80074aa:	e7e9      	b.n	8007480 <_fwalk_sglue+0x10>

080074ac <siprintf>:
 80074ac:	b40e      	push	{r1, r2, r3}
 80074ae:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80074b2:	b500      	push	{lr}
 80074b4:	b09c      	sub	sp, #112	@ 0x70
 80074b6:	ab1d      	add	r3, sp, #116	@ 0x74
 80074b8:	9002      	str	r0, [sp, #8]
 80074ba:	9006      	str	r0, [sp, #24]
 80074bc:	9107      	str	r1, [sp, #28]
 80074be:	9104      	str	r1, [sp, #16]
 80074c0:	4808      	ldr	r0, [pc, #32]	@ (80074e4 <siprintf+0x38>)
 80074c2:	4909      	ldr	r1, [pc, #36]	@ (80074e8 <siprintf+0x3c>)
 80074c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80074c8:	9105      	str	r1, [sp, #20]
 80074ca:	6800      	ldr	r0, [r0, #0]
 80074cc:	a902      	add	r1, sp, #8
 80074ce:	9301      	str	r3, [sp, #4]
 80074d0:	f001 fc08 	bl	8008ce4 <_svfiprintf_r>
 80074d4:	2200      	movs	r2, #0
 80074d6:	9b02      	ldr	r3, [sp, #8]
 80074d8:	701a      	strb	r2, [r3, #0]
 80074da:	b01c      	add	sp, #112	@ 0x70
 80074dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80074e0:	b003      	add	sp, #12
 80074e2:	4770      	bx	lr
 80074e4:	200000a8 	.word	0x200000a8
 80074e8:	ffff0208 	.word	0xffff0208

080074ec <__sread>:
 80074ec:	b510      	push	{r4, lr}
 80074ee:	460c      	mov	r4, r1
 80074f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074f4:	f000 f86c 	bl	80075d0 <_read_r>
 80074f8:	2800      	cmp	r0, #0
 80074fa:	bfab      	itete	ge
 80074fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80074fe:	89a3      	ldrhlt	r3, [r4, #12]
 8007500:	181b      	addge	r3, r3, r0
 8007502:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007506:	bfac      	ite	ge
 8007508:	6563      	strge	r3, [r4, #84]	@ 0x54
 800750a:	81a3      	strhlt	r3, [r4, #12]
 800750c:	bd10      	pop	{r4, pc}

0800750e <__swrite>:
 800750e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007512:	461f      	mov	r7, r3
 8007514:	898b      	ldrh	r3, [r1, #12]
 8007516:	4605      	mov	r5, r0
 8007518:	05db      	lsls	r3, r3, #23
 800751a:	460c      	mov	r4, r1
 800751c:	4616      	mov	r6, r2
 800751e:	d505      	bpl.n	800752c <__swrite+0x1e>
 8007520:	2302      	movs	r3, #2
 8007522:	2200      	movs	r2, #0
 8007524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007528:	f000 f840 	bl	80075ac <_lseek_r>
 800752c:	89a3      	ldrh	r3, [r4, #12]
 800752e:	4632      	mov	r2, r6
 8007530:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007534:	81a3      	strh	r3, [r4, #12]
 8007536:	4628      	mov	r0, r5
 8007538:	463b      	mov	r3, r7
 800753a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800753e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007542:	f000 b857 	b.w	80075f4 <_write_r>

08007546 <__sseek>:
 8007546:	b510      	push	{r4, lr}
 8007548:	460c      	mov	r4, r1
 800754a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800754e:	f000 f82d 	bl	80075ac <_lseek_r>
 8007552:	1c43      	adds	r3, r0, #1
 8007554:	89a3      	ldrh	r3, [r4, #12]
 8007556:	bf15      	itete	ne
 8007558:	6560      	strne	r0, [r4, #84]	@ 0x54
 800755a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800755e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007562:	81a3      	strheq	r3, [r4, #12]
 8007564:	bf18      	it	ne
 8007566:	81a3      	strhne	r3, [r4, #12]
 8007568:	bd10      	pop	{r4, pc}

0800756a <__sclose>:
 800756a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800756e:	f000 b80d 	b.w	800758c <_close_r>

08007572 <memset>:
 8007572:	4603      	mov	r3, r0
 8007574:	4402      	add	r2, r0
 8007576:	4293      	cmp	r3, r2
 8007578:	d100      	bne.n	800757c <memset+0xa>
 800757a:	4770      	bx	lr
 800757c:	f803 1b01 	strb.w	r1, [r3], #1
 8007580:	e7f9      	b.n	8007576 <memset+0x4>
	...

08007584 <_localeconv_r>:
 8007584:	4800      	ldr	r0, [pc, #0]	@ (8007588 <_localeconv_r+0x4>)
 8007586:	4770      	bx	lr
 8007588:	200001e8 	.word	0x200001e8

0800758c <_close_r>:
 800758c:	b538      	push	{r3, r4, r5, lr}
 800758e:	2300      	movs	r3, #0
 8007590:	4d05      	ldr	r5, [pc, #20]	@ (80075a8 <_close_r+0x1c>)
 8007592:	4604      	mov	r4, r0
 8007594:	4608      	mov	r0, r1
 8007596:	602b      	str	r3, [r5, #0]
 8007598:	f7fa fceb 	bl	8001f72 <_close>
 800759c:	1c43      	adds	r3, r0, #1
 800759e:	d102      	bne.n	80075a6 <_close_r+0x1a>
 80075a0:	682b      	ldr	r3, [r5, #0]
 80075a2:	b103      	cbz	r3, 80075a6 <_close_r+0x1a>
 80075a4:	6023      	str	r3, [r4, #0]
 80075a6:	bd38      	pop	{r3, r4, r5, pc}
 80075a8:	20000630 	.word	0x20000630

080075ac <_lseek_r>:
 80075ac:	b538      	push	{r3, r4, r5, lr}
 80075ae:	4604      	mov	r4, r0
 80075b0:	4608      	mov	r0, r1
 80075b2:	4611      	mov	r1, r2
 80075b4:	2200      	movs	r2, #0
 80075b6:	4d05      	ldr	r5, [pc, #20]	@ (80075cc <_lseek_r+0x20>)
 80075b8:	602a      	str	r2, [r5, #0]
 80075ba:	461a      	mov	r2, r3
 80075bc:	f7fa fcfd 	bl	8001fba <_lseek>
 80075c0:	1c43      	adds	r3, r0, #1
 80075c2:	d102      	bne.n	80075ca <_lseek_r+0x1e>
 80075c4:	682b      	ldr	r3, [r5, #0]
 80075c6:	b103      	cbz	r3, 80075ca <_lseek_r+0x1e>
 80075c8:	6023      	str	r3, [r4, #0]
 80075ca:	bd38      	pop	{r3, r4, r5, pc}
 80075cc:	20000630 	.word	0x20000630

080075d0 <_read_r>:
 80075d0:	b538      	push	{r3, r4, r5, lr}
 80075d2:	4604      	mov	r4, r0
 80075d4:	4608      	mov	r0, r1
 80075d6:	4611      	mov	r1, r2
 80075d8:	2200      	movs	r2, #0
 80075da:	4d05      	ldr	r5, [pc, #20]	@ (80075f0 <_read_r+0x20>)
 80075dc:	602a      	str	r2, [r5, #0]
 80075de:	461a      	mov	r2, r3
 80075e0:	f7fa fc8e 	bl	8001f00 <_read>
 80075e4:	1c43      	adds	r3, r0, #1
 80075e6:	d102      	bne.n	80075ee <_read_r+0x1e>
 80075e8:	682b      	ldr	r3, [r5, #0]
 80075ea:	b103      	cbz	r3, 80075ee <_read_r+0x1e>
 80075ec:	6023      	str	r3, [r4, #0]
 80075ee:	bd38      	pop	{r3, r4, r5, pc}
 80075f0:	20000630 	.word	0x20000630

080075f4 <_write_r>:
 80075f4:	b538      	push	{r3, r4, r5, lr}
 80075f6:	4604      	mov	r4, r0
 80075f8:	4608      	mov	r0, r1
 80075fa:	4611      	mov	r1, r2
 80075fc:	2200      	movs	r2, #0
 80075fe:	4d05      	ldr	r5, [pc, #20]	@ (8007614 <_write_r+0x20>)
 8007600:	602a      	str	r2, [r5, #0]
 8007602:	461a      	mov	r2, r3
 8007604:	f7fa fc99 	bl	8001f3a <_write>
 8007608:	1c43      	adds	r3, r0, #1
 800760a:	d102      	bne.n	8007612 <_write_r+0x1e>
 800760c:	682b      	ldr	r3, [r5, #0]
 800760e:	b103      	cbz	r3, 8007612 <_write_r+0x1e>
 8007610:	6023      	str	r3, [r4, #0]
 8007612:	bd38      	pop	{r3, r4, r5, pc}
 8007614:	20000630 	.word	0x20000630

08007618 <__errno>:
 8007618:	4b01      	ldr	r3, [pc, #4]	@ (8007620 <__errno+0x8>)
 800761a:	6818      	ldr	r0, [r3, #0]
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop
 8007620:	200000a8 	.word	0x200000a8

08007624 <__libc_init_array>:
 8007624:	b570      	push	{r4, r5, r6, lr}
 8007626:	2600      	movs	r6, #0
 8007628:	4d0c      	ldr	r5, [pc, #48]	@ (800765c <__libc_init_array+0x38>)
 800762a:	4c0d      	ldr	r4, [pc, #52]	@ (8007660 <__libc_init_array+0x3c>)
 800762c:	1b64      	subs	r4, r4, r5
 800762e:	10a4      	asrs	r4, r4, #2
 8007630:	42a6      	cmp	r6, r4
 8007632:	d109      	bne.n	8007648 <__libc_init_array+0x24>
 8007634:	f002 fbd2 	bl	8009ddc <_init>
 8007638:	2600      	movs	r6, #0
 800763a:	4d0a      	ldr	r5, [pc, #40]	@ (8007664 <__libc_init_array+0x40>)
 800763c:	4c0a      	ldr	r4, [pc, #40]	@ (8007668 <__libc_init_array+0x44>)
 800763e:	1b64      	subs	r4, r4, r5
 8007640:	10a4      	asrs	r4, r4, #2
 8007642:	42a6      	cmp	r6, r4
 8007644:	d105      	bne.n	8007652 <__libc_init_array+0x2e>
 8007646:	bd70      	pop	{r4, r5, r6, pc}
 8007648:	f855 3b04 	ldr.w	r3, [r5], #4
 800764c:	4798      	blx	r3
 800764e:	3601      	adds	r6, #1
 8007650:	e7ee      	b.n	8007630 <__libc_init_array+0xc>
 8007652:	f855 3b04 	ldr.w	r3, [r5], #4
 8007656:	4798      	blx	r3
 8007658:	3601      	adds	r6, #1
 800765a:	e7f2      	b.n	8007642 <__libc_init_array+0x1e>
 800765c:	0800a2a8 	.word	0x0800a2a8
 8007660:	0800a2a8 	.word	0x0800a2a8
 8007664:	0800a2a8 	.word	0x0800a2a8
 8007668:	0800a2ac 	.word	0x0800a2ac

0800766c <__retarget_lock_init_recursive>:
 800766c:	4770      	bx	lr

0800766e <__retarget_lock_acquire_recursive>:
 800766e:	4770      	bx	lr

08007670 <__retarget_lock_release_recursive>:
 8007670:	4770      	bx	lr

08007672 <memchr>:
 8007672:	4603      	mov	r3, r0
 8007674:	b510      	push	{r4, lr}
 8007676:	b2c9      	uxtb	r1, r1
 8007678:	4402      	add	r2, r0
 800767a:	4293      	cmp	r3, r2
 800767c:	4618      	mov	r0, r3
 800767e:	d101      	bne.n	8007684 <memchr+0x12>
 8007680:	2000      	movs	r0, #0
 8007682:	e003      	b.n	800768c <memchr+0x1a>
 8007684:	7804      	ldrb	r4, [r0, #0]
 8007686:	3301      	adds	r3, #1
 8007688:	428c      	cmp	r4, r1
 800768a:	d1f6      	bne.n	800767a <memchr+0x8>
 800768c:	bd10      	pop	{r4, pc}

0800768e <quorem>:
 800768e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007692:	6903      	ldr	r3, [r0, #16]
 8007694:	690c      	ldr	r4, [r1, #16]
 8007696:	4607      	mov	r7, r0
 8007698:	42a3      	cmp	r3, r4
 800769a:	db7e      	blt.n	800779a <quorem+0x10c>
 800769c:	3c01      	subs	r4, #1
 800769e:	00a3      	lsls	r3, r4, #2
 80076a0:	f100 0514 	add.w	r5, r0, #20
 80076a4:	f101 0814 	add.w	r8, r1, #20
 80076a8:	9300      	str	r3, [sp, #0]
 80076aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076ae:	9301      	str	r3, [sp, #4]
 80076b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80076b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076b8:	3301      	adds	r3, #1
 80076ba:	429a      	cmp	r2, r3
 80076bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80076c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80076c4:	d32e      	bcc.n	8007724 <quorem+0x96>
 80076c6:	f04f 0a00 	mov.w	sl, #0
 80076ca:	46c4      	mov	ip, r8
 80076cc:	46ae      	mov	lr, r5
 80076ce:	46d3      	mov	fp, sl
 80076d0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80076d4:	b298      	uxth	r0, r3
 80076d6:	fb06 a000 	mla	r0, r6, r0, sl
 80076da:	0c1b      	lsrs	r3, r3, #16
 80076dc:	0c02      	lsrs	r2, r0, #16
 80076de:	fb06 2303 	mla	r3, r6, r3, r2
 80076e2:	f8de 2000 	ldr.w	r2, [lr]
 80076e6:	b280      	uxth	r0, r0
 80076e8:	b292      	uxth	r2, r2
 80076ea:	1a12      	subs	r2, r2, r0
 80076ec:	445a      	add	r2, fp
 80076ee:	f8de 0000 	ldr.w	r0, [lr]
 80076f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80076fc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007700:	b292      	uxth	r2, r2
 8007702:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007706:	45e1      	cmp	r9, ip
 8007708:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800770c:	f84e 2b04 	str.w	r2, [lr], #4
 8007710:	d2de      	bcs.n	80076d0 <quorem+0x42>
 8007712:	9b00      	ldr	r3, [sp, #0]
 8007714:	58eb      	ldr	r3, [r5, r3]
 8007716:	b92b      	cbnz	r3, 8007724 <quorem+0x96>
 8007718:	9b01      	ldr	r3, [sp, #4]
 800771a:	3b04      	subs	r3, #4
 800771c:	429d      	cmp	r5, r3
 800771e:	461a      	mov	r2, r3
 8007720:	d32f      	bcc.n	8007782 <quorem+0xf4>
 8007722:	613c      	str	r4, [r7, #16]
 8007724:	4638      	mov	r0, r7
 8007726:	f001 f979 	bl	8008a1c <__mcmp>
 800772a:	2800      	cmp	r0, #0
 800772c:	db25      	blt.n	800777a <quorem+0xec>
 800772e:	4629      	mov	r1, r5
 8007730:	2000      	movs	r0, #0
 8007732:	f858 2b04 	ldr.w	r2, [r8], #4
 8007736:	f8d1 c000 	ldr.w	ip, [r1]
 800773a:	fa1f fe82 	uxth.w	lr, r2
 800773e:	fa1f f38c 	uxth.w	r3, ip
 8007742:	eba3 030e 	sub.w	r3, r3, lr
 8007746:	4403      	add	r3, r0
 8007748:	0c12      	lsrs	r2, r2, #16
 800774a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800774e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007752:	b29b      	uxth	r3, r3
 8007754:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007758:	45c1      	cmp	r9, r8
 800775a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800775e:	f841 3b04 	str.w	r3, [r1], #4
 8007762:	d2e6      	bcs.n	8007732 <quorem+0xa4>
 8007764:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007768:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800776c:	b922      	cbnz	r2, 8007778 <quorem+0xea>
 800776e:	3b04      	subs	r3, #4
 8007770:	429d      	cmp	r5, r3
 8007772:	461a      	mov	r2, r3
 8007774:	d30b      	bcc.n	800778e <quorem+0x100>
 8007776:	613c      	str	r4, [r7, #16]
 8007778:	3601      	adds	r6, #1
 800777a:	4630      	mov	r0, r6
 800777c:	b003      	add	sp, #12
 800777e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007782:	6812      	ldr	r2, [r2, #0]
 8007784:	3b04      	subs	r3, #4
 8007786:	2a00      	cmp	r2, #0
 8007788:	d1cb      	bne.n	8007722 <quorem+0x94>
 800778a:	3c01      	subs	r4, #1
 800778c:	e7c6      	b.n	800771c <quorem+0x8e>
 800778e:	6812      	ldr	r2, [r2, #0]
 8007790:	3b04      	subs	r3, #4
 8007792:	2a00      	cmp	r2, #0
 8007794:	d1ef      	bne.n	8007776 <quorem+0xe8>
 8007796:	3c01      	subs	r4, #1
 8007798:	e7ea      	b.n	8007770 <quorem+0xe2>
 800779a:	2000      	movs	r0, #0
 800779c:	e7ee      	b.n	800777c <quorem+0xee>
	...

080077a0 <_dtoa_r>:
 80077a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077a4:	4614      	mov	r4, r2
 80077a6:	461d      	mov	r5, r3
 80077a8:	69c7      	ldr	r7, [r0, #28]
 80077aa:	b097      	sub	sp, #92	@ 0x5c
 80077ac:	4683      	mov	fp, r0
 80077ae:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80077b2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80077b4:	b97f      	cbnz	r7, 80077d6 <_dtoa_r+0x36>
 80077b6:	2010      	movs	r0, #16
 80077b8:	f000 fe02 	bl	80083c0 <malloc>
 80077bc:	4602      	mov	r2, r0
 80077be:	f8cb 001c 	str.w	r0, [fp, #28]
 80077c2:	b920      	cbnz	r0, 80077ce <_dtoa_r+0x2e>
 80077c4:	21ef      	movs	r1, #239	@ 0xef
 80077c6:	4ba8      	ldr	r3, [pc, #672]	@ (8007a68 <_dtoa_r+0x2c8>)
 80077c8:	48a8      	ldr	r0, [pc, #672]	@ (8007a6c <_dtoa_r+0x2cc>)
 80077ca:	f001 fc67 	bl	800909c <__assert_func>
 80077ce:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80077d2:	6007      	str	r7, [r0, #0]
 80077d4:	60c7      	str	r7, [r0, #12]
 80077d6:	f8db 301c 	ldr.w	r3, [fp, #28]
 80077da:	6819      	ldr	r1, [r3, #0]
 80077dc:	b159      	cbz	r1, 80077f6 <_dtoa_r+0x56>
 80077de:	685a      	ldr	r2, [r3, #4]
 80077e0:	2301      	movs	r3, #1
 80077e2:	4093      	lsls	r3, r2
 80077e4:	604a      	str	r2, [r1, #4]
 80077e6:	608b      	str	r3, [r1, #8]
 80077e8:	4658      	mov	r0, fp
 80077ea:	f000 fedf 	bl	80085ac <_Bfree>
 80077ee:	2200      	movs	r2, #0
 80077f0:	f8db 301c 	ldr.w	r3, [fp, #28]
 80077f4:	601a      	str	r2, [r3, #0]
 80077f6:	1e2b      	subs	r3, r5, #0
 80077f8:	bfaf      	iteee	ge
 80077fa:	2300      	movge	r3, #0
 80077fc:	2201      	movlt	r2, #1
 80077fe:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007802:	9303      	strlt	r3, [sp, #12]
 8007804:	bfa8      	it	ge
 8007806:	6033      	strge	r3, [r6, #0]
 8007808:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800780c:	4b98      	ldr	r3, [pc, #608]	@ (8007a70 <_dtoa_r+0x2d0>)
 800780e:	bfb8      	it	lt
 8007810:	6032      	strlt	r2, [r6, #0]
 8007812:	ea33 0308 	bics.w	r3, r3, r8
 8007816:	d112      	bne.n	800783e <_dtoa_r+0x9e>
 8007818:	f242 730f 	movw	r3, #9999	@ 0x270f
 800781c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800781e:	6013      	str	r3, [r2, #0]
 8007820:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007824:	4323      	orrs	r3, r4
 8007826:	f000 8550 	beq.w	80082ca <_dtoa_r+0xb2a>
 800782a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800782c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8007a74 <_dtoa_r+0x2d4>
 8007830:	2b00      	cmp	r3, #0
 8007832:	f000 8552 	beq.w	80082da <_dtoa_r+0xb3a>
 8007836:	f10a 0303 	add.w	r3, sl, #3
 800783a:	f000 bd4c 	b.w	80082d6 <_dtoa_r+0xb36>
 800783e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007842:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007846:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800784a:	2200      	movs	r2, #0
 800784c:	2300      	movs	r3, #0
 800784e:	f7f9 f8ab 	bl	80009a8 <__aeabi_dcmpeq>
 8007852:	4607      	mov	r7, r0
 8007854:	b158      	cbz	r0, 800786e <_dtoa_r+0xce>
 8007856:	2301      	movs	r3, #1
 8007858:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800785a:	6013      	str	r3, [r2, #0]
 800785c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800785e:	b113      	cbz	r3, 8007866 <_dtoa_r+0xc6>
 8007860:	4b85      	ldr	r3, [pc, #532]	@ (8007a78 <_dtoa_r+0x2d8>)
 8007862:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007864:	6013      	str	r3, [r2, #0]
 8007866:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8007a7c <_dtoa_r+0x2dc>
 800786a:	f000 bd36 	b.w	80082da <_dtoa_r+0xb3a>
 800786e:	ab14      	add	r3, sp, #80	@ 0x50
 8007870:	9301      	str	r3, [sp, #4]
 8007872:	ab15      	add	r3, sp, #84	@ 0x54
 8007874:	9300      	str	r3, [sp, #0]
 8007876:	4658      	mov	r0, fp
 8007878:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800787c:	f001 f97e 	bl	8008b7c <__d2b>
 8007880:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007884:	4681      	mov	r9, r0
 8007886:	2e00      	cmp	r6, #0
 8007888:	d077      	beq.n	800797a <_dtoa_r+0x1da>
 800788a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800788e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007890:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007894:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007898:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800789c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80078a0:	9712      	str	r7, [sp, #72]	@ 0x48
 80078a2:	4619      	mov	r1, r3
 80078a4:	2200      	movs	r2, #0
 80078a6:	4b76      	ldr	r3, [pc, #472]	@ (8007a80 <_dtoa_r+0x2e0>)
 80078a8:	f7f8 fc5e 	bl	8000168 <__aeabi_dsub>
 80078ac:	a368      	add	r3, pc, #416	@ (adr r3, 8007a50 <_dtoa_r+0x2b0>)
 80078ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b2:	f7f8 fe11 	bl	80004d8 <__aeabi_dmul>
 80078b6:	a368      	add	r3, pc, #416	@ (adr r3, 8007a58 <_dtoa_r+0x2b8>)
 80078b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078bc:	f7f8 fc56 	bl	800016c <__adddf3>
 80078c0:	4604      	mov	r4, r0
 80078c2:	4630      	mov	r0, r6
 80078c4:	460d      	mov	r5, r1
 80078c6:	f7f8 fd9d 	bl	8000404 <__aeabi_i2d>
 80078ca:	a365      	add	r3, pc, #404	@ (adr r3, 8007a60 <_dtoa_r+0x2c0>)
 80078cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d0:	f7f8 fe02 	bl	80004d8 <__aeabi_dmul>
 80078d4:	4602      	mov	r2, r0
 80078d6:	460b      	mov	r3, r1
 80078d8:	4620      	mov	r0, r4
 80078da:	4629      	mov	r1, r5
 80078dc:	f7f8 fc46 	bl	800016c <__adddf3>
 80078e0:	4604      	mov	r4, r0
 80078e2:	460d      	mov	r5, r1
 80078e4:	f7f9 f8a8 	bl	8000a38 <__aeabi_d2iz>
 80078e8:	2200      	movs	r2, #0
 80078ea:	4607      	mov	r7, r0
 80078ec:	2300      	movs	r3, #0
 80078ee:	4620      	mov	r0, r4
 80078f0:	4629      	mov	r1, r5
 80078f2:	f7f9 f863 	bl	80009bc <__aeabi_dcmplt>
 80078f6:	b140      	cbz	r0, 800790a <_dtoa_r+0x16a>
 80078f8:	4638      	mov	r0, r7
 80078fa:	f7f8 fd83 	bl	8000404 <__aeabi_i2d>
 80078fe:	4622      	mov	r2, r4
 8007900:	462b      	mov	r3, r5
 8007902:	f7f9 f851 	bl	80009a8 <__aeabi_dcmpeq>
 8007906:	b900      	cbnz	r0, 800790a <_dtoa_r+0x16a>
 8007908:	3f01      	subs	r7, #1
 800790a:	2f16      	cmp	r7, #22
 800790c:	d853      	bhi.n	80079b6 <_dtoa_r+0x216>
 800790e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007912:	4b5c      	ldr	r3, [pc, #368]	@ (8007a84 <_dtoa_r+0x2e4>)
 8007914:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791c:	f7f9 f84e 	bl	80009bc <__aeabi_dcmplt>
 8007920:	2800      	cmp	r0, #0
 8007922:	d04a      	beq.n	80079ba <_dtoa_r+0x21a>
 8007924:	2300      	movs	r3, #0
 8007926:	3f01      	subs	r7, #1
 8007928:	930f      	str	r3, [sp, #60]	@ 0x3c
 800792a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800792c:	1b9b      	subs	r3, r3, r6
 800792e:	1e5a      	subs	r2, r3, #1
 8007930:	bf46      	itte	mi
 8007932:	f1c3 0801 	rsbmi	r8, r3, #1
 8007936:	2300      	movmi	r3, #0
 8007938:	f04f 0800 	movpl.w	r8, #0
 800793c:	9209      	str	r2, [sp, #36]	@ 0x24
 800793e:	bf48      	it	mi
 8007940:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007942:	2f00      	cmp	r7, #0
 8007944:	db3b      	blt.n	80079be <_dtoa_r+0x21e>
 8007946:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007948:	970e      	str	r7, [sp, #56]	@ 0x38
 800794a:	443b      	add	r3, r7
 800794c:	9309      	str	r3, [sp, #36]	@ 0x24
 800794e:	2300      	movs	r3, #0
 8007950:	930a      	str	r3, [sp, #40]	@ 0x28
 8007952:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007954:	2b09      	cmp	r3, #9
 8007956:	d866      	bhi.n	8007a26 <_dtoa_r+0x286>
 8007958:	2b05      	cmp	r3, #5
 800795a:	bfc4      	itt	gt
 800795c:	3b04      	subgt	r3, #4
 800795e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007960:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007962:	bfc8      	it	gt
 8007964:	2400      	movgt	r4, #0
 8007966:	f1a3 0302 	sub.w	r3, r3, #2
 800796a:	bfd8      	it	le
 800796c:	2401      	movle	r4, #1
 800796e:	2b03      	cmp	r3, #3
 8007970:	d864      	bhi.n	8007a3c <_dtoa_r+0x29c>
 8007972:	e8df f003 	tbb	[pc, r3]
 8007976:	382b      	.short	0x382b
 8007978:	5636      	.short	0x5636
 800797a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800797e:	441e      	add	r6, r3
 8007980:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007984:	2b20      	cmp	r3, #32
 8007986:	bfc1      	itttt	gt
 8007988:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800798c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007990:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007994:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007998:	bfd6      	itet	le
 800799a:	f1c3 0320 	rsble	r3, r3, #32
 800799e:	ea48 0003 	orrgt.w	r0, r8, r3
 80079a2:	fa04 f003 	lslle.w	r0, r4, r3
 80079a6:	f7f8 fd1d 	bl	80003e4 <__aeabi_ui2d>
 80079aa:	2201      	movs	r2, #1
 80079ac:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80079b0:	3e01      	subs	r6, #1
 80079b2:	9212      	str	r2, [sp, #72]	@ 0x48
 80079b4:	e775      	b.n	80078a2 <_dtoa_r+0x102>
 80079b6:	2301      	movs	r3, #1
 80079b8:	e7b6      	b.n	8007928 <_dtoa_r+0x188>
 80079ba:	900f      	str	r0, [sp, #60]	@ 0x3c
 80079bc:	e7b5      	b.n	800792a <_dtoa_r+0x18a>
 80079be:	427b      	negs	r3, r7
 80079c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80079c2:	2300      	movs	r3, #0
 80079c4:	eba8 0807 	sub.w	r8, r8, r7
 80079c8:	930e      	str	r3, [sp, #56]	@ 0x38
 80079ca:	e7c2      	b.n	8007952 <_dtoa_r+0x1b2>
 80079cc:	2300      	movs	r3, #0
 80079ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079d0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	dc35      	bgt.n	8007a42 <_dtoa_r+0x2a2>
 80079d6:	2301      	movs	r3, #1
 80079d8:	461a      	mov	r2, r3
 80079da:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80079de:	9221      	str	r2, [sp, #132]	@ 0x84
 80079e0:	e00b      	b.n	80079fa <_dtoa_r+0x25a>
 80079e2:	2301      	movs	r3, #1
 80079e4:	e7f3      	b.n	80079ce <_dtoa_r+0x22e>
 80079e6:	2300      	movs	r3, #0
 80079e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079ea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80079ec:	18fb      	adds	r3, r7, r3
 80079ee:	9308      	str	r3, [sp, #32]
 80079f0:	3301      	adds	r3, #1
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	9307      	str	r3, [sp, #28]
 80079f6:	bfb8      	it	lt
 80079f8:	2301      	movlt	r3, #1
 80079fa:	2100      	movs	r1, #0
 80079fc:	2204      	movs	r2, #4
 80079fe:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007a02:	f102 0514 	add.w	r5, r2, #20
 8007a06:	429d      	cmp	r5, r3
 8007a08:	d91f      	bls.n	8007a4a <_dtoa_r+0x2aa>
 8007a0a:	6041      	str	r1, [r0, #4]
 8007a0c:	4658      	mov	r0, fp
 8007a0e:	f000 fd8d 	bl	800852c <_Balloc>
 8007a12:	4682      	mov	sl, r0
 8007a14:	2800      	cmp	r0, #0
 8007a16:	d139      	bne.n	8007a8c <_dtoa_r+0x2ec>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	f240 11af 	movw	r1, #431	@ 0x1af
 8007a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8007a88 <_dtoa_r+0x2e8>)
 8007a20:	e6d2      	b.n	80077c8 <_dtoa_r+0x28>
 8007a22:	2301      	movs	r3, #1
 8007a24:	e7e0      	b.n	80079e8 <_dtoa_r+0x248>
 8007a26:	2401      	movs	r4, #1
 8007a28:	2300      	movs	r3, #0
 8007a2a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007a2c:	9320      	str	r3, [sp, #128]	@ 0x80
 8007a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a32:	2200      	movs	r2, #0
 8007a34:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007a38:	2312      	movs	r3, #18
 8007a3a:	e7d0      	b.n	80079de <_dtoa_r+0x23e>
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a40:	e7f5      	b.n	8007a2e <_dtoa_r+0x28e>
 8007a42:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007a44:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007a48:	e7d7      	b.n	80079fa <_dtoa_r+0x25a>
 8007a4a:	3101      	adds	r1, #1
 8007a4c:	0052      	lsls	r2, r2, #1
 8007a4e:	e7d8      	b.n	8007a02 <_dtoa_r+0x262>
 8007a50:	636f4361 	.word	0x636f4361
 8007a54:	3fd287a7 	.word	0x3fd287a7
 8007a58:	8b60c8b3 	.word	0x8b60c8b3
 8007a5c:	3fc68a28 	.word	0x3fc68a28
 8007a60:	509f79fb 	.word	0x509f79fb
 8007a64:	3fd34413 	.word	0x3fd34413
 8007a68:	08009f03 	.word	0x08009f03
 8007a6c:	08009f1a 	.word	0x08009f1a
 8007a70:	7ff00000 	.word	0x7ff00000
 8007a74:	08009eff 	.word	0x08009eff
 8007a78:	08009ed3 	.word	0x08009ed3
 8007a7c:	08009ed2 	.word	0x08009ed2
 8007a80:	3ff80000 	.word	0x3ff80000
 8007a84:	0800a010 	.word	0x0800a010
 8007a88:	08009f72 	.word	0x08009f72
 8007a8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007a90:	6018      	str	r0, [r3, #0]
 8007a92:	9b07      	ldr	r3, [sp, #28]
 8007a94:	2b0e      	cmp	r3, #14
 8007a96:	f200 80a4 	bhi.w	8007be2 <_dtoa_r+0x442>
 8007a9a:	2c00      	cmp	r4, #0
 8007a9c:	f000 80a1 	beq.w	8007be2 <_dtoa_r+0x442>
 8007aa0:	2f00      	cmp	r7, #0
 8007aa2:	dd33      	ble.n	8007b0c <_dtoa_r+0x36c>
 8007aa4:	4b86      	ldr	r3, [pc, #536]	@ (8007cc0 <_dtoa_r+0x520>)
 8007aa6:	f007 020f 	and.w	r2, r7, #15
 8007aaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007aae:	05f8      	lsls	r0, r7, #23
 8007ab0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007ab4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007ab8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007abc:	d516      	bpl.n	8007aec <_dtoa_r+0x34c>
 8007abe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ac2:	4b80      	ldr	r3, [pc, #512]	@ (8007cc4 <_dtoa_r+0x524>)
 8007ac4:	2603      	movs	r6, #3
 8007ac6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007aca:	f7f8 fe2f 	bl	800072c <__aeabi_ddiv>
 8007ace:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ad2:	f004 040f 	and.w	r4, r4, #15
 8007ad6:	4d7b      	ldr	r5, [pc, #492]	@ (8007cc4 <_dtoa_r+0x524>)
 8007ad8:	b954      	cbnz	r4, 8007af0 <_dtoa_r+0x350>
 8007ada:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ade:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ae2:	f7f8 fe23 	bl	800072c <__aeabi_ddiv>
 8007ae6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007aea:	e028      	b.n	8007b3e <_dtoa_r+0x39e>
 8007aec:	2602      	movs	r6, #2
 8007aee:	e7f2      	b.n	8007ad6 <_dtoa_r+0x336>
 8007af0:	07e1      	lsls	r1, r4, #31
 8007af2:	d508      	bpl.n	8007b06 <_dtoa_r+0x366>
 8007af4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007af8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007afc:	f7f8 fcec 	bl	80004d8 <__aeabi_dmul>
 8007b00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b04:	3601      	adds	r6, #1
 8007b06:	1064      	asrs	r4, r4, #1
 8007b08:	3508      	adds	r5, #8
 8007b0a:	e7e5      	b.n	8007ad8 <_dtoa_r+0x338>
 8007b0c:	f000 80d2 	beq.w	8007cb4 <_dtoa_r+0x514>
 8007b10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b14:	427c      	negs	r4, r7
 8007b16:	4b6a      	ldr	r3, [pc, #424]	@ (8007cc0 <_dtoa_r+0x520>)
 8007b18:	f004 020f 	and.w	r2, r4, #15
 8007b1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b24:	f7f8 fcd8 	bl	80004d8 <__aeabi_dmul>
 8007b28:	2602      	movs	r6, #2
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b30:	4d64      	ldr	r5, [pc, #400]	@ (8007cc4 <_dtoa_r+0x524>)
 8007b32:	1124      	asrs	r4, r4, #4
 8007b34:	2c00      	cmp	r4, #0
 8007b36:	f040 80b2 	bne.w	8007c9e <_dtoa_r+0x4fe>
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1d3      	bne.n	8007ae6 <_dtoa_r+0x346>
 8007b3e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007b42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	f000 80b7 	beq.w	8007cb8 <_dtoa_r+0x518>
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	4629      	mov	r1, r5
 8007b50:	4b5d      	ldr	r3, [pc, #372]	@ (8007cc8 <_dtoa_r+0x528>)
 8007b52:	f7f8 ff33 	bl	80009bc <__aeabi_dcmplt>
 8007b56:	2800      	cmp	r0, #0
 8007b58:	f000 80ae 	beq.w	8007cb8 <_dtoa_r+0x518>
 8007b5c:	9b07      	ldr	r3, [sp, #28]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	f000 80aa 	beq.w	8007cb8 <_dtoa_r+0x518>
 8007b64:	9b08      	ldr	r3, [sp, #32]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	dd37      	ble.n	8007bda <_dtoa_r+0x43a>
 8007b6a:	1e7b      	subs	r3, r7, #1
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	9304      	str	r3, [sp, #16]
 8007b70:	2200      	movs	r2, #0
 8007b72:	4629      	mov	r1, r5
 8007b74:	4b55      	ldr	r3, [pc, #340]	@ (8007ccc <_dtoa_r+0x52c>)
 8007b76:	f7f8 fcaf 	bl	80004d8 <__aeabi_dmul>
 8007b7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b7e:	9c08      	ldr	r4, [sp, #32]
 8007b80:	3601      	adds	r6, #1
 8007b82:	4630      	mov	r0, r6
 8007b84:	f7f8 fc3e 	bl	8000404 <__aeabi_i2d>
 8007b88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b8c:	f7f8 fca4 	bl	80004d8 <__aeabi_dmul>
 8007b90:	2200      	movs	r2, #0
 8007b92:	4b4f      	ldr	r3, [pc, #316]	@ (8007cd0 <_dtoa_r+0x530>)
 8007b94:	f7f8 faea 	bl	800016c <__adddf3>
 8007b98:	4605      	mov	r5, r0
 8007b9a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007b9e:	2c00      	cmp	r4, #0
 8007ba0:	f040 809a 	bne.w	8007cd8 <_dtoa_r+0x538>
 8007ba4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	4b4a      	ldr	r3, [pc, #296]	@ (8007cd4 <_dtoa_r+0x534>)
 8007bac:	f7f8 fadc 	bl	8000168 <__aeabi_dsub>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007bb8:	462a      	mov	r2, r5
 8007bba:	4633      	mov	r3, r6
 8007bbc:	f7f8 ff1c 	bl	80009f8 <__aeabi_dcmpgt>
 8007bc0:	2800      	cmp	r0, #0
 8007bc2:	f040 828e 	bne.w	80080e2 <_dtoa_r+0x942>
 8007bc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bca:	462a      	mov	r2, r5
 8007bcc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007bd0:	f7f8 fef4 	bl	80009bc <__aeabi_dcmplt>
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	f040 8127 	bne.w	8007e28 <_dtoa_r+0x688>
 8007bda:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007bde:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007be2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	f2c0 8163 	blt.w	8007eb0 <_dtoa_r+0x710>
 8007bea:	2f0e      	cmp	r7, #14
 8007bec:	f300 8160 	bgt.w	8007eb0 <_dtoa_r+0x710>
 8007bf0:	4b33      	ldr	r3, [pc, #204]	@ (8007cc0 <_dtoa_r+0x520>)
 8007bf2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007bf6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007bfa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007bfe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	da03      	bge.n	8007c0c <_dtoa_r+0x46c>
 8007c04:	9b07      	ldr	r3, [sp, #28]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	f340 8100 	ble.w	8007e0c <_dtoa_r+0x66c>
 8007c0c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007c10:	4656      	mov	r6, sl
 8007c12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c16:	4620      	mov	r0, r4
 8007c18:	4629      	mov	r1, r5
 8007c1a:	f7f8 fd87 	bl	800072c <__aeabi_ddiv>
 8007c1e:	f7f8 ff0b 	bl	8000a38 <__aeabi_d2iz>
 8007c22:	4680      	mov	r8, r0
 8007c24:	f7f8 fbee 	bl	8000404 <__aeabi_i2d>
 8007c28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c2c:	f7f8 fc54 	bl	80004d8 <__aeabi_dmul>
 8007c30:	4602      	mov	r2, r0
 8007c32:	460b      	mov	r3, r1
 8007c34:	4620      	mov	r0, r4
 8007c36:	4629      	mov	r1, r5
 8007c38:	f7f8 fa96 	bl	8000168 <__aeabi_dsub>
 8007c3c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007c40:	9d07      	ldr	r5, [sp, #28]
 8007c42:	f806 4b01 	strb.w	r4, [r6], #1
 8007c46:	eba6 040a 	sub.w	r4, r6, sl
 8007c4a:	42a5      	cmp	r5, r4
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	460b      	mov	r3, r1
 8007c50:	f040 8116 	bne.w	8007e80 <_dtoa_r+0x6e0>
 8007c54:	f7f8 fa8a 	bl	800016c <__adddf3>
 8007c58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c5c:	4604      	mov	r4, r0
 8007c5e:	460d      	mov	r5, r1
 8007c60:	f7f8 feca 	bl	80009f8 <__aeabi_dcmpgt>
 8007c64:	2800      	cmp	r0, #0
 8007c66:	f040 80f8 	bne.w	8007e5a <_dtoa_r+0x6ba>
 8007c6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c6e:	4620      	mov	r0, r4
 8007c70:	4629      	mov	r1, r5
 8007c72:	f7f8 fe99 	bl	80009a8 <__aeabi_dcmpeq>
 8007c76:	b118      	cbz	r0, 8007c80 <_dtoa_r+0x4e0>
 8007c78:	f018 0f01 	tst.w	r8, #1
 8007c7c:	f040 80ed 	bne.w	8007e5a <_dtoa_r+0x6ba>
 8007c80:	4649      	mov	r1, r9
 8007c82:	4658      	mov	r0, fp
 8007c84:	f000 fc92 	bl	80085ac <_Bfree>
 8007c88:	2300      	movs	r3, #0
 8007c8a:	7033      	strb	r3, [r6, #0]
 8007c8c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007c8e:	3701      	adds	r7, #1
 8007c90:	601f      	str	r7, [r3, #0]
 8007c92:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	f000 8320 	beq.w	80082da <_dtoa_r+0xb3a>
 8007c9a:	601e      	str	r6, [r3, #0]
 8007c9c:	e31d      	b.n	80082da <_dtoa_r+0xb3a>
 8007c9e:	07e2      	lsls	r2, r4, #31
 8007ca0:	d505      	bpl.n	8007cae <_dtoa_r+0x50e>
 8007ca2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007ca6:	f7f8 fc17 	bl	80004d8 <__aeabi_dmul>
 8007caa:	2301      	movs	r3, #1
 8007cac:	3601      	adds	r6, #1
 8007cae:	1064      	asrs	r4, r4, #1
 8007cb0:	3508      	adds	r5, #8
 8007cb2:	e73f      	b.n	8007b34 <_dtoa_r+0x394>
 8007cb4:	2602      	movs	r6, #2
 8007cb6:	e742      	b.n	8007b3e <_dtoa_r+0x39e>
 8007cb8:	9c07      	ldr	r4, [sp, #28]
 8007cba:	9704      	str	r7, [sp, #16]
 8007cbc:	e761      	b.n	8007b82 <_dtoa_r+0x3e2>
 8007cbe:	bf00      	nop
 8007cc0:	0800a010 	.word	0x0800a010
 8007cc4:	08009fe8 	.word	0x08009fe8
 8007cc8:	3ff00000 	.word	0x3ff00000
 8007ccc:	40240000 	.word	0x40240000
 8007cd0:	401c0000 	.word	0x401c0000
 8007cd4:	40140000 	.word	0x40140000
 8007cd8:	4b70      	ldr	r3, [pc, #448]	@ (8007e9c <_dtoa_r+0x6fc>)
 8007cda:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007cdc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007ce0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007ce4:	4454      	add	r4, sl
 8007ce6:	2900      	cmp	r1, #0
 8007ce8:	d045      	beq.n	8007d76 <_dtoa_r+0x5d6>
 8007cea:	2000      	movs	r0, #0
 8007cec:	496c      	ldr	r1, [pc, #432]	@ (8007ea0 <_dtoa_r+0x700>)
 8007cee:	f7f8 fd1d 	bl	800072c <__aeabi_ddiv>
 8007cf2:	4633      	mov	r3, r6
 8007cf4:	462a      	mov	r2, r5
 8007cf6:	f7f8 fa37 	bl	8000168 <__aeabi_dsub>
 8007cfa:	4656      	mov	r6, sl
 8007cfc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007d00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d04:	f7f8 fe98 	bl	8000a38 <__aeabi_d2iz>
 8007d08:	4605      	mov	r5, r0
 8007d0a:	f7f8 fb7b 	bl	8000404 <__aeabi_i2d>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	460b      	mov	r3, r1
 8007d12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d16:	f7f8 fa27 	bl	8000168 <__aeabi_dsub>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	3530      	adds	r5, #48	@ 0x30
 8007d20:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d24:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007d28:	f806 5b01 	strb.w	r5, [r6], #1
 8007d2c:	f7f8 fe46 	bl	80009bc <__aeabi_dcmplt>
 8007d30:	2800      	cmp	r0, #0
 8007d32:	d163      	bne.n	8007dfc <_dtoa_r+0x65c>
 8007d34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d38:	2000      	movs	r0, #0
 8007d3a:	495a      	ldr	r1, [pc, #360]	@ (8007ea4 <_dtoa_r+0x704>)
 8007d3c:	f7f8 fa14 	bl	8000168 <__aeabi_dsub>
 8007d40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007d44:	f7f8 fe3a 	bl	80009bc <__aeabi_dcmplt>
 8007d48:	2800      	cmp	r0, #0
 8007d4a:	f040 8087 	bne.w	8007e5c <_dtoa_r+0x6bc>
 8007d4e:	42a6      	cmp	r6, r4
 8007d50:	f43f af43 	beq.w	8007bda <_dtoa_r+0x43a>
 8007d54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007d58:	2200      	movs	r2, #0
 8007d5a:	4b53      	ldr	r3, [pc, #332]	@ (8007ea8 <_dtoa_r+0x708>)
 8007d5c:	f7f8 fbbc 	bl	80004d8 <__aeabi_dmul>
 8007d60:	2200      	movs	r2, #0
 8007d62:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007d66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d6a:	4b4f      	ldr	r3, [pc, #316]	@ (8007ea8 <_dtoa_r+0x708>)
 8007d6c:	f7f8 fbb4 	bl	80004d8 <__aeabi_dmul>
 8007d70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d74:	e7c4      	b.n	8007d00 <_dtoa_r+0x560>
 8007d76:	4631      	mov	r1, r6
 8007d78:	4628      	mov	r0, r5
 8007d7a:	f7f8 fbad 	bl	80004d8 <__aeabi_dmul>
 8007d7e:	4656      	mov	r6, sl
 8007d80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007d84:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007d86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d8a:	f7f8 fe55 	bl	8000a38 <__aeabi_d2iz>
 8007d8e:	4605      	mov	r5, r0
 8007d90:	f7f8 fb38 	bl	8000404 <__aeabi_i2d>
 8007d94:	4602      	mov	r2, r0
 8007d96:	460b      	mov	r3, r1
 8007d98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d9c:	f7f8 f9e4 	bl	8000168 <__aeabi_dsub>
 8007da0:	4602      	mov	r2, r0
 8007da2:	460b      	mov	r3, r1
 8007da4:	3530      	adds	r5, #48	@ 0x30
 8007da6:	f806 5b01 	strb.w	r5, [r6], #1
 8007daa:	42a6      	cmp	r6, r4
 8007dac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007db0:	f04f 0200 	mov.w	r2, #0
 8007db4:	d124      	bne.n	8007e00 <_dtoa_r+0x660>
 8007db6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007dba:	4b39      	ldr	r3, [pc, #228]	@ (8007ea0 <_dtoa_r+0x700>)
 8007dbc:	f7f8 f9d6 	bl	800016c <__adddf3>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dc8:	f7f8 fe16 	bl	80009f8 <__aeabi_dcmpgt>
 8007dcc:	2800      	cmp	r0, #0
 8007dce:	d145      	bne.n	8007e5c <_dtoa_r+0x6bc>
 8007dd0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007dd4:	2000      	movs	r0, #0
 8007dd6:	4932      	ldr	r1, [pc, #200]	@ (8007ea0 <_dtoa_r+0x700>)
 8007dd8:	f7f8 f9c6 	bl	8000168 <__aeabi_dsub>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	460b      	mov	r3, r1
 8007de0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007de4:	f7f8 fdea 	bl	80009bc <__aeabi_dcmplt>
 8007de8:	2800      	cmp	r0, #0
 8007dea:	f43f aef6 	beq.w	8007bda <_dtoa_r+0x43a>
 8007dee:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007df0:	1e73      	subs	r3, r6, #1
 8007df2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007df4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007df8:	2b30      	cmp	r3, #48	@ 0x30
 8007dfa:	d0f8      	beq.n	8007dee <_dtoa_r+0x64e>
 8007dfc:	9f04      	ldr	r7, [sp, #16]
 8007dfe:	e73f      	b.n	8007c80 <_dtoa_r+0x4e0>
 8007e00:	4b29      	ldr	r3, [pc, #164]	@ (8007ea8 <_dtoa_r+0x708>)
 8007e02:	f7f8 fb69 	bl	80004d8 <__aeabi_dmul>
 8007e06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e0a:	e7bc      	b.n	8007d86 <_dtoa_r+0x5e6>
 8007e0c:	d10c      	bne.n	8007e28 <_dtoa_r+0x688>
 8007e0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e12:	2200      	movs	r2, #0
 8007e14:	4b25      	ldr	r3, [pc, #148]	@ (8007eac <_dtoa_r+0x70c>)
 8007e16:	f7f8 fb5f 	bl	80004d8 <__aeabi_dmul>
 8007e1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e1e:	f7f8 fde1 	bl	80009e4 <__aeabi_dcmpge>
 8007e22:	2800      	cmp	r0, #0
 8007e24:	f000 815b 	beq.w	80080de <_dtoa_r+0x93e>
 8007e28:	2400      	movs	r4, #0
 8007e2a:	4625      	mov	r5, r4
 8007e2c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007e2e:	4656      	mov	r6, sl
 8007e30:	43db      	mvns	r3, r3
 8007e32:	9304      	str	r3, [sp, #16]
 8007e34:	2700      	movs	r7, #0
 8007e36:	4621      	mov	r1, r4
 8007e38:	4658      	mov	r0, fp
 8007e3a:	f000 fbb7 	bl	80085ac <_Bfree>
 8007e3e:	2d00      	cmp	r5, #0
 8007e40:	d0dc      	beq.n	8007dfc <_dtoa_r+0x65c>
 8007e42:	b12f      	cbz	r7, 8007e50 <_dtoa_r+0x6b0>
 8007e44:	42af      	cmp	r7, r5
 8007e46:	d003      	beq.n	8007e50 <_dtoa_r+0x6b0>
 8007e48:	4639      	mov	r1, r7
 8007e4a:	4658      	mov	r0, fp
 8007e4c:	f000 fbae 	bl	80085ac <_Bfree>
 8007e50:	4629      	mov	r1, r5
 8007e52:	4658      	mov	r0, fp
 8007e54:	f000 fbaa 	bl	80085ac <_Bfree>
 8007e58:	e7d0      	b.n	8007dfc <_dtoa_r+0x65c>
 8007e5a:	9704      	str	r7, [sp, #16]
 8007e5c:	4633      	mov	r3, r6
 8007e5e:	461e      	mov	r6, r3
 8007e60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e64:	2a39      	cmp	r2, #57	@ 0x39
 8007e66:	d107      	bne.n	8007e78 <_dtoa_r+0x6d8>
 8007e68:	459a      	cmp	sl, r3
 8007e6a:	d1f8      	bne.n	8007e5e <_dtoa_r+0x6be>
 8007e6c:	9a04      	ldr	r2, [sp, #16]
 8007e6e:	3201      	adds	r2, #1
 8007e70:	9204      	str	r2, [sp, #16]
 8007e72:	2230      	movs	r2, #48	@ 0x30
 8007e74:	f88a 2000 	strb.w	r2, [sl]
 8007e78:	781a      	ldrb	r2, [r3, #0]
 8007e7a:	3201      	adds	r2, #1
 8007e7c:	701a      	strb	r2, [r3, #0]
 8007e7e:	e7bd      	b.n	8007dfc <_dtoa_r+0x65c>
 8007e80:	2200      	movs	r2, #0
 8007e82:	4b09      	ldr	r3, [pc, #36]	@ (8007ea8 <_dtoa_r+0x708>)
 8007e84:	f7f8 fb28 	bl	80004d8 <__aeabi_dmul>
 8007e88:	2200      	movs	r2, #0
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	4604      	mov	r4, r0
 8007e8e:	460d      	mov	r5, r1
 8007e90:	f7f8 fd8a 	bl	80009a8 <__aeabi_dcmpeq>
 8007e94:	2800      	cmp	r0, #0
 8007e96:	f43f aebc 	beq.w	8007c12 <_dtoa_r+0x472>
 8007e9a:	e6f1      	b.n	8007c80 <_dtoa_r+0x4e0>
 8007e9c:	0800a010 	.word	0x0800a010
 8007ea0:	3fe00000 	.word	0x3fe00000
 8007ea4:	3ff00000 	.word	0x3ff00000
 8007ea8:	40240000 	.word	0x40240000
 8007eac:	40140000 	.word	0x40140000
 8007eb0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007eb2:	2a00      	cmp	r2, #0
 8007eb4:	f000 80db 	beq.w	800806e <_dtoa_r+0x8ce>
 8007eb8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007eba:	2a01      	cmp	r2, #1
 8007ebc:	f300 80bf 	bgt.w	800803e <_dtoa_r+0x89e>
 8007ec0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007ec2:	2a00      	cmp	r2, #0
 8007ec4:	f000 80b7 	beq.w	8008036 <_dtoa_r+0x896>
 8007ec8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007ecc:	4646      	mov	r6, r8
 8007ece:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007ed0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ed2:	2101      	movs	r1, #1
 8007ed4:	441a      	add	r2, r3
 8007ed6:	4658      	mov	r0, fp
 8007ed8:	4498      	add	r8, r3
 8007eda:	9209      	str	r2, [sp, #36]	@ 0x24
 8007edc:	f000 fc1a 	bl	8008714 <__i2b>
 8007ee0:	4605      	mov	r5, r0
 8007ee2:	b15e      	cbz	r6, 8007efc <_dtoa_r+0x75c>
 8007ee4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	dd08      	ble.n	8007efc <_dtoa_r+0x75c>
 8007eea:	42b3      	cmp	r3, r6
 8007eec:	bfa8      	it	ge
 8007eee:	4633      	movge	r3, r6
 8007ef0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ef2:	eba8 0803 	sub.w	r8, r8, r3
 8007ef6:	1af6      	subs	r6, r6, r3
 8007ef8:	1ad3      	subs	r3, r2, r3
 8007efa:	9309      	str	r3, [sp, #36]	@ 0x24
 8007efc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007efe:	b1f3      	cbz	r3, 8007f3e <_dtoa_r+0x79e>
 8007f00:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f000 80b7 	beq.w	8008076 <_dtoa_r+0x8d6>
 8007f08:	b18c      	cbz	r4, 8007f2e <_dtoa_r+0x78e>
 8007f0a:	4629      	mov	r1, r5
 8007f0c:	4622      	mov	r2, r4
 8007f0e:	4658      	mov	r0, fp
 8007f10:	f000 fcbe 	bl	8008890 <__pow5mult>
 8007f14:	464a      	mov	r2, r9
 8007f16:	4601      	mov	r1, r0
 8007f18:	4605      	mov	r5, r0
 8007f1a:	4658      	mov	r0, fp
 8007f1c:	f000 fc10 	bl	8008740 <__multiply>
 8007f20:	4649      	mov	r1, r9
 8007f22:	9004      	str	r0, [sp, #16]
 8007f24:	4658      	mov	r0, fp
 8007f26:	f000 fb41 	bl	80085ac <_Bfree>
 8007f2a:	9b04      	ldr	r3, [sp, #16]
 8007f2c:	4699      	mov	r9, r3
 8007f2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f30:	1b1a      	subs	r2, r3, r4
 8007f32:	d004      	beq.n	8007f3e <_dtoa_r+0x79e>
 8007f34:	4649      	mov	r1, r9
 8007f36:	4658      	mov	r0, fp
 8007f38:	f000 fcaa 	bl	8008890 <__pow5mult>
 8007f3c:	4681      	mov	r9, r0
 8007f3e:	2101      	movs	r1, #1
 8007f40:	4658      	mov	r0, fp
 8007f42:	f000 fbe7 	bl	8008714 <__i2b>
 8007f46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f48:	4604      	mov	r4, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	f000 81c9 	beq.w	80082e2 <_dtoa_r+0xb42>
 8007f50:	461a      	mov	r2, r3
 8007f52:	4601      	mov	r1, r0
 8007f54:	4658      	mov	r0, fp
 8007f56:	f000 fc9b 	bl	8008890 <__pow5mult>
 8007f5a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007f5c:	4604      	mov	r4, r0
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	f300 808f 	bgt.w	8008082 <_dtoa_r+0x8e2>
 8007f64:	9b02      	ldr	r3, [sp, #8]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	f040 8087 	bne.w	800807a <_dtoa_r+0x8da>
 8007f6c:	9b03      	ldr	r3, [sp, #12]
 8007f6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	f040 8083 	bne.w	800807e <_dtoa_r+0x8de>
 8007f78:	9b03      	ldr	r3, [sp, #12]
 8007f7a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007f7e:	0d1b      	lsrs	r3, r3, #20
 8007f80:	051b      	lsls	r3, r3, #20
 8007f82:	b12b      	cbz	r3, 8007f90 <_dtoa_r+0x7f0>
 8007f84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f86:	f108 0801 	add.w	r8, r8, #1
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f8e:	2301      	movs	r3, #1
 8007f90:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	f000 81aa 	beq.w	80082ee <_dtoa_r+0xb4e>
 8007f9a:	6923      	ldr	r3, [r4, #16]
 8007f9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007fa0:	6918      	ldr	r0, [r3, #16]
 8007fa2:	f000 fb6b 	bl	800867c <__hi0bits>
 8007fa6:	f1c0 0020 	rsb	r0, r0, #32
 8007faa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fac:	4418      	add	r0, r3
 8007fae:	f010 001f 	ands.w	r0, r0, #31
 8007fb2:	d071      	beq.n	8008098 <_dtoa_r+0x8f8>
 8007fb4:	f1c0 0320 	rsb	r3, r0, #32
 8007fb8:	2b04      	cmp	r3, #4
 8007fba:	dd65      	ble.n	8008088 <_dtoa_r+0x8e8>
 8007fbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fbe:	f1c0 001c 	rsb	r0, r0, #28
 8007fc2:	4403      	add	r3, r0
 8007fc4:	4480      	add	r8, r0
 8007fc6:	4406      	add	r6, r0
 8007fc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fca:	f1b8 0f00 	cmp.w	r8, #0
 8007fce:	dd05      	ble.n	8007fdc <_dtoa_r+0x83c>
 8007fd0:	4649      	mov	r1, r9
 8007fd2:	4642      	mov	r2, r8
 8007fd4:	4658      	mov	r0, fp
 8007fd6:	f000 fcb5 	bl	8008944 <__lshift>
 8007fda:	4681      	mov	r9, r0
 8007fdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	dd05      	ble.n	8007fee <_dtoa_r+0x84e>
 8007fe2:	4621      	mov	r1, r4
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	4658      	mov	r0, fp
 8007fe8:	f000 fcac 	bl	8008944 <__lshift>
 8007fec:	4604      	mov	r4, r0
 8007fee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d053      	beq.n	800809c <_dtoa_r+0x8fc>
 8007ff4:	4621      	mov	r1, r4
 8007ff6:	4648      	mov	r0, r9
 8007ff8:	f000 fd10 	bl	8008a1c <__mcmp>
 8007ffc:	2800      	cmp	r0, #0
 8007ffe:	da4d      	bge.n	800809c <_dtoa_r+0x8fc>
 8008000:	1e7b      	subs	r3, r7, #1
 8008002:	4649      	mov	r1, r9
 8008004:	9304      	str	r3, [sp, #16]
 8008006:	220a      	movs	r2, #10
 8008008:	2300      	movs	r3, #0
 800800a:	4658      	mov	r0, fp
 800800c:	f000 faf0 	bl	80085f0 <__multadd>
 8008010:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008012:	4681      	mov	r9, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	f000 816c 	beq.w	80082f2 <_dtoa_r+0xb52>
 800801a:	2300      	movs	r3, #0
 800801c:	4629      	mov	r1, r5
 800801e:	220a      	movs	r2, #10
 8008020:	4658      	mov	r0, fp
 8008022:	f000 fae5 	bl	80085f0 <__multadd>
 8008026:	9b08      	ldr	r3, [sp, #32]
 8008028:	4605      	mov	r5, r0
 800802a:	2b00      	cmp	r3, #0
 800802c:	dc61      	bgt.n	80080f2 <_dtoa_r+0x952>
 800802e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008030:	2b02      	cmp	r3, #2
 8008032:	dc3b      	bgt.n	80080ac <_dtoa_r+0x90c>
 8008034:	e05d      	b.n	80080f2 <_dtoa_r+0x952>
 8008036:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008038:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800803c:	e746      	b.n	8007ecc <_dtoa_r+0x72c>
 800803e:	9b07      	ldr	r3, [sp, #28]
 8008040:	1e5c      	subs	r4, r3, #1
 8008042:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008044:	42a3      	cmp	r3, r4
 8008046:	bfbf      	itttt	lt
 8008048:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800804a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800804c:	1ae3      	sublt	r3, r4, r3
 800804e:	18d2      	addlt	r2, r2, r3
 8008050:	bfa8      	it	ge
 8008052:	1b1c      	subge	r4, r3, r4
 8008054:	9b07      	ldr	r3, [sp, #28]
 8008056:	bfbe      	ittt	lt
 8008058:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800805a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800805c:	2400      	movlt	r4, #0
 800805e:	2b00      	cmp	r3, #0
 8008060:	bfb5      	itete	lt
 8008062:	eba8 0603 	sublt.w	r6, r8, r3
 8008066:	4646      	movge	r6, r8
 8008068:	2300      	movlt	r3, #0
 800806a:	9b07      	ldrge	r3, [sp, #28]
 800806c:	e730      	b.n	8007ed0 <_dtoa_r+0x730>
 800806e:	4646      	mov	r6, r8
 8008070:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008072:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008074:	e735      	b.n	8007ee2 <_dtoa_r+0x742>
 8008076:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008078:	e75c      	b.n	8007f34 <_dtoa_r+0x794>
 800807a:	2300      	movs	r3, #0
 800807c:	e788      	b.n	8007f90 <_dtoa_r+0x7f0>
 800807e:	9b02      	ldr	r3, [sp, #8]
 8008080:	e786      	b.n	8007f90 <_dtoa_r+0x7f0>
 8008082:	2300      	movs	r3, #0
 8008084:	930a      	str	r3, [sp, #40]	@ 0x28
 8008086:	e788      	b.n	8007f9a <_dtoa_r+0x7fa>
 8008088:	d09f      	beq.n	8007fca <_dtoa_r+0x82a>
 800808a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800808c:	331c      	adds	r3, #28
 800808e:	441a      	add	r2, r3
 8008090:	4498      	add	r8, r3
 8008092:	441e      	add	r6, r3
 8008094:	9209      	str	r2, [sp, #36]	@ 0x24
 8008096:	e798      	b.n	8007fca <_dtoa_r+0x82a>
 8008098:	4603      	mov	r3, r0
 800809a:	e7f6      	b.n	800808a <_dtoa_r+0x8ea>
 800809c:	9b07      	ldr	r3, [sp, #28]
 800809e:	9704      	str	r7, [sp, #16]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	dc20      	bgt.n	80080e6 <_dtoa_r+0x946>
 80080a4:	9308      	str	r3, [sp, #32]
 80080a6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	dd1e      	ble.n	80080ea <_dtoa_r+0x94a>
 80080ac:	9b08      	ldr	r3, [sp, #32]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	f47f aebc 	bne.w	8007e2c <_dtoa_r+0x68c>
 80080b4:	4621      	mov	r1, r4
 80080b6:	2205      	movs	r2, #5
 80080b8:	4658      	mov	r0, fp
 80080ba:	f000 fa99 	bl	80085f0 <__multadd>
 80080be:	4601      	mov	r1, r0
 80080c0:	4604      	mov	r4, r0
 80080c2:	4648      	mov	r0, r9
 80080c4:	f000 fcaa 	bl	8008a1c <__mcmp>
 80080c8:	2800      	cmp	r0, #0
 80080ca:	f77f aeaf 	ble.w	8007e2c <_dtoa_r+0x68c>
 80080ce:	2331      	movs	r3, #49	@ 0x31
 80080d0:	4656      	mov	r6, sl
 80080d2:	f806 3b01 	strb.w	r3, [r6], #1
 80080d6:	9b04      	ldr	r3, [sp, #16]
 80080d8:	3301      	adds	r3, #1
 80080da:	9304      	str	r3, [sp, #16]
 80080dc:	e6aa      	b.n	8007e34 <_dtoa_r+0x694>
 80080de:	9c07      	ldr	r4, [sp, #28]
 80080e0:	9704      	str	r7, [sp, #16]
 80080e2:	4625      	mov	r5, r4
 80080e4:	e7f3      	b.n	80080ce <_dtoa_r+0x92e>
 80080e6:	9b07      	ldr	r3, [sp, #28]
 80080e8:	9308      	str	r3, [sp, #32]
 80080ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	f000 8104 	beq.w	80082fa <_dtoa_r+0xb5a>
 80080f2:	2e00      	cmp	r6, #0
 80080f4:	dd05      	ble.n	8008102 <_dtoa_r+0x962>
 80080f6:	4629      	mov	r1, r5
 80080f8:	4632      	mov	r2, r6
 80080fa:	4658      	mov	r0, fp
 80080fc:	f000 fc22 	bl	8008944 <__lshift>
 8008100:	4605      	mov	r5, r0
 8008102:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008104:	2b00      	cmp	r3, #0
 8008106:	d05a      	beq.n	80081be <_dtoa_r+0xa1e>
 8008108:	4658      	mov	r0, fp
 800810a:	6869      	ldr	r1, [r5, #4]
 800810c:	f000 fa0e 	bl	800852c <_Balloc>
 8008110:	4606      	mov	r6, r0
 8008112:	b928      	cbnz	r0, 8008120 <_dtoa_r+0x980>
 8008114:	4602      	mov	r2, r0
 8008116:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800811a:	4b83      	ldr	r3, [pc, #524]	@ (8008328 <_dtoa_r+0xb88>)
 800811c:	f7ff bb54 	b.w	80077c8 <_dtoa_r+0x28>
 8008120:	692a      	ldr	r2, [r5, #16]
 8008122:	f105 010c 	add.w	r1, r5, #12
 8008126:	3202      	adds	r2, #2
 8008128:	0092      	lsls	r2, r2, #2
 800812a:	300c      	adds	r0, #12
 800812c:	f000 ffa8 	bl	8009080 <memcpy>
 8008130:	2201      	movs	r2, #1
 8008132:	4631      	mov	r1, r6
 8008134:	4658      	mov	r0, fp
 8008136:	f000 fc05 	bl	8008944 <__lshift>
 800813a:	462f      	mov	r7, r5
 800813c:	4605      	mov	r5, r0
 800813e:	f10a 0301 	add.w	r3, sl, #1
 8008142:	9307      	str	r3, [sp, #28]
 8008144:	9b08      	ldr	r3, [sp, #32]
 8008146:	4453      	add	r3, sl
 8008148:	930b      	str	r3, [sp, #44]	@ 0x2c
 800814a:	9b02      	ldr	r3, [sp, #8]
 800814c:	f003 0301 	and.w	r3, r3, #1
 8008150:	930a      	str	r3, [sp, #40]	@ 0x28
 8008152:	9b07      	ldr	r3, [sp, #28]
 8008154:	4621      	mov	r1, r4
 8008156:	3b01      	subs	r3, #1
 8008158:	4648      	mov	r0, r9
 800815a:	9302      	str	r3, [sp, #8]
 800815c:	f7ff fa97 	bl	800768e <quorem>
 8008160:	4639      	mov	r1, r7
 8008162:	9008      	str	r0, [sp, #32]
 8008164:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008168:	4648      	mov	r0, r9
 800816a:	f000 fc57 	bl	8008a1c <__mcmp>
 800816e:	462a      	mov	r2, r5
 8008170:	9009      	str	r0, [sp, #36]	@ 0x24
 8008172:	4621      	mov	r1, r4
 8008174:	4658      	mov	r0, fp
 8008176:	f000 fc6d 	bl	8008a54 <__mdiff>
 800817a:	68c2      	ldr	r2, [r0, #12]
 800817c:	4606      	mov	r6, r0
 800817e:	bb02      	cbnz	r2, 80081c2 <_dtoa_r+0xa22>
 8008180:	4601      	mov	r1, r0
 8008182:	4648      	mov	r0, r9
 8008184:	f000 fc4a 	bl	8008a1c <__mcmp>
 8008188:	4602      	mov	r2, r0
 800818a:	4631      	mov	r1, r6
 800818c:	4658      	mov	r0, fp
 800818e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008190:	f000 fa0c 	bl	80085ac <_Bfree>
 8008194:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008196:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008198:	9e07      	ldr	r6, [sp, #28]
 800819a:	ea43 0102 	orr.w	r1, r3, r2
 800819e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081a0:	4319      	orrs	r1, r3
 80081a2:	d110      	bne.n	80081c6 <_dtoa_r+0xa26>
 80081a4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80081a8:	d029      	beq.n	80081fe <_dtoa_r+0xa5e>
 80081aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	dd02      	ble.n	80081b6 <_dtoa_r+0xa16>
 80081b0:	9b08      	ldr	r3, [sp, #32]
 80081b2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80081b6:	9b02      	ldr	r3, [sp, #8]
 80081b8:	f883 8000 	strb.w	r8, [r3]
 80081bc:	e63b      	b.n	8007e36 <_dtoa_r+0x696>
 80081be:	4628      	mov	r0, r5
 80081c0:	e7bb      	b.n	800813a <_dtoa_r+0x99a>
 80081c2:	2201      	movs	r2, #1
 80081c4:	e7e1      	b.n	800818a <_dtoa_r+0x9ea>
 80081c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	db04      	blt.n	80081d6 <_dtoa_r+0xa36>
 80081cc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80081ce:	430b      	orrs	r3, r1
 80081d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80081d2:	430b      	orrs	r3, r1
 80081d4:	d120      	bne.n	8008218 <_dtoa_r+0xa78>
 80081d6:	2a00      	cmp	r2, #0
 80081d8:	dded      	ble.n	80081b6 <_dtoa_r+0xa16>
 80081da:	4649      	mov	r1, r9
 80081dc:	2201      	movs	r2, #1
 80081de:	4658      	mov	r0, fp
 80081e0:	f000 fbb0 	bl	8008944 <__lshift>
 80081e4:	4621      	mov	r1, r4
 80081e6:	4681      	mov	r9, r0
 80081e8:	f000 fc18 	bl	8008a1c <__mcmp>
 80081ec:	2800      	cmp	r0, #0
 80081ee:	dc03      	bgt.n	80081f8 <_dtoa_r+0xa58>
 80081f0:	d1e1      	bne.n	80081b6 <_dtoa_r+0xa16>
 80081f2:	f018 0f01 	tst.w	r8, #1
 80081f6:	d0de      	beq.n	80081b6 <_dtoa_r+0xa16>
 80081f8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80081fc:	d1d8      	bne.n	80081b0 <_dtoa_r+0xa10>
 80081fe:	2339      	movs	r3, #57	@ 0x39
 8008200:	9a02      	ldr	r2, [sp, #8]
 8008202:	7013      	strb	r3, [r2, #0]
 8008204:	4633      	mov	r3, r6
 8008206:	461e      	mov	r6, r3
 8008208:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800820c:	3b01      	subs	r3, #1
 800820e:	2a39      	cmp	r2, #57	@ 0x39
 8008210:	d052      	beq.n	80082b8 <_dtoa_r+0xb18>
 8008212:	3201      	adds	r2, #1
 8008214:	701a      	strb	r2, [r3, #0]
 8008216:	e60e      	b.n	8007e36 <_dtoa_r+0x696>
 8008218:	2a00      	cmp	r2, #0
 800821a:	dd07      	ble.n	800822c <_dtoa_r+0xa8c>
 800821c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008220:	d0ed      	beq.n	80081fe <_dtoa_r+0xa5e>
 8008222:	9a02      	ldr	r2, [sp, #8]
 8008224:	f108 0301 	add.w	r3, r8, #1
 8008228:	7013      	strb	r3, [r2, #0]
 800822a:	e604      	b.n	8007e36 <_dtoa_r+0x696>
 800822c:	9b07      	ldr	r3, [sp, #28]
 800822e:	9a07      	ldr	r2, [sp, #28]
 8008230:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008234:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008236:	4293      	cmp	r3, r2
 8008238:	d028      	beq.n	800828c <_dtoa_r+0xaec>
 800823a:	4649      	mov	r1, r9
 800823c:	2300      	movs	r3, #0
 800823e:	220a      	movs	r2, #10
 8008240:	4658      	mov	r0, fp
 8008242:	f000 f9d5 	bl	80085f0 <__multadd>
 8008246:	42af      	cmp	r7, r5
 8008248:	4681      	mov	r9, r0
 800824a:	f04f 0300 	mov.w	r3, #0
 800824e:	f04f 020a 	mov.w	r2, #10
 8008252:	4639      	mov	r1, r7
 8008254:	4658      	mov	r0, fp
 8008256:	d107      	bne.n	8008268 <_dtoa_r+0xac8>
 8008258:	f000 f9ca 	bl	80085f0 <__multadd>
 800825c:	4607      	mov	r7, r0
 800825e:	4605      	mov	r5, r0
 8008260:	9b07      	ldr	r3, [sp, #28]
 8008262:	3301      	adds	r3, #1
 8008264:	9307      	str	r3, [sp, #28]
 8008266:	e774      	b.n	8008152 <_dtoa_r+0x9b2>
 8008268:	f000 f9c2 	bl	80085f0 <__multadd>
 800826c:	4629      	mov	r1, r5
 800826e:	4607      	mov	r7, r0
 8008270:	2300      	movs	r3, #0
 8008272:	220a      	movs	r2, #10
 8008274:	4658      	mov	r0, fp
 8008276:	f000 f9bb 	bl	80085f0 <__multadd>
 800827a:	4605      	mov	r5, r0
 800827c:	e7f0      	b.n	8008260 <_dtoa_r+0xac0>
 800827e:	9b08      	ldr	r3, [sp, #32]
 8008280:	2700      	movs	r7, #0
 8008282:	2b00      	cmp	r3, #0
 8008284:	bfcc      	ite	gt
 8008286:	461e      	movgt	r6, r3
 8008288:	2601      	movle	r6, #1
 800828a:	4456      	add	r6, sl
 800828c:	4649      	mov	r1, r9
 800828e:	2201      	movs	r2, #1
 8008290:	4658      	mov	r0, fp
 8008292:	f000 fb57 	bl	8008944 <__lshift>
 8008296:	4621      	mov	r1, r4
 8008298:	4681      	mov	r9, r0
 800829a:	f000 fbbf 	bl	8008a1c <__mcmp>
 800829e:	2800      	cmp	r0, #0
 80082a0:	dcb0      	bgt.n	8008204 <_dtoa_r+0xa64>
 80082a2:	d102      	bne.n	80082aa <_dtoa_r+0xb0a>
 80082a4:	f018 0f01 	tst.w	r8, #1
 80082a8:	d1ac      	bne.n	8008204 <_dtoa_r+0xa64>
 80082aa:	4633      	mov	r3, r6
 80082ac:	461e      	mov	r6, r3
 80082ae:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082b2:	2a30      	cmp	r2, #48	@ 0x30
 80082b4:	d0fa      	beq.n	80082ac <_dtoa_r+0xb0c>
 80082b6:	e5be      	b.n	8007e36 <_dtoa_r+0x696>
 80082b8:	459a      	cmp	sl, r3
 80082ba:	d1a4      	bne.n	8008206 <_dtoa_r+0xa66>
 80082bc:	9b04      	ldr	r3, [sp, #16]
 80082be:	3301      	adds	r3, #1
 80082c0:	9304      	str	r3, [sp, #16]
 80082c2:	2331      	movs	r3, #49	@ 0x31
 80082c4:	f88a 3000 	strb.w	r3, [sl]
 80082c8:	e5b5      	b.n	8007e36 <_dtoa_r+0x696>
 80082ca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80082cc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800832c <_dtoa_r+0xb8c>
 80082d0:	b11b      	cbz	r3, 80082da <_dtoa_r+0xb3a>
 80082d2:	f10a 0308 	add.w	r3, sl, #8
 80082d6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80082d8:	6013      	str	r3, [r2, #0]
 80082da:	4650      	mov	r0, sl
 80082dc:	b017      	add	sp, #92	@ 0x5c
 80082de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082e2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	f77f ae3d 	ble.w	8007f64 <_dtoa_r+0x7c4>
 80082ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80082ee:	2001      	movs	r0, #1
 80082f0:	e65b      	b.n	8007faa <_dtoa_r+0x80a>
 80082f2:	9b08      	ldr	r3, [sp, #32]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	f77f aed6 	ble.w	80080a6 <_dtoa_r+0x906>
 80082fa:	4656      	mov	r6, sl
 80082fc:	4621      	mov	r1, r4
 80082fe:	4648      	mov	r0, r9
 8008300:	f7ff f9c5 	bl	800768e <quorem>
 8008304:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008308:	9b08      	ldr	r3, [sp, #32]
 800830a:	f806 8b01 	strb.w	r8, [r6], #1
 800830e:	eba6 020a 	sub.w	r2, r6, sl
 8008312:	4293      	cmp	r3, r2
 8008314:	ddb3      	ble.n	800827e <_dtoa_r+0xade>
 8008316:	4649      	mov	r1, r9
 8008318:	2300      	movs	r3, #0
 800831a:	220a      	movs	r2, #10
 800831c:	4658      	mov	r0, fp
 800831e:	f000 f967 	bl	80085f0 <__multadd>
 8008322:	4681      	mov	r9, r0
 8008324:	e7ea      	b.n	80082fc <_dtoa_r+0xb5c>
 8008326:	bf00      	nop
 8008328:	08009f72 	.word	0x08009f72
 800832c:	08009ef6 	.word	0x08009ef6

08008330 <_free_r>:
 8008330:	b538      	push	{r3, r4, r5, lr}
 8008332:	4605      	mov	r5, r0
 8008334:	2900      	cmp	r1, #0
 8008336:	d040      	beq.n	80083ba <_free_r+0x8a>
 8008338:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800833c:	1f0c      	subs	r4, r1, #4
 800833e:	2b00      	cmp	r3, #0
 8008340:	bfb8      	it	lt
 8008342:	18e4      	addlt	r4, r4, r3
 8008344:	f000 f8e6 	bl	8008514 <__malloc_lock>
 8008348:	4a1c      	ldr	r2, [pc, #112]	@ (80083bc <_free_r+0x8c>)
 800834a:	6813      	ldr	r3, [r2, #0]
 800834c:	b933      	cbnz	r3, 800835c <_free_r+0x2c>
 800834e:	6063      	str	r3, [r4, #4]
 8008350:	6014      	str	r4, [r2, #0]
 8008352:	4628      	mov	r0, r5
 8008354:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008358:	f000 b8e2 	b.w	8008520 <__malloc_unlock>
 800835c:	42a3      	cmp	r3, r4
 800835e:	d908      	bls.n	8008372 <_free_r+0x42>
 8008360:	6820      	ldr	r0, [r4, #0]
 8008362:	1821      	adds	r1, r4, r0
 8008364:	428b      	cmp	r3, r1
 8008366:	bf01      	itttt	eq
 8008368:	6819      	ldreq	r1, [r3, #0]
 800836a:	685b      	ldreq	r3, [r3, #4]
 800836c:	1809      	addeq	r1, r1, r0
 800836e:	6021      	streq	r1, [r4, #0]
 8008370:	e7ed      	b.n	800834e <_free_r+0x1e>
 8008372:	461a      	mov	r2, r3
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	b10b      	cbz	r3, 800837c <_free_r+0x4c>
 8008378:	42a3      	cmp	r3, r4
 800837a:	d9fa      	bls.n	8008372 <_free_r+0x42>
 800837c:	6811      	ldr	r1, [r2, #0]
 800837e:	1850      	adds	r0, r2, r1
 8008380:	42a0      	cmp	r0, r4
 8008382:	d10b      	bne.n	800839c <_free_r+0x6c>
 8008384:	6820      	ldr	r0, [r4, #0]
 8008386:	4401      	add	r1, r0
 8008388:	1850      	adds	r0, r2, r1
 800838a:	4283      	cmp	r3, r0
 800838c:	6011      	str	r1, [r2, #0]
 800838e:	d1e0      	bne.n	8008352 <_free_r+0x22>
 8008390:	6818      	ldr	r0, [r3, #0]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	4408      	add	r0, r1
 8008396:	6010      	str	r0, [r2, #0]
 8008398:	6053      	str	r3, [r2, #4]
 800839a:	e7da      	b.n	8008352 <_free_r+0x22>
 800839c:	d902      	bls.n	80083a4 <_free_r+0x74>
 800839e:	230c      	movs	r3, #12
 80083a0:	602b      	str	r3, [r5, #0]
 80083a2:	e7d6      	b.n	8008352 <_free_r+0x22>
 80083a4:	6820      	ldr	r0, [r4, #0]
 80083a6:	1821      	adds	r1, r4, r0
 80083a8:	428b      	cmp	r3, r1
 80083aa:	bf01      	itttt	eq
 80083ac:	6819      	ldreq	r1, [r3, #0]
 80083ae:	685b      	ldreq	r3, [r3, #4]
 80083b0:	1809      	addeq	r1, r1, r0
 80083b2:	6021      	streq	r1, [r4, #0]
 80083b4:	6063      	str	r3, [r4, #4]
 80083b6:	6054      	str	r4, [r2, #4]
 80083b8:	e7cb      	b.n	8008352 <_free_r+0x22>
 80083ba:	bd38      	pop	{r3, r4, r5, pc}
 80083bc:	2000063c 	.word	0x2000063c

080083c0 <malloc>:
 80083c0:	4b02      	ldr	r3, [pc, #8]	@ (80083cc <malloc+0xc>)
 80083c2:	4601      	mov	r1, r0
 80083c4:	6818      	ldr	r0, [r3, #0]
 80083c6:	f000 b825 	b.w	8008414 <_malloc_r>
 80083ca:	bf00      	nop
 80083cc:	200000a8 	.word	0x200000a8

080083d0 <sbrk_aligned>:
 80083d0:	b570      	push	{r4, r5, r6, lr}
 80083d2:	4e0f      	ldr	r6, [pc, #60]	@ (8008410 <sbrk_aligned+0x40>)
 80083d4:	460c      	mov	r4, r1
 80083d6:	6831      	ldr	r1, [r6, #0]
 80083d8:	4605      	mov	r5, r0
 80083da:	b911      	cbnz	r1, 80083e2 <sbrk_aligned+0x12>
 80083dc:	f000 fe40 	bl	8009060 <_sbrk_r>
 80083e0:	6030      	str	r0, [r6, #0]
 80083e2:	4621      	mov	r1, r4
 80083e4:	4628      	mov	r0, r5
 80083e6:	f000 fe3b 	bl	8009060 <_sbrk_r>
 80083ea:	1c43      	adds	r3, r0, #1
 80083ec:	d103      	bne.n	80083f6 <sbrk_aligned+0x26>
 80083ee:	f04f 34ff 	mov.w	r4, #4294967295
 80083f2:	4620      	mov	r0, r4
 80083f4:	bd70      	pop	{r4, r5, r6, pc}
 80083f6:	1cc4      	adds	r4, r0, #3
 80083f8:	f024 0403 	bic.w	r4, r4, #3
 80083fc:	42a0      	cmp	r0, r4
 80083fe:	d0f8      	beq.n	80083f2 <sbrk_aligned+0x22>
 8008400:	1a21      	subs	r1, r4, r0
 8008402:	4628      	mov	r0, r5
 8008404:	f000 fe2c 	bl	8009060 <_sbrk_r>
 8008408:	3001      	adds	r0, #1
 800840a:	d1f2      	bne.n	80083f2 <sbrk_aligned+0x22>
 800840c:	e7ef      	b.n	80083ee <sbrk_aligned+0x1e>
 800840e:	bf00      	nop
 8008410:	20000638 	.word	0x20000638

08008414 <_malloc_r>:
 8008414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008418:	1ccd      	adds	r5, r1, #3
 800841a:	f025 0503 	bic.w	r5, r5, #3
 800841e:	3508      	adds	r5, #8
 8008420:	2d0c      	cmp	r5, #12
 8008422:	bf38      	it	cc
 8008424:	250c      	movcc	r5, #12
 8008426:	2d00      	cmp	r5, #0
 8008428:	4606      	mov	r6, r0
 800842a:	db01      	blt.n	8008430 <_malloc_r+0x1c>
 800842c:	42a9      	cmp	r1, r5
 800842e:	d904      	bls.n	800843a <_malloc_r+0x26>
 8008430:	230c      	movs	r3, #12
 8008432:	6033      	str	r3, [r6, #0]
 8008434:	2000      	movs	r0, #0
 8008436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800843a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008510 <_malloc_r+0xfc>
 800843e:	f000 f869 	bl	8008514 <__malloc_lock>
 8008442:	f8d8 3000 	ldr.w	r3, [r8]
 8008446:	461c      	mov	r4, r3
 8008448:	bb44      	cbnz	r4, 800849c <_malloc_r+0x88>
 800844a:	4629      	mov	r1, r5
 800844c:	4630      	mov	r0, r6
 800844e:	f7ff ffbf 	bl	80083d0 <sbrk_aligned>
 8008452:	1c43      	adds	r3, r0, #1
 8008454:	4604      	mov	r4, r0
 8008456:	d158      	bne.n	800850a <_malloc_r+0xf6>
 8008458:	f8d8 4000 	ldr.w	r4, [r8]
 800845c:	4627      	mov	r7, r4
 800845e:	2f00      	cmp	r7, #0
 8008460:	d143      	bne.n	80084ea <_malloc_r+0xd6>
 8008462:	2c00      	cmp	r4, #0
 8008464:	d04b      	beq.n	80084fe <_malloc_r+0xea>
 8008466:	6823      	ldr	r3, [r4, #0]
 8008468:	4639      	mov	r1, r7
 800846a:	4630      	mov	r0, r6
 800846c:	eb04 0903 	add.w	r9, r4, r3
 8008470:	f000 fdf6 	bl	8009060 <_sbrk_r>
 8008474:	4581      	cmp	r9, r0
 8008476:	d142      	bne.n	80084fe <_malloc_r+0xea>
 8008478:	6821      	ldr	r1, [r4, #0]
 800847a:	4630      	mov	r0, r6
 800847c:	1a6d      	subs	r5, r5, r1
 800847e:	4629      	mov	r1, r5
 8008480:	f7ff ffa6 	bl	80083d0 <sbrk_aligned>
 8008484:	3001      	adds	r0, #1
 8008486:	d03a      	beq.n	80084fe <_malloc_r+0xea>
 8008488:	6823      	ldr	r3, [r4, #0]
 800848a:	442b      	add	r3, r5
 800848c:	6023      	str	r3, [r4, #0]
 800848e:	f8d8 3000 	ldr.w	r3, [r8]
 8008492:	685a      	ldr	r2, [r3, #4]
 8008494:	bb62      	cbnz	r2, 80084f0 <_malloc_r+0xdc>
 8008496:	f8c8 7000 	str.w	r7, [r8]
 800849a:	e00f      	b.n	80084bc <_malloc_r+0xa8>
 800849c:	6822      	ldr	r2, [r4, #0]
 800849e:	1b52      	subs	r2, r2, r5
 80084a0:	d420      	bmi.n	80084e4 <_malloc_r+0xd0>
 80084a2:	2a0b      	cmp	r2, #11
 80084a4:	d917      	bls.n	80084d6 <_malloc_r+0xc2>
 80084a6:	1961      	adds	r1, r4, r5
 80084a8:	42a3      	cmp	r3, r4
 80084aa:	6025      	str	r5, [r4, #0]
 80084ac:	bf18      	it	ne
 80084ae:	6059      	strne	r1, [r3, #4]
 80084b0:	6863      	ldr	r3, [r4, #4]
 80084b2:	bf08      	it	eq
 80084b4:	f8c8 1000 	streq.w	r1, [r8]
 80084b8:	5162      	str	r2, [r4, r5]
 80084ba:	604b      	str	r3, [r1, #4]
 80084bc:	4630      	mov	r0, r6
 80084be:	f000 f82f 	bl	8008520 <__malloc_unlock>
 80084c2:	f104 000b 	add.w	r0, r4, #11
 80084c6:	1d23      	adds	r3, r4, #4
 80084c8:	f020 0007 	bic.w	r0, r0, #7
 80084cc:	1ac2      	subs	r2, r0, r3
 80084ce:	bf1c      	itt	ne
 80084d0:	1a1b      	subne	r3, r3, r0
 80084d2:	50a3      	strne	r3, [r4, r2]
 80084d4:	e7af      	b.n	8008436 <_malloc_r+0x22>
 80084d6:	6862      	ldr	r2, [r4, #4]
 80084d8:	42a3      	cmp	r3, r4
 80084da:	bf0c      	ite	eq
 80084dc:	f8c8 2000 	streq.w	r2, [r8]
 80084e0:	605a      	strne	r2, [r3, #4]
 80084e2:	e7eb      	b.n	80084bc <_malloc_r+0xa8>
 80084e4:	4623      	mov	r3, r4
 80084e6:	6864      	ldr	r4, [r4, #4]
 80084e8:	e7ae      	b.n	8008448 <_malloc_r+0x34>
 80084ea:	463c      	mov	r4, r7
 80084ec:	687f      	ldr	r7, [r7, #4]
 80084ee:	e7b6      	b.n	800845e <_malloc_r+0x4a>
 80084f0:	461a      	mov	r2, r3
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	42a3      	cmp	r3, r4
 80084f6:	d1fb      	bne.n	80084f0 <_malloc_r+0xdc>
 80084f8:	2300      	movs	r3, #0
 80084fa:	6053      	str	r3, [r2, #4]
 80084fc:	e7de      	b.n	80084bc <_malloc_r+0xa8>
 80084fe:	230c      	movs	r3, #12
 8008500:	4630      	mov	r0, r6
 8008502:	6033      	str	r3, [r6, #0]
 8008504:	f000 f80c 	bl	8008520 <__malloc_unlock>
 8008508:	e794      	b.n	8008434 <_malloc_r+0x20>
 800850a:	6005      	str	r5, [r0, #0]
 800850c:	e7d6      	b.n	80084bc <_malloc_r+0xa8>
 800850e:	bf00      	nop
 8008510:	2000063c 	.word	0x2000063c

08008514 <__malloc_lock>:
 8008514:	4801      	ldr	r0, [pc, #4]	@ (800851c <__malloc_lock+0x8>)
 8008516:	f7ff b8aa 	b.w	800766e <__retarget_lock_acquire_recursive>
 800851a:	bf00      	nop
 800851c:	20000634 	.word	0x20000634

08008520 <__malloc_unlock>:
 8008520:	4801      	ldr	r0, [pc, #4]	@ (8008528 <__malloc_unlock+0x8>)
 8008522:	f7ff b8a5 	b.w	8007670 <__retarget_lock_release_recursive>
 8008526:	bf00      	nop
 8008528:	20000634 	.word	0x20000634

0800852c <_Balloc>:
 800852c:	b570      	push	{r4, r5, r6, lr}
 800852e:	69c6      	ldr	r6, [r0, #28]
 8008530:	4604      	mov	r4, r0
 8008532:	460d      	mov	r5, r1
 8008534:	b976      	cbnz	r6, 8008554 <_Balloc+0x28>
 8008536:	2010      	movs	r0, #16
 8008538:	f7ff ff42 	bl	80083c0 <malloc>
 800853c:	4602      	mov	r2, r0
 800853e:	61e0      	str	r0, [r4, #28]
 8008540:	b920      	cbnz	r0, 800854c <_Balloc+0x20>
 8008542:	216b      	movs	r1, #107	@ 0x6b
 8008544:	4b17      	ldr	r3, [pc, #92]	@ (80085a4 <_Balloc+0x78>)
 8008546:	4818      	ldr	r0, [pc, #96]	@ (80085a8 <_Balloc+0x7c>)
 8008548:	f000 fda8 	bl	800909c <__assert_func>
 800854c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008550:	6006      	str	r6, [r0, #0]
 8008552:	60c6      	str	r6, [r0, #12]
 8008554:	69e6      	ldr	r6, [r4, #28]
 8008556:	68f3      	ldr	r3, [r6, #12]
 8008558:	b183      	cbz	r3, 800857c <_Balloc+0x50>
 800855a:	69e3      	ldr	r3, [r4, #28]
 800855c:	68db      	ldr	r3, [r3, #12]
 800855e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008562:	b9b8      	cbnz	r0, 8008594 <_Balloc+0x68>
 8008564:	2101      	movs	r1, #1
 8008566:	fa01 f605 	lsl.w	r6, r1, r5
 800856a:	1d72      	adds	r2, r6, #5
 800856c:	4620      	mov	r0, r4
 800856e:	0092      	lsls	r2, r2, #2
 8008570:	f000 fdb2 	bl	80090d8 <_calloc_r>
 8008574:	b160      	cbz	r0, 8008590 <_Balloc+0x64>
 8008576:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800857a:	e00e      	b.n	800859a <_Balloc+0x6e>
 800857c:	2221      	movs	r2, #33	@ 0x21
 800857e:	2104      	movs	r1, #4
 8008580:	4620      	mov	r0, r4
 8008582:	f000 fda9 	bl	80090d8 <_calloc_r>
 8008586:	69e3      	ldr	r3, [r4, #28]
 8008588:	60f0      	str	r0, [r6, #12]
 800858a:	68db      	ldr	r3, [r3, #12]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d1e4      	bne.n	800855a <_Balloc+0x2e>
 8008590:	2000      	movs	r0, #0
 8008592:	bd70      	pop	{r4, r5, r6, pc}
 8008594:	6802      	ldr	r2, [r0, #0]
 8008596:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800859a:	2300      	movs	r3, #0
 800859c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80085a0:	e7f7      	b.n	8008592 <_Balloc+0x66>
 80085a2:	bf00      	nop
 80085a4:	08009f03 	.word	0x08009f03
 80085a8:	08009f83 	.word	0x08009f83

080085ac <_Bfree>:
 80085ac:	b570      	push	{r4, r5, r6, lr}
 80085ae:	69c6      	ldr	r6, [r0, #28]
 80085b0:	4605      	mov	r5, r0
 80085b2:	460c      	mov	r4, r1
 80085b4:	b976      	cbnz	r6, 80085d4 <_Bfree+0x28>
 80085b6:	2010      	movs	r0, #16
 80085b8:	f7ff ff02 	bl	80083c0 <malloc>
 80085bc:	4602      	mov	r2, r0
 80085be:	61e8      	str	r0, [r5, #28]
 80085c0:	b920      	cbnz	r0, 80085cc <_Bfree+0x20>
 80085c2:	218f      	movs	r1, #143	@ 0x8f
 80085c4:	4b08      	ldr	r3, [pc, #32]	@ (80085e8 <_Bfree+0x3c>)
 80085c6:	4809      	ldr	r0, [pc, #36]	@ (80085ec <_Bfree+0x40>)
 80085c8:	f000 fd68 	bl	800909c <__assert_func>
 80085cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085d0:	6006      	str	r6, [r0, #0]
 80085d2:	60c6      	str	r6, [r0, #12]
 80085d4:	b13c      	cbz	r4, 80085e6 <_Bfree+0x3a>
 80085d6:	69eb      	ldr	r3, [r5, #28]
 80085d8:	6862      	ldr	r2, [r4, #4]
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80085e0:	6021      	str	r1, [r4, #0]
 80085e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80085e6:	bd70      	pop	{r4, r5, r6, pc}
 80085e8:	08009f03 	.word	0x08009f03
 80085ec:	08009f83 	.word	0x08009f83

080085f0 <__multadd>:
 80085f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085f4:	4607      	mov	r7, r0
 80085f6:	460c      	mov	r4, r1
 80085f8:	461e      	mov	r6, r3
 80085fa:	2000      	movs	r0, #0
 80085fc:	690d      	ldr	r5, [r1, #16]
 80085fe:	f101 0c14 	add.w	ip, r1, #20
 8008602:	f8dc 3000 	ldr.w	r3, [ip]
 8008606:	3001      	adds	r0, #1
 8008608:	b299      	uxth	r1, r3
 800860a:	fb02 6101 	mla	r1, r2, r1, r6
 800860e:	0c1e      	lsrs	r6, r3, #16
 8008610:	0c0b      	lsrs	r3, r1, #16
 8008612:	fb02 3306 	mla	r3, r2, r6, r3
 8008616:	b289      	uxth	r1, r1
 8008618:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800861c:	4285      	cmp	r5, r0
 800861e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008622:	f84c 1b04 	str.w	r1, [ip], #4
 8008626:	dcec      	bgt.n	8008602 <__multadd+0x12>
 8008628:	b30e      	cbz	r6, 800866e <__multadd+0x7e>
 800862a:	68a3      	ldr	r3, [r4, #8]
 800862c:	42ab      	cmp	r3, r5
 800862e:	dc19      	bgt.n	8008664 <__multadd+0x74>
 8008630:	6861      	ldr	r1, [r4, #4]
 8008632:	4638      	mov	r0, r7
 8008634:	3101      	adds	r1, #1
 8008636:	f7ff ff79 	bl	800852c <_Balloc>
 800863a:	4680      	mov	r8, r0
 800863c:	b928      	cbnz	r0, 800864a <__multadd+0x5a>
 800863e:	4602      	mov	r2, r0
 8008640:	21ba      	movs	r1, #186	@ 0xba
 8008642:	4b0c      	ldr	r3, [pc, #48]	@ (8008674 <__multadd+0x84>)
 8008644:	480c      	ldr	r0, [pc, #48]	@ (8008678 <__multadd+0x88>)
 8008646:	f000 fd29 	bl	800909c <__assert_func>
 800864a:	6922      	ldr	r2, [r4, #16]
 800864c:	f104 010c 	add.w	r1, r4, #12
 8008650:	3202      	adds	r2, #2
 8008652:	0092      	lsls	r2, r2, #2
 8008654:	300c      	adds	r0, #12
 8008656:	f000 fd13 	bl	8009080 <memcpy>
 800865a:	4621      	mov	r1, r4
 800865c:	4638      	mov	r0, r7
 800865e:	f7ff ffa5 	bl	80085ac <_Bfree>
 8008662:	4644      	mov	r4, r8
 8008664:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008668:	3501      	adds	r5, #1
 800866a:	615e      	str	r6, [r3, #20]
 800866c:	6125      	str	r5, [r4, #16]
 800866e:	4620      	mov	r0, r4
 8008670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008674:	08009f72 	.word	0x08009f72
 8008678:	08009f83 	.word	0x08009f83

0800867c <__hi0bits>:
 800867c:	4603      	mov	r3, r0
 800867e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008682:	bf3a      	itte	cc
 8008684:	0403      	lslcc	r3, r0, #16
 8008686:	2010      	movcc	r0, #16
 8008688:	2000      	movcs	r0, #0
 800868a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800868e:	bf3c      	itt	cc
 8008690:	021b      	lslcc	r3, r3, #8
 8008692:	3008      	addcc	r0, #8
 8008694:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008698:	bf3c      	itt	cc
 800869a:	011b      	lslcc	r3, r3, #4
 800869c:	3004      	addcc	r0, #4
 800869e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086a2:	bf3c      	itt	cc
 80086a4:	009b      	lslcc	r3, r3, #2
 80086a6:	3002      	addcc	r0, #2
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	db05      	blt.n	80086b8 <__hi0bits+0x3c>
 80086ac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80086b0:	f100 0001 	add.w	r0, r0, #1
 80086b4:	bf08      	it	eq
 80086b6:	2020      	moveq	r0, #32
 80086b8:	4770      	bx	lr

080086ba <__lo0bits>:
 80086ba:	6803      	ldr	r3, [r0, #0]
 80086bc:	4602      	mov	r2, r0
 80086be:	f013 0007 	ands.w	r0, r3, #7
 80086c2:	d00b      	beq.n	80086dc <__lo0bits+0x22>
 80086c4:	07d9      	lsls	r1, r3, #31
 80086c6:	d421      	bmi.n	800870c <__lo0bits+0x52>
 80086c8:	0798      	lsls	r0, r3, #30
 80086ca:	bf49      	itett	mi
 80086cc:	085b      	lsrmi	r3, r3, #1
 80086ce:	089b      	lsrpl	r3, r3, #2
 80086d0:	2001      	movmi	r0, #1
 80086d2:	6013      	strmi	r3, [r2, #0]
 80086d4:	bf5c      	itt	pl
 80086d6:	2002      	movpl	r0, #2
 80086d8:	6013      	strpl	r3, [r2, #0]
 80086da:	4770      	bx	lr
 80086dc:	b299      	uxth	r1, r3
 80086de:	b909      	cbnz	r1, 80086e4 <__lo0bits+0x2a>
 80086e0:	2010      	movs	r0, #16
 80086e2:	0c1b      	lsrs	r3, r3, #16
 80086e4:	b2d9      	uxtb	r1, r3
 80086e6:	b909      	cbnz	r1, 80086ec <__lo0bits+0x32>
 80086e8:	3008      	adds	r0, #8
 80086ea:	0a1b      	lsrs	r3, r3, #8
 80086ec:	0719      	lsls	r1, r3, #28
 80086ee:	bf04      	itt	eq
 80086f0:	091b      	lsreq	r3, r3, #4
 80086f2:	3004      	addeq	r0, #4
 80086f4:	0799      	lsls	r1, r3, #30
 80086f6:	bf04      	itt	eq
 80086f8:	089b      	lsreq	r3, r3, #2
 80086fa:	3002      	addeq	r0, #2
 80086fc:	07d9      	lsls	r1, r3, #31
 80086fe:	d403      	bmi.n	8008708 <__lo0bits+0x4e>
 8008700:	085b      	lsrs	r3, r3, #1
 8008702:	f100 0001 	add.w	r0, r0, #1
 8008706:	d003      	beq.n	8008710 <__lo0bits+0x56>
 8008708:	6013      	str	r3, [r2, #0]
 800870a:	4770      	bx	lr
 800870c:	2000      	movs	r0, #0
 800870e:	4770      	bx	lr
 8008710:	2020      	movs	r0, #32
 8008712:	4770      	bx	lr

08008714 <__i2b>:
 8008714:	b510      	push	{r4, lr}
 8008716:	460c      	mov	r4, r1
 8008718:	2101      	movs	r1, #1
 800871a:	f7ff ff07 	bl	800852c <_Balloc>
 800871e:	4602      	mov	r2, r0
 8008720:	b928      	cbnz	r0, 800872e <__i2b+0x1a>
 8008722:	f240 1145 	movw	r1, #325	@ 0x145
 8008726:	4b04      	ldr	r3, [pc, #16]	@ (8008738 <__i2b+0x24>)
 8008728:	4804      	ldr	r0, [pc, #16]	@ (800873c <__i2b+0x28>)
 800872a:	f000 fcb7 	bl	800909c <__assert_func>
 800872e:	2301      	movs	r3, #1
 8008730:	6144      	str	r4, [r0, #20]
 8008732:	6103      	str	r3, [r0, #16]
 8008734:	bd10      	pop	{r4, pc}
 8008736:	bf00      	nop
 8008738:	08009f72 	.word	0x08009f72
 800873c:	08009f83 	.word	0x08009f83

08008740 <__multiply>:
 8008740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008744:	4614      	mov	r4, r2
 8008746:	690a      	ldr	r2, [r1, #16]
 8008748:	6923      	ldr	r3, [r4, #16]
 800874a:	460f      	mov	r7, r1
 800874c:	429a      	cmp	r2, r3
 800874e:	bfa2      	ittt	ge
 8008750:	4623      	movge	r3, r4
 8008752:	460c      	movge	r4, r1
 8008754:	461f      	movge	r7, r3
 8008756:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800875a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800875e:	68a3      	ldr	r3, [r4, #8]
 8008760:	6861      	ldr	r1, [r4, #4]
 8008762:	eb0a 0609 	add.w	r6, sl, r9
 8008766:	42b3      	cmp	r3, r6
 8008768:	b085      	sub	sp, #20
 800876a:	bfb8      	it	lt
 800876c:	3101      	addlt	r1, #1
 800876e:	f7ff fedd 	bl	800852c <_Balloc>
 8008772:	b930      	cbnz	r0, 8008782 <__multiply+0x42>
 8008774:	4602      	mov	r2, r0
 8008776:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800877a:	4b43      	ldr	r3, [pc, #268]	@ (8008888 <__multiply+0x148>)
 800877c:	4843      	ldr	r0, [pc, #268]	@ (800888c <__multiply+0x14c>)
 800877e:	f000 fc8d 	bl	800909c <__assert_func>
 8008782:	f100 0514 	add.w	r5, r0, #20
 8008786:	462b      	mov	r3, r5
 8008788:	2200      	movs	r2, #0
 800878a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800878e:	4543      	cmp	r3, r8
 8008790:	d321      	bcc.n	80087d6 <__multiply+0x96>
 8008792:	f107 0114 	add.w	r1, r7, #20
 8008796:	f104 0214 	add.w	r2, r4, #20
 800879a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800879e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80087a2:	9302      	str	r3, [sp, #8]
 80087a4:	1b13      	subs	r3, r2, r4
 80087a6:	3b15      	subs	r3, #21
 80087a8:	f023 0303 	bic.w	r3, r3, #3
 80087ac:	3304      	adds	r3, #4
 80087ae:	f104 0715 	add.w	r7, r4, #21
 80087b2:	42ba      	cmp	r2, r7
 80087b4:	bf38      	it	cc
 80087b6:	2304      	movcc	r3, #4
 80087b8:	9301      	str	r3, [sp, #4]
 80087ba:	9b02      	ldr	r3, [sp, #8]
 80087bc:	9103      	str	r1, [sp, #12]
 80087be:	428b      	cmp	r3, r1
 80087c0:	d80c      	bhi.n	80087dc <__multiply+0x9c>
 80087c2:	2e00      	cmp	r6, #0
 80087c4:	dd03      	ble.n	80087ce <__multiply+0x8e>
 80087c6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d05a      	beq.n	8008884 <__multiply+0x144>
 80087ce:	6106      	str	r6, [r0, #16]
 80087d0:	b005      	add	sp, #20
 80087d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d6:	f843 2b04 	str.w	r2, [r3], #4
 80087da:	e7d8      	b.n	800878e <__multiply+0x4e>
 80087dc:	f8b1 a000 	ldrh.w	sl, [r1]
 80087e0:	f1ba 0f00 	cmp.w	sl, #0
 80087e4:	d023      	beq.n	800882e <__multiply+0xee>
 80087e6:	46a9      	mov	r9, r5
 80087e8:	f04f 0c00 	mov.w	ip, #0
 80087ec:	f104 0e14 	add.w	lr, r4, #20
 80087f0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80087f4:	f8d9 3000 	ldr.w	r3, [r9]
 80087f8:	fa1f fb87 	uxth.w	fp, r7
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	fb0a 330b 	mla	r3, sl, fp, r3
 8008802:	4463      	add	r3, ip
 8008804:	f8d9 c000 	ldr.w	ip, [r9]
 8008808:	0c3f      	lsrs	r7, r7, #16
 800880a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800880e:	fb0a c707 	mla	r7, sl, r7, ip
 8008812:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008816:	b29b      	uxth	r3, r3
 8008818:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800881c:	4572      	cmp	r2, lr
 800881e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008822:	f849 3b04 	str.w	r3, [r9], #4
 8008826:	d8e3      	bhi.n	80087f0 <__multiply+0xb0>
 8008828:	9b01      	ldr	r3, [sp, #4]
 800882a:	f845 c003 	str.w	ip, [r5, r3]
 800882e:	9b03      	ldr	r3, [sp, #12]
 8008830:	3104      	adds	r1, #4
 8008832:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008836:	f1b9 0f00 	cmp.w	r9, #0
 800883a:	d021      	beq.n	8008880 <__multiply+0x140>
 800883c:	46ae      	mov	lr, r5
 800883e:	f04f 0a00 	mov.w	sl, #0
 8008842:	682b      	ldr	r3, [r5, #0]
 8008844:	f104 0c14 	add.w	ip, r4, #20
 8008848:	f8bc b000 	ldrh.w	fp, [ip]
 800884c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008850:	b29b      	uxth	r3, r3
 8008852:	fb09 770b 	mla	r7, r9, fp, r7
 8008856:	4457      	add	r7, sl
 8008858:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800885c:	f84e 3b04 	str.w	r3, [lr], #4
 8008860:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008864:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008868:	f8be 3000 	ldrh.w	r3, [lr]
 800886c:	4562      	cmp	r2, ip
 800886e:	fb09 330a 	mla	r3, r9, sl, r3
 8008872:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008876:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800887a:	d8e5      	bhi.n	8008848 <__multiply+0x108>
 800887c:	9f01      	ldr	r7, [sp, #4]
 800887e:	51eb      	str	r3, [r5, r7]
 8008880:	3504      	adds	r5, #4
 8008882:	e79a      	b.n	80087ba <__multiply+0x7a>
 8008884:	3e01      	subs	r6, #1
 8008886:	e79c      	b.n	80087c2 <__multiply+0x82>
 8008888:	08009f72 	.word	0x08009f72
 800888c:	08009f83 	.word	0x08009f83

08008890 <__pow5mult>:
 8008890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008894:	4615      	mov	r5, r2
 8008896:	f012 0203 	ands.w	r2, r2, #3
 800889a:	4607      	mov	r7, r0
 800889c:	460e      	mov	r6, r1
 800889e:	d007      	beq.n	80088b0 <__pow5mult+0x20>
 80088a0:	4c25      	ldr	r4, [pc, #148]	@ (8008938 <__pow5mult+0xa8>)
 80088a2:	3a01      	subs	r2, #1
 80088a4:	2300      	movs	r3, #0
 80088a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80088aa:	f7ff fea1 	bl	80085f0 <__multadd>
 80088ae:	4606      	mov	r6, r0
 80088b0:	10ad      	asrs	r5, r5, #2
 80088b2:	d03d      	beq.n	8008930 <__pow5mult+0xa0>
 80088b4:	69fc      	ldr	r4, [r7, #28]
 80088b6:	b97c      	cbnz	r4, 80088d8 <__pow5mult+0x48>
 80088b8:	2010      	movs	r0, #16
 80088ba:	f7ff fd81 	bl	80083c0 <malloc>
 80088be:	4602      	mov	r2, r0
 80088c0:	61f8      	str	r0, [r7, #28]
 80088c2:	b928      	cbnz	r0, 80088d0 <__pow5mult+0x40>
 80088c4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80088c8:	4b1c      	ldr	r3, [pc, #112]	@ (800893c <__pow5mult+0xac>)
 80088ca:	481d      	ldr	r0, [pc, #116]	@ (8008940 <__pow5mult+0xb0>)
 80088cc:	f000 fbe6 	bl	800909c <__assert_func>
 80088d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80088d4:	6004      	str	r4, [r0, #0]
 80088d6:	60c4      	str	r4, [r0, #12]
 80088d8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80088dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80088e0:	b94c      	cbnz	r4, 80088f6 <__pow5mult+0x66>
 80088e2:	f240 2171 	movw	r1, #625	@ 0x271
 80088e6:	4638      	mov	r0, r7
 80088e8:	f7ff ff14 	bl	8008714 <__i2b>
 80088ec:	2300      	movs	r3, #0
 80088ee:	4604      	mov	r4, r0
 80088f0:	f8c8 0008 	str.w	r0, [r8, #8]
 80088f4:	6003      	str	r3, [r0, #0]
 80088f6:	f04f 0900 	mov.w	r9, #0
 80088fa:	07eb      	lsls	r3, r5, #31
 80088fc:	d50a      	bpl.n	8008914 <__pow5mult+0x84>
 80088fe:	4631      	mov	r1, r6
 8008900:	4622      	mov	r2, r4
 8008902:	4638      	mov	r0, r7
 8008904:	f7ff ff1c 	bl	8008740 <__multiply>
 8008908:	4680      	mov	r8, r0
 800890a:	4631      	mov	r1, r6
 800890c:	4638      	mov	r0, r7
 800890e:	f7ff fe4d 	bl	80085ac <_Bfree>
 8008912:	4646      	mov	r6, r8
 8008914:	106d      	asrs	r5, r5, #1
 8008916:	d00b      	beq.n	8008930 <__pow5mult+0xa0>
 8008918:	6820      	ldr	r0, [r4, #0]
 800891a:	b938      	cbnz	r0, 800892c <__pow5mult+0x9c>
 800891c:	4622      	mov	r2, r4
 800891e:	4621      	mov	r1, r4
 8008920:	4638      	mov	r0, r7
 8008922:	f7ff ff0d 	bl	8008740 <__multiply>
 8008926:	6020      	str	r0, [r4, #0]
 8008928:	f8c0 9000 	str.w	r9, [r0]
 800892c:	4604      	mov	r4, r0
 800892e:	e7e4      	b.n	80088fa <__pow5mult+0x6a>
 8008930:	4630      	mov	r0, r6
 8008932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008936:	bf00      	nop
 8008938:	08009fdc 	.word	0x08009fdc
 800893c:	08009f03 	.word	0x08009f03
 8008940:	08009f83 	.word	0x08009f83

08008944 <__lshift>:
 8008944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008948:	460c      	mov	r4, r1
 800894a:	4607      	mov	r7, r0
 800894c:	4691      	mov	r9, r2
 800894e:	6923      	ldr	r3, [r4, #16]
 8008950:	6849      	ldr	r1, [r1, #4]
 8008952:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008956:	68a3      	ldr	r3, [r4, #8]
 8008958:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800895c:	f108 0601 	add.w	r6, r8, #1
 8008960:	42b3      	cmp	r3, r6
 8008962:	db0b      	blt.n	800897c <__lshift+0x38>
 8008964:	4638      	mov	r0, r7
 8008966:	f7ff fde1 	bl	800852c <_Balloc>
 800896a:	4605      	mov	r5, r0
 800896c:	b948      	cbnz	r0, 8008982 <__lshift+0x3e>
 800896e:	4602      	mov	r2, r0
 8008970:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008974:	4b27      	ldr	r3, [pc, #156]	@ (8008a14 <__lshift+0xd0>)
 8008976:	4828      	ldr	r0, [pc, #160]	@ (8008a18 <__lshift+0xd4>)
 8008978:	f000 fb90 	bl	800909c <__assert_func>
 800897c:	3101      	adds	r1, #1
 800897e:	005b      	lsls	r3, r3, #1
 8008980:	e7ee      	b.n	8008960 <__lshift+0x1c>
 8008982:	2300      	movs	r3, #0
 8008984:	f100 0114 	add.w	r1, r0, #20
 8008988:	f100 0210 	add.w	r2, r0, #16
 800898c:	4618      	mov	r0, r3
 800898e:	4553      	cmp	r3, sl
 8008990:	db33      	blt.n	80089fa <__lshift+0xb6>
 8008992:	6920      	ldr	r0, [r4, #16]
 8008994:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008998:	f104 0314 	add.w	r3, r4, #20
 800899c:	f019 091f 	ands.w	r9, r9, #31
 80089a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80089a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80089a8:	d02b      	beq.n	8008a02 <__lshift+0xbe>
 80089aa:	468a      	mov	sl, r1
 80089ac:	2200      	movs	r2, #0
 80089ae:	f1c9 0e20 	rsb	lr, r9, #32
 80089b2:	6818      	ldr	r0, [r3, #0]
 80089b4:	fa00 f009 	lsl.w	r0, r0, r9
 80089b8:	4310      	orrs	r0, r2
 80089ba:	f84a 0b04 	str.w	r0, [sl], #4
 80089be:	f853 2b04 	ldr.w	r2, [r3], #4
 80089c2:	459c      	cmp	ip, r3
 80089c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80089c8:	d8f3      	bhi.n	80089b2 <__lshift+0x6e>
 80089ca:	ebac 0304 	sub.w	r3, ip, r4
 80089ce:	3b15      	subs	r3, #21
 80089d0:	f023 0303 	bic.w	r3, r3, #3
 80089d4:	3304      	adds	r3, #4
 80089d6:	f104 0015 	add.w	r0, r4, #21
 80089da:	4584      	cmp	ip, r0
 80089dc:	bf38      	it	cc
 80089de:	2304      	movcc	r3, #4
 80089e0:	50ca      	str	r2, [r1, r3]
 80089e2:	b10a      	cbz	r2, 80089e8 <__lshift+0xa4>
 80089e4:	f108 0602 	add.w	r6, r8, #2
 80089e8:	3e01      	subs	r6, #1
 80089ea:	4638      	mov	r0, r7
 80089ec:	4621      	mov	r1, r4
 80089ee:	612e      	str	r6, [r5, #16]
 80089f0:	f7ff fddc 	bl	80085ac <_Bfree>
 80089f4:	4628      	mov	r0, r5
 80089f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80089fe:	3301      	adds	r3, #1
 8008a00:	e7c5      	b.n	800898e <__lshift+0x4a>
 8008a02:	3904      	subs	r1, #4
 8008a04:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a08:	459c      	cmp	ip, r3
 8008a0a:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a0e:	d8f9      	bhi.n	8008a04 <__lshift+0xc0>
 8008a10:	e7ea      	b.n	80089e8 <__lshift+0xa4>
 8008a12:	bf00      	nop
 8008a14:	08009f72 	.word	0x08009f72
 8008a18:	08009f83 	.word	0x08009f83

08008a1c <__mcmp>:
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	690a      	ldr	r2, [r1, #16]
 8008a20:	6900      	ldr	r0, [r0, #16]
 8008a22:	b530      	push	{r4, r5, lr}
 8008a24:	1a80      	subs	r0, r0, r2
 8008a26:	d10e      	bne.n	8008a46 <__mcmp+0x2a>
 8008a28:	3314      	adds	r3, #20
 8008a2a:	3114      	adds	r1, #20
 8008a2c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008a30:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008a34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008a38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008a3c:	4295      	cmp	r5, r2
 8008a3e:	d003      	beq.n	8008a48 <__mcmp+0x2c>
 8008a40:	d205      	bcs.n	8008a4e <__mcmp+0x32>
 8008a42:	f04f 30ff 	mov.w	r0, #4294967295
 8008a46:	bd30      	pop	{r4, r5, pc}
 8008a48:	42a3      	cmp	r3, r4
 8008a4a:	d3f3      	bcc.n	8008a34 <__mcmp+0x18>
 8008a4c:	e7fb      	b.n	8008a46 <__mcmp+0x2a>
 8008a4e:	2001      	movs	r0, #1
 8008a50:	e7f9      	b.n	8008a46 <__mcmp+0x2a>
	...

08008a54 <__mdiff>:
 8008a54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a58:	4689      	mov	r9, r1
 8008a5a:	4606      	mov	r6, r0
 8008a5c:	4611      	mov	r1, r2
 8008a5e:	4648      	mov	r0, r9
 8008a60:	4614      	mov	r4, r2
 8008a62:	f7ff ffdb 	bl	8008a1c <__mcmp>
 8008a66:	1e05      	subs	r5, r0, #0
 8008a68:	d112      	bne.n	8008a90 <__mdiff+0x3c>
 8008a6a:	4629      	mov	r1, r5
 8008a6c:	4630      	mov	r0, r6
 8008a6e:	f7ff fd5d 	bl	800852c <_Balloc>
 8008a72:	4602      	mov	r2, r0
 8008a74:	b928      	cbnz	r0, 8008a82 <__mdiff+0x2e>
 8008a76:	f240 2137 	movw	r1, #567	@ 0x237
 8008a7a:	4b3e      	ldr	r3, [pc, #248]	@ (8008b74 <__mdiff+0x120>)
 8008a7c:	483e      	ldr	r0, [pc, #248]	@ (8008b78 <__mdiff+0x124>)
 8008a7e:	f000 fb0d 	bl	800909c <__assert_func>
 8008a82:	2301      	movs	r3, #1
 8008a84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008a88:	4610      	mov	r0, r2
 8008a8a:	b003      	add	sp, #12
 8008a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a90:	bfbc      	itt	lt
 8008a92:	464b      	movlt	r3, r9
 8008a94:	46a1      	movlt	r9, r4
 8008a96:	4630      	mov	r0, r6
 8008a98:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008a9c:	bfba      	itte	lt
 8008a9e:	461c      	movlt	r4, r3
 8008aa0:	2501      	movlt	r5, #1
 8008aa2:	2500      	movge	r5, #0
 8008aa4:	f7ff fd42 	bl	800852c <_Balloc>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	b918      	cbnz	r0, 8008ab4 <__mdiff+0x60>
 8008aac:	f240 2145 	movw	r1, #581	@ 0x245
 8008ab0:	4b30      	ldr	r3, [pc, #192]	@ (8008b74 <__mdiff+0x120>)
 8008ab2:	e7e3      	b.n	8008a7c <__mdiff+0x28>
 8008ab4:	f100 0b14 	add.w	fp, r0, #20
 8008ab8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008abc:	f109 0310 	add.w	r3, r9, #16
 8008ac0:	60c5      	str	r5, [r0, #12]
 8008ac2:	f04f 0c00 	mov.w	ip, #0
 8008ac6:	f109 0514 	add.w	r5, r9, #20
 8008aca:	46d9      	mov	r9, fp
 8008acc:	6926      	ldr	r6, [r4, #16]
 8008ace:	f104 0e14 	add.w	lr, r4, #20
 8008ad2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008ad6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008ada:	9301      	str	r3, [sp, #4]
 8008adc:	9b01      	ldr	r3, [sp, #4]
 8008ade:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008ae2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008ae6:	b281      	uxth	r1, r0
 8008ae8:	9301      	str	r3, [sp, #4]
 8008aea:	fa1f f38a 	uxth.w	r3, sl
 8008aee:	1a5b      	subs	r3, r3, r1
 8008af0:	0c00      	lsrs	r0, r0, #16
 8008af2:	4463      	add	r3, ip
 8008af4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008af8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008b02:	4576      	cmp	r6, lr
 8008b04:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b08:	f849 3b04 	str.w	r3, [r9], #4
 8008b0c:	d8e6      	bhi.n	8008adc <__mdiff+0x88>
 8008b0e:	1b33      	subs	r3, r6, r4
 8008b10:	3b15      	subs	r3, #21
 8008b12:	f023 0303 	bic.w	r3, r3, #3
 8008b16:	3415      	adds	r4, #21
 8008b18:	3304      	adds	r3, #4
 8008b1a:	42a6      	cmp	r6, r4
 8008b1c:	bf38      	it	cc
 8008b1e:	2304      	movcc	r3, #4
 8008b20:	441d      	add	r5, r3
 8008b22:	445b      	add	r3, fp
 8008b24:	461e      	mov	r6, r3
 8008b26:	462c      	mov	r4, r5
 8008b28:	4544      	cmp	r4, r8
 8008b2a:	d30e      	bcc.n	8008b4a <__mdiff+0xf6>
 8008b2c:	f108 0103 	add.w	r1, r8, #3
 8008b30:	1b49      	subs	r1, r1, r5
 8008b32:	f021 0103 	bic.w	r1, r1, #3
 8008b36:	3d03      	subs	r5, #3
 8008b38:	45a8      	cmp	r8, r5
 8008b3a:	bf38      	it	cc
 8008b3c:	2100      	movcc	r1, #0
 8008b3e:	440b      	add	r3, r1
 8008b40:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008b44:	b199      	cbz	r1, 8008b6e <__mdiff+0x11a>
 8008b46:	6117      	str	r7, [r2, #16]
 8008b48:	e79e      	b.n	8008a88 <__mdiff+0x34>
 8008b4a:	46e6      	mov	lr, ip
 8008b4c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008b50:	fa1f fc81 	uxth.w	ip, r1
 8008b54:	44f4      	add	ip, lr
 8008b56:	0c08      	lsrs	r0, r1, #16
 8008b58:	4471      	add	r1, lr
 8008b5a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008b5e:	b289      	uxth	r1, r1
 8008b60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008b64:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b68:	f846 1b04 	str.w	r1, [r6], #4
 8008b6c:	e7dc      	b.n	8008b28 <__mdiff+0xd4>
 8008b6e:	3f01      	subs	r7, #1
 8008b70:	e7e6      	b.n	8008b40 <__mdiff+0xec>
 8008b72:	bf00      	nop
 8008b74:	08009f72 	.word	0x08009f72
 8008b78:	08009f83 	.word	0x08009f83

08008b7c <__d2b>:
 8008b7c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008b80:	2101      	movs	r1, #1
 8008b82:	4690      	mov	r8, r2
 8008b84:	4699      	mov	r9, r3
 8008b86:	9e08      	ldr	r6, [sp, #32]
 8008b88:	f7ff fcd0 	bl	800852c <_Balloc>
 8008b8c:	4604      	mov	r4, r0
 8008b8e:	b930      	cbnz	r0, 8008b9e <__d2b+0x22>
 8008b90:	4602      	mov	r2, r0
 8008b92:	f240 310f 	movw	r1, #783	@ 0x30f
 8008b96:	4b23      	ldr	r3, [pc, #140]	@ (8008c24 <__d2b+0xa8>)
 8008b98:	4823      	ldr	r0, [pc, #140]	@ (8008c28 <__d2b+0xac>)
 8008b9a:	f000 fa7f 	bl	800909c <__assert_func>
 8008b9e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008ba2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ba6:	b10d      	cbz	r5, 8008bac <__d2b+0x30>
 8008ba8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008bac:	9301      	str	r3, [sp, #4]
 8008bae:	f1b8 0300 	subs.w	r3, r8, #0
 8008bb2:	d024      	beq.n	8008bfe <__d2b+0x82>
 8008bb4:	4668      	mov	r0, sp
 8008bb6:	9300      	str	r3, [sp, #0]
 8008bb8:	f7ff fd7f 	bl	80086ba <__lo0bits>
 8008bbc:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008bc0:	b1d8      	cbz	r0, 8008bfa <__d2b+0x7e>
 8008bc2:	f1c0 0320 	rsb	r3, r0, #32
 8008bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8008bca:	430b      	orrs	r3, r1
 8008bcc:	40c2      	lsrs	r2, r0
 8008bce:	6163      	str	r3, [r4, #20]
 8008bd0:	9201      	str	r2, [sp, #4]
 8008bd2:	9b01      	ldr	r3, [sp, #4]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	bf0c      	ite	eq
 8008bd8:	2201      	moveq	r2, #1
 8008bda:	2202      	movne	r2, #2
 8008bdc:	61a3      	str	r3, [r4, #24]
 8008bde:	6122      	str	r2, [r4, #16]
 8008be0:	b1ad      	cbz	r5, 8008c0e <__d2b+0x92>
 8008be2:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008be6:	4405      	add	r5, r0
 8008be8:	6035      	str	r5, [r6, #0]
 8008bea:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008bee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bf0:	6018      	str	r0, [r3, #0]
 8008bf2:	4620      	mov	r0, r4
 8008bf4:	b002      	add	sp, #8
 8008bf6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008bfa:	6161      	str	r1, [r4, #20]
 8008bfc:	e7e9      	b.n	8008bd2 <__d2b+0x56>
 8008bfe:	a801      	add	r0, sp, #4
 8008c00:	f7ff fd5b 	bl	80086ba <__lo0bits>
 8008c04:	9b01      	ldr	r3, [sp, #4]
 8008c06:	2201      	movs	r2, #1
 8008c08:	6163      	str	r3, [r4, #20]
 8008c0a:	3020      	adds	r0, #32
 8008c0c:	e7e7      	b.n	8008bde <__d2b+0x62>
 8008c0e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008c12:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c16:	6030      	str	r0, [r6, #0]
 8008c18:	6918      	ldr	r0, [r3, #16]
 8008c1a:	f7ff fd2f 	bl	800867c <__hi0bits>
 8008c1e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c22:	e7e4      	b.n	8008bee <__d2b+0x72>
 8008c24:	08009f72 	.word	0x08009f72
 8008c28:	08009f83 	.word	0x08009f83

08008c2c <__ssputs_r>:
 8008c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c30:	461f      	mov	r7, r3
 8008c32:	688e      	ldr	r6, [r1, #8]
 8008c34:	4682      	mov	sl, r0
 8008c36:	42be      	cmp	r6, r7
 8008c38:	460c      	mov	r4, r1
 8008c3a:	4690      	mov	r8, r2
 8008c3c:	680b      	ldr	r3, [r1, #0]
 8008c3e:	d82d      	bhi.n	8008c9c <__ssputs_r+0x70>
 8008c40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008c48:	d026      	beq.n	8008c98 <__ssputs_r+0x6c>
 8008c4a:	6965      	ldr	r5, [r4, #20]
 8008c4c:	6909      	ldr	r1, [r1, #16]
 8008c4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c52:	eba3 0901 	sub.w	r9, r3, r1
 8008c56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c5a:	1c7b      	adds	r3, r7, #1
 8008c5c:	444b      	add	r3, r9
 8008c5e:	106d      	asrs	r5, r5, #1
 8008c60:	429d      	cmp	r5, r3
 8008c62:	bf38      	it	cc
 8008c64:	461d      	movcc	r5, r3
 8008c66:	0553      	lsls	r3, r2, #21
 8008c68:	d527      	bpl.n	8008cba <__ssputs_r+0x8e>
 8008c6a:	4629      	mov	r1, r5
 8008c6c:	f7ff fbd2 	bl	8008414 <_malloc_r>
 8008c70:	4606      	mov	r6, r0
 8008c72:	b360      	cbz	r0, 8008cce <__ssputs_r+0xa2>
 8008c74:	464a      	mov	r2, r9
 8008c76:	6921      	ldr	r1, [r4, #16]
 8008c78:	f000 fa02 	bl	8009080 <memcpy>
 8008c7c:	89a3      	ldrh	r3, [r4, #12]
 8008c7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008c82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c86:	81a3      	strh	r3, [r4, #12]
 8008c88:	6126      	str	r6, [r4, #16]
 8008c8a:	444e      	add	r6, r9
 8008c8c:	6026      	str	r6, [r4, #0]
 8008c8e:	463e      	mov	r6, r7
 8008c90:	6165      	str	r5, [r4, #20]
 8008c92:	eba5 0509 	sub.w	r5, r5, r9
 8008c96:	60a5      	str	r5, [r4, #8]
 8008c98:	42be      	cmp	r6, r7
 8008c9a:	d900      	bls.n	8008c9e <__ssputs_r+0x72>
 8008c9c:	463e      	mov	r6, r7
 8008c9e:	4632      	mov	r2, r6
 8008ca0:	4641      	mov	r1, r8
 8008ca2:	6820      	ldr	r0, [r4, #0]
 8008ca4:	f000 f9c2 	bl	800902c <memmove>
 8008ca8:	2000      	movs	r0, #0
 8008caa:	68a3      	ldr	r3, [r4, #8]
 8008cac:	1b9b      	subs	r3, r3, r6
 8008cae:	60a3      	str	r3, [r4, #8]
 8008cb0:	6823      	ldr	r3, [r4, #0]
 8008cb2:	4433      	add	r3, r6
 8008cb4:	6023      	str	r3, [r4, #0]
 8008cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cba:	462a      	mov	r2, r5
 8008cbc:	f000 fa32 	bl	8009124 <_realloc_r>
 8008cc0:	4606      	mov	r6, r0
 8008cc2:	2800      	cmp	r0, #0
 8008cc4:	d1e0      	bne.n	8008c88 <__ssputs_r+0x5c>
 8008cc6:	4650      	mov	r0, sl
 8008cc8:	6921      	ldr	r1, [r4, #16]
 8008cca:	f7ff fb31 	bl	8008330 <_free_r>
 8008cce:	230c      	movs	r3, #12
 8008cd0:	f8ca 3000 	str.w	r3, [sl]
 8008cd4:	89a3      	ldrh	r3, [r4, #12]
 8008cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8008cda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cde:	81a3      	strh	r3, [r4, #12]
 8008ce0:	e7e9      	b.n	8008cb6 <__ssputs_r+0x8a>
	...

08008ce4 <_svfiprintf_r>:
 8008ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce8:	4698      	mov	r8, r3
 8008cea:	898b      	ldrh	r3, [r1, #12]
 8008cec:	4607      	mov	r7, r0
 8008cee:	061b      	lsls	r3, r3, #24
 8008cf0:	460d      	mov	r5, r1
 8008cf2:	4614      	mov	r4, r2
 8008cf4:	b09d      	sub	sp, #116	@ 0x74
 8008cf6:	d510      	bpl.n	8008d1a <_svfiprintf_r+0x36>
 8008cf8:	690b      	ldr	r3, [r1, #16]
 8008cfa:	b973      	cbnz	r3, 8008d1a <_svfiprintf_r+0x36>
 8008cfc:	2140      	movs	r1, #64	@ 0x40
 8008cfe:	f7ff fb89 	bl	8008414 <_malloc_r>
 8008d02:	6028      	str	r0, [r5, #0]
 8008d04:	6128      	str	r0, [r5, #16]
 8008d06:	b930      	cbnz	r0, 8008d16 <_svfiprintf_r+0x32>
 8008d08:	230c      	movs	r3, #12
 8008d0a:	603b      	str	r3, [r7, #0]
 8008d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d10:	b01d      	add	sp, #116	@ 0x74
 8008d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d16:	2340      	movs	r3, #64	@ 0x40
 8008d18:	616b      	str	r3, [r5, #20]
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d1e:	2320      	movs	r3, #32
 8008d20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d24:	2330      	movs	r3, #48	@ 0x30
 8008d26:	f04f 0901 	mov.w	r9, #1
 8008d2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d2e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008ec8 <_svfiprintf_r+0x1e4>
 8008d32:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d36:	4623      	mov	r3, r4
 8008d38:	469a      	mov	sl, r3
 8008d3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d3e:	b10a      	cbz	r2, 8008d44 <_svfiprintf_r+0x60>
 8008d40:	2a25      	cmp	r2, #37	@ 0x25
 8008d42:	d1f9      	bne.n	8008d38 <_svfiprintf_r+0x54>
 8008d44:	ebba 0b04 	subs.w	fp, sl, r4
 8008d48:	d00b      	beq.n	8008d62 <_svfiprintf_r+0x7e>
 8008d4a:	465b      	mov	r3, fp
 8008d4c:	4622      	mov	r2, r4
 8008d4e:	4629      	mov	r1, r5
 8008d50:	4638      	mov	r0, r7
 8008d52:	f7ff ff6b 	bl	8008c2c <__ssputs_r>
 8008d56:	3001      	adds	r0, #1
 8008d58:	f000 80a7 	beq.w	8008eaa <_svfiprintf_r+0x1c6>
 8008d5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d5e:	445a      	add	r2, fp
 8008d60:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d62:	f89a 3000 	ldrb.w	r3, [sl]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	f000 809f 	beq.w	8008eaa <_svfiprintf_r+0x1c6>
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8008d72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d76:	f10a 0a01 	add.w	sl, sl, #1
 8008d7a:	9304      	str	r3, [sp, #16]
 8008d7c:	9307      	str	r3, [sp, #28]
 8008d7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d82:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d84:	4654      	mov	r4, sl
 8008d86:	2205      	movs	r2, #5
 8008d88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d8c:	484e      	ldr	r0, [pc, #312]	@ (8008ec8 <_svfiprintf_r+0x1e4>)
 8008d8e:	f7fe fc70 	bl	8007672 <memchr>
 8008d92:	9a04      	ldr	r2, [sp, #16]
 8008d94:	b9d8      	cbnz	r0, 8008dce <_svfiprintf_r+0xea>
 8008d96:	06d0      	lsls	r0, r2, #27
 8008d98:	bf44      	itt	mi
 8008d9a:	2320      	movmi	r3, #32
 8008d9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008da0:	0711      	lsls	r1, r2, #28
 8008da2:	bf44      	itt	mi
 8008da4:	232b      	movmi	r3, #43	@ 0x2b
 8008da6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008daa:	f89a 3000 	ldrb.w	r3, [sl]
 8008dae:	2b2a      	cmp	r3, #42	@ 0x2a
 8008db0:	d015      	beq.n	8008dde <_svfiprintf_r+0xfa>
 8008db2:	4654      	mov	r4, sl
 8008db4:	2000      	movs	r0, #0
 8008db6:	f04f 0c0a 	mov.w	ip, #10
 8008dba:	9a07      	ldr	r2, [sp, #28]
 8008dbc:	4621      	mov	r1, r4
 8008dbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008dc2:	3b30      	subs	r3, #48	@ 0x30
 8008dc4:	2b09      	cmp	r3, #9
 8008dc6:	d94b      	bls.n	8008e60 <_svfiprintf_r+0x17c>
 8008dc8:	b1b0      	cbz	r0, 8008df8 <_svfiprintf_r+0x114>
 8008dca:	9207      	str	r2, [sp, #28]
 8008dcc:	e014      	b.n	8008df8 <_svfiprintf_r+0x114>
 8008dce:	eba0 0308 	sub.w	r3, r0, r8
 8008dd2:	fa09 f303 	lsl.w	r3, r9, r3
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	46a2      	mov	sl, r4
 8008dda:	9304      	str	r3, [sp, #16]
 8008ddc:	e7d2      	b.n	8008d84 <_svfiprintf_r+0xa0>
 8008dde:	9b03      	ldr	r3, [sp, #12]
 8008de0:	1d19      	adds	r1, r3, #4
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	9103      	str	r1, [sp, #12]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	bfbb      	ittet	lt
 8008dea:	425b      	neglt	r3, r3
 8008dec:	f042 0202 	orrlt.w	r2, r2, #2
 8008df0:	9307      	strge	r3, [sp, #28]
 8008df2:	9307      	strlt	r3, [sp, #28]
 8008df4:	bfb8      	it	lt
 8008df6:	9204      	strlt	r2, [sp, #16]
 8008df8:	7823      	ldrb	r3, [r4, #0]
 8008dfa:	2b2e      	cmp	r3, #46	@ 0x2e
 8008dfc:	d10a      	bne.n	8008e14 <_svfiprintf_r+0x130>
 8008dfe:	7863      	ldrb	r3, [r4, #1]
 8008e00:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e02:	d132      	bne.n	8008e6a <_svfiprintf_r+0x186>
 8008e04:	9b03      	ldr	r3, [sp, #12]
 8008e06:	3402      	adds	r4, #2
 8008e08:	1d1a      	adds	r2, r3, #4
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	9203      	str	r2, [sp, #12]
 8008e0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e12:	9305      	str	r3, [sp, #20]
 8008e14:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008ecc <_svfiprintf_r+0x1e8>
 8008e18:	2203      	movs	r2, #3
 8008e1a:	4650      	mov	r0, sl
 8008e1c:	7821      	ldrb	r1, [r4, #0]
 8008e1e:	f7fe fc28 	bl	8007672 <memchr>
 8008e22:	b138      	cbz	r0, 8008e34 <_svfiprintf_r+0x150>
 8008e24:	2240      	movs	r2, #64	@ 0x40
 8008e26:	9b04      	ldr	r3, [sp, #16]
 8008e28:	eba0 000a 	sub.w	r0, r0, sl
 8008e2c:	4082      	lsls	r2, r0
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	3401      	adds	r4, #1
 8008e32:	9304      	str	r3, [sp, #16]
 8008e34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e38:	2206      	movs	r2, #6
 8008e3a:	4825      	ldr	r0, [pc, #148]	@ (8008ed0 <_svfiprintf_r+0x1ec>)
 8008e3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e40:	f7fe fc17 	bl	8007672 <memchr>
 8008e44:	2800      	cmp	r0, #0
 8008e46:	d036      	beq.n	8008eb6 <_svfiprintf_r+0x1d2>
 8008e48:	4b22      	ldr	r3, [pc, #136]	@ (8008ed4 <_svfiprintf_r+0x1f0>)
 8008e4a:	bb1b      	cbnz	r3, 8008e94 <_svfiprintf_r+0x1b0>
 8008e4c:	9b03      	ldr	r3, [sp, #12]
 8008e4e:	3307      	adds	r3, #7
 8008e50:	f023 0307 	bic.w	r3, r3, #7
 8008e54:	3308      	adds	r3, #8
 8008e56:	9303      	str	r3, [sp, #12]
 8008e58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e5a:	4433      	add	r3, r6
 8008e5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e5e:	e76a      	b.n	8008d36 <_svfiprintf_r+0x52>
 8008e60:	460c      	mov	r4, r1
 8008e62:	2001      	movs	r0, #1
 8008e64:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e68:	e7a8      	b.n	8008dbc <_svfiprintf_r+0xd8>
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	f04f 0c0a 	mov.w	ip, #10
 8008e70:	4619      	mov	r1, r3
 8008e72:	3401      	adds	r4, #1
 8008e74:	9305      	str	r3, [sp, #20]
 8008e76:	4620      	mov	r0, r4
 8008e78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e7c:	3a30      	subs	r2, #48	@ 0x30
 8008e7e:	2a09      	cmp	r2, #9
 8008e80:	d903      	bls.n	8008e8a <_svfiprintf_r+0x1a6>
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d0c6      	beq.n	8008e14 <_svfiprintf_r+0x130>
 8008e86:	9105      	str	r1, [sp, #20]
 8008e88:	e7c4      	b.n	8008e14 <_svfiprintf_r+0x130>
 8008e8a:	4604      	mov	r4, r0
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e92:	e7f0      	b.n	8008e76 <_svfiprintf_r+0x192>
 8008e94:	ab03      	add	r3, sp, #12
 8008e96:	9300      	str	r3, [sp, #0]
 8008e98:	462a      	mov	r2, r5
 8008e9a:	4638      	mov	r0, r7
 8008e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8008ed8 <_svfiprintf_r+0x1f4>)
 8008e9e:	a904      	add	r1, sp, #16
 8008ea0:	f7fd fe84 	bl	8006bac <_printf_float>
 8008ea4:	1c42      	adds	r2, r0, #1
 8008ea6:	4606      	mov	r6, r0
 8008ea8:	d1d6      	bne.n	8008e58 <_svfiprintf_r+0x174>
 8008eaa:	89ab      	ldrh	r3, [r5, #12]
 8008eac:	065b      	lsls	r3, r3, #25
 8008eae:	f53f af2d 	bmi.w	8008d0c <_svfiprintf_r+0x28>
 8008eb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008eb4:	e72c      	b.n	8008d10 <_svfiprintf_r+0x2c>
 8008eb6:	ab03      	add	r3, sp, #12
 8008eb8:	9300      	str	r3, [sp, #0]
 8008eba:	462a      	mov	r2, r5
 8008ebc:	4638      	mov	r0, r7
 8008ebe:	4b06      	ldr	r3, [pc, #24]	@ (8008ed8 <_svfiprintf_r+0x1f4>)
 8008ec0:	a904      	add	r1, sp, #16
 8008ec2:	f7fe f911 	bl	80070e8 <_printf_i>
 8008ec6:	e7ed      	b.n	8008ea4 <_svfiprintf_r+0x1c0>
 8008ec8:	0800a0d8 	.word	0x0800a0d8
 8008ecc:	0800a0de 	.word	0x0800a0de
 8008ed0:	0800a0e2 	.word	0x0800a0e2
 8008ed4:	08006bad 	.word	0x08006bad
 8008ed8:	08008c2d 	.word	0x08008c2d

08008edc <__sflush_r>:
 8008edc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ee2:	0716      	lsls	r6, r2, #28
 8008ee4:	4605      	mov	r5, r0
 8008ee6:	460c      	mov	r4, r1
 8008ee8:	d454      	bmi.n	8008f94 <__sflush_r+0xb8>
 8008eea:	684b      	ldr	r3, [r1, #4]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	dc02      	bgt.n	8008ef6 <__sflush_r+0x1a>
 8008ef0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	dd48      	ble.n	8008f88 <__sflush_r+0xac>
 8008ef6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008ef8:	2e00      	cmp	r6, #0
 8008efa:	d045      	beq.n	8008f88 <__sflush_r+0xac>
 8008efc:	2300      	movs	r3, #0
 8008efe:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008f02:	682f      	ldr	r7, [r5, #0]
 8008f04:	6a21      	ldr	r1, [r4, #32]
 8008f06:	602b      	str	r3, [r5, #0]
 8008f08:	d030      	beq.n	8008f6c <__sflush_r+0x90>
 8008f0a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008f0c:	89a3      	ldrh	r3, [r4, #12]
 8008f0e:	0759      	lsls	r1, r3, #29
 8008f10:	d505      	bpl.n	8008f1e <__sflush_r+0x42>
 8008f12:	6863      	ldr	r3, [r4, #4]
 8008f14:	1ad2      	subs	r2, r2, r3
 8008f16:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008f18:	b10b      	cbz	r3, 8008f1e <__sflush_r+0x42>
 8008f1a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008f1c:	1ad2      	subs	r2, r2, r3
 8008f1e:	2300      	movs	r3, #0
 8008f20:	4628      	mov	r0, r5
 8008f22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f24:	6a21      	ldr	r1, [r4, #32]
 8008f26:	47b0      	blx	r6
 8008f28:	1c43      	adds	r3, r0, #1
 8008f2a:	89a3      	ldrh	r3, [r4, #12]
 8008f2c:	d106      	bne.n	8008f3c <__sflush_r+0x60>
 8008f2e:	6829      	ldr	r1, [r5, #0]
 8008f30:	291d      	cmp	r1, #29
 8008f32:	d82b      	bhi.n	8008f8c <__sflush_r+0xb0>
 8008f34:	4a28      	ldr	r2, [pc, #160]	@ (8008fd8 <__sflush_r+0xfc>)
 8008f36:	410a      	asrs	r2, r1
 8008f38:	07d6      	lsls	r6, r2, #31
 8008f3a:	d427      	bmi.n	8008f8c <__sflush_r+0xb0>
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	6062      	str	r2, [r4, #4]
 8008f40:	6922      	ldr	r2, [r4, #16]
 8008f42:	04d9      	lsls	r1, r3, #19
 8008f44:	6022      	str	r2, [r4, #0]
 8008f46:	d504      	bpl.n	8008f52 <__sflush_r+0x76>
 8008f48:	1c42      	adds	r2, r0, #1
 8008f4a:	d101      	bne.n	8008f50 <__sflush_r+0x74>
 8008f4c:	682b      	ldr	r3, [r5, #0]
 8008f4e:	b903      	cbnz	r3, 8008f52 <__sflush_r+0x76>
 8008f50:	6560      	str	r0, [r4, #84]	@ 0x54
 8008f52:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f54:	602f      	str	r7, [r5, #0]
 8008f56:	b1b9      	cbz	r1, 8008f88 <__sflush_r+0xac>
 8008f58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f5c:	4299      	cmp	r1, r3
 8008f5e:	d002      	beq.n	8008f66 <__sflush_r+0x8a>
 8008f60:	4628      	mov	r0, r5
 8008f62:	f7ff f9e5 	bl	8008330 <_free_r>
 8008f66:	2300      	movs	r3, #0
 8008f68:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f6a:	e00d      	b.n	8008f88 <__sflush_r+0xac>
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	4628      	mov	r0, r5
 8008f70:	47b0      	blx	r6
 8008f72:	4602      	mov	r2, r0
 8008f74:	1c50      	adds	r0, r2, #1
 8008f76:	d1c9      	bne.n	8008f0c <__sflush_r+0x30>
 8008f78:	682b      	ldr	r3, [r5, #0]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d0c6      	beq.n	8008f0c <__sflush_r+0x30>
 8008f7e:	2b1d      	cmp	r3, #29
 8008f80:	d001      	beq.n	8008f86 <__sflush_r+0xaa>
 8008f82:	2b16      	cmp	r3, #22
 8008f84:	d11d      	bne.n	8008fc2 <__sflush_r+0xe6>
 8008f86:	602f      	str	r7, [r5, #0]
 8008f88:	2000      	movs	r0, #0
 8008f8a:	e021      	b.n	8008fd0 <__sflush_r+0xf4>
 8008f8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f90:	b21b      	sxth	r3, r3
 8008f92:	e01a      	b.n	8008fca <__sflush_r+0xee>
 8008f94:	690f      	ldr	r7, [r1, #16]
 8008f96:	2f00      	cmp	r7, #0
 8008f98:	d0f6      	beq.n	8008f88 <__sflush_r+0xac>
 8008f9a:	0793      	lsls	r3, r2, #30
 8008f9c:	bf18      	it	ne
 8008f9e:	2300      	movne	r3, #0
 8008fa0:	680e      	ldr	r6, [r1, #0]
 8008fa2:	bf08      	it	eq
 8008fa4:	694b      	ldreq	r3, [r1, #20]
 8008fa6:	1bf6      	subs	r6, r6, r7
 8008fa8:	600f      	str	r7, [r1, #0]
 8008faa:	608b      	str	r3, [r1, #8]
 8008fac:	2e00      	cmp	r6, #0
 8008fae:	ddeb      	ble.n	8008f88 <__sflush_r+0xac>
 8008fb0:	4633      	mov	r3, r6
 8008fb2:	463a      	mov	r2, r7
 8008fb4:	4628      	mov	r0, r5
 8008fb6:	6a21      	ldr	r1, [r4, #32]
 8008fb8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008fbc:	47e0      	blx	ip
 8008fbe:	2800      	cmp	r0, #0
 8008fc0:	dc07      	bgt.n	8008fd2 <__sflush_r+0xf6>
 8008fc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fca:	f04f 30ff 	mov.w	r0, #4294967295
 8008fce:	81a3      	strh	r3, [r4, #12]
 8008fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fd2:	4407      	add	r7, r0
 8008fd4:	1a36      	subs	r6, r6, r0
 8008fd6:	e7e9      	b.n	8008fac <__sflush_r+0xd0>
 8008fd8:	dfbffffe 	.word	0xdfbffffe

08008fdc <_fflush_r>:
 8008fdc:	b538      	push	{r3, r4, r5, lr}
 8008fde:	690b      	ldr	r3, [r1, #16]
 8008fe0:	4605      	mov	r5, r0
 8008fe2:	460c      	mov	r4, r1
 8008fe4:	b913      	cbnz	r3, 8008fec <_fflush_r+0x10>
 8008fe6:	2500      	movs	r5, #0
 8008fe8:	4628      	mov	r0, r5
 8008fea:	bd38      	pop	{r3, r4, r5, pc}
 8008fec:	b118      	cbz	r0, 8008ff6 <_fflush_r+0x1a>
 8008fee:	6a03      	ldr	r3, [r0, #32]
 8008ff0:	b90b      	cbnz	r3, 8008ff6 <_fflush_r+0x1a>
 8008ff2:	f7fe fa25 	bl	8007440 <__sinit>
 8008ff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d0f3      	beq.n	8008fe6 <_fflush_r+0xa>
 8008ffe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009000:	07d0      	lsls	r0, r2, #31
 8009002:	d404      	bmi.n	800900e <_fflush_r+0x32>
 8009004:	0599      	lsls	r1, r3, #22
 8009006:	d402      	bmi.n	800900e <_fflush_r+0x32>
 8009008:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800900a:	f7fe fb30 	bl	800766e <__retarget_lock_acquire_recursive>
 800900e:	4628      	mov	r0, r5
 8009010:	4621      	mov	r1, r4
 8009012:	f7ff ff63 	bl	8008edc <__sflush_r>
 8009016:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009018:	4605      	mov	r5, r0
 800901a:	07da      	lsls	r2, r3, #31
 800901c:	d4e4      	bmi.n	8008fe8 <_fflush_r+0xc>
 800901e:	89a3      	ldrh	r3, [r4, #12]
 8009020:	059b      	lsls	r3, r3, #22
 8009022:	d4e1      	bmi.n	8008fe8 <_fflush_r+0xc>
 8009024:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009026:	f7fe fb23 	bl	8007670 <__retarget_lock_release_recursive>
 800902a:	e7dd      	b.n	8008fe8 <_fflush_r+0xc>

0800902c <memmove>:
 800902c:	4288      	cmp	r0, r1
 800902e:	b510      	push	{r4, lr}
 8009030:	eb01 0402 	add.w	r4, r1, r2
 8009034:	d902      	bls.n	800903c <memmove+0x10>
 8009036:	4284      	cmp	r4, r0
 8009038:	4623      	mov	r3, r4
 800903a:	d807      	bhi.n	800904c <memmove+0x20>
 800903c:	1e43      	subs	r3, r0, #1
 800903e:	42a1      	cmp	r1, r4
 8009040:	d008      	beq.n	8009054 <memmove+0x28>
 8009042:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009046:	f803 2f01 	strb.w	r2, [r3, #1]!
 800904a:	e7f8      	b.n	800903e <memmove+0x12>
 800904c:	4601      	mov	r1, r0
 800904e:	4402      	add	r2, r0
 8009050:	428a      	cmp	r2, r1
 8009052:	d100      	bne.n	8009056 <memmove+0x2a>
 8009054:	bd10      	pop	{r4, pc}
 8009056:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800905a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800905e:	e7f7      	b.n	8009050 <memmove+0x24>

08009060 <_sbrk_r>:
 8009060:	b538      	push	{r3, r4, r5, lr}
 8009062:	2300      	movs	r3, #0
 8009064:	4d05      	ldr	r5, [pc, #20]	@ (800907c <_sbrk_r+0x1c>)
 8009066:	4604      	mov	r4, r0
 8009068:	4608      	mov	r0, r1
 800906a:	602b      	str	r3, [r5, #0]
 800906c:	f7f8 ffb2 	bl	8001fd4 <_sbrk>
 8009070:	1c43      	adds	r3, r0, #1
 8009072:	d102      	bne.n	800907a <_sbrk_r+0x1a>
 8009074:	682b      	ldr	r3, [r5, #0]
 8009076:	b103      	cbz	r3, 800907a <_sbrk_r+0x1a>
 8009078:	6023      	str	r3, [r4, #0]
 800907a:	bd38      	pop	{r3, r4, r5, pc}
 800907c:	20000630 	.word	0x20000630

08009080 <memcpy>:
 8009080:	440a      	add	r2, r1
 8009082:	4291      	cmp	r1, r2
 8009084:	f100 33ff 	add.w	r3, r0, #4294967295
 8009088:	d100      	bne.n	800908c <memcpy+0xc>
 800908a:	4770      	bx	lr
 800908c:	b510      	push	{r4, lr}
 800908e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009092:	4291      	cmp	r1, r2
 8009094:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009098:	d1f9      	bne.n	800908e <memcpy+0xe>
 800909a:	bd10      	pop	{r4, pc}

0800909c <__assert_func>:
 800909c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800909e:	4614      	mov	r4, r2
 80090a0:	461a      	mov	r2, r3
 80090a2:	4b09      	ldr	r3, [pc, #36]	@ (80090c8 <__assert_func+0x2c>)
 80090a4:	4605      	mov	r5, r0
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	68d8      	ldr	r0, [r3, #12]
 80090aa:	b954      	cbnz	r4, 80090c2 <__assert_func+0x26>
 80090ac:	4b07      	ldr	r3, [pc, #28]	@ (80090cc <__assert_func+0x30>)
 80090ae:	461c      	mov	r4, r3
 80090b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80090b4:	9100      	str	r1, [sp, #0]
 80090b6:	462b      	mov	r3, r5
 80090b8:	4905      	ldr	r1, [pc, #20]	@ (80090d0 <__assert_func+0x34>)
 80090ba:	f000 f86f 	bl	800919c <fiprintf>
 80090be:	f000 f87f 	bl	80091c0 <abort>
 80090c2:	4b04      	ldr	r3, [pc, #16]	@ (80090d4 <__assert_func+0x38>)
 80090c4:	e7f4      	b.n	80090b0 <__assert_func+0x14>
 80090c6:	bf00      	nop
 80090c8:	200000a8 	.word	0x200000a8
 80090cc:	0800a12e 	.word	0x0800a12e
 80090d0:	0800a100 	.word	0x0800a100
 80090d4:	0800a0f3 	.word	0x0800a0f3

080090d8 <_calloc_r>:
 80090d8:	b570      	push	{r4, r5, r6, lr}
 80090da:	fba1 5402 	umull	r5, r4, r1, r2
 80090de:	b93c      	cbnz	r4, 80090f0 <_calloc_r+0x18>
 80090e0:	4629      	mov	r1, r5
 80090e2:	f7ff f997 	bl	8008414 <_malloc_r>
 80090e6:	4606      	mov	r6, r0
 80090e8:	b928      	cbnz	r0, 80090f6 <_calloc_r+0x1e>
 80090ea:	2600      	movs	r6, #0
 80090ec:	4630      	mov	r0, r6
 80090ee:	bd70      	pop	{r4, r5, r6, pc}
 80090f0:	220c      	movs	r2, #12
 80090f2:	6002      	str	r2, [r0, #0]
 80090f4:	e7f9      	b.n	80090ea <_calloc_r+0x12>
 80090f6:	462a      	mov	r2, r5
 80090f8:	4621      	mov	r1, r4
 80090fa:	f7fe fa3a 	bl	8007572 <memset>
 80090fe:	e7f5      	b.n	80090ec <_calloc_r+0x14>

08009100 <__ascii_mbtowc>:
 8009100:	b082      	sub	sp, #8
 8009102:	b901      	cbnz	r1, 8009106 <__ascii_mbtowc+0x6>
 8009104:	a901      	add	r1, sp, #4
 8009106:	b142      	cbz	r2, 800911a <__ascii_mbtowc+0x1a>
 8009108:	b14b      	cbz	r3, 800911e <__ascii_mbtowc+0x1e>
 800910a:	7813      	ldrb	r3, [r2, #0]
 800910c:	600b      	str	r3, [r1, #0]
 800910e:	7812      	ldrb	r2, [r2, #0]
 8009110:	1e10      	subs	r0, r2, #0
 8009112:	bf18      	it	ne
 8009114:	2001      	movne	r0, #1
 8009116:	b002      	add	sp, #8
 8009118:	4770      	bx	lr
 800911a:	4610      	mov	r0, r2
 800911c:	e7fb      	b.n	8009116 <__ascii_mbtowc+0x16>
 800911e:	f06f 0001 	mvn.w	r0, #1
 8009122:	e7f8      	b.n	8009116 <__ascii_mbtowc+0x16>

08009124 <_realloc_r>:
 8009124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009128:	4680      	mov	r8, r0
 800912a:	4615      	mov	r5, r2
 800912c:	460c      	mov	r4, r1
 800912e:	b921      	cbnz	r1, 800913a <_realloc_r+0x16>
 8009130:	4611      	mov	r1, r2
 8009132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009136:	f7ff b96d 	b.w	8008414 <_malloc_r>
 800913a:	b92a      	cbnz	r2, 8009148 <_realloc_r+0x24>
 800913c:	f7ff f8f8 	bl	8008330 <_free_r>
 8009140:	2400      	movs	r4, #0
 8009142:	4620      	mov	r0, r4
 8009144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009148:	f000 f841 	bl	80091ce <_malloc_usable_size_r>
 800914c:	4285      	cmp	r5, r0
 800914e:	4606      	mov	r6, r0
 8009150:	d802      	bhi.n	8009158 <_realloc_r+0x34>
 8009152:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009156:	d8f4      	bhi.n	8009142 <_realloc_r+0x1e>
 8009158:	4629      	mov	r1, r5
 800915a:	4640      	mov	r0, r8
 800915c:	f7ff f95a 	bl	8008414 <_malloc_r>
 8009160:	4607      	mov	r7, r0
 8009162:	2800      	cmp	r0, #0
 8009164:	d0ec      	beq.n	8009140 <_realloc_r+0x1c>
 8009166:	42b5      	cmp	r5, r6
 8009168:	462a      	mov	r2, r5
 800916a:	4621      	mov	r1, r4
 800916c:	bf28      	it	cs
 800916e:	4632      	movcs	r2, r6
 8009170:	f7ff ff86 	bl	8009080 <memcpy>
 8009174:	4621      	mov	r1, r4
 8009176:	4640      	mov	r0, r8
 8009178:	f7ff f8da 	bl	8008330 <_free_r>
 800917c:	463c      	mov	r4, r7
 800917e:	e7e0      	b.n	8009142 <_realloc_r+0x1e>

08009180 <__ascii_wctomb>:
 8009180:	4603      	mov	r3, r0
 8009182:	4608      	mov	r0, r1
 8009184:	b141      	cbz	r1, 8009198 <__ascii_wctomb+0x18>
 8009186:	2aff      	cmp	r2, #255	@ 0xff
 8009188:	d904      	bls.n	8009194 <__ascii_wctomb+0x14>
 800918a:	228a      	movs	r2, #138	@ 0x8a
 800918c:	f04f 30ff 	mov.w	r0, #4294967295
 8009190:	601a      	str	r2, [r3, #0]
 8009192:	4770      	bx	lr
 8009194:	2001      	movs	r0, #1
 8009196:	700a      	strb	r2, [r1, #0]
 8009198:	4770      	bx	lr
	...

0800919c <fiprintf>:
 800919c:	b40e      	push	{r1, r2, r3}
 800919e:	b503      	push	{r0, r1, lr}
 80091a0:	4601      	mov	r1, r0
 80091a2:	ab03      	add	r3, sp, #12
 80091a4:	4805      	ldr	r0, [pc, #20]	@ (80091bc <fiprintf+0x20>)
 80091a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80091aa:	6800      	ldr	r0, [r0, #0]
 80091ac:	9301      	str	r3, [sp, #4]
 80091ae:	f000 f83d 	bl	800922c <_vfiprintf_r>
 80091b2:	b002      	add	sp, #8
 80091b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80091b8:	b003      	add	sp, #12
 80091ba:	4770      	bx	lr
 80091bc:	200000a8 	.word	0x200000a8

080091c0 <abort>:
 80091c0:	2006      	movs	r0, #6
 80091c2:	b508      	push	{r3, lr}
 80091c4:	f000 fa06 	bl	80095d4 <raise>
 80091c8:	2001      	movs	r0, #1
 80091ca:	f7f8 fe8e 	bl	8001eea <_exit>

080091ce <_malloc_usable_size_r>:
 80091ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091d2:	1f18      	subs	r0, r3, #4
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	bfbc      	itt	lt
 80091d8:	580b      	ldrlt	r3, [r1, r0]
 80091da:	18c0      	addlt	r0, r0, r3
 80091dc:	4770      	bx	lr

080091de <__sfputc_r>:
 80091de:	6893      	ldr	r3, [r2, #8]
 80091e0:	b410      	push	{r4}
 80091e2:	3b01      	subs	r3, #1
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	6093      	str	r3, [r2, #8]
 80091e8:	da07      	bge.n	80091fa <__sfputc_r+0x1c>
 80091ea:	6994      	ldr	r4, [r2, #24]
 80091ec:	42a3      	cmp	r3, r4
 80091ee:	db01      	blt.n	80091f4 <__sfputc_r+0x16>
 80091f0:	290a      	cmp	r1, #10
 80091f2:	d102      	bne.n	80091fa <__sfputc_r+0x1c>
 80091f4:	bc10      	pop	{r4}
 80091f6:	f000 b931 	b.w	800945c <__swbuf_r>
 80091fa:	6813      	ldr	r3, [r2, #0]
 80091fc:	1c58      	adds	r0, r3, #1
 80091fe:	6010      	str	r0, [r2, #0]
 8009200:	7019      	strb	r1, [r3, #0]
 8009202:	4608      	mov	r0, r1
 8009204:	bc10      	pop	{r4}
 8009206:	4770      	bx	lr

08009208 <__sfputs_r>:
 8009208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800920a:	4606      	mov	r6, r0
 800920c:	460f      	mov	r7, r1
 800920e:	4614      	mov	r4, r2
 8009210:	18d5      	adds	r5, r2, r3
 8009212:	42ac      	cmp	r4, r5
 8009214:	d101      	bne.n	800921a <__sfputs_r+0x12>
 8009216:	2000      	movs	r0, #0
 8009218:	e007      	b.n	800922a <__sfputs_r+0x22>
 800921a:	463a      	mov	r2, r7
 800921c:	4630      	mov	r0, r6
 800921e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009222:	f7ff ffdc 	bl	80091de <__sfputc_r>
 8009226:	1c43      	adds	r3, r0, #1
 8009228:	d1f3      	bne.n	8009212 <__sfputs_r+0xa>
 800922a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800922c <_vfiprintf_r>:
 800922c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009230:	460d      	mov	r5, r1
 8009232:	4614      	mov	r4, r2
 8009234:	4698      	mov	r8, r3
 8009236:	4606      	mov	r6, r0
 8009238:	b09d      	sub	sp, #116	@ 0x74
 800923a:	b118      	cbz	r0, 8009244 <_vfiprintf_r+0x18>
 800923c:	6a03      	ldr	r3, [r0, #32]
 800923e:	b90b      	cbnz	r3, 8009244 <_vfiprintf_r+0x18>
 8009240:	f7fe f8fe 	bl	8007440 <__sinit>
 8009244:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009246:	07d9      	lsls	r1, r3, #31
 8009248:	d405      	bmi.n	8009256 <_vfiprintf_r+0x2a>
 800924a:	89ab      	ldrh	r3, [r5, #12]
 800924c:	059a      	lsls	r2, r3, #22
 800924e:	d402      	bmi.n	8009256 <_vfiprintf_r+0x2a>
 8009250:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009252:	f7fe fa0c 	bl	800766e <__retarget_lock_acquire_recursive>
 8009256:	89ab      	ldrh	r3, [r5, #12]
 8009258:	071b      	lsls	r3, r3, #28
 800925a:	d501      	bpl.n	8009260 <_vfiprintf_r+0x34>
 800925c:	692b      	ldr	r3, [r5, #16]
 800925e:	b99b      	cbnz	r3, 8009288 <_vfiprintf_r+0x5c>
 8009260:	4629      	mov	r1, r5
 8009262:	4630      	mov	r0, r6
 8009264:	f000 f938 	bl	80094d8 <__swsetup_r>
 8009268:	b170      	cbz	r0, 8009288 <_vfiprintf_r+0x5c>
 800926a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800926c:	07dc      	lsls	r4, r3, #31
 800926e:	d504      	bpl.n	800927a <_vfiprintf_r+0x4e>
 8009270:	f04f 30ff 	mov.w	r0, #4294967295
 8009274:	b01d      	add	sp, #116	@ 0x74
 8009276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800927a:	89ab      	ldrh	r3, [r5, #12]
 800927c:	0598      	lsls	r0, r3, #22
 800927e:	d4f7      	bmi.n	8009270 <_vfiprintf_r+0x44>
 8009280:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009282:	f7fe f9f5 	bl	8007670 <__retarget_lock_release_recursive>
 8009286:	e7f3      	b.n	8009270 <_vfiprintf_r+0x44>
 8009288:	2300      	movs	r3, #0
 800928a:	9309      	str	r3, [sp, #36]	@ 0x24
 800928c:	2320      	movs	r3, #32
 800928e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009292:	2330      	movs	r3, #48	@ 0x30
 8009294:	f04f 0901 	mov.w	r9, #1
 8009298:	f8cd 800c 	str.w	r8, [sp, #12]
 800929c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009448 <_vfiprintf_r+0x21c>
 80092a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80092a4:	4623      	mov	r3, r4
 80092a6:	469a      	mov	sl, r3
 80092a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092ac:	b10a      	cbz	r2, 80092b2 <_vfiprintf_r+0x86>
 80092ae:	2a25      	cmp	r2, #37	@ 0x25
 80092b0:	d1f9      	bne.n	80092a6 <_vfiprintf_r+0x7a>
 80092b2:	ebba 0b04 	subs.w	fp, sl, r4
 80092b6:	d00b      	beq.n	80092d0 <_vfiprintf_r+0xa4>
 80092b8:	465b      	mov	r3, fp
 80092ba:	4622      	mov	r2, r4
 80092bc:	4629      	mov	r1, r5
 80092be:	4630      	mov	r0, r6
 80092c0:	f7ff ffa2 	bl	8009208 <__sfputs_r>
 80092c4:	3001      	adds	r0, #1
 80092c6:	f000 80a7 	beq.w	8009418 <_vfiprintf_r+0x1ec>
 80092ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092cc:	445a      	add	r2, fp
 80092ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80092d0:	f89a 3000 	ldrb.w	r3, [sl]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	f000 809f 	beq.w	8009418 <_vfiprintf_r+0x1ec>
 80092da:	2300      	movs	r3, #0
 80092dc:	f04f 32ff 	mov.w	r2, #4294967295
 80092e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092e4:	f10a 0a01 	add.w	sl, sl, #1
 80092e8:	9304      	str	r3, [sp, #16]
 80092ea:	9307      	str	r3, [sp, #28]
 80092ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80092f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80092f2:	4654      	mov	r4, sl
 80092f4:	2205      	movs	r2, #5
 80092f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092fa:	4853      	ldr	r0, [pc, #332]	@ (8009448 <_vfiprintf_r+0x21c>)
 80092fc:	f7fe f9b9 	bl	8007672 <memchr>
 8009300:	9a04      	ldr	r2, [sp, #16]
 8009302:	b9d8      	cbnz	r0, 800933c <_vfiprintf_r+0x110>
 8009304:	06d1      	lsls	r1, r2, #27
 8009306:	bf44      	itt	mi
 8009308:	2320      	movmi	r3, #32
 800930a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800930e:	0713      	lsls	r3, r2, #28
 8009310:	bf44      	itt	mi
 8009312:	232b      	movmi	r3, #43	@ 0x2b
 8009314:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009318:	f89a 3000 	ldrb.w	r3, [sl]
 800931c:	2b2a      	cmp	r3, #42	@ 0x2a
 800931e:	d015      	beq.n	800934c <_vfiprintf_r+0x120>
 8009320:	4654      	mov	r4, sl
 8009322:	2000      	movs	r0, #0
 8009324:	f04f 0c0a 	mov.w	ip, #10
 8009328:	9a07      	ldr	r2, [sp, #28]
 800932a:	4621      	mov	r1, r4
 800932c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009330:	3b30      	subs	r3, #48	@ 0x30
 8009332:	2b09      	cmp	r3, #9
 8009334:	d94b      	bls.n	80093ce <_vfiprintf_r+0x1a2>
 8009336:	b1b0      	cbz	r0, 8009366 <_vfiprintf_r+0x13a>
 8009338:	9207      	str	r2, [sp, #28]
 800933a:	e014      	b.n	8009366 <_vfiprintf_r+0x13a>
 800933c:	eba0 0308 	sub.w	r3, r0, r8
 8009340:	fa09 f303 	lsl.w	r3, r9, r3
 8009344:	4313      	orrs	r3, r2
 8009346:	46a2      	mov	sl, r4
 8009348:	9304      	str	r3, [sp, #16]
 800934a:	e7d2      	b.n	80092f2 <_vfiprintf_r+0xc6>
 800934c:	9b03      	ldr	r3, [sp, #12]
 800934e:	1d19      	adds	r1, r3, #4
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	9103      	str	r1, [sp, #12]
 8009354:	2b00      	cmp	r3, #0
 8009356:	bfbb      	ittet	lt
 8009358:	425b      	neglt	r3, r3
 800935a:	f042 0202 	orrlt.w	r2, r2, #2
 800935e:	9307      	strge	r3, [sp, #28]
 8009360:	9307      	strlt	r3, [sp, #28]
 8009362:	bfb8      	it	lt
 8009364:	9204      	strlt	r2, [sp, #16]
 8009366:	7823      	ldrb	r3, [r4, #0]
 8009368:	2b2e      	cmp	r3, #46	@ 0x2e
 800936a:	d10a      	bne.n	8009382 <_vfiprintf_r+0x156>
 800936c:	7863      	ldrb	r3, [r4, #1]
 800936e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009370:	d132      	bne.n	80093d8 <_vfiprintf_r+0x1ac>
 8009372:	9b03      	ldr	r3, [sp, #12]
 8009374:	3402      	adds	r4, #2
 8009376:	1d1a      	adds	r2, r3, #4
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	9203      	str	r2, [sp, #12]
 800937c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009380:	9305      	str	r3, [sp, #20]
 8009382:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800944c <_vfiprintf_r+0x220>
 8009386:	2203      	movs	r2, #3
 8009388:	4650      	mov	r0, sl
 800938a:	7821      	ldrb	r1, [r4, #0]
 800938c:	f7fe f971 	bl	8007672 <memchr>
 8009390:	b138      	cbz	r0, 80093a2 <_vfiprintf_r+0x176>
 8009392:	2240      	movs	r2, #64	@ 0x40
 8009394:	9b04      	ldr	r3, [sp, #16]
 8009396:	eba0 000a 	sub.w	r0, r0, sl
 800939a:	4082      	lsls	r2, r0
 800939c:	4313      	orrs	r3, r2
 800939e:	3401      	adds	r4, #1
 80093a0:	9304      	str	r3, [sp, #16]
 80093a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093a6:	2206      	movs	r2, #6
 80093a8:	4829      	ldr	r0, [pc, #164]	@ (8009450 <_vfiprintf_r+0x224>)
 80093aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80093ae:	f7fe f960 	bl	8007672 <memchr>
 80093b2:	2800      	cmp	r0, #0
 80093b4:	d03f      	beq.n	8009436 <_vfiprintf_r+0x20a>
 80093b6:	4b27      	ldr	r3, [pc, #156]	@ (8009454 <_vfiprintf_r+0x228>)
 80093b8:	bb1b      	cbnz	r3, 8009402 <_vfiprintf_r+0x1d6>
 80093ba:	9b03      	ldr	r3, [sp, #12]
 80093bc:	3307      	adds	r3, #7
 80093be:	f023 0307 	bic.w	r3, r3, #7
 80093c2:	3308      	adds	r3, #8
 80093c4:	9303      	str	r3, [sp, #12]
 80093c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093c8:	443b      	add	r3, r7
 80093ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80093cc:	e76a      	b.n	80092a4 <_vfiprintf_r+0x78>
 80093ce:	460c      	mov	r4, r1
 80093d0:	2001      	movs	r0, #1
 80093d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80093d6:	e7a8      	b.n	800932a <_vfiprintf_r+0xfe>
 80093d8:	2300      	movs	r3, #0
 80093da:	f04f 0c0a 	mov.w	ip, #10
 80093de:	4619      	mov	r1, r3
 80093e0:	3401      	adds	r4, #1
 80093e2:	9305      	str	r3, [sp, #20]
 80093e4:	4620      	mov	r0, r4
 80093e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093ea:	3a30      	subs	r2, #48	@ 0x30
 80093ec:	2a09      	cmp	r2, #9
 80093ee:	d903      	bls.n	80093f8 <_vfiprintf_r+0x1cc>
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d0c6      	beq.n	8009382 <_vfiprintf_r+0x156>
 80093f4:	9105      	str	r1, [sp, #20]
 80093f6:	e7c4      	b.n	8009382 <_vfiprintf_r+0x156>
 80093f8:	4604      	mov	r4, r0
 80093fa:	2301      	movs	r3, #1
 80093fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8009400:	e7f0      	b.n	80093e4 <_vfiprintf_r+0x1b8>
 8009402:	ab03      	add	r3, sp, #12
 8009404:	9300      	str	r3, [sp, #0]
 8009406:	462a      	mov	r2, r5
 8009408:	4630      	mov	r0, r6
 800940a:	4b13      	ldr	r3, [pc, #76]	@ (8009458 <_vfiprintf_r+0x22c>)
 800940c:	a904      	add	r1, sp, #16
 800940e:	f7fd fbcd 	bl	8006bac <_printf_float>
 8009412:	4607      	mov	r7, r0
 8009414:	1c78      	adds	r0, r7, #1
 8009416:	d1d6      	bne.n	80093c6 <_vfiprintf_r+0x19a>
 8009418:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800941a:	07d9      	lsls	r1, r3, #31
 800941c:	d405      	bmi.n	800942a <_vfiprintf_r+0x1fe>
 800941e:	89ab      	ldrh	r3, [r5, #12]
 8009420:	059a      	lsls	r2, r3, #22
 8009422:	d402      	bmi.n	800942a <_vfiprintf_r+0x1fe>
 8009424:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009426:	f7fe f923 	bl	8007670 <__retarget_lock_release_recursive>
 800942a:	89ab      	ldrh	r3, [r5, #12]
 800942c:	065b      	lsls	r3, r3, #25
 800942e:	f53f af1f 	bmi.w	8009270 <_vfiprintf_r+0x44>
 8009432:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009434:	e71e      	b.n	8009274 <_vfiprintf_r+0x48>
 8009436:	ab03      	add	r3, sp, #12
 8009438:	9300      	str	r3, [sp, #0]
 800943a:	462a      	mov	r2, r5
 800943c:	4630      	mov	r0, r6
 800943e:	4b06      	ldr	r3, [pc, #24]	@ (8009458 <_vfiprintf_r+0x22c>)
 8009440:	a904      	add	r1, sp, #16
 8009442:	f7fd fe51 	bl	80070e8 <_printf_i>
 8009446:	e7e4      	b.n	8009412 <_vfiprintf_r+0x1e6>
 8009448:	0800a0d8 	.word	0x0800a0d8
 800944c:	0800a0de 	.word	0x0800a0de
 8009450:	0800a0e2 	.word	0x0800a0e2
 8009454:	08006bad 	.word	0x08006bad
 8009458:	08009209 	.word	0x08009209

0800945c <__swbuf_r>:
 800945c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800945e:	460e      	mov	r6, r1
 8009460:	4614      	mov	r4, r2
 8009462:	4605      	mov	r5, r0
 8009464:	b118      	cbz	r0, 800946e <__swbuf_r+0x12>
 8009466:	6a03      	ldr	r3, [r0, #32]
 8009468:	b90b      	cbnz	r3, 800946e <__swbuf_r+0x12>
 800946a:	f7fd ffe9 	bl	8007440 <__sinit>
 800946e:	69a3      	ldr	r3, [r4, #24]
 8009470:	60a3      	str	r3, [r4, #8]
 8009472:	89a3      	ldrh	r3, [r4, #12]
 8009474:	071a      	lsls	r2, r3, #28
 8009476:	d501      	bpl.n	800947c <__swbuf_r+0x20>
 8009478:	6923      	ldr	r3, [r4, #16]
 800947a:	b943      	cbnz	r3, 800948e <__swbuf_r+0x32>
 800947c:	4621      	mov	r1, r4
 800947e:	4628      	mov	r0, r5
 8009480:	f000 f82a 	bl	80094d8 <__swsetup_r>
 8009484:	b118      	cbz	r0, 800948e <__swbuf_r+0x32>
 8009486:	f04f 37ff 	mov.w	r7, #4294967295
 800948a:	4638      	mov	r0, r7
 800948c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800948e:	6823      	ldr	r3, [r4, #0]
 8009490:	6922      	ldr	r2, [r4, #16]
 8009492:	b2f6      	uxtb	r6, r6
 8009494:	1a98      	subs	r0, r3, r2
 8009496:	6963      	ldr	r3, [r4, #20]
 8009498:	4637      	mov	r7, r6
 800949a:	4283      	cmp	r3, r0
 800949c:	dc05      	bgt.n	80094aa <__swbuf_r+0x4e>
 800949e:	4621      	mov	r1, r4
 80094a0:	4628      	mov	r0, r5
 80094a2:	f7ff fd9b 	bl	8008fdc <_fflush_r>
 80094a6:	2800      	cmp	r0, #0
 80094a8:	d1ed      	bne.n	8009486 <__swbuf_r+0x2a>
 80094aa:	68a3      	ldr	r3, [r4, #8]
 80094ac:	3b01      	subs	r3, #1
 80094ae:	60a3      	str	r3, [r4, #8]
 80094b0:	6823      	ldr	r3, [r4, #0]
 80094b2:	1c5a      	adds	r2, r3, #1
 80094b4:	6022      	str	r2, [r4, #0]
 80094b6:	701e      	strb	r6, [r3, #0]
 80094b8:	6962      	ldr	r2, [r4, #20]
 80094ba:	1c43      	adds	r3, r0, #1
 80094bc:	429a      	cmp	r2, r3
 80094be:	d004      	beq.n	80094ca <__swbuf_r+0x6e>
 80094c0:	89a3      	ldrh	r3, [r4, #12]
 80094c2:	07db      	lsls	r3, r3, #31
 80094c4:	d5e1      	bpl.n	800948a <__swbuf_r+0x2e>
 80094c6:	2e0a      	cmp	r6, #10
 80094c8:	d1df      	bne.n	800948a <__swbuf_r+0x2e>
 80094ca:	4621      	mov	r1, r4
 80094cc:	4628      	mov	r0, r5
 80094ce:	f7ff fd85 	bl	8008fdc <_fflush_r>
 80094d2:	2800      	cmp	r0, #0
 80094d4:	d0d9      	beq.n	800948a <__swbuf_r+0x2e>
 80094d6:	e7d6      	b.n	8009486 <__swbuf_r+0x2a>

080094d8 <__swsetup_r>:
 80094d8:	b538      	push	{r3, r4, r5, lr}
 80094da:	4b29      	ldr	r3, [pc, #164]	@ (8009580 <__swsetup_r+0xa8>)
 80094dc:	4605      	mov	r5, r0
 80094de:	6818      	ldr	r0, [r3, #0]
 80094e0:	460c      	mov	r4, r1
 80094e2:	b118      	cbz	r0, 80094ec <__swsetup_r+0x14>
 80094e4:	6a03      	ldr	r3, [r0, #32]
 80094e6:	b90b      	cbnz	r3, 80094ec <__swsetup_r+0x14>
 80094e8:	f7fd ffaa 	bl	8007440 <__sinit>
 80094ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094f0:	0719      	lsls	r1, r3, #28
 80094f2:	d422      	bmi.n	800953a <__swsetup_r+0x62>
 80094f4:	06da      	lsls	r2, r3, #27
 80094f6:	d407      	bmi.n	8009508 <__swsetup_r+0x30>
 80094f8:	2209      	movs	r2, #9
 80094fa:	602a      	str	r2, [r5, #0]
 80094fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009500:	f04f 30ff 	mov.w	r0, #4294967295
 8009504:	81a3      	strh	r3, [r4, #12]
 8009506:	e033      	b.n	8009570 <__swsetup_r+0x98>
 8009508:	0758      	lsls	r0, r3, #29
 800950a:	d512      	bpl.n	8009532 <__swsetup_r+0x5a>
 800950c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800950e:	b141      	cbz	r1, 8009522 <__swsetup_r+0x4a>
 8009510:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009514:	4299      	cmp	r1, r3
 8009516:	d002      	beq.n	800951e <__swsetup_r+0x46>
 8009518:	4628      	mov	r0, r5
 800951a:	f7fe ff09 	bl	8008330 <_free_r>
 800951e:	2300      	movs	r3, #0
 8009520:	6363      	str	r3, [r4, #52]	@ 0x34
 8009522:	89a3      	ldrh	r3, [r4, #12]
 8009524:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009528:	81a3      	strh	r3, [r4, #12]
 800952a:	2300      	movs	r3, #0
 800952c:	6063      	str	r3, [r4, #4]
 800952e:	6923      	ldr	r3, [r4, #16]
 8009530:	6023      	str	r3, [r4, #0]
 8009532:	89a3      	ldrh	r3, [r4, #12]
 8009534:	f043 0308 	orr.w	r3, r3, #8
 8009538:	81a3      	strh	r3, [r4, #12]
 800953a:	6923      	ldr	r3, [r4, #16]
 800953c:	b94b      	cbnz	r3, 8009552 <__swsetup_r+0x7a>
 800953e:	89a3      	ldrh	r3, [r4, #12]
 8009540:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009544:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009548:	d003      	beq.n	8009552 <__swsetup_r+0x7a>
 800954a:	4621      	mov	r1, r4
 800954c:	4628      	mov	r0, r5
 800954e:	f000 f882 	bl	8009656 <__smakebuf_r>
 8009552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009556:	f013 0201 	ands.w	r2, r3, #1
 800955a:	d00a      	beq.n	8009572 <__swsetup_r+0x9a>
 800955c:	2200      	movs	r2, #0
 800955e:	60a2      	str	r2, [r4, #8]
 8009560:	6962      	ldr	r2, [r4, #20]
 8009562:	4252      	negs	r2, r2
 8009564:	61a2      	str	r2, [r4, #24]
 8009566:	6922      	ldr	r2, [r4, #16]
 8009568:	b942      	cbnz	r2, 800957c <__swsetup_r+0xa4>
 800956a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800956e:	d1c5      	bne.n	80094fc <__swsetup_r+0x24>
 8009570:	bd38      	pop	{r3, r4, r5, pc}
 8009572:	0799      	lsls	r1, r3, #30
 8009574:	bf58      	it	pl
 8009576:	6962      	ldrpl	r2, [r4, #20]
 8009578:	60a2      	str	r2, [r4, #8]
 800957a:	e7f4      	b.n	8009566 <__swsetup_r+0x8e>
 800957c:	2000      	movs	r0, #0
 800957e:	e7f7      	b.n	8009570 <__swsetup_r+0x98>
 8009580:	200000a8 	.word	0x200000a8

08009584 <_raise_r>:
 8009584:	291f      	cmp	r1, #31
 8009586:	b538      	push	{r3, r4, r5, lr}
 8009588:	4605      	mov	r5, r0
 800958a:	460c      	mov	r4, r1
 800958c:	d904      	bls.n	8009598 <_raise_r+0x14>
 800958e:	2316      	movs	r3, #22
 8009590:	6003      	str	r3, [r0, #0]
 8009592:	f04f 30ff 	mov.w	r0, #4294967295
 8009596:	bd38      	pop	{r3, r4, r5, pc}
 8009598:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800959a:	b112      	cbz	r2, 80095a2 <_raise_r+0x1e>
 800959c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80095a0:	b94b      	cbnz	r3, 80095b6 <_raise_r+0x32>
 80095a2:	4628      	mov	r0, r5
 80095a4:	f000 f830 	bl	8009608 <_getpid_r>
 80095a8:	4622      	mov	r2, r4
 80095aa:	4601      	mov	r1, r0
 80095ac:	4628      	mov	r0, r5
 80095ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095b2:	f000 b817 	b.w	80095e4 <_kill_r>
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d00a      	beq.n	80095d0 <_raise_r+0x4c>
 80095ba:	1c59      	adds	r1, r3, #1
 80095bc:	d103      	bne.n	80095c6 <_raise_r+0x42>
 80095be:	2316      	movs	r3, #22
 80095c0:	6003      	str	r3, [r0, #0]
 80095c2:	2001      	movs	r0, #1
 80095c4:	e7e7      	b.n	8009596 <_raise_r+0x12>
 80095c6:	2100      	movs	r1, #0
 80095c8:	4620      	mov	r0, r4
 80095ca:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80095ce:	4798      	blx	r3
 80095d0:	2000      	movs	r0, #0
 80095d2:	e7e0      	b.n	8009596 <_raise_r+0x12>

080095d4 <raise>:
 80095d4:	4b02      	ldr	r3, [pc, #8]	@ (80095e0 <raise+0xc>)
 80095d6:	4601      	mov	r1, r0
 80095d8:	6818      	ldr	r0, [r3, #0]
 80095da:	f7ff bfd3 	b.w	8009584 <_raise_r>
 80095de:	bf00      	nop
 80095e0:	200000a8 	.word	0x200000a8

080095e4 <_kill_r>:
 80095e4:	b538      	push	{r3, r4, r5, lr}
 80095e6:	2300      	movs	r3, #0
 80095e8:	4d06      	ldr	r5, [pc, #24]	@ (8009604 <_kill_r+0x20>)
 80095ea:	4604      	mov	r4, r0
 80095ec:	4608      	mov	r0, r1
 80095ee:	4611      	mov	r1, r2
 80095f0:	602b      	str	r3, [r5, #0]
 80095f2:	f7f8 fc6a 	bl	8001eca <_kill>
 80095f6:	1c43      	adds	r3, r0, #1
 80095f8:	d102      	bne.n	8009600 <_kill_r+0x1c>
 80095fa:	682b      	ldr	r3, [r5, #0]
 80095fc:	b103      	cbz	r3, 8009600 <_kill_r+0x1c>
 80095fe:	6023      	str	r3, [r4, #0]
 8009600:	bd38      	pop	{r3, r4, r5, pc}
 8009602:	bf00      	nop
 8009604:	20000630 	.word	0x20000630

08009608 <_getpid_r>:
 8009608:	f7f8 bc58 	b.w	8001ebc <_getpid>

0800960c <__swhatbuf_r>:
 800960c:	b570      	push	{r4, r5, r6, lr}
 800960e:	460c      	mov	r4, r1
 8009610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009614:	4615      	mov	r5, r2
 8009616:	2900      	cmp	r1, #0
 8009618:	461e      	mov	r6, r3
 800961a:	b096      	sub	sp, #88	@ 0x58
 800961c:	da0c      	bge.n	8009638 <__swhatbuf_r+0x2c>
 800961e:	89a3      	ldrh	r3, [r4, #12]
 8009620:	2100      	movs	r1, #0
 8009622:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009626:	bf14      	ite	ne
 8009628:	2340      	movne	r3, #64	@ 0x40
 800962a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800962e:	2000      	movs	r0, #0
 8009630:	6031      	str	r1, [r6, #0]
 8009632:	602b      	str	r3, [r5, #0]
 8009634:	b016      	add	sp, #88	@ 0x58
 8009636:	bd70      	pop	{r4, r5, r6, pc}
 8009638:	466a      	mov	r2, sp
 800963a:	f000 f849 	bl	80096d0 <_fstat_r>
 800963e:	2800      	cmp	r0, #0
 8009640:	dbed      	blt.n	800961e <__swhatbuf_r+0x12>
 8009642:	9901      	ldr	r1, [sp, #4]
 8009644:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009648:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800964c:	4259      	negs	r1, r3
 800964e:	4159      	adcs	r1, r3
 8009650:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009654:	e7eb      	b.n	800962e <__swhatbuf_r+0x22>

08009656 <__smakebuf_r>:
 8009656:	898b      	ldrh	r3, [r1, #12]
 8009658:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800965a:	079d      	lsls	r5, r3, #30
 800965c:	4606      	mov	r6, r0
 800965e:	460c      	mov	r4, r1
 8009660:	d507      	bpl.n	8009672 <__smakebuf_r+0x1c>
 8009662:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009666:	6023      	str	r3, [r4, #0]
 8009668:	6123      	str	r3, [r4, #16]
 800966a:	2301      	movs	r3, #1
 800966c:	6163      	str	r3, [r4, #20]
 800966e:	b003      	add	sp, #12
 8009670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009672:	466a      	mov	r2, sp
 8009674:	ab01      	add	r3, sp, #4
 8009676:	f7ff ffc9 	bl	800960c <__swhatbuf_r>
 800967a:	9f00      	ldr	r7, [sp, #0]
 800967c:	4605      	mov	r5, r0
 800967e:	4639      	mov	r1, r7
 8009680:	4630      	mov	r0, r6
 8009682:	f7fe fec7 	bl	8008414 <_malloc_r>
 8009686:	b948      	cbnz	r0, 800969c <__smakebuf_r+0x46>
 8009688:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800968c:	059a      	lsls	r2, r3, #22
 800968e:	d4ee      	bmi.n	800966e <__smakebuf_r+0x18>
 8009690:	f023 0303 	bic.w	r3, r3, #3
 8009694:	f043 0302 	orr.w	r3, r3, #2
 8009698:	81a3      	strh	r3, [r4, #12]
 800969a:	e7e2      	b.n	8009662 <__smakebuf_r+0xc>
 800969c:	89a3      	ldrh	r3, [r4, #12]
 800969e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80096a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096a6:	81a3      	strh	r3, [r4, #12]
 80096a8:	9b01      	ldr	r3, [sp, #4]
 80096aa:	6020      	str	r0, [r4, #0]
 80096ac:	b15b      	cbz	r3, 80096c6 <__smakebuf_r+0x70>
 80096ae:	4630      	mov	r0, r6
 80096b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096b4:	f000 f81e 	bl	80096f4 <_isatty_r>
 80096b8:	b128      	cbz	r0, 80096c6 <__smakebuf_r+0x70>
 80096ba:	89a3      	ldrh	r3, [r4, #12]
 80096bc:	f023 0303 	bic.w	r3, r3, #3
 80096c0:	f043 0301 	orr.w	r3, r3, #1
 80096c4:	81a3      	strh	r3, [r4, #12]
 80096c6:	89a3      	ldrh	r3, [r4, #12]
 80096c8:	431d      	orrs	r5, r3
 80096ca:	81a5      	strh	r5, [r4, #12]
 80096cc:	e7cf      	b.n	800966e <__smakebuf_r+0x18>
	...

080096d0 <_fstat_r>:
 80096d0:	b538      	push	{r3, r4, r5, lr}
 80096d2:	2300      	movs	r3, #0
 80096d4:	4d06      	ldr	r5, [pc, #24]	@ (80096f0 <_fstat_r+0x20>)
 80096d6:	4604      	mov	r4, r0
 80096d8:	4608      	mov	r0, r1
 80096da:	4611      	mov	r1, r2
 80096dc:	602b      	str	r3, [r5, #0]
 80096de:	f7f8 fc53 	bl	8001f88 <_fstat>
 80096e2:	1c43      	adds	r3, r0, #1
 80096e4:	d102      	bne.n	80096ec <_fstat_r+0x1c>
 80096e6:	682b      	ldr	r3, [r5, #0]
 80096e8:	b103      	cbz	r3, 80096ec <_fstat_r+0x1c>
 80096ea:	6023      	str	r3, [r4, #0]
 80096ec:	bd38      	pop	{r3, r4, r5, pc}
 80096ee:	bf00      	nop
 80096f0:	20000630 	.word	0x20000630

080096f4 <_isatty_r>:
 80096f4:	b538      	push	{r3, r4, r5, lr}
 80096f6:	2300      	movs	r3, #0
 80096f8:	4d05      	ldr	r5, [pc, #20]	@ (8009710 <_isatty_r+0x1c>)
 80096fa:	4604      	mov	r4, r0
 80096fc:	4608      	mov	r0, r1
 80096fe:	602b      	str	r3, [r5, #0]
 8009700:	f7f8 fc51 	bl	8001fa6 <_isatty>
 8009704:	1c43      	adds	r3, r0, #1
 8009706:	d102      	bne.n	800970e <_isatty_r+0x1a>
 8009708:	682b      	ldr	r3, [r5, #0]
 800970a:	b103      	cbz	r3, 800970e <_isatty_r+0x1a>
 800970c:	6023      	str	r3, [r4, #0]
 800970e:	bd38      	pop	{r3, r4, r5, pc}
 8009710:	20000630 	.word	0x20000630

08009714 <atan2>:
 8009714:	f000 ba90 	b.w	8009c38 <__ieee754_atan2>

08009718 <sqrt>:
 8009718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800971a:	4606      	mov	r6, r0
 800971c:	460f      	mov	r7, r1
 800971e:	f000 f9b3 	bl	8009a88 <__ieee754_sqrt>
 8009722:	4632      	mov	r2, r6
 8009724:	4604      	mov	r4, r0
 8009726:	460d      	mov	r5, r1
 8009728:	463b      	mov	r3, r7
 800972a:	4630      	mov	r0, r6
 800972c:	4639      	mov	r1, r7
 800972e:	f7f7 f96d 	bl	8000a0c <__aeabi_dcmpun>
 8009732:	b990      	cbnz	r0, 800975a <sqrt+0x42>
 8009734:	2200      	movs	r2, #0
 8009736:	2300      	movs	r3, #0
 8009738:	4630      	mov	r0, r6
 800973a:	4639      	mov	r1, r7
 800973c:	f7f7 f93e 	bl	80009bc <__aeabi_dcmplt>
 8009740:	b158      	cbz	r0, 800975a <sqrt+0x42>
 8009742:	f7fd ff69 	bl	8007618 <__errno>
 8009746:	2321      	movs	r3, #33	@ 0x21
 8009748:	2200      	movs	r2, #0
 800974a:	6003      	str	r3, [r0, #0]
 800974c:	2300      	movs	r3, #0
 800974e:	4610      	mov	r0, r2
 8009750:	4619      	mov	r1, r3
 8009752:	f7f6 ffeb 	bl	800072c <__aeabi_ddiv>
 8009756:	4604      	mov	r4, r0
 8009758:	460d      	mov	r5, r1
 800975a:	4620      	mov	r0, r4
 800975c:	4629      	mov	r1, r5
 800975e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009760 <atan>:
 8009760:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009764:	4bbc      	ldr	r3, [pc, #752]	@ (8009a58 <atan+0x2f8>)
 8009766:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800976a:	429e      	cmp	r6, r3
 800976c:	4604      	mov	r4, r0
 800976e:	460d      	mov	r5, r1
 8009770:	468b      	mov	fp, r1
 8009772:	d918      	bls.n	80097a6 <atan+0x46>
 8009774:	4bb9      	ldr	r3, [pc, #740]	@ (8009a5c <atan+0x2fc>)
 8009776:	429e      	cmp	r6, r3
 8009778:	d801      	bhi.n	800977e <atan+0x1e>
 800977a:	d109      	bne.n	8009790 <atan+0x30>
 800977c:	b140      	cbz	r0, 8009790 <atan+0x30>
 800977e:	4622      	mov	r2, r4
 8009780:	462b      	mov	r3, r5
 8009782:	4620      	mov	r0, r4
 8009784:	4629      	mov	r1, r5
 8009786:	f7f6 fcf1 	bl	800016c <__adddf3>
 800978a:	4604      	mov	r4, r0
 800978c:	460d      	mov	r5, r1
 800978e:	e006      	b.n	800979e <atan+0x3e>
 8009790:	f1bb 0f00 	cmp.w	fp, #0
 8009794:	f340 8123 	ble.w	80099de <atan+0x27e>
 8009798:	a593      	add	r5, pc, #588	@ (adr r5, 80099e8 <atan+0x288>)
 800979a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800979e:	4620      	mov	r0, r4
 80097a0:	4629      	mov	r1, r5
 80097a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097a6:	4bae      	ldr	r3, [pc, #696]	@ (8009a60 <atan+0x300>)
 80097a8:	429e      	cmp	r6, r3
 80097aa:	d811      	bhi.n	80097d0 <atan+0x70>
 80097ac:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80097b0:	429e      	cmp	r6, r3
 80097b2:	d80a      	bhi.n	80097ca <atan+0x6a>
 80097b4:	a38e      	add	r3, pc, #568	@ (adr r3, 80099f0 <atan+0x290>)
 80097b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ba:	f7f6 fcd7 	bl	800016c <__adddf3>
 80097be:	2200      	movs	r2, #0
 80097c0:	4ba8      	ldr	r3, [pc, #672]	@ (8009a64 <atan+0x304>)
 80097c2:	f7f7 f919 	bl	80009f8 <__aeabi_dcmpgt>
 80097c6:	2800      	cmp	r0, #0
 80097c8:	d1e9      	bne.n	800979e <atan+0x3e>
 80097ca:	f04f 3aff 	mov.w	sl, #4294967295
 80097ce:	e027      	b.n	8009820 <atan+0xc0>
 80097d0:	f000 f956 	bl	8009a80 <fabs>
 80097d4:	4ba4      	ldr	r3, [pc, #656]	@ (8009a68 <atan+0x308>)
 80097d6:	4604      	mov	r4, r0
 80097d8:	429e      	cmp	r6, r3
 80097da:	460d      	mov	r5, r1
 80097dc:	f200 80b8 	bhi.w	8009950 <atan+0x1f0>
 80097e0:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80097e4:	429e      	cmp	r6, r3
 80097e6:	f200 809c 	bhi.w	8009922 <atan+0x1c2>
 80097ea:	4602      	mov	r2, r0
 80097ec:	460b      	mov	r3, r1
 80097ee:	f7f6 fcbd 	bl	800016c <__adddf3>
 80097f2:	2200      	movs	r2, #0
 80097f4:	4b9b      	ldr	r3, [pc, #620]	@ (8009a64 <atan+0x304>)
 80097f6:	f7f6 fcb7 	bl	8000168 <__aeabi_dsub>
 80097fa:	2200      	movs	r2, #0
 80097fc:	4606      	mov	r6, r0
 80097fe:	460f      	mov	r7, r1
 8009800:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009804:	4620      	mov	r0, r4
 8009806:	4629      	mov	r1, r5
 8009808:	f7f6 fcb0 	bl	800016c <__adddf3>
 800980c:	4602      	mov	r2, r0
 800980e:	460b      	mov	r3, r1
 8009810:	4630      	mov	r0, r6
 8009812:	4639      	mov	r1, r7
 8009814:	f7f6 ff8a 	bl	800072c <__aeabi_ddiv>
 8009818:	f04f 0a00 	mov.w	sl, #0
 800981c:	4604      	mov	r4, r0
 800981e:	460d      	mov	r5, r1
 8009820:	4622      	mov	r2, r4
 8009822:	462b      	mov	r3, r5
 8009824:	4620      	mov	r0, r4
 8009826:	4629      	mov	r1, r5
 8009828:	f7f6 fe56 	bl	80004d8 <__aeabi_dmul>
 800982c:	4602      	mov	r2, r0
 800982e:	460b      	mov	r3, r1
 8009830:	4680      	mov	r8, r0
 8009832:	4689      	mov	r9, r1
 8009834:	f7f6 fe50 	bl	80004d8 <__aeabi_dmul>
 8009838:	a36f      	add	r3, pc, #444	@ (adr r3, 80099f8 <atan+0x298>)
 800983a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983e:	4606      	mov	r6, r0
 8009840:	460f      	mov	r7, r1
 8009842:	f7f6 fe49 	bl	80004d8 <__aeabi_dmul>
 8009846:	a36e      	add	r3, pc, #440	@ (adr r3, 8009a00 <atan+0x2a0>)
 8009848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984c:	f7f6 fc8e 	bl	800016c <__adddf3>
 8009850:	4632      	mov	r2, r6
 8009852:	463b      	mov	r3, r7
 8009854:	f7f6 fe40 	bl	80004d8 <__aeabi_dmul>
 8009858:	a36b      	add	r3, pc, #428	@ (adr r3, 8009a08 <atan+0x2a8>)
 800985a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985e:	f7f6 fc85 	bl	800016c <__adddf3>
 8009862:	4632      	mov	r2, r6
 8009864:	463b      	mov	r3, r7
 8009866:	f7f6 fe37 	bl	80004d8 <__aeabi_dmul>
 800986a:	a369      	add	r3, pc, #420	@ (adr r3, 8009a10 <atan+0x2b0>)
 800986c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009870:	f7f6 fc7c 	bl	800016c <__adddf3>
 8009874:	4632      	mov	r2, r6
 8009876:	463b      	mov	r3, r7
 8009878:	f7f6 fe2e 	bl	80004d8 <__aeabi_dmul>
 800987c:	a366      	add	r3, pc, #408	@ (adr r3, 8009a18 <atan+0x2b8>)
 800987e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009882:	f7f6 fc73 	bl	800016c <__adddf3>
 8009886:	4632      	mov	r2, r6
 8009888:	463b      	mov	r3, r7
 800988a:	f7f6 fe25 	bl	80004d8 <__aeabi_dmul>
 800988e:	a364      	add	r3, pc, #400	@ (adr r3, 8009a20 <atan+0x2c0>)
 8009890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009894:	f7f6 fc6a 	bl	800016c <__adddf3>
 8009898:	4642      	mov	r2, r8
 800989a:	464b      	mov	r3, r9
 800989c:	f7f6 fe1c 	bl	80004d8 <__aeabi_dmul>
 80098a0:	a361      	add	r3, pc, #388	@ (adr r3, 8009a28 <atan+0x2c8>)
 80098a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a6:	4680      	mov	r8, r0
 80098a8:	4689      	mov	r9, r1
 80098aa:	4630      	mov	r0, r6
 80098ac:	4639      	mov	r1, r7
 80098ae:	f7f6 fe13 	bl	80004d8 <__aeabi_dmul>
 80098b2:	a35f      	add	r3, pc, #380	@ (adr r3, 8009a30 <atan+0x2d0>)
 80098b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b8:	f7f6 fc56 	bl	8000168 <__aeabi_dsub>
 80098bc:	4632      	mov	r2, r6
 80098be:	463b      	mov	r3, r7
 80098c0:	f7f6 fe0a 	bl	80004d8 <__aeabi_dmul>
 80098c4:	a35c      	add	r3, pc, #368	@ (adr r3, 8009a38 <atan+0x2d8>)
 80098c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ca:	f7f6 fc4d 	bl	8000168 <__aeabi_dsub>
 80098ce:	4632      	mov	r2, r6
 80098d0:	463b      	mov	r3, r7
 80098d2:	f7f6 fe01 	bl	80004d8 <__aeabi_dmul>
 80098d6:	a35a      	add	r3, pc, #360	@ (adr r3, 8009a40 <atan+0x2e0>)
 80098d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098dc:	f7f6 fc44 	bl	8000168 <__aeabi_dsub>
 80098e0:	4632      	mov	r2, r6
 80098e2:	463b      	mov	r3, r7
 80098e4:	f7f6 fdf8 	bl	80004d8 <__aeabi_dmul>
 80098e8:	a357      	add	r3, pc, #348	@ (adr r3, 8009a48 <atan+0x2e8>)
 80098ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ee:	f7f6 fc3b 	bl	8000168 <__aeabi_dsub>
 80098f2:	4632      	mov	r2, r6
 80098f4:	463b      	mov	r3, r7
 80098f6:	f7f6 fdef 	bl	80004d8 <__aeabi_dmul>
 80098fa:	4602      	mov	r2, r0
 80098fc:	460b      	mov	r3, r1
 80098fe:	4640      	mov	r0, r8
 8009900:	4649      	mov	r1, r9
 8009902:	f7f6 fc33 	bl	800016c <__adddf3>
 8009906:	4622      	mov	r2, r4
 8009908:	462b      	mov	r3, r5
 800990a:	f7f6 fde5 	bl	80004d8 <__aeabi_dmul>
 800990e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009912:	4602      	mov	r2, r0
 8009914:	460b      	mov	r3, r1
 8009916:	d144      	bne.n	80099a2 <atan+0x242>
 8009918:	4620      	mov	r0, r4
 800991a:	4629      	mov	r1, r5
 800991c:	f7f6 fc24 	bl	8000168 <__aeabi_dsub>
 8009920:	e733      	b.n	800978a <atan+0x2a>
 8009922:	2200      	movs	r2, #0
 8009924:	4b4f      	ldr	r3, [pc, #316]	@ (8009a64 <atan+0x304>)
 8009926:	f7f6 fc1f 	bl	8000168 <__aeabi_dsub>
 800992a:	2200      	movs	r2, #0
 800992c:	4606      	mov	r6, r0
 800992e:	460f      	mov	r7, r1
 8009930:	4620      	mov	r0, r4
 8009932:	4629      	mov	r1, r5
 8009934:	4b4b      	ldr	r3, [pc, #300]	@ (8009a64 <atan+0x304>)
 8009936:	f7f6 fc19 	bl	800016c <__adddf3>
 800993a:	4602      	mov	r2, r0
 800993c:	460b      	mov	r3, r1
 800993e:	4630      	mov	r0, r6
 8009940:	4639      	mov	r1, r7
 8009942:	f7f6 fef3 	bl	800072c <__aeabi_ddiv>
 8009946:	f04f 0a01 	mov.w	sl, #1
 800994a:	4604      	mov	r4, r0
 800994c:	460d      	mov	r5, r1
 800994e:	e767      	b.n	8009820 <atan+0xc0>
 8009950:	4b46      	ldr	r3, [pc, #280]	@ (8009a6c <atan+0x30c>)
 8009952:	429e      	cmp	r6, r3
 8009954:	d21a      	bcs.n	800998c <atan+0x22c>
 8009956:	2200      	movs	r2, #0
 8009958:	4b45      	ldr	r3, [pc, #276]	@ (8009a70 <atan+0x310>)
 800995a:	f7f6 fc05 	bl	8000168 <__aeabi_dsub>
 800995e:	2200      	movs	r2, #0
 8009960:	4606      	mov	r6, r0
 8009962:	460f      	mov	r7, r1
 8009964:	4620      	mov	r0, r4
 8009966:	4629      	mov	r1, r5
 8009968:	4b41      	ldr	r3, [pc, #260]	@ (8009a70 <atan+0x310>)
 800996a:	f7f6 fdb5 	bl	80004d8 <__aeabi_dmul>
 800996e:	2200      	movs	r2, #0
 8009970:	4b3c      	ldr	r3, [pc, #240]	@ (8009a64 <atan+0x304>)
 8009972:	f7f6 fbfb 	bl	800016c <__adddf3>
 8009976:	4602      	mov	r2, r0
 8009978:	460b      	mov	r3, r1
 800997a:	4630      	mov	r0, r6
 800997c:	4639      	mov	r1, r7
 800997e:	f7f6 fed5 	bl	800072c <__aeabi_ddiv>
 8009982:	f04f 0a02 	mov.w	sl, #2
 8009986:	4604      	mov	r4, r0
 8009988:	460d      	mov	r5, r1
 800998a:	e749      	b.n	8009820 <atan+0xc0>
 800998c:	4602      	mov	r2, r0
 800998e:	460b      	mov	r3, r1
 8009990:	2000      	movs	r0, #0
 8009992:	4938      	ldr	r1, [pc, #224]	@ (8009a74 <atan+0x314>)
 8009994:	f7f6 feca 	bl	800072c <__aeabi_ddiv>
 8009998:	f04f 0a03 	mov.w	sl, #3
 800999c:	4604      	mov	r4, r0
 800999e:	460d      	mov	r5, r1
 80099a0:	e73e      	b.n	8009820 <atan+0xc0>
 80099a2:	4b35      	ldr	r3, [pc, #212]	@ (8009a78 <atan+0x318>)
 80099a4:	4e35      	ldr	r6, [pc, #212]	@ (8009a7c <atan+0x31c>)
 80099a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80099aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ae:	f7f6 fbdb 	bl	8000168 <__aeabi_dsub>
 80099b2:	4622      	mov	r2, r4
 80099b4:	462b      	mov	r3, r5
 80099b6:	f7f6 fbd7 	bl	8000168 <__aeabi_dsub>
 80099ba:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80099be:	4602      	mov	r2, r0
 80099c0:	460b      	mov	r3, r1
 80099c2:	e9d6 0100 	ldrd	r0, r1, [r6]
 80099c6:	f7f6 fbcf 	bl	8000168 <__aeabi_dsub>
 80099ca:	f1bb 0f00 	cmp.w	fp, #0
 80099ce:	4604      	mov	r4, r0
 80099d0:	460d      	mov	r5, r1
 80099d2:	f6bf aee4 	bge.w	800979e <atan+0x3e>
 80099d6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80099da:	461d      	mov	r5, r3
 80099dc:	e6df      	b.n	800979e <atan+0x3e>
 80099de:	a51c      	add	r5, pc, #112	@ (adr r5, 8009a50 <atan+0x2f0>)
 80099e0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80099e4:	e6db      	b.n	800979e <atan+0x3e>
 80099e6:	bf00      	nop
 80099e8:	54442d18 	.word	0x54442d18
 80099ec:	3ff921fb 	.word	0x3ff921fb
 80099f0:	8800759c 	.word	0x8800759c
 80099f4:	7e37e43c 	.word	0x7e37e43c
 80099f8:	e322da11 	.word	0xe322da11
 80099fc:	3f90ad3a 	.word	0x3f90ad3a
 8009a00:	24760deb 	.word	0x24760deb
 8009a04:	3fa97b4b 	.word	0x3fa97b4b
 8009a08:	a0d03d51 	.word	0xa0d03d51
 8009a0c:	3fb10d66 	.word	0x3fb10d66
 8009a10:	c54c206e 	.word	0xc54c206e
 8009a14:	3fb745cd 	.word	0x3fb745cd
 8009a18:	920083ff 	.word	0x920083ff
 8009a1c:	3fc24924 	.word	0x3fc24924
 8009a20:	5555550d 	.word	0x5555550d
 8009a24:	3fd55555 	.word	0x3fd55555
 8009a28:	2c6a6c2f 	.word	0x2c6a6c2f
 8009a2c:	bfa2b444 	.word	0xbfa2b444
 8009a30:	52defd9a 	.word	0x52defd9a
 8009a34:	3fadde2d 	.word	0x3fadde2d
 8009a38:	af749a6d 	.word	0xaf749a6d
 8009a3c:	3fb3b0f2 	.word	0x3fb3b0f2
 8009a40:	fe231671 	.word	0xfe231671
 8009a44:	3fbc71c6 	.word	0x3fbc71c6
 8009a48:	9998ebc4 	.word	0x9998ebc4
 8009a4c:	3fc99999 	.word	0x3fc99999
 8009a50:	54442d18 	.word	0x54442d18
 8009a54:	bff921fb 	.word	0xbff921fb
 8009a58:	440fffff 	.word	0x440fffff
 8009a5c:	7ff00000 	.word	0x7ff00000
 8009a60:	3fdbffff 	.word	0x3fdbffff
 8009a64:	3ff00000 	.word	0x3ff00000
 8009a68:	3ff2ffff 	.word	0x3ff2ffff
 8009a6c:	40038000 	.word	0x40038000
 8009a70:	3ff80000 	.word	0x3ff80000
 8009a74:	bff00000 	.word	0xbff00000
 8009a78:	0800a230 	.word	0x0800a230
 8009a7c:	0800a250 	.word	0x0800a250

08009a80 <fabs>:
 8009a80:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009a84:	4619      	mov	r1, r3
 8009a86:	4770      	bx	lr

08009a88 <__ieee754_sqrt>:
 8009a88:	4a67      	ldr	r2, [pc, #412]	@ (8009c28 <__ieee754_sqrt+0x1a0>)
 8009a8a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a8e:	438a      	bics	r2, r1
 8009a90:	4606      	mov	r6, r0
 8009a92:	460f      	mov	r7, r1
 8009a94:	460b      	mov	r3, r1
 8009a96:	4604      	mov	r4, r0
 8009a98:	d10e      	bne.n	8009ab8 <__ieee754_sqrt+0x30>
 8009a9a:	4602      	mov	r2, r0
 8009a9c:	f7f6 fd1c 	bl	80004d8 <__aeabi_dmul>
 8009aa0:	4602      	mov	r2, r0
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	4630      	mov	r0, r6
 8009aa6:	4639      	mov	r1, r7
 8009aa8:	f7f6 fb60 	bl	800016c <__adddf3>
 8009aac:	4606      	mov	r6, r0
 8009aae:	460f      	mov	r7, r1
 8009ab0:	4630      	mov	r0, r6
 8009ab2:	4639      	mov	r1, r7
 8009ab4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ab8:	2900      	cmp	r1, #0
 8009aba:	dc0c      	bgt.n	8009ad6 <__ieee754_sqrt+0x4e>
 8009abc:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8009ac0:	4302      	orrs	r2, r0
 8009ac2:	d0f5      	beq.n	8009ab0 <__ieee754_sqrt+0x28>
 8009ac4:	b189      	cbz	r1, 8009aea <__ieee754_sqrt+0x62>
 8009ac6:	4602      	mov	r2, r0
 8009ac8:	f7f6 fb4e 	bl	8000168 <__aeabi_dsub>
 8009acc:	4602      	mov	r2, r0
 8009ace:	460b      	mov	r3, r1
 8009ad0:	f7f6 fe2c 	bl	800072c <__aeabi_ddiv>
 8009ad4:	e7ea      	b.n	8009aac <__ieee754_sqrt+0x24>
 8009ad6:	150a      	asrs	r2, r1, #20
 8009ad8:	d115      	bne.n	8009b06 <__ieee754_sqrt+0x7e>
 8009ada:	2100      	movs	r1, #0
 8009adc:	e009      	b.n	8009af2 <__ieee754_sqrt+0x6a>
 8009ade:	0ae3      	lsrs	r3, r4, #11
 8009ae0:	3a15      	subs	r2, #21
 8009ae2:	0564      	lsls	r4, r4, #21
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d0fa      	beq.n	8009ade <__ieee754_sqrt+0x56>
 8009ae8:	e7f7      	b.n	8009ada <__ieee754_sqrt+0x52>
 8009aea:	460a      	mov	r2, r1
 8009aec:	e7fa      	b.n	8009ae4 <__ieee754_sqrt+0x5c>
 8009aee:	005b      	lsls	r3, r3, #1
 8009af0:	3101      	adds	r1, #1
 8009af2:	02d8      	lsls	r0, r3, #11
 8009af4:	d5fb      	bpl.n	8009aee <__ieee754_sqrt+0x66>
 8009af6:	1e48      	subs	r0, r1, #1
 8009af8:	1a12      	subs	r2, r2, r0
 8009afa:	f1c1 0020 	rsb	r0, r1, #32
 8009afe:	fa24 f000 	lsr.w	r0, r4, r0
 8009b02:	4303      	orrs	r3, r0
 8009b04:	408c      	lsls	r4, r1
 8009b06:	2600      	movs	r6, #0
 8009b08:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8009b0c:	2116      	movs	r1, #22
 8009b0e:	07d2      	lsls	r2, r2, #31
 8009b10:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8009b14:	4632      	mov	r2, r6
 8009b16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009b1e:	bf5c      	itt	pl
 8009b20:	005b      	lslpl	r3, r3, #1
 8009b22:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8009b26:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009b2a:	bf58      	it	pl
 8009b2c:	0064      	lslpl	r4, r4, #1
 8009b2e:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8009b32:	107f      	asrs	r7, r7, #1
 8009b34:	0064      	lsls	r4, r4, #1
 8009b36:	1815      	adds	r5, r2, r0
 8009b38:	429d      	cmp	r5, r3
 8009b3a:	bfde      	ittt	le
 8009b3c:	182a      	addle	r2, r5, r0
 8009b3e:	1b5b      	suble	r3, r3, r5
 8009b40:	1836      	addle	r6, r6, r0
 8009b42:	0fe5      	lsrs	r5, r4, #31
 8009b44:	3901      	subs	r1, #1
 8009b46:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8009b4a:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009b4e:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8009b52:	d1f0      	bne.n	8009b36 <__ieee754_sqrt+0xae>
 8009b54:	460d      	mov	r5, r1
 8009b56:	f04f 0a20 	mov.w	sl, #32
 8009b5a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	eb01 0c00 	add.w	ip, r1, r0
 8009b64:	db02      	blt.n	8009b6c <__ieee754_sqrt+0xe4>
 8009b66:	d113      	bne.n	8009b90 <__ieee754_sqrt+0x108>
 8009b68:	45a4      	cmp	ip, r4
 8009b6a:	d811      	bhi.n	8009b90 <__ieee754_sqrt+0x108>
 8009b6c:	f1bc 0f00 	cmp.w	ip, #0
 8009b70:	eb0c 0100 	add.w	r1, ip, r0
 8009b74:	da42      	bge.n	8009bfc <__ieee754_sqrt+0x174>
 8009b76:	2900      	cmp	r1, #0
 8009b78:	db40      	blt.n	8009bfc <__ieee754_sqrt+0x174>
 8009b7a:	f102 0e01 	add.w	lr, r2, #1
 8009b7e:	1a9b      	subs	r3, r3, r2
 8009b80:	4672      	mov	r2, lr
 8009b82:	45a4      	cmp	ip, r4
 8009b84:	bf88      	it	hi
 8009b86:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009b8a:	eba4 040c 	sub.w	r4, r4, ip
 8009b8e:	4405      	add	r5, r0
 8009b90:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8009b94:	f1ba 0a01 	subs.w	sl, sl, #1
 8009b98:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8009b9c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009ba0:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8009ba4:	d1db      	bne.n	8009b5e <__ieee754_sqrt+0xd6>
 8009ba6:	431c      	orrs	r4, r3
 8009ba8:	d01a      	beq.n	8009be0 <__ieee754_sqrt+0x158>
 8009baa:	4c20      	ldr	r4, [pc, #128]	@ (8009c2c <__ieee754_sqrt+0x1a4>)
 8009bac:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8009c30 <__ieee754_sqrt+0x1a8>
 8009bb0:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009bb4:	e9db 2300 	ldrd	r2, r3, [fp]
 8009bb8:	f7f6 fad6 	bl	8000168 <__aeabi_dsub>
 8009bbc:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	460b      	mov	r3, r1
 8009bc4:	4640      	mov	r0, r8
 8009bc6:	4649      	mov	r1, r9
 8009bc8:	f7f6 ff02 	bl	80009d0 <__aeabi_dcmple>
 8009bcc:	b140      	cbz	r0, 8009be0 <__ieee754_sqrt+0x158>
 8009bce:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009bd2:	e9db 2300 	ldrd	r2, r3, [fp]
 8009bd6:	f1b5 3fff 	cmp.w	r5, #4294967295
 8009bda:	d111      	bne.n	8009c00 <__ieee754_sqrt+0x178>
 8009bdc:	4655      	mov	r5, sl
 8009bde:	3601      	adds	r6, #1
 8009be0:	1072      	asrs	r2, r6, #1
 8009be2:	086b      	lsrs	r3, r5, #1
 8009be4:	07f1      	lsls	r1, r6, #31
 8009be6:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8009bea:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8009bee:	bf48      	it	mi
 8009bf0:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8009bfa:	e757      	b.n	8009aac <__ieee754_sqrt+0x24>
 8009bfc:	4696      	mov	lr, r2
 8009bfe:	e7be      	b.n	8009b7e <__ieee754_sqrt+0xf6>
 8009c00:	f7f6 fab4 	bl	800016c <__adddf3>
 8009c04:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009c08:	4602      	mov	r2, r0
 8009c0a:	460b      	mov	r3, r1
 8009c0c:	4640      	mov	r0, r8
 8009c0e:	4649      	mov	r1, r9
 8009c10:	f7f6 fed4 	bl	80009bc <__aeabi_dcmplt>
 8009c14:	b120      	cbz	r0, 8009c20 <__ieee754_sqrt+0x198>
 8009c16:	1ca8      	adds	r0, r5, #2
 8009c18:	bf08      	it	eq
 8009c1a:	3601      	addeq	r6, #1
 8009c1c:	3502      	adds	r5, #2
 8009c1e:	e7df      	b.n	8009be0 <__ieee754_sqrt+0x158>
 8009c20:	1c6b      	adds	r3, r5, #1
 8009c22:	f023 0501 	bic.w	r5, r3, #1
 8009c26:	e7db      	b.n	8009be0 <__ieee754_sqrt+0x158>
 8009c28:	7ff00000 	.word	0x7ff00000
 8009c2c:	20000270 	.word	0x20000270
 8009c30:	20000268 	.word	0x20000268
 8009c34:	00000000 	.word	0x00000000

08009c38 <__ieee754_atan2>:
 8009c38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c3c:	4617      	mov	r7, r2
 8009c3e:	4690      	mov	r8, r2
 8009c40:	4699      	mov	r9, r3
 8009c42:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009c46:	427b      	negs	r3, r7
 8009c48:	f8df a184 	ldr.w	sl, [pc, #388]	@ 8009dd0 <__ieee754_atan2+0x198>
 8009c4c:	433b      	orrs	r3, r7
 8009c4e:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009c52:	4553      	cmp	r3, sl
 8009c54:	4604      	mov	r4, r0
 8009c56:	460d      	mov	r5, r1
 8009c58:	d809      	bhi.n	8009c6e <__ieee754_atan2+0x36>
 8009c5a:	4246      	negs	r6, r0
 8009c5c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009c60:	4306      	orrs	r6, r0
 8009c62:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8009c66:	4556      	cmp	r6, sl
 8009c68:	468e      	mov	lr, r1
 8009c6a:	4683      	mov	fp, r0
 8009c6c:	d908      	bls.n	8009c80 <__ieee754_atan2+0x48>
 8009c6e:	4642      	mov	r2, r8
 8009c70:	464b      	mov	r3, r9
 8009c72:	4620      	mov	r0, r4
 8009c74:	4629      	mov	r1, r5
 8009c76:	f7f6 fa79 	bl	800016c <__adddf3>
 8009c7a:	4604      	mov	r4, r0
 8009c7c:	460d      	mov	r5, r1
 8009c7e:	e016      	b.n	8009cae <__ieee754_atan2+0x76>
 8009c80:	f109 4640 	add.w	r6, r9, #3221225472	@ 0xc0000000
 8009c84:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8009c88:	433e      	orrs	r6, r7
 8009c8a:	d103      	bne.n	8009c94 <__ieee754_atan2+0x5c>
 8009c8c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c90:	f7ff bd66 	b.w	8009760 <atan>
 8009c94:	ea4f 76a9 	mov.w	r6, r9, asr #30
 8009c98:	f006 0602 	and.w	r6, r6, #2
 8009c9c:	ea53 0b0b 	orrs.w	fp, r3, fp
 8009ca0:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8009ca4:	d107      	bne.n	8009cb6 <__ieee754_atan2+0x7e>
 8009ca6:	2e02      	cmp	r6, #2
 8009ca8:	d064      	beq.n	8009d74 <__ieee754_atan2+0x13c>
 8009caa:	2e03      	cmp	r6, #3
 8009cac:	d066      	beq.n	8009d7c <__ieee754_atan2+0x144>
 8009cae:	4620      	mov	r0, r4
 8009cb0:	4629      	mov	r1, r5
 8009cb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cb6:	4317      	orrs	r7, r2
 8009cb8:	d106      	bne.n	8009cc8 <__ieee754_atan2+0x90>
 8009cba:	f1be 0f00 	cmp.w	lr, #0
 8009cbe:	da68      	bge.n	8009d92 <__ieee754_atan2+0x15a>
 8009cc0:	a537      	add	r5, pc, #220	@ (adr r5, 8009da0 <__ieee754_atan2+0x168>)
 8009cc2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009cc6:	e7f2      	b.n	8009cae <__ieee754_atan2+0x76>
 8009cc8:	4552      	cmp	r2, sl
 8009cca:	d10f      	bne.n	8009cec <__ieee754_atan2+0xb4>
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	f106 36ff 	add.w	r6, r6, #4294967295
 8009cd2:	d107      	bne.n	8009ce4 <__ieee754_atan2+0xac>
 8009cd4:	2e02      	cmp	r6, #2
 8009cd6:	d855      	bhi.n	8009d84 <__ieee754_atan2+0x14c>
 8009cd8:	4b3e      	ldr	r3, [pc, #248]	@ (8009dd4 <__ieee754_atan2+0x19c>)
 8009cda:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009cde:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009ce2:	e7e4      	b.n	8009cae <__ieee754_atan2+0x76>
 8009ce4:	2e02      	cmp	r6, #2
 8009ce6:	d851      	bhi.n	8009d8c <__ieee754_atan2+0x154>
 8009ce8:	4b3b      	ldr	r3, [pc, #236]	@ (8009dd8 <__ieee754_atan2+0x1a0>)
 8009cea:	e7f6      	b.n	8009cda <__ieee754_atan2+0xa2>
 8009cec:	4553      	cmp	r3, sl
 8009cee:	d0e4      	beq.n	8009cba <__ieee754_atan2+0x82>
 8009cf0:	1a9b      	subs	r3, r3, r2
 8009cf2:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8009cf6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009cfa:	da21      	bge.n	8009d40 <__ieee754_atan2+0x108>
 8009cfc:	f1b9 0f00 	cmp.w	r9, #0
 8009d00:	da01      	bge.n	8009d06 <__ieee754_atan2+0xce>
 8009d02:	323c      	adds	r2, #60	@ 0x3c
 8009d04:	db20      	blt.n	8009d48 <__ieee754_atan2+0x110>
 8009d06:	4642      	mov	r2, r8
 8009d08:	464b      	mov	r3, r9
 8009d0a:	4620      	mov	r0, r4
 8009d0c:	4629      	mov	r1, r5
 8009d0e:	f7f6 fd0d 	bl	800072c <__aeabi_ddiv>
 8009d12:	f7ff feb5 	bl	8009a80 <fabs>
 8009d16:	f7ff fd23 	bl	8009760 <atan>
 8009d1a:	4604      	mov	r4, r0
 8009d1c:	460d      	mov	r5, r1
 8009d1e:	2e01      	cmp	r6, #1
 8009d20:	d015      	beq.n	8009d4e <__ieee754_atan2+0x116>
 8009d22:	2e02      	cmp	r6, #2
 8009d24:	d017      	beq.n	8009d56 <__ieee754_atan2+0x11e>
 8009d26:	2e00      	cmp	r6, #0
 8009d28:	d0c1      	beq.n	8009cae <__ieee754_atan2+0x76>
 8009d2a:	a31f      	add	r3, pc, #124	@ (adr r3, 8009da8 <__ieee754_atan2+0x170>)
 8009d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d30:	4620      	mov	r0, r4
 8009d32:	4629      	mov	r1, r5
 8009d34:	f7f6 fa18 	bl	8000168 <__aeabi_dsub>
 8009d38:	a31d      	add	r3, pc, #116	@ (adr r3, 8009db0 <__ieee754_atan2+0x178>)
 8009d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d3e:	e016      	b.n	8009d6e <__ieee754_atan2+0x136>
 8009d40:	a51d      	add	r5, pc, #116	@ (adr r5, 8009db8 <__ieee754_atan2+0x180>)
 8009d42:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009d46:	e7ea      	b.n	8009d1e <__ieee754_atan2+0xe6>
 8009d48:	2400      	movs	r4, #0
 8009d4a:	2500      	movs	r5, #0
 8009d4c:	e7e7      	b.n	8009d1e <__ieee754_atan2+0xe6>
 8009d4e:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 8009d52:	461d      	mov	r5, r3
 8009d54:	e7ab      	b.n	8009cae <__ieee754_atan2+0x76>
 8009d56:	a314      	add	r3, pc, #80	@ (adr r3, 8009da8 <__ieee754_atan2+0x170>)
 8009d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	4629      	mov	r1, r5
 8009d60:	f7f6 fa02 	bl	8000168 <__aeabi_dsub>
 8009d64:	4602      	mov	r2, r0
 8009d66:	460b      	mov	r3, r1
 8009d68:	a111      	add	r1, pc, #68	@ (adr r1, 8009db0 <__ieee754_atan2+0x178>)
 8009d6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d6e:	f7f6 f9fb 	bl	8000168 <__aeabi_dsub>
 8009d72:	e782      	b.n	8009c7a <__ieee754_atan2+0x42>
 8009d74:	a50e      	add	r5, pc, #56	@ (adr r5, 8009db0 <__ieee754_atan2+0x178>)
 8009d76:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009d7a:	e798      	b.n	8009cae <__ieee754_atan2+0x76>
 8009d7c:	a510      	add	r5, pc, #64	@ (adr r5, 8009dc0 <__ieee754_atan2+0x188>)
 8009d7e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009d82:	e794      	b.n	8009cae <__ieee754_atan2+0x76>
 8009d84:	a510      	add	r5, pc, #64	@ (adr r5, 8009dc8 <__ieee754_atan2+0x190>)
 8009d86:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009d8a:	e790      	b.n	8009cae <__ieee754_atan2+0x76>
 8009d8c:	2400      	movs	r4, #0
 8009d8e:	2500      	movs	r5, #0
 8009d90:	e78d      	b.n	8009cae <__ieee754_atan2+0x76>
 8009d92:	a509      	add	r5, pc, #36	@ (adr r5, 8009db8 <__ieee754_atan2+0x180>)
 8009d94:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009d98:	e789      	b.n	8009cae <__ieee754_atan2+0x76>
 8009d9a:	bf00      	nop
 8009d9c:	f3af 8000 	nop.w
 8009da0:	54442d18 	.word	0x54442d18
 8009da4:	bff921fb 	.word	0xbff921fb
 8009da8:	33145c07 	.word	0x33145c07
 8009dac:	3ca1a626 	.word	0x3ca1a626
 8009db0:	54442d18 	.word	0x54442d18
 8009db4:	400921fb 	.word	0x400921fb
 8009db8:	54442d18 	.word	0x54442d18
 8009dbc:	3ff921fb 	.word	0x3ff921fb
 8009dc0:	54442d18 	.word	0x54442d18
 8009dc4:	c00921fb 	.word	0xc00921fb
 8009dc8:	54442d18 	.word	0x54442d18
 8009dcc:	3fe921fb 	.word	0x3fe921fb
 8009dd0:	7ff00000 	.word	0x7ff00000
 8009dd4:	0800a288 	.word	0x0800a288
 8009dd8:	0800a270 	.word	0x0800a270

08009ddc <_init>:
 8009ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dde:	bf00      	nop
 8009de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009de2:	bc08      	pop	{r3}
 8009de4:	469e      	mov	lr, r3
 8009de6:	4770      	bx	lr

08009de8 <_fini>:
 8009de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dea:	bf00      	nop
 8009dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dee:	bc08      	pop	{r3}
 8009df0:	469e      	mov	lr, r3
 8009df2:	4770      	bx	lr
