
LCD_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cc4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08004dd0  08004dd0  00005dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e5c  08004e5c  00006060  2**0
                  CONTENTS
  4 .ARM          00000000  08004e5c  08004e5c  00006060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e5c  08004e5c  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e5c  08004e5c  00005e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e60  08004e60  00005e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004e64  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  20000060  08004ec4  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08004ec4  00006274  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a86b  00000000  00000000  00006089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ac7  00000000  00000000  000108f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  000123c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000793  00000000  00000000  00012d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017372  00000000  00000000  00013503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ce05  00000000  00000000  0002a875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084864  00000000  00000000  0003767a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bbede  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ca0  00000000  00000000  000bbf24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000bebc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08004db8 	.word	0x08004db8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08004db8 	.word	0x08004db8

0800014c <lcd_send_cmd>:
 * @param  lcd: Pointer to the LCD handle
 * @param  cmd: Command byte to send
 * @retval None
 */
void lcd_send_cmd(I2C_LCD_HandleTypeDef *lcd, char cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (cmd & 0xF0);            // Extract upper nibble
 8000158:	78fb      	ldrb	r3, [r7, #3]
 800015a:	f023 030f 	bic.w	r3, r3, #15
 800015e:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((cmd << 4) & 0xF0);     // Extract lower nibble
 8000160:	78fb      	ldrb	r3, [r7, #3]
 8000162:	011b      	lsls	r3, r3, #4
 8000164:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0C;  // en=1, rs=0
 8000166:	7bfb      	ldrb	r3, [r7, #15]
 8000168:	f043 030c 	orr.w	r3, r3, #12
 800016c:	b2db      	uxtb	r3, r3
 800016e:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x08;  // en=0, rs=0
 8000170:	7bfb      	ldrb	r3, [r7, #15]
 8000172:	f043 0308 	orr.w	r3, r3, #8
 8000176:	b2db      	uxtb	r3, r3
 8000178:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0C;  // en=1, rs=0
 800017a:	7bbb      	ldrb	r3, [r7, #14]
 800017c:	f043 030c 	orr.w	r3, r3, #12
 8000180:	b2db      	uxtb	r3, r3
 8000182:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x08;  // en=0, rs=0
 8000184:	7bbb      	ldrb	r3, [r7, #14]
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	b2db      	uxtb	r3, r3
 800018c:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	6818      	ldr	r0, [r3, #0]
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	791b      	ldrb	r3, [r3, #4]
 8000196:	4619      	mov	r1, r3
 8000198:	f107 0208 	add.w	r2, r7, #8
 800019c:	2364      	movs	r3, #100	@ 0x64
 800019e:	9300      	str	r3, [sp, #0]
 80001a0:	2304      	movs	r3, #4
 80001a2:	f001 f8e3 	bl	800136c <HAL_I2C_Master_Transmit>
}
 80001a6:	bf00      	nop
 80001a8:	3710      	adds	r7, #16
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bd80      	pop	{r7, pc}

080001ae <lcd_send_data>:
 * @param  lcd: Pointer to the LCD handle
 * @param  data: Data byte to send
 * @retval None
 */
void lcd_send_data(I2C_LCD_HandleTypeDef *lcd, char data)
{
 80001ae:	b580      	push	{r7, lr}
 80001b0:	b086      	sub	sp, #24
 80001b2:	af02      	add	r7, sp, #8
 80001b4:	6078      	str	r0, [r7, #4]
 80001b6:	460b      	mov	r3, r1
 80001b8:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (data & 0xF0);            // Extract upper nibble
 80001ba:	78fb      	ldrb	r3, [r7, #3]
 80001bc:	f023 030f 	bic.w	r3, r3, #15
 80001c0:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((data << 4) & 0xF0);     // Extract lower nibble
 80001c2:	78fb      	ldrb	r3, [r7, #3]
 80001c4:	011b      	lsls	r3, r3, #4
 80001c6:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0D;  // en=1, rs=1
 80001c8:	7bfb      	ldrb	r3, [r7, #15]
 80001ca:	f043 030d 	orr.w	r3, r3, #13
 80001ce:	b2db      	uxtb	r3, r3
 80001d0:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x09;  // en=0, rs=1
 80001d2:	7bfb      	ldrb	r3, [r7, #15]
 80001d4:	f043 0309 	orr.w	r3, r3, #9
 80001d8:	b2db      	uxtb	r3, r3
 80001da:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0D;  // en=1, rs=1
 80001dc:	7bbb      	ldrb	r3, [r7, #14]
 80001de:	f043 030d 	orr.w	r3, r3, #13
 80001e2:	b2db      	uxtb	r3, r3
 80001e4:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x09;  // en=0, rs=1
 80001e6:	7bbb      	ldrb	r3, [r7, #14]
 80001e8:	f043 0309 	orr.w	r3, r3, #9
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	6818      	ldr	r0, [r3, #0]
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	791b      	ldrb	r3, [r3, #4]
 80001f8:	4619      	mov	r1, r3
 80001fa:	f107 0208 	add.w	r2, r7, #8
 80001fe:	2364      	movs	r3, #100	@ 0x64
 8000200:	9300      	str	r3, [sp, #0]
 8000202:	2304      	movs	r3, #4
 8000204:	f001 f8b2 	bl	800136c <HAL_I2C_Master_Transmit>
}
 8000208:	bf00      	nop
 800020a:	3710      	adds	r7, #16
 800020c:	46bd      	mov	sp, r7
 800020e:	bd80      	pop	{r7, pc}

08000210 <lcd_clear>:
 * @brief  Clears the LCD display.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_clear(I2C_LCD_HandleTypeDef *lcd)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
    lcd_send_cmd(lcd, 0x80);  // Move cursor to the home position
 8000218:	2180      	movs	r1, #128	@ 0x80
 800021a:	6878      	ldr	r0, [r7, #4]
 800021c:	f7ff ff96 	bl	800014c <lcd_send_cmd>
    // Clear all characters
    // 16x4 = 64 characters
    // 20x4 = 80 characters
    // So 80 character clearing is enough for both 16x2, 16x4, 20x2 and 20x5 displays
    for (int i = 0; i < 80; i++)
 8000220:	2300      	movs	r3, #0
 8000222:	60fb      	str	r3, [r7, #12]
 8000224:	e006      	b.n	8000234 <lcd_clear+0x24>
    {
        lcd_send_data(lcd, ' ');  // Write a space on each position
 8000226:	2120      	movs	r1, #32
 8000228:	6878      	ldr	r0, [r7, #4]
 800022a:	f7ff ffc0 	bl	80001ae <lcd_send_data>
    for (int i = 0; i < 80; i++)
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	3301      	adds	r3, #1
 8000232:	60fb      	str	r3, [r7, #12]
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	2b4f      	cmp	r3, #79	@ 0x4f
 8000238:	ddf5      	ble.n	8000226 <lcd_clear+0x16>
    }
}
 800023a:	bf00      	nop
 800023c:	bf00      	nop
 800023e:	3710      	adds	r7, #16
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}

08000244 <lcd_gotoxy>:
 * @param  col: Column number (0-15)
 * @param  row: Row number (0 or 1)
 * @retval None
 */
void lcd_gotoxy(I2C_LCD_HandleTypeDef *lcd, int col, int row)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b086      	sub	sp, #24
 8000248:	af00      	add	r7, sp, #0
 800024a:	60f8      	str	r0, [r7, #12]
 800024c:	60b9      	str	r1, [r7, #8]
 800024e:	607a      	str	r2, [r7, #4]
    uint8_t address;

    switch (row)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	2b03      	cmp	r3, #3
 8000254:	d824      	bhi.n	80002a0 <lcd_gotoxy+0x5c>
 8000256:	a201      	add	r2, pc, #4	@ (adr r2, 800025c <lcd_gotoxy+0x18>)
 8000258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800025c:	0800026d 	.word	0x0800026d
 8000260:	08000277 	.word	0x08000277
 8000264:	08000281 	.word	0x08000281
 8000268:	0800028b 	.word	0x0800028b
    {
        case 0: address = 0x80 + col; break;  // First row
 800026c:	68bb      	ldr	r3, [r7, #8]
 800026e:	b2db      	uxtb	r3, r3
 8000270:	3b80      	subs	r3, #128	@ 0x80
 8000272:	75fb      	strb	r3, [r7, #23]
 8000274:	e00e      	b.n	8000294 <lcd_gotoxy+0x50>
        case 1: address = 0xC0 + col; break;  // Second row
 8000276:	68bb      	ldr	r3, [r7, #8]
 8000278:	b2db      	uxtb	r3, r3
 800027a:	3b40      	subs	r3, #64	@ 0x40
 800027c:	75fb      	strb	r3, [r7, #23]
 800027e:	e009      	b.n	8000294 <lcd_gotoxy+0x50>
        case 2: address = 0x94 + col; break;  // Third row
 8000280:	68bb      	ldr	r3, [r7, #8]
 8000282:	b2db      	uxtb	r3, r3
 8000284:	3b6c      	subs	r3, #108	@ 0x6c
 8000286:	75fb      	strb	r3, [r7, #23]
 8000288:	e004      	b.n	8000294 <lcd_gotoxy+0x50>
        case 3: address = 0xD4 + col; break;  // Fourth row
 800028a:	68bb      	ldr	r3, [r7, #8]
 800028c:	b2db      	uxtb	r3, r3
 800028e:	3b2c      	subs	r3, #44	@ 0x2c
 8000290:	75fb      	strb	r3, [r7, #23]
 8000292:	bf00      	nop
        default: return;  // Ignore invalid row numbers
    }

    lcd_send_cmd(lcd, address);  // Send command to move the cursor
 8000294:	7dfb      	ldrb	r3, [r7, #23]
 8000296:	4619      	mov	r1, r3
 8000298:	68f8      	ldr	r0, [r7, #12]
 800029a:	f7ff ff57 	bl	800014c <lcd_send_cmd>
 800029e:	e000      	b.n	80002a2 <lcd_gotoxy+0x5e>
        default: return;  // Ignore invalid row numbers
 80002a0:	bf00      	nop
}
 80002a2:	3718      	adds	r7, #24
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}

080002a8 <lcd_init>:
 * @brief  Initializes the LCD in 4-bit mode.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_init(I2C_LCD_HandleTypeDef *lcd)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
    HAL_Delay(50);  // Wait for LCD power-up
 80002b0:	2032      	movs	r0, #50	@ 0x32
 80002b2:	f000 fb75 	bl	80009a0 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 80002b6:	2130      	movs	r1, #48	@ 0x30
 80002b8:	6878      	ldr	r0, [r7, #4]
 80002ba:	f7ff ff47 	bl	800014c <lcd_send_cmd>
    HAL_Delay(5);
 80002be:	2005      	movs	r0, #5
 80002c0:	f000 fb6e 	bl	80009a0 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 80002c4:	2130      	movs	r1, #48	@ 0x30
 80002c6:	6878      	ldr	r0, [r7, #4]
 80002c8:	f7ff ff40 	bl	800014c <lcd_send_cmd>
    HAL_Delay(1);
 80002cc:	2001      	movs	r0, #1
 80002ce:	f000 fb67 	bl	80009a0 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 80002d2:	2130      	movs	r1, #48	@ 0x30
 80002d4:	6878      	ldr	r0, [r7, #4]
 80002d6:	f7ff ff39 	bl	800014c <lcd_send_cmd>
    HAL_Delay(10);
 80002da:	200a      	movs	r0, #10
 80002dc:	f000 fb60 	bl	80009a0 <HAL_Delay>
    lcd_send_cmd(lcd, 0x20);  // Set to 4-bit mode
 80002e0:	2120      	movs	r1, #32
 80002e2:	6878      	ldr	r0, [r7, #4]
 80002e4:	f7ff ff32 	bl	800014c <lcd_send_cmd>
    HAL_Delay(10);
 80002e8:	200a      	movs	r0, #10
 80002ea:	f000 fb59 	bl	80009a0 <HAL_Delay>

    // LCD configuration commands
    lcd_send_cmd(lcd, 0x28);  // 4-bit mode, 2 lines, 5x8 font
 80002ee:	2128      	movs	r1, #40	@ 0x28
 80002f0:	6878      	ldr	r0, [r7, #4]
 80002f2:	f7ff ff2b 	bl	800014c <lcd_send_cmd>
    HAL_Delay(1);
 80002f6:	2001      	movs	r0, #1
 80002f8:	f000 fb52 	bl	80009a0 <HAL_Delay>
    lcd_send_cmd(lcd, 0x08);  // Display off, cursor off, blink off
 80002fc:	2108      	movs	r1, #8
 80002fe:	6878      	ldr	r0, [r7, #4]
 8000300:	f7ff ff24 	bl	800014c <lcd_send_cmd>
    HAL_Delay(1);
 8000304:	2001      	movs	r0, #1
 8000306:	f000 fb4b 	bl	80009a0 <HAL_Delay>
    lcd_send_cmd(lcd, 0x01);  // Clear display
 800030a:	2101      	movs	r1, #1
 800030c:	6878      	ldr	r0, [r7, #4]
 800030e:	f7ff ff1d 	bl	800014c <lcd_send_cmd>
    HAL_Delay(2);
 8000312:	2002      	movs	r0, #2
 8000314:	f000 fb44 	bl	80009a0 <HAL_Delay>
    lcd_send_cmd(lcd, 0x06);  // Entry mode: cursor moves right
 8000318:	2106      	movs	r1, #6
 800031a:	6878      	ldr	r0, [r7, #4]
 800031c:	f7ff ff16 	bl	800014c <lcd_send_cmd>
    HAL_Delay(1);
 8000320:	2001      	movs	r0, #1
 8000322:	f000 fb3d 	bl	80009a0 <HAL_Delay>
    lcd_send_cmd(lcd, 0x0C);  // Display on, cursor off, blink off
 8000326:	210c      	movs	r1, #12
 8000328:	6878      	ldr	r0, [r7, #4]
 800032a:	f7ff ff0f 	bl	800014c <lcd_send_cmd>
}
 800032e:	bf00      	nop
 8000330:	3708      	adds	r7, #8
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}

08000336 <lcd_puts>:
 * @param  lcd: Pointer to the LCD handle
 * @param  str: Null-terminated string to display
 * @retval None
 */
void lcd_puts(I2C_LCD_HandleTypeDef *lcd, char *str)
{
 8000336:	b580      	push	{r7, lr}
 8000338:	b082      	sub	sp, #8
 800033a:	af00      	add	r7, sp, #0
 800033c:	6078      	str	r0, [r7, #4]
 800033e:	6039      	str	r1, [r7, #0]
    while (*str) lcd_send_data(lcd, *str++);  // Send each character in the string
 8000340:	e007      	b.n	8000352 <lcd_puts+0x1c>
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	1c5a      	adds	r2, r3, #1
 8000346:	603a      	str	r2, [r7, #0]
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	4619      	mov	r1, r3
 800034c:	6878      	ldr	r0, [r7, #4]
 800034e:	f7ff ff2e 	bl	80001ae <lcd_send_data>
 8000352:	683b      	ldr	r3, [r7, #0]
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d1f3      	bne.n	8000342 <lcd_puts+0xc>
}
 800035a:	bf00      	nop
 800035c:	bf00      	nop
 800035e:	3708      	adds	r7, #8
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}

08000364 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b086      	sub	sp, #24
 8000368:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800036a:	f000 fab7 	bl	80008dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800036e:	f000 f85f 	bl	8000430 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000372:	f000 f8fd 	bl	8000570 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000376:	f000 f8a1 	bl	80004bc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800037a:	f000 f8cd 	bl	8000518 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /*LCD init*/
  lcd1.hi2c = &hi2c1;
 800037e:	4b24      	ldr	r3, [pc, #144]	@ (8000410 <main+0xac>)
 8000380:	4a24      	ldr	r2, [pc, #144]	@ (8000414 <main+0xb0>)
 8000382:	601a      	str	r2, [r3, #0]
  lcd1.address = 0x4E; //địa chỉ 0x27<<1
 8000384:	4b22      	ldr	r3, [pc, #136]	@ (8000410 <main+0xac>)
 8000386:	224e      	movs	r2, #78	@ 0x4e
 8000388:	711a      	strb	r2, [r3, #4]
  lcd_init(&lcd1);
 800038a:	4821      	ldr	r0, [pc, #132]	@ (8000410 <main+0xac>)
 800038c:	f7ff ff8c 	bl	80002a8 <lcd_init>
  lcd_clear(&lcd1);
 8000390:	481f      	ldr	r0, [pc, #124]	@ (8000410 <main+0xac>)
 8000392:	f7ff ff3d 	bl	8000210 <lcd_clear>
  lcd_puts(&lcd1,"Button count:");
 8000396:	4920      	ldr	r1, [pc, #128]	@ (8000418 <main+0xb4>)
 8000398:	481d      	ldr	r0, [pc, #116]	@ (8000410 <main+0xac>)
 800039a:	f7ff ffcc 	bl	8000336 <lcd_puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t currentState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 800039e:	2102      	movs	r1, #2
 80003a0:	481e      	ldr	r0, [pc, #120]	@ (800041c <main+0xb8>)
 80003a2:	f000 fe73 	bl	800108c <HAL_GPIO_ReadPin>
 80003a6:	4603      	mov	r3, r0
 80003a8:	75fb      	strb	r3, [r7, #23]

	  //Phát hiện cạnh xuống (bấm nút)
	  if (lastButtonState == 1 && currentState == 0){
 80003aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000420 <main+0xbc>)
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b01      	cmp	r3, #1
 80003b0:	d126      	bne.n	8000400 <main+0x9c>
 80003b2:	7dfb      	ldrb	r3, [r7, #23]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d123      	bne.n	8000400 <main+0x9c>
		  pressCount++;
 80003b8:	4b1a      	ldr	r3, [pc, #104]	@ (8000424 <main+0xc0>)
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	3301      	adds	r3, #1
 80003be:	b2da      	uxtb	r2, r3
 80003c0:	4b18      	ldr	r3, [pc, #96]	@ (8000424 <main+0xc0>)
 80003c2:	701a      	strb	r2, [r3, #0]

		  char buffer[16];
		  sprintf(buffer,"Count: %u", pressCount);
 80003c4:	4b17      	ldr	r3, [pc, #92]	@ (8000424 <main+0xc0>)
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	461a      	mov	r2, r3
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	4916      	ldr	r1, [pc, #88]	@ (8000428 <main+0xc4>)
 80003ce:	4618      	mov	r0, r3
 80003d0:	f004 f842 	bl	8004458 <siprintf>

		  lcd_gotoxy(&lcd1,0,1); //dòng 2
 80003d4:	2201      	movs	r2, #1
 80003d6:	2100      	movs	r1, #0
 80003d8:	480d      	ldr	r0, [pc, #52]	@ (8000410 <main+0xac>)
 80003da:	f7ff ff33 	bl	8000244 <lcd_gotoxy>
		  lcd_puts(&lcd1,"             "); //xóa dòng cũ
 80003de:	4913      	ldr	r1, [pc, #76]	@ (800042c <main+0xc8>)
 80003e0:	480b      	ldr	r0, [pc, #44]	@ (8000410 <main+0xac>)
 80003e2:	f7ff ffa8 	bl	8000336 <lcd_puts>
		  lcd_gotoxy(&lcd1,0,1);
 80003e6:	2201      	movs	r2, #1
 80003e8:	2100      	movs	r1, #0
 80003ea:	4809      	ldr	r0, [pc, #36]	@ (8000410 <main+0xac>)
 80003ec:	f7ff ff2a 	bl	8000244 <lcd_gotoxy>
		  lcd_puts(&lcd1, buffer);
 80003f0:	1d3b      	adds	r3, r7, #4
 80003f2:	4619      	mov	r1, r3
 80003f4:	4806      	ldr	r0, [pc, #24]	@ (8000410 <main+0xac>)
 80003f6:	f7ff ff9e 	bl	8000336 <lcd_puts>

		  HAL_Delay(200);
 80003fa:	20c8      	movs	r0, #200	@ 0xc8
 80003fc:	f000 fad0 	bl	80009a0 <HAL_Delay>
	  }

	  lastButtonState = currentState;
 8000400:	4a07      	ldr	r2, [pc, #28]	@ (8000420 <main+0xbc>)
 8000402:	7dfb      	ldrb	r3, [r7, #23]
 8000404:	7013      	strb	r3, [r2, #0]
	  HAL_Delay(10);
 8000406:	200a      	movs	r0, #10
 8000408:	f000 faca 	bl	80009a0 <HAL_Delay>
  {
 800040c:	e7c7      	b.n	800039e <main+0x3a>
 800040e:	bf00      	nop
 8000410:	20000118 	.word	0x20000118
 8000414:	2000007c 	.word	0x2000007c
 8000418:	08004dd0 	.word	0x08004dd0
 800041c:	40010800 	.word	0x40010800
 8000420:	20000000 	.word	0x20000000
 8000424:	20000120 	.word	0x20000120
 8000428:	08004de0 	.word	0x08004de0
 800042c:	08004dec 	.word	0x08004dec

08000430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b090      	sub	sp, #64	@ 0x40
 8000434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000436:	f107 0318 	add.w	r3, r7, #24
 800043a:	2228      	movs	r2, #40	@ 0x28
 800043c:	2100      	movs	r1, #0
 800043e:	4618      	mov	r0, r3
 8000440:	f004 f82a 	bl	8004498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000444:	1d3b      	adds	r3, r7, #4
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
 800044a:	605a      	str	r2, [r3, #4]
 800044c:	609a      	str	r2, [r3, #8]
 800044e:	60da      	str	r2, [r3, #12]
 8000450:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000452:	2301      	movs	r3, #1
 8000454:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000456:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800045a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800045c:	2300      	movs	r3, #0
 800045e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000460:	2301      	movs	r3, #1
 8000462:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000464:	2302      	movs	r3, #2
 8000466:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000468:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800046c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800046e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000472:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000474:	f107 0318 	add.w	r3, r7, #24
 8000478:	4618      	mov	r0, r3
 800047a:	f002 fe87 	bl	800318c <HAL_RCC_OscConfig>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000484:	f000 f8b6 	bl	80005f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000488:	230f      	movs	r3, #15
 800048a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800048c:	2302      	movs	r3, #2
 800048e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000490:	2300      	movs	r3, #0
 8000492:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000494:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000498:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800049a:	2300      	movs	r3, #0
 800049c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	2102      	movs	r1, #2
 80004a2:	4618      	mov	r0, r3
 80004a4:	f003 f8f4 	bl	8003690 <HAL_RCC_ClockConfig>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004ae:	f000 f8a1 	bl	80005f4 <Error_Handler>
  }
}
 80004b2:	bf00      	nop
 80004b4:	3740      	adds	r7, #64	@ 0x40
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
	...

080004bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004c0:	4b12      	ldr	r3, [pc, #72]	@ (800050c <MX_I2C1_Init+0x50>)
 80004c2:	4a13      	ldr	r2, [pc, #76]	@ (8000510 <MX_I2C1_Init+0x54>)
 80004c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80004c6:	4b11      	ldr	r3, [pc, #68]	@ (800050c <MX_I2C1_Init+0x50>)
 80004c8:	4a12      	ldr	r2, [pc, #72]	@ (8000514 <MX_I2C1_Init+0x58>)
 80004ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80004cc:	4b0f      	ldr	r3, [pc, #60]	@ (800050c <MX_I2C1_Init+0x50>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80004d2:	4b0e      	ldr	r3, [pc, #56]	@ (800050c <MX_I2C1_Init+0x50>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004d8:	4b0c      	ldr	r3, [pc, #48]	@ (800050c <MX_I2C1_Init+0x50>)
 80004da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80004de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004e0:	4b0a      	ldr	r3, [pc, #40]	@ (800050c <MX_I2C1_Init+0x50>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80004e6:	4b09      	ldr	r3, [pc, #36]	@ (800050c <MX_I2C1_Init+0x50>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004ec:	4b07      	ldr	r3, [pc, #28]	@ (800050c <MX_I2C1_Init+0x50>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004f2:	4b06      	ldr	r3, [pc, #24]	@ (800050c <MX_I2C1_Init+0x50>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004f8:	4804      	ldr	r0, [pc, #16]	@ (800050c <MX_I2C1_Init+0x50>)
 80004fa:	f000 fddf 	bl	80010bc <HAL_I2C_Init>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000504:	f000 f876 	bl	80005f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}
 800050c:	2000007c 	.word	0x2000007c
 8000510:	40005400 	.word	0x40005400
 8000514:	000186a0 	.word	0x000186a0

08000518 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800051c:	4b12      	ldr	r3, [pc, #72]	@ (8000568 <MX_USART1_UART_Init+0x50>)
 800051e:	4a13      	ldr	r2, [pc, #76]	@ (800056c <MX_USART1_UART_Init+0x54>)
 8000520:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000522:	4b11      	ldr	r3, [pc, #68]	@ (8000568 <MX_USART1_UART_Init+0x50>)
 8000524:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000528:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800052a:	4b0f      	ldr	r3, [pc, #60]	@ (8000568 <MX_USART1_UART_Init+0x50>)
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000530:	4b0d      	ldr	r3, [pc, #52]	@ (8000568 <MX_USART1_UART_Init+0x50>)
 8000532:	2200      	movs	r2, #0
 8000534:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000536:	4b0c      	ldr	r3, [pc, #48]	@ (8000568 <MX_USART1_UART_Init+0x50>)
 8000538:	2200      	movs	r2, #0
 800053a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800053c:	4b0a      	ldr	r3, [pc, #40]	@ (8000568 <MX_USART1_UART_Init+0x50>)
 800053e:	220c      	movs	r2, #12
 8000540:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000542:	4b09      	ldr	r3, [pc, #36]	@ (8000568 <MX_USART1_UART_Init+0x50>)
 8000544:	2200      	movs	r2, #0
 8000546:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000548:	4b07      	ldr	r3, [pc, #28]	@ (8000568 <MX_USART1_UART_Init+0x50>)
 800054a:	2200      	movs	r2, #0
 800054c:	61da      	str	r2, [r3, #28]
  if (HAL_MultiProcessor_Init(&huart1, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 800054e:	2200      	movs	r2, #0
 8000550:	2100      	movs	r1, #0
 8000552:	4805      	ldr	r0, [pc, #20]	@ (8000568 <MX_USART1_UART_Init+0x50>)
 8000554:	f003 fa2a 	bl	80039ac <HAL_MultiProcessor_Init>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 800055e:	f000 f849 	bl	80005f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	200000d0 	.word	0x200000d0
 800056c:	40013800 	.word	0x40013800

08000570 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b088      	sub	sp, #32
 8000574:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000576:	f107 0310 	add.w	r3, r7, #16
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000584:	4b19      	ldr	r3, [pc, #100]	@ (80005ec <MX_GPIO_Init+0x7c>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	4a18      	ldr	r2, [pc, #96]	@ (80005ec <MX_GPIO_Init+0x7c>)
 800058a:	f043 0320 	orr.w	r3, r3, #32
 800058e:	6193      	str	r3, [r2, #24]
 8000590:	4b16      	ldr	r3, [pc, #88]	@ (80005ec <MX_GPIO_Init+0x7c>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	f003 0320 	and.w	r3, r3, #32
 8000598:	60fb      	str	r3, [r7, #12]
 800059a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059c:	4b13      	ldr	r3, [pc, #76]	@ (80005ec <MX_GPIO_Init+0x7c>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	4a12      	ldr	r2, [pc, #72]	@ (80005ec <MX_GPIO_Init+0x7c>)
 80005a2:	f043 0304 	orr.w	r3, r3, #4
 80005a6:	6193      	str	r3, [r2, #24]
 80005a8:	4b10      	ldr	r3, [pc, #64]	@ (80005ec <MX_GPIO_Init+0x7c>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	f003 0304 	and.w	r3, r3, #4
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b4:	4b0d      	ldr	r3, [pc, #52]	@ (80005ec <MX_GPIO_Init+0x7c>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	4a0c      	ldr	r2, [pc, #48]	@ (80005ec <MX_GPIO_Init+0x7c>)
 80005ba:	f043 0308 	orr.w	r3, r3, #8
 80005be:	6193      	str	r3, [r2, #24]
 80005c0:	4b0a      	ldr	r3, [pc, #40]	@ (80005ec <MX_GPIO_Init+0x7c>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	f003 0308 	and.w	r3, r3, #8
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005cc:	2302      	movs	r3, #2
 80005ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005d4:	2301      	movs	r3, #1
 80005d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d8:	f107 0310 	add.w	r3, r7, #16
 80005dc:	4619      	mov	r1, r3
 80005de:	4804      	ldr	r0, [pc, #16]	@ (80005f0 <MX_GPIO_Init+0x80>)
 80005e0:	f000 fbd0 	bl	8000d84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005e4:	bf00      	nop
 80005e6:	3720      	adds	r7, #32
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40021000 	.word	0x40021000
 80005f0:	40010800 	.word	0x40010800

080005f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f8:	b672      	cpsid	i
}
 80005fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <Error_Handler+0x8>

08000600 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000606:	4b15      	ldr	r3, [pc, #84]	@ (800065c <HAL_MspInit+0x5c>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	4a14      	ldr	r2, [pc, #80]	@ (800065c <HAL_MspInit+0x5c>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6193      	str	r3, [r2, #24]
 8000612:	4b12      	ldr	r3, [pc, #72]	@ (800065c <HAL_MspInit+0x5c>)
 8000614:	699b      	ldr	r3, [r3, #24]
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800061e:	4b0f      	ldr	r3, [pc, #60]	@ (800065c <HAL_MspInit+0x5c>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	4a0e      	ldr	r2, [pc, #56]	@ (800065c <HAL_MspInit+0x5c>)
 8000624:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000628:	61d3      	str	r3, [r2, #28]
 800062a:	4b0c      	ldr	r3, [pc, #48]	@ (800065c <HAL_MspInit+0x5c>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000636:	4b0a      	ldr	r3, [pc, #40]	@ (8000660 <HAL_MspInit+0x60>)
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	4a04      	ldr	r2, [pc, #16]	@ (8000660 <HAL_MspInit+0x60>)
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000652:	bf00      	nop
 8000654:	3714      	adds	r7, #20
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr
 800065c:	40021000 	.word	0x40021000
 8000660:	40010000 	.word	0x40010000

08000664 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b088      	sub	sp, #32
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066c:	f107 0310 	add.w	r3, r7, #16
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a19      	ldr	r2, [pc, #100]	@ (80006e4 <HAL_I2C_MspInit+0x80>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d12b      	bne.n	80006dc <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000684:	4b18      	ldr	r3, [pc, #96]	@ (80006e8 <HAL_I2C_MspInit+0x84>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	4a17      	ldr	r2, [pc, #92]	@ (80006e8 <HAL_I2C_MspInit+0x84>)
 800068a:	f043 0308 	orr.w	r3, r3, #8
 800068e:	6193      	str	r3, [r2, #24]
 8000690:	4b15      	ldr	r3, [pc, #84]	@ (80006e8 <HAL_I2C_MspInit+0x84>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	f003 0308 	and.w	r3, r3, #8
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800069c:	23c0      	movs	r3, #192	@ 0xc0
 800069e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006a0:	2312      	movs	r3, #18
 80006a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006a4:	2303      	movs	r3, #3
 80006a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a8:	f107 0310 	add.w	r3, r7, #16
 80006ac:	4619      	mov	r1, r3
 80006ae:	480f      	ldr	r0, [pc, #60]	@ (80006ec <HAL_I2C_MspInit+0x88>)
 80006b0:	f000 fb68 	bl	8000d84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006b4:	4b0c      	ldr	r3, [pc, #48]	@ (80006e8 <HAL_I2C_MspInit+0x84>)
 80006b6:	69db      	ldr	r3, [r3, #28]
 80006b8:	4a0b      	ldr	r2, [pc, #44]	@ (80006e8 <HAL_I2C_MspInit+0x84>)
 80006ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006be:	61d3      	str	r3, [r2, #28]
 80006c0:	4b09      	ldr	r3, [pc, #36]	@ (80006e8 <HAL_I2C_MspInit+0x84>)
 80006c2:	69db      	ldr	r3, [r3, #28]
 80006c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2100      	movs	r1, #0
 80006d0:	201f      	movs	r0, #31
 80006d2:	f000 fa60 	bl	8000b96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80006d6:	201f      	movs	r0, #31
 80006d8:	f000 fa79 	bl	8000bce <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80006dc:	bf00      	nop
 80006de:	3720      	adds	r7, #32
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40005400 	.word	0x40005400
 80006e8:	40021000 	.word	0x40021000
 80006ec:	40010c00 	.word	0x40010c00

080006f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f8:	f107 0310 	add.w	r3, r7, #16
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a20      	ldr	r2, [pc, #128]	@ (800078c <HAL_UART_MspInit+0x9c>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d139      	bne.n	8000784 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000710:	4b1f      	ldr	r3, [pc, #124]	@ (8000790 <HAL_UART_MspInit+0xa0>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	4a1e      	ldr	r2, [pc, #120]	@ (8000790 <HAL_UART_MspInit+0xa0>)
 8000716:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800071a:	6193      	str	r3, [r2, #24]
 800071c:	4b1c      	ldr	r3, [pc, #112]	@ (8000790 <HAL_UART_MspInit+0xa0>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000728:	4b19      	ldr	r3, [pc, #100]	@ (8000790 <HAL_UART_MspInit+0xa0>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	4a18      	ldr	r2, [pc, #96]	@ (8000790 <HAL_UART_MspInit+0xa0>)
 800072e:	f043 0304 	orr.w	r3, r3, #4
 8000732:	6193      	str	r3, [r2, #24]
 8000734:	4b16      	ldr	r3, [pc, #88]	@ (8000790 <HAL_UART_MspInit+0xa0>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	f003 0304 	and.w	r3, r3, #4
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000740:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000744:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000746:	2302      	movs	r3, #2
 8000748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800074a:	2303      	movs	r3, #3
 800074c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074e:	f107 0310 	add.w	r3, r7, #16
 8000752:	4619      	mov	r1, r3
 8000754:	480f      	ldr	r0, [pc, #60]	@ (8000794 <HAL_UART_MspInit+0xa4>)
 8000756:	f000 fb15 	bl	8000d84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800075a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800075e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000768:	f107 0310 	add.w	r3, r7, #16
 800076c:	4619      	mov	r1, r3
 800076e:	4809      	ldr	r0, [pc, #36]	@ (8000794 <HAL_UART_MspInit+0xa4>)
 8000770:	f000 fb08 	bl	8000d84 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000774:	2200      	movs	r2, #0
 8000776:	2100      	movs	r1, #0
 8000778:	2025      	movs	r0, #37	@ 0x25
 800077a:	f000 fa0c 	bl	8000b96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800077e:	2025      	movs	r0, #37	@ 0x25
 8000780:	f000 fa25 	bl	8000bce <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000784:	bf00      	nop
 8000786:	3720      	adds	r7, #32
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40013800 	.word	0x40013800
 8000790:	40021000 	.word	0x40021000
 8000794:	40010800 	.word	0x40010800

08000798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800079c:	bf00      	nop
 800079e:	e7fd      	b.n	800079c <NMI_Handler+0x4>

080007a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a4:	bf00      	nop
 80007a6:	e7fd      	b.n	80007a4 <HardFault_Handler+0x4>

080007a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <MemManage_Handler+0x4>

080007b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b4:	bf00      	nop
 80007b6:	e7fd      	b.n	80007b4 <BusFault_Handler+0x4>

080007b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007bc:	bf00      	nop
 80007be:	e7fd      	b.n	80007bc <UsageFault_Handler+0x4>

080007c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr

080007cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr

080007d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr

080007e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e8:	f000 f8be 	bl	8000968 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80007f4:	4802      	ldr	r0, [pc, #8]	@ (8000800 <I2C1_EV_IRQHandler+0x10>)
 80007f6:	f000 feb7 	bl	8001568 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	2000007c 	.word	0x2000007c

08000804 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000808:	4802      	ldr	r0, [pc, #8]	@ (8000814 <USART1_IRQHandler+0x10>)
 800080a:	f003 f943 	bl	8003a94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200000d0 	.word	0x200000d0

08000818 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000820:	4a14      	ldr	r2, [pc, #80]	@ (8000874 <_sbrk+0x5c>)
 8000822:	4b15      	ldr	r3, [pc, #84]	@ (8000878 <_sbrk+0x60>)
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800082c:	4b13      	ldr	r3, [pc, #76]	@ (800087c <_sbrk+0x64>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d102      	bne.n	800083a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000834:	4b11      	ldr	r3, [pc, #68]	@ (800087c <_sbrk+0x64>)
 8000836:	4a12      	ldr	r2, [pc, #72]	@ (8000880 <_sbrk+0x68>)
 8000838:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800083a:	4b10      	ldr	r3, [pc, #64]	@ (800087c <_sbrk+0x64>)
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4413      	add	r3, r2
 8000842:	693a      	ldr	r2, [r7, #16]
 8000844:	429a      	cmp	r2, r3
 8000846:	d207      	bcs.n	8000858 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000848:	f003 fe2e 	bl	80044a8 <__errno>
 800084c:	4603      	mov	r3, r0
 800084e:	220c      	movs	r2, #12
 8000850:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000852:	f04f 33ff 	mov.w	r3, #4294967295
 8000856:	e009      	b.n	800086c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000858:	4b08      	ldr	r3, [pc, #32]	@ (800087c <_sbrk+0x64>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800085e:	4b07      	ldr	r3, [pc, #28]	@ (800087c <_sbrk+0x64>)
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4413      	add	r3, r2
 8000866:	4a05      	ldr	r2, [pc, #20]	@ (800087c <_sbrk+0x64>)
 8000868:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800086a:	68fb      	ldr	r3, [r7, #12]
}
 800086c:	4618      	mov	r0, r3
 800086e:	3718      	adds	r7, #24
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20005000 	.word	0x20005000
 8000878:	00000400 	.word	0x00000400
 800087c:	20000124 	.word	0x20000124
 8000880:	20000278 	.word	0x20000278

08000884 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr

08000890 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000890:	f7ff fff8 	bl	8000884 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000894:	480b      	ldr	r0, [pc, #44]	@ (80008c4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000896:	490c      	ldr	r1, [pc, #48]	@ (80008c8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000898:	4a0c      	ldr	r2, [pc, #48]	@ (80008cc <LoopFillZerobss+0x16>)
  movs r3, #0
 800089a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800089c:	e002      	b.n	80008a4 <LoopCopyDataInit>

0800089e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800089e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008a2:	3304      	adds	r3, #4

080008a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a8:	d3f9      	bcc.n	800089e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008aa:	4a09      	ldr	r2, [pc, #36]	@ (80008d0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008ac:	4c09      	ldr	r4, [pc, #36]	@ (80008d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b0:	e001      	b.n	80008b6 <LoopFillZerobss>

080008b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b4:	3204      	adds	r2, #4

080008b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b8:	d3fb      	bcc.n	80008b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008ba:	f003 fdfb 	bl	80044b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008be:	f7ff fd51 	bl	8000364 <main>
  bx lr
 80008c2:	4770      	bx	lr
  ldr r0, =_sdata
 80008c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80008cc:	08004e64 	.word	0x08004e64
  ldr r2, =_sbss
 80008d0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80008d4:	20000274 	.word	0x20000274

080008d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008d8:	e7fe      	b.n	80008d8 <ADC1_2_IRQHandler>
	...

080008dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008e0:	4b08      	ldr	r3, [pc, #32]	@ (8000904 <HAL_Init+0x28>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a07      	ldr	r2, [pc, #28]	@ (8000904 <HAL_Init+0x28>)
 80008e6:	f043 0310 	orr.w	r3, r3, #16
 80008ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008ec:	2003      	movs	r0, #3
 80008ee:	f000 f947 	bl	8000b80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008f2:	200f      	movs	r0, #15
 80008f4:	f000 f808 	bl	8000908 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008f8:	f7ff fe82 	bl	8000600 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008fc:	2300      	movs	r3, #0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40022000 	.word	0x40022000

08000908 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000910:	4b12      	ldr	r3, [pc, #72]	@ (800095c <HAL_InitTick+0x54>)
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	4b12      	ldr	r3, [pc, #72]	@ (8000960 <HAL_InitTick+0x58>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	4619      	mov	r1, r3
 800091a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800091e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000922:	fbb2 f3f3 	udiv	r3, r2, r3
 8000926:	4618      	mov	r0, r3
 8000928:	f000 f95f 	bl	8000bea <HAL_SYSTICK_Config>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000932:	2301      	movs	r3, #1
 8000934:	e00e      	b.n	8000954 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2b0f      	cmp	r3, #15
 800093a:	d80a      	bhi.n	8000952 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800093c:	2200      	movs	r2, #0
 800093e:	6879      	ldr	r1, [r7, #4]
 8000940:	f04f 30ff 	mov.w	r0, #4294967295
 8000944:	f000 f927 	bl	8000b96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000948:	4a06      	ldr	r2, [pc, #24]	@ (8000964 <HAL_InitTick+0x5c>)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800094e:	2300      	movs	r3, #0
 8000950:	e000      	b.n	8000954 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000952:	2301      	movs	r3, #1
}
 8000954:	4618      	mov	r0, r3
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000004 	.word	0x20000004
 8000960:	2000000c 	.word	0x2000000c
 8000964:	20000008 	.word	0x20000008

08000968 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800096c:	4b05      	ldr	r3, [pc, #20]	@ (8000984 <HAL_IncTick+0x1c>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	461a      	mov	r2, r3
 8000972:	4b05      	ldr	r3, [pc, #20]	@ (8000988 <HAL_IncTick+0x20>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4413      	add	r3, r2
 8000978:	4a03      	ldr	r2, [pc, #12]	@ (8000988 <HAL_IncTick+0x20>)
 800097a:	6013      	str	r3, [r2, #0]
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr
 8000984:	2000000c 	.word	0x2000000c
 8000988:	20000128 	.word	0x20000128

0800098c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  return uwTick;
 8000990:	4b02      	ldr	r3, [pc, #8]	@ (800099c <HAL_GetTick+0x10>)
 8000992:	681b      	ldr	r3, [r3, #0]
}
 8000994:	4618      	mov	r0, r3
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr
 800099c:	20000128 	.word	0x20000128

080009a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009a8:	f7ff fff0 	bl	800098c <HAL_GetTick>
 80009ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009b8:	d005      	beq.n	80009c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ba:	4b0a      	ldr	r3, [pc, #40]	@ (80009e4 <HAL_Delay+0x44>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	461a      	mov	r2, r3
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	4413      	add	r3, r2
 80009c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009c6:	bf00      	nop
 80009c8:	f7ff ffe0 	bl	800098c <HAL_GetTick>
 80009cc:	4602      	mov	r2, r0
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d8f7      	bhi.n	80009c8 <HAL_Delay+0x28>
  {
  }
}
 80009d8:	bf00      	nop
 80009da:	bf00      	nop
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	2000000c 	.word	0x2000000c

080009e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	f003 0307 	and.w	r3, r3, #7
 80009f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a2c <__NVIC_SetPriorityGrouping+0x44>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009fe:	68ba      	ldr	r2, [r7, #8]
 8000a00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a04:	4013      	ands	r3, r2
 8000a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a1a:	4a04      	ldr	r2, [pc, #16]	@ (8000a2c <__NVIC_SetPriorityGrouping+0x44>)
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	60d3      	str	r3, [r2, #12]
}
 8000a20:	bf00      	nop
 8000a22:	3714      	adds	r7, #20
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bc80      	pop	{r7}
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a34:	4b04      	ldr	r3, [pc, #16]	@ (8000a48 <__NVIC_GetPriorityGrouping+0x18>)
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	0a1b      	lsrs	r3, r3, #8
 8000a3a:	f003 0307 	and.w	r3, r3, #7
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bc80      	pop	{r7}
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	db0b      	blt.n	8000a76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	f003 021f 	and.w	r2, r3, #31
 8000a64:	4906      	ldr	r1, [pc, #24]	@ (8000a80 <__NVIC_EnableIRQ+0x34>)
 8000a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6a:	095b      	lsrs	r3, r3, #5
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr
 8000a80:	e000e100 	.word	0xe000e100

08000a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	6039      	str	r1, [r7, #0]
 8000a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	db0a      	blt.n	8000aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	490c      	ldr	r1, [pc, #48]	@ (8000ad0 <__NVIC_SetPriority+0x4c>)
 8000a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa2:	0112      	lsls	r2, r2, #4
 8000aa4:	b2d2      	uxtb	r2, r2
 8000aa6:	440b      	add	r3, r1
 8000aa8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aac:	e00a      	b.n	8000ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	4908      	ldr	r1, [pc, #32]	@ (8000ad4 <__NVIC_SetPriority+0x50>)
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	f003 030f 	and.w	r3, r3, #15
 8000aba:	3b04      	subs	r3, #4
 8000abc:	0112      	lsls	r2, r2, #4
 8000abe:	b2d2      	uxtb	r2, r2
 8000ac0:	440b      	add	r3, r1
 8000ac2:	761a      	strb	r2, [r3, #24]
}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bc80      	pop	{r7}
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	e000e100 	.word	0xe000e100
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b089      	sub	sp, #36	@ 0x24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	f003 0307 	and.w	r3, r3, #7
 8000aea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	f1c3 0307 	rsb	r3, r3, #7
 8000af2:	2b04      	cmp	r3, #4
 8000af4:	bf28      	it	cs
 8000af6:	2304      	movcs	r3, #4
 8000af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	3304      	adds	r3, #4
 8000afe:	2b06      	cmp	r3, #6
 8000b00:	d902      	bls.n	8000b08 <NVIC_EncodePriority+0x30>
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	3b03      	subs	r3, #3
 8000b06:	e000      	b.n	8000b0a <NVIC_EncodePriority+0x32>
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	fa02 f303 	lsl.w	r3, r2, r3
 8000b16:	43da      	mvns	r2, r3
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	401a      	ands	r2, r3
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b20:	f04f 31ff 	mov.w	r1, #4294967295
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2a:	43d9      	mvns	r1, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b30:	4313      	orrs	r3, r2
         );
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3724      	adds	r7, #36	@ 0x24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr

08000b3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b4c:	d301      	bcc.n	8000b52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e00f      	b.n	8000b72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b52:	4a0a      	ldr	r2, [pc, #40]	@ (8000b7c <SysTick_Config+0x40>)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b5a:	210f      	movs	r1, #15
 8000b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b60:	f7ff ff90 	bl	8000a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b64:	4b05      	ldr	r3, [pc, #20]	@ (8000b7c <SysTick_Config+0x40>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b6a:	4b04      	ldr	r3, [pc, #16]	@ (8000b7c <SysTick_Config+0x40>)
 8000b6c:	2207      	movs	r2, #7
 8000b6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	e000e010 	.word	0xe000e010

08000b80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f7ff ff2d 	bl	80009e8 <__NVIC_SetPriorityGrouping>
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b086      	sub	sp, #24
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	60b9      	str	r1, [r7, #8]
 8000ba0:	607a      	str	r2, [r7, #4]
 8000ba2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ba8:	f7ff ff42 	bl	8000a30 <__NVIC_GetPriorityGrouping>
 8000bac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	68b9      	ldr	r1, [r7, #8]
 8000bb2:	6978      	ldr	r0, [r7, #20]
 8000bb4:	f7ff ff90 	bl	8000ad8 <NVIC_EncodePriority>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bbe:	4611      	mov	r1, r2
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff ff5f 	bl	8000a84 <__NVIC_SetPriority>
}
 8000bc6:	bf00      	nop
 8000bc8:	3718      	adds	r7, #24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ff35 	bl	8000a4c <__NVIC_EnableIRQ>
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f7ff ffa2 	bl	8000b3c <SysTick_Config>
 8000bf8:	4603      	mov	r3, r0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b085      	sub	sp, #20
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d008      	beq.n	8000c2c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2204      	movs	r2, #4
 8000c1e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2200      	movs	r2, #0
 8000c24:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	e020      	b.n	8000c6e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f022 020e 	bic.w	r2, r2, #14
 8000c3a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f022 0201 	bic.w	r2, r2, #1
 8000c4a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c54:	2101      	movs	r1, #1
 8000c56:	fa01 f202 	lsl.w	r2, r1, r2
 8000c5a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2201      	movs	r2, #1
 8000c60:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2200      	movs	r2, #0
 8000c68:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3714      	adds	r7, #20
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr

08000c78 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c80:	2300      	movs	r3, #0
 8000c82:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	2b02      	cmp	r3, #2
 8000c8e:	d005      	beq.n	8000c9c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2204      	movs	r2, #4
 8000c94:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	73fb      	strb	r3, [r7, #15]
 8000c9a:	e051      	b.n	8000d40 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f022 020e 	bic.w	r2, r2, #14
 8000caa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f022 0201 	bic.w	r2, r2, #1
 8000cba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a22      	ldr	r2, [pc, #136]	@ (8000d4c <HAL_DMA_Abort_IT+0xd4>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d029      	beq.n	8000d1a <HAL_DMA_Abort_IT+0xa2>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a21      	ldr	r2, [pc, #132]	@ (8000d50 <HAL_DMA_Abort_IT+0xd8>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d022      	beq.n	8000d16 <HAL_DMA_Abort_IT+0x9e>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a1f      	ldr	r2, [pc, #124]	@ (8000d54 <HAL_DMA_Abort_IT+0xdc>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d01a      	beq.n	8000d10 <HAL_DMA_Abort_IT+0x98>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a1e      	ldr	r2, [pc, #120]	@ (8000d58 <HAL_DMA_Abort_IT+0xe0>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d012      	beq.n	8000d0a <HAL_DMA_Abort_IT+0x92>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a1c      	ldr	r2, [pc, #112]	@ (8000d5c <HAL_DMA_Abort_IT+0xe4>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d00a      	beq.n	8000d04 <HAL_DMA_Abort_IT+0x8c>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a1b      	ldr	r2, [pc, #108]	@ (8000d60 <HAL_DMA_Abort_IT+0xe8>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d102      	bne.n	8000cfe <HAL_DMA_Abort_IT+0x86>
 8000cf8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000cfc:	e00e      	b.n	8000d1c <HAL_DMA_Abort_IT+0xa4>
 8000cfe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000d02:	e00b      	b.n	8000d1c <HAL_DMA_Abort_IT+0xa4>
 8000d04:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d08:	e008      	b.n	8000d1c <HAL_DMA_Abort_IT+0xa4>
 8000d0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d0e:	e005      	b.n	8000d1c <HAL_DMA_Abort_IT+0xa4>
 8000d10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d14:	e002      	b.n	8000d1c <HAL_DMA_Abort_IT+0xa4>
 8000d16:	2310      	movs	r3, #16
 8000d18:	e000      	b.n	8000d1c <HAL_DMA_Abort_IT+0xa4>
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	4a11      	ldr	r2, [pc, #68]	@ (8000d64 <HAL_DMA_Abort_IT+0xec>)
 8000d1e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2201      	movs	r2, #1
 8000d24:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d003      	beq.n	8000d40 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	4798      	blx	r3
    } 
  }
  return status;
 8000d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40020008 	.word	0x40020008
 8000d50:	4002001c 	.word	0x4002001c
 8000d54:	40020030 	.word	0x40020030
 8000d58:	40020044 	.word	0x40020044
 8000d5c:	40020058 	.word	0x40020058
 8000d60:	4002006c 	.word	0x4002006c
 8000d64:	40020000 	.word	0x40020000

08000d68 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d76:	b2db      	uxtb	r3, r3
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bc80      	pop	{r7}
 8000d80:	4770      	bx	lr
	...

08000d84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b08b      	sub	sp, #44	@ 0x2c
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d92:	2300      	movs	r3, #0
 8000d94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d96:	e169      	b.n	800106c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d98:	2201      	movs	r2, #1
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	69fa      	ldr	r2, [r7, #28]
 8000da8:	4013      	ands	r3, r2
 8000daa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	f040 8158 	bne.w	8001066 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	4a9a      	ldr	r2, [pc, #616]	@ (8001024 <HAL_GPIO_Init+0x2a0>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d05e      	beq.n	8000e7e <HAL_GPIO_Init+0xfa>
 8000dc0:	4a98      	ldr	r2, [pc, #608]	@ (8001024 <HAL_GPIO_Init+0x2a0>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d875      	bhi.n	8000eb2 <HAL_GPIO_Init+0x12e>
 8000dc6:	4a98      	ldr	r2, [pc, #608]	@ (8001028 <HAL_GPIO_Init+0x2a4>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d058      	beq.n	8000e7e <HAL_GPIO_Init+0xfa>
 8000dcc:	4a96      	ldr	r2, [pc, #600]	@ (8001028 <HAL_GPIO_Init+0x2a4>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d86f      	bhi.n	8000eb2 <HAL_GPIO_Init+0x12e>
 8000dd2:	4a96      	ldr	r2, [pc, #600]	@ (800102c <HAL_GPIO_Init+0x2a8>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d052      	beq.n	8000e7e <HAL_GPIO_Init+0xfa>
 8000dd8:	4a94      	ldr	r2, [pc, #592]	@ (800102c <HAL_GPIO_Init+0x2a8>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d869      	bhi.n	8000eb2 <HAL_GPIO_Init+0x12e>
 8000dde:	4a94      	ldr	r2, [pc, #592]	@ (8001030 <HAL_GPIO_Init+0x2ac>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d04c      	beq.n	8000e7e <HAL_GPIO_Init+0xfa>
 8000de4:	4a92      	ldr	r2, [pc, #584]	@ (8001030 <HAL_GPIO_Init+0x2ac>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d863      	bhi.n	8000eb2 <HAL_GPIO_Init+0x12e>
 8000dea:	4a92      	ldr	r2, [pc, #584]	@ (8001034 <HAL_GPIO_Init+0x2b0>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d046      	beq.n	8000e7e <HAL_GPIO_Init+0xfa>
 8000df0:	4a90      	ldr	r2, [pc, #576]	@ (8001034 <HAL_GPIO_Init+0x2b0>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d85d      	bhi.n	8000eb2 <HAL_GPIO_Init+0x12e>
 8000df6:	2b12      	cmp	r3, #18
 8000df8:	d82a      	bhi.n	8000e50 <HAL_GPIO_Init+0xcc>
 8000dfa:	2b12      	cmp	r3, #18
 8000dfc:	d859      	bhi.n	8000eb2 <HAL_GPIO_Init+0x12e>
 8000dfe:	a201      	add	r2, pc, #4	@ (adr r2, 8000e04 <HAL_GPIO_Init+0x80>)
 8000e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e04:	08000e7f 	.word	0x08000e7f
 8000e08:	08000e59 	.word	0x08000e59
 8000e0c:	08000e6b 	.word	0x08000e6b
 8000e10:	08000ead 	.word	0x08000ead
 8000e14:	08000eb3 	.word	0x08000eb3
 8000e18:	08000eb3 	.word	0x08000eb3
 8000e1c:	08000eb3 	.word	0x08000eb3
 8000e20:	08000eb3 	.word	0x08000eb3
 8000e24:	08000eb3 	.word	0x08000eb3
 8000e28:	08000eb3 	.word	0x08000eb3
 8000e2c:	08000eb3 	.word	0x08000eb3
 8000e30:	08000eb3 	.word	0x08000eb3
 8000e34:	08000eb3 	.word	0x08000eb3
 8000e38:	08000eb3 	.word	0x08000eb3
 8000e3c:	08000eb3 	.word	0x08000eb3
 8000e40:	08000eb3 	.word	0x08000eb3
 8000e44:	08000eb3 	.word	0x08000eb3
 8000e48:	08000e61 	.word	0x08000e61
 8000e4c:	08000e75 	.word	0x08000e75
 8000e50:	4a79      	ldr	r2, [pc, #484]	@ (8001038 <HAL_GPIO_Init+0x2b4>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d013      	beq.n	8000e7e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e56:	e02c      	b.n	8000eb2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	623b      	str	r3, [r7, #32]
          break;
 8000e5e:	e029      	b.n	8000eb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	3304      	adds	r3, #4
 8000e66:	623b      	str	r3, [r7, #32]
          break;
 8000e68:	e024      	b.n	8000eb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	68db      	ldr	r3, [r3, #12]
 8000e6e:	3308      	adds	r3, #8
 8000e70:	623b      	str	r3, [r7, #32]
          break;
 8000e72:	e01f      	b.n	8000eb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	330c      	adds	r3, #12
 8000e7a:	623b      	str	r3, [r7, #32]
          break;
 8000e7c:	e01a      	b.n	8000eb4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d102      	bne.n	8000e8c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e86:	2304      	movs	r3, #4
 8000e88:	623b      	str	r3, [r7, #32]
          break;
 8000e8a:	e013      	b.n	8000eb4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d105      	bne.n	8000ea0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e94:	2308      	movs	r3, #8
 8000e96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	69fa      	ldr	r2, [r7, #28]
 8000e9c:	611a      	str	r2, [r3, #16]
          break;
 8000e9e:	e009      	b.n	8000eb4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ea0:	2308      	movs	r3, #8
 8000ea2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	69fa      	ldr	r2, [r7, #28]
 8000ea8:	615a      	str	r2, [r3, #20]
          break;
 8000eaa:	e003      	b.n	8000eb4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000eac:	2300      	movs	r3, #0
 8000eae:	623b      	str	r3, [r7, #32]
          break;
 8000eb0:	e000      	b.n	8000eb4 <HAL_GPIO_Init+0x130>
          break;
 8000eb2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	2bff      	cmp	r3, #255	@ 0xff
 8000eb8:	d801      	bhi.n	8000ebe <HAL_GPIO_Init+0x13a>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	e001      	b.n	8000ec2 <HAL_GPIO_Init+0x13e>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	3304      	adds	r3, #4
 8000ec2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	2bff      	cmp	r3, #255	@ 0xff
 8000ec8:	d802      	bhi.n	8000ed0 <HAL_GPIO_Init+0x14c>
 8000eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	e002      	b.n	8000ed6 <HAL_GPIO_Init+0x152>
 8000ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ed2:	3b08      	subs	r3, #8
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	210f      	movs	r1, #15
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	401a      	ands	r2, r3
 8000ee8:	6a39      	ldr	r1, [r7, #32]
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef0:	431a      	orrs	r2, r3
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	f000 80b1 	beq.w	8001066 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f04:	4b4d      	ldr	r3, [pc, #308]	@ (800103c <HAL_GPIO_Init+0x2b8>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	4a4c      	ldr	r2, [pc, #304]	@ (800103c <HAL_GPIO_Init+0x2b8>)
 8000f0a:	f043 0301 	orr.w	r3, r3, #1
 8000f0e:	6193      	str	r3, [r2, #24]
 8000f10:	4b4a      	ldr	r3, [pc, #296]	@ (800103c <HAL_GPIO_Init+0x2b8>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	f003 0301 	and.w	r3, r3, #1
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f1c:	4a48      	ldr	r2, [pc, #288]	@ (8001040 <HAL_GPIO_Init+0x2bc>)
 8000f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f20:	089b      	lsrs	r3, r3, #2
 8000f22:	3302      	adds	r3, #2
 8000f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f2c:	f003 0303 	and.w	r3, r3, #3
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	220f      	movs	r2, #15
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a40      	ldr	r2, [pc, #256]	@ (8001044 <HAL_GPIO_Init+0x2c0>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d013      	beq.n	8000f70 <HAL_GPIO_Init+0x1ec>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a3f      	ldr	r2, [pc, #252]	@ (8001048 <HAL_GPIO_Init+0x2c4>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d00d      	beq.n	8000f6c <HAL_GPIO_Init+0x1e8>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a3e      	ldr	r2, [pc, #248]	@ (800104c <HAL_GPIO_Init+0x2c8>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d007      	beq.n	8000f68 <HAL_GPIO_Init+0x1e4>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a3d      	ldr	r2, [pc, #244]	@ (8001050 <HAL_GPIO_Init+0x2cc>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d101      	bne.n	8000f64 <HAL_GPIO_Init+0x1e0>
 8000f60:	2303      	movs	r3, #3
 8000f62:	e006      	b.n	8000f72 <HAL_GPIO_Init+0x1ee>
 8000f64:	2304      	movs	r3, #4
 8000f66:	e004      	b.n	8000f72 <HAL_GPIO_Init+0x1ee>
 8000f68:	2302      	movs	r3, #2
 8000f6a:	e002      	b.n	8000f72 <HAL_GPIO_Init+0x1ee>
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e000      	b.n	8000f72 <HAL_GPIO_Init+0x1ee>
 8000f70:	2300      	movs	r3, #0
 8000f72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f74:	f002 0203 	and.w	r2, r2, #3
 8000f78:	0092      	lsls	r2, r2, #2
 8000f7a:	4093      	lsls	r3, r2
 8000f7c:	68fa      	ldr	r2, [r7, #12]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f82:	492f      	ldr	r1, [pc, #188]	@ (8001040 <HAL_GPIO_Init+0x2bc>)
 8000f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f86:	089b      	lsrs	r3, r3, #2
 8000f88:	3302      	adds	r3, #2
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d006      	beq.n	8000faa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f9c:	4b2d      	ldr	r3, [pc, #180]	@ (8001054 <HAL_GPIO_Init+0x2d0>)
 8000f9e:	689a      	ldr	r2, [r3, #8]
 8000fa0:	492c      	ldr	r1, [pc, #176]	@ (8001054 <HAL_GPIO_Init+0x2d0>)
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	608b      	str	r3, [r1, #8]
 8000fa8:	e006      	b.n	8000fb8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000faa:	4b2a      	ldr	r3, [pc, #168]	@ (8001054 <HAL_GPIO_Init+0x2d0>)
 8000fac:	689a      	ldr	r2, [r3, #8]
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	4928      	ldr	r1, [pc, #160]	@ (8001054 <HAL_GPIO_Init+0x2d0>)
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d006      	beq.n	8000fd2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fc4:	4b23      	ldr	r3, [pc, #140]	@ (8001054 <HAL_GPIO_Init+0x2d0>)
 8000fc6:	68da      	ldr	r2, [r3, #12]
 8000fc8:	4922      	ldr	r1, [pc, #136]	@ (8001054 <HAL_GPIO_Init+0x2d0>)
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	60cb      	str	r3, [r1, #12]
 8000fd0:	e006      	b.n	8000fe0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fd2:	4b20      	ldr	r3, [pc, #128]	@ (8001054 <HAL_GPIO_Init+0x2d0>)
 8000fd4:	68da      	ldr	r2, [r3, #12]
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	491e      	ldr	r1, [pc, #120]	@ (8001054 <HAL_GPIO_Init+0x2d0>)
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d006      	beq.n	8000ffa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fec:	4b19      	ldr	r3, [pc, #100]	@ (8001054 <HAL_GPIO_Init+0x2d0>)
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	4918      	ldr	r1, [pc, #96]	@ (8001054 <HAL_GPIO_Init+0x2d0>)
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	604b      	str	r3, [r1, #4]
 8000ff8:	e006      	b.n	8001008 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ffa:	4b16      	ldr	r3, [pc, #88]	@ (8001054 <HAL_GPIO_Init+0x2d0>)
 8000ffc:	685a      	ldr	r2, [r3, #4]
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	43db      	mvns	r3, r3
 8001002:	4914      	ldr	r1, [pc, #80]	@ (8001054 <HAL_GPIO_Init+0x2d0>)
 8001004:	4013      	ands	r3, r2
 8001006:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d021      	beq.n	8001058 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001014:	4b0f      	ldr	r3, [pc, #60]	@ (8001054 <HAL_GPIO_Init+0x2d0>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	490e      	ldr	r1, [pc, #56]	@ (8001054 <HAL_GPIO_Init+0x2d0>)
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	4313      	orrs	r3, r2
 800101e:	600b      	str	r3, [r1, #0]
 8001020:	e021      	b.n	8001066 <HAL_GPIO_Init+0x2e2>
 8001022:	bf00      	nop
 8001024:	10320000 	.word	0x10320000
 8001028:	10310000 	.word	0x10310000
 800102c:	10220000 	.word	0x10220000
 8001030:	10210000 	.word	0x10210000
 8001034:	10120000 	.word	0x10120000
 8001038:	10110000 	.word	0x10110000
 800103c:	40021000 	.word	0x40021000
 8001040:	40010000 	.word	0x40010000
 8001044:	40010800 	.word	0x40010800
 8001048:	40010c00 	.word	0x40010c00
 800104c:	40011000 	.word	0x40011000
 8001050:	40011400 	.word	0x40011400
 8001054:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001058:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <HAL_GPIO_Init+0x304>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	43db      	mvns	r3, r3
 8001060:	4909      	ldr	r1, [pc, #36]	@ (8001088 <HAL_GPIO_Init+0x304>)
 8001062:	4013      	ands	r3, r2
 8001064:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001068:	3301      	adds	r3, #1
 800106a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001072:	fa22 f303 	lsr.w	r3, r2, r3
 8001076:	2b00      	cmp	r3, #0
 8001078:	f47f ae8e 	bne.w	8000d98 <HAL_GPIO_Init+0x14>
  }
}
 800107c:	bf00      	nop
 800107e:	bf00      	nop
 8001080:	372c      	adds	r7, #44	@ 0x2c
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr
 8001088:	40010400 	.word	0x40010400

0800108c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689a      	ldr	r2, [r3, #8]
 800109c:	887b      	ldrh	r3, [r7, #2]
 800109e:	4013      	ands	r3, r2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d002      	beq.n	80010aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010a4:	2301      	movs	r3, #1
 80010a6:	73fb      	strb	r3, [r7, #15]
 80010a8:	e001      	b.n	80010ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010aa:	2300      	movs	r3, #0
 80010ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr
	...

080010bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d101      	bne.n	80010ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e12b      	b.n	8001326 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d106      	bne.n	80010e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff fabe 	bl	8000664 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2224      	movs	r2, #36	@ 0x24
 80010ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f022 0201 	bic.w	r2, r2, #1
 80010fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800110e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800111e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001120:	f002 fbfe 	bl	8003920 <HAL_RCC_GetPCLK1Freq>
 8001124:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	4a81      	ldr	r2, [pc, #516]	@ (8001330 <HAL_I2C_Init+0x274>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d807      	bhi.n	8001140 <HAL_I2C_Init+0x84>
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	4a80      	ldr	r2, [pc, #512]	@ (8001334 <HAL_I2C_Init+0x278>)
 8001134:	4293      	cmp	r3, r2
 8001136:	bf94      	ite	ls
 8001138:	2301      	movls	r3, #1
 800113a:	2300      	movhi	r3, #0
 800113c:	b2db      	uxtb	r3, r3
 800113e:	e006      	b.n	800114e <HAL_I2C_Init+0x92>
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4a7d      	ldr	r2, [pc, #500]	@ (8001338 <HAL_I2C_Init+0x27c>)
 8001144:	4293      	cmp	r3, r2
 8001146:	bf94      	ite	ls
 8001148:	2301      	movls	r3, #1
 800114a:	2300      	movhi	r3, #0
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e0e7      	b.n	8001326 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	4a78      	ldr	r2, [pc, #480]	@ (800133c <HAL_I2C_Init+0x280>)
 800115a:	fba2 2303 	umull	r2, r3, r2, r3
 800115e:	0c9b      	lsrs	r3, r3, #18
 8001160:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	68ba      	ldr	r2, [r7, #8]
 8001172:	430a      	orrs	r2, r1
 8001174:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6a1b      	ldr	r3, [r3, #32]
 800117c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	4a6a      	ldr	r2, [pc, #424]	@ (8001330 <HAL_I2C_Init+0x274>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d802      	bhi.n	8001190 <HAL_I2C_Init+0xd4>
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	3301      	adds	r3, #1
 800118e:	e009      	b.n	80011a4 <HAL_I2C_Init+0xe8>
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001196:	fb02 f303 	mul.w	r3, r2, r3
 800119a:	4a69      	ldr	r2, [pc, #420]	@ (8001340 <HAL_I2C_Init+0x284>)
 800119c:	fba2 2303 	umull	r2, r3, r2, r3
 80011a0:	099b      	lsrs	r3, r3, #6
 80011a2:	3301      	adds	r3, #1
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	6812      	ldr	r2, [r2, #0]
 80011a8:	430b      	orrs	r3, r1
 80011aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80011b6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	495c      	ldr	r1, [pc, #368]	@ (8001330 <HAL_I2C_Init+0x274>)
 80011c0:	428b      	cmp	r3, r1
 80011c2:	d819      	bhi.n	80011f8 <HAL_I2C_Init+0x13c>
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	1e59      	subs	r1, r3, #1
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80011d2:	1c59      	adds	r1, r3, #1
 80011d4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80011d8:	400b      	ands	r3, r1
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d00a      	beq.n	80011f4 <HAL_I2C_Init+0x138>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	1e59      	subs	r1, r3, #1
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80011ec:	3301      	adds	r3, #1
 80011ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011f2:	e051      	b.n	8001298 <HAL_I2C_Init+0x1dc>
 80011f4:	2304      	movs	r3, #4
 80011f6:	e04f      	b.n	8001298 <HAL_I2C_Init+0x1dc>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d111      	bne.n	8001224 <HAL_I2C_Init+0x168>
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	1e58      	subs	r0, r3, #1
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6859      	ldr	r1, [r3, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	440b      	add	r3, r1
 800120e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001212:	3301      	adds	r3, #1
 8001214:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001218:	2b00      	cmp	r3, #0
 800121a:	bf0c      	ite	eq
 800121c:	2301      	moveq	r3, #1
 800121e:	2300      	movne	r3, #0
 8001220:	b2db      	uxtb	r3, r3
 8001222:	e012      	b.n	800124a <HAL_I2C_Init+0x18e>
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	1e58      	subs	r0, r3, #1
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6859      	ldr	r1, [r3, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	440b      	add	r3, r1
 8001232:	0099      	lsls	r1, r3, #2
 8001234:	440b      	add	r3, r1
 8001236:	fbb0 f3f3 	udiv	r3, r0, r3
 800123a:	3301      	adds	r3, #1
 800123c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001240:	2b00      	cmp	r3, #0
 8001242:	bf0c      	ite	eq
 8001244:	2301      	moveq	r3, #1
 8001246:	2300      	movne	r3, #0
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_I2C_Init+0x196>
 800124e:	2301      	movs	r3, #1
 8001250:	e022      	b.n	8001298 <HAL_I2C_Init+0x1dc>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d10e      	bne.n	8001278 <HAL_I2C_Init+0x1bc>
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	1e58      	subs	r0, r3, #1
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6859      	ldr	r1, [r3, #4]
 8001262:	460b      	mov	r3, r1
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	440b      	add	r3, r1
 8001268:	fbb0 f3f3 	udiv	r3, r0, r3
 800126c:	3301      	adds	r3, #1
 800126e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001272:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001276:	e00f      	b.n	8001298 <HAL_I2C_Init+0x1dc>
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	1e58      	subs	r0, r3, #1
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6859      	ldr	r1, [r3, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	440b      	add	r3, r1
 8001286:	0099      	lsls	r1, r3, #2
 8001288:	440b      	add	r3, r1
 800128a:	fbb0 f3f3 	udiv	r3, r0, r3
 800128e:	3301      	adds	r3, #1
 8001290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001294:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001298:	6879      	ldr	r1, [r7, #4]
 800129a:	6809      	ldr	r1, [r1, #0]
 800129c:	4313      	orrs	r3, r2
 800129e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	69da      	ldr	r2, [r3, #28]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a1b      	ldr	r3, [r3, #32]
 80012b2:	431a      	orrs	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	430a      	orrs	r2, r1
 80012ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80012c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	6911      	ldr	r1, [r2, #16]
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	68d2      	ldr	r2, [r2, #12]
 80012d2:	4311      	orrs	r1, r2
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	6812      	ldr	r2, [r2, #0]
 80012d8:	430b      	orrs	r3, r1
 80012da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	695a      	ldr	r2, [r3, #20]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	431a      	orrs	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	430a      	orrs	r2, r1
 80012f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f042 0201 	orr.w	r2, r2, #1
 8001306:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2220      	movs	r2, #32
 8001312:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	000186a0 	.word	0x000186a0
 8001334:	001e847f 	.word	0x001e847f
 8001338:	003d08ff 	.word	0x003d08ff
 800133c:	431bde83 	.word	0x431bde83
 8001340:	10624dd3 	.word	0x10624dd3

08001344 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001356:	2b80      	cmp	r3, #128	@ 0x80
 8001358:	d103      	bne.n	8001362 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2200      	movs	r2, #0
 8001360:	611a      	str	r2, [r3, #16]
  }
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr

0800136c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b088      	sub	sp, #32
 8001370:	af02      	add	r7, sp, #8
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	607a      	str	r2, [r7, #4]
 8001376:	461a      	mov	r2, r3
 8001378:	460b      	mov	r3, r1
 800137a:	817b      	strh	r3, [r7, #10]
 800137c:	4613      	mov	r3, r2
 800137e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001380:	f7ff fb04 	bl	800098c <HAL_GetTick>
 8001384:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b20      	cmp	r3, #32
 8001390:	f040 80e0 	bne.w	8001554 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	2319      	movs	r3, #25
 800139a:	2201      	movs	r2, #1
 800139c:	4970      	ldr	r1, [pc, #448]	@ (8001560 <HAL_I2C_Master_Transmit+0x1f4>)
 800139e:	68f8      	ldr	r0, [r7, #12]
 80013a0:	f001 fcd0 	bl	8002d44 <I2C_WaitOnFlagUntilTimeout>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80013aa:	2302      	movs	r3, #2
 80013ac:	e0d3      	b.n	8001556 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d101      	bne.n	80013bc <HAL_I2C_Master_Transmit+0x50>
 80013b8:	2302      	movs	r3, #2
 80013ba:	e0cc      	b.n	8001556 <HAL_I2C_Master_Transmit+0x1ea>
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d007      	beq.n	80013e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f042 0201 	orr.w	r2, r2, #1
 80013e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80013f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2221      	movs	r2, #33	@ 0x21
 80013f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2210      	movs	r2, #16
 80013fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2200      	movs	r2, #0
 8001406:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	893a      	ldrh	r2, [r7, #8]
 8001412:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001418:	b29a      	uxth	r2, r3
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	4a50      	ldr	r2, [pc, #320]	@ (8001564 <HAL_I2C_Master_Transmit+0x1f8>)
 8001422:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001424:	8979      	ldrh	r1, [r7, #10]
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	6a3a      	ldr	r2, [r7, #32]
 800142a:	68f8      	ldr	r0, [r7, #12]
 800142c:	f001 fb60 	bl	8002af0 <I2C_MasterRequestWrite>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e08d      	b.n	8001556 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800143a:	2300      	movs	r3, #0
 800143c:	613b      	str	r3, [r7, #16]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	695b      	ldr	r3, [r3, #20]
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001450:	e066      	b.n	8001520 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	6a39      	ldr	r1, [r7, #32]
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	f001 fd8e 	bl	8002f78 <I2C_WaitOnTXEFlagUntilTimeout>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d00d      	beq.n	800147e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001466:	2b04      	cmp	r3, #4
 8001468:	d107      	bne.n	800147a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001478:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e06b      	b.n	8001556 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001482:	781a      	ldrb	r2, [r3, #0]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800148e:	1c5a      	adds	r2, r3, #1
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001498:	b29b      	uxth	r3, r3
 800149a:	3b01      	subs	r3, #1
 800149c:	b29a      	uxth	r2, r3
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014a6:	3b01      	subs	r3, #1
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	695b      	ldr	r3, [r3, #20]
 80014b4:	f003 0304 	and.w	r3, r3, #4
 80014b8:	2b04      	cmp	r3, #4
 80014ba:	d11b      	bne.n	80014f4 <HAL_I2C_Master_Transmit+0x188>
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d017      	beq.n	80014f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c8:	781a      	ldrb	r2, [r3, #0]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d4:	1c5a      	adds	r2, r3, #1
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014de:	b29b      	uxth	r3, r3
 80014e0:	3b01      	subs	r3, #1
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014ec:	3b01      	subs	r3, #1
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014f4:	697a      	ldr	r2, [r7, #20]
 80014f6:	6a39      	ldr	r1, [r7, #32]
 80014f8:	68f8      	ldr	r0, [r7, #12]
 80014fa:	f001 fd85 	bl	8003008 <I2C_WaitOnBTFFlagUntilTimeout>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d00d      	beq.n	8001520 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001508:	2b04      	cmp	r3, #4
 800150a:	d107      	bne.n	800151c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800151a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e01a      	b.n	8001556 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001524:	2b00      	cmp	r3, #0
 8001526:	d194      	bne.n	8001452 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001536:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2220      	movs	r2, #32
 800153c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2200      	movs	r2, #0
 8001544:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001550:	2300      	movs	r3, #0
 8001552:	e000      	b.n	8001556 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001554:	2302      	movs	r3, #2
  }
}
 8001556:	4618      	mov	r0, r3
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	00100002 	.word	0x00100002
 8001564:	ffff0000 	.word	0xffff0000

08001568 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b088      	sub	sp, #32
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001570:	2300      	movs	r3, #0
 8001572:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001580:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001588:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001590:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001592:	7bfb      	ldrb	r3, [r7, #15]
 8001594:	2b10      	cmp	r3, #16
 8001596:	d003      	beq.n	80015a0 <HAL_I2C_EV_IRQHandler+0x38>
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	2b40      	cmp	r3, #64	@ 0x40
 800159c:	f040 80b1 	bne.w	8001702 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d10d      	bne.n	80015d6 <HAL_I2C_EV_IRQHandler+0x6e>
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80015c0:	d003      	beq.n	80015ca <HAL_I2C_EV_IRQHandler+0x62>
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80015c8:	d101      	bne.n	80015ce <HAL_I2C_EV_IRQHandler+0x66>
 80015ca:	2301      	movs	r3, #1
 80015cc:	e000      	b.n	80015d0 <HAL_I2C_EV_IRQHandler+0x68>
 80015ce:	2300      	movs	r3, #0
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	f000 8114 	beq.w	80017fe <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d00b      	beq.n	80015f8 <HAL_I2C_EV_IRQHandler+0x90>
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d006      	beq.n	80015f8 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f001 fdb4 	bl	8003158 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f000 fccd 	bl	8001f90 <I2C_Master_SB>
 80015f6:	e083      	b.n	8001700 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f003 0308 	and.w	r3, r3, #8
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d008      	beq.n	8001614 <HAL_I2C_EV_IRQHandler+0xac>
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001608:	2b00      	cmp	r3, #0
 800160a:	d003      	beq.n	8001614 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f000 fd44 	bl	800209a <I2C_Master_ADD10>
 8001612:	e075      	b.n	8001700 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d008      	beq.n	8001630 <HAL_I2C_EV_IRQHandler+0xc8>
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f000 fd5f 	bl	80020ec <I2C_Master_ADDR>
 800162e:	e067      	b.n	8001700 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	f003 0304 	and.w	r3, r3, #4
 8001636:	2b00      	cmp	r3, #0
 8001638:	d036      	beq.n	80016a8 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001644:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001648:	f000 80db 	beq.w	8001802 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001652:	2b00      	cmp	r3, #0
 8001654:	d00d      	beq.n	8001672 <HAL_I2C_EV_IRQHandler+0x10a>
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800165c:	2b00      	cmp	r3, #0
 800165e:	d008      	beq.n	8001672 <HAL_I2C_EV_IRQHandler+0x10a>
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f003 0304 	and.w	r3, r3, #4
 8001666:	2b00      	cmp	r3, #0
 8001668:	d103      	bne.n	8001672 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 f92d 	bl	80018ca <I2C_MasterTransmit_TXE>
 8001670:	e046      	b.n	8001700 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	2b00      	cmp	r3, #0
 800167a:	f000 80c2 	beq.w	8001802 <HAL_I2C_EV_IRQHandler+0x29a>
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001684:	2b00      	cmp	r3, #0
 8001686:	f000 80bc 	beq.w	8001802 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800168a:	7bbb      	ldrb	r3, [r7, #14]
 800168c:	2b21      	cmp	r3, #33	@ 0x21
 800168e:	d103      	bne.n	8001698 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f000 f9b6 	bl	8001a02 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001696:	e0b4      	b.n	8001802 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001698:	7bfb      	ldrb	r3, [r7, #15]
 800169a:	2b40      	cmp	r3, #64	@ 0x40
 800169c:	f040 80b1 	bne.w	8001802 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f000 fa24 	bl	8001aee <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016a6:	e0ac      	b.n	8001802 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80016b6:	f000 80a4 	beq.w	8001802 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d00d      	beq.n	80016e0 <HAL_I2C_EV_IRQHandler+0x178>
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d008      	beq.n	80016e0 <HAL_I2C_EV_IRQHandler+0x178>
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	f003 0304 	and.w	r3, r3, #4
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d103      	bne.n	80016e0 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f000 faa0 	bl	8001c1e <I2C_MasterReceive_RXNE>
 80016de:	e00f      	b.n	8001700 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	f003 0304 	and.w	r3, r3, #4
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 808b 	beq.w	8001802 <HAL_I2C_EV_IRQHandler+0x29a>
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f000 8085 	beq.w	8001802 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f000 fb58 	bl	8001dae <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016fe:	e080      	b.n	8001802 <HAL_I2C_EV_IRQHandler+0x29a>
 8001700:	e07f      	b.n	8001802 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001706:	2b00      	cmp	r3, #0
 8001708:	d004      	beq.n	8001714 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	695b      	ldr	r3, [r3, #20]
 8001710:	61fb      	str	r3, [r7, #28]
 8001712:	e007      	b.n	8001724 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d011      	beq.n	8001752 <HAL_I2C_EV_IRQHandler+0x1ea>
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001734:	2b00      	cmp	r3, #0
 8001736:	d00c      	beq.n	8001752 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173c:	2b00      	cmp	r3, #0
 800173e:	d003      	beq.n	8001748 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001748:	69b9      	ldr	r1, [r7, #24]
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 ff25 	bl	800259a <I2C_Slave_ADDR>
 8001750:	e05a      	b.n	8001808 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	f003 0310 	and.w	r3, r3, #16
 8001758:	2b00      	cmp	r3, #0
 800175a:	d008      	beq.n	800176e <HAL_I2C_EV_IRQHandler+0x206>
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 ff60 	bl	800262c <I2C_Slave_STOPF>
 800176c:	e04c      	b.n	8001808 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800176e:	7bbb      	ldrb	r3, [r7, #14]
 8001770:	2b21      	cmp	r3, #33	@ 0x21
 8001772:	d002      	beq.n	800177a <HAL_I2C_EV_IRQHandler+0x212>
 8001774:	7bbb      	ldrb	r3, [r7, #14]
 8001776:	2b29      	cmp	r3, #41	@ 0x29
 8001778:	d120      	bne.n	80017bc <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001780:	2b00      	cmp	r3, #0
 8001782:	d00d      	beq.n	80017a0 <HAL_I2C_EV_IRQHandler+0x238>
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800178a:	2b00      	cmp	r3, #0
 800178c:	d008      	beq.n	80017a0 <HAL_I2C_EV_IRQHandler+0x238>
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	2b00      	cmp	r3, #0
 8001796:	d103      	bne.n	80017a0 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f000 fe42 	bl	8002422 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800179e:	e032      	b.n	8001806 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f003 0304 	and.w	r3, r3, #4
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d02d      	beq.n	8001806 <HAL_I2C_EV_IRQHandler+0x29e>
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d028      	beq.n	8001806 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f000 fe71 	bl	800249c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80017ba:	e024      	b.n	8001806 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00d      	beq.n	80017e2 <HAL_I2C_EV_IRQHandler+0x27a>
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d008      	beq.n	80017e2 <HAL_I2C_EV_IRQHandler+0x27a>
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f003 0304 	and.w	r3, r3, #4
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d103      	bne.n	80017e2 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 fe7e 	bl	80024dc <I2C_SlaveReceive_RXNE>
 80017e0:	e012      	b.n	8001808 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d00d      	beq.n	8001808 <HAL_I2C_EV_IRQHandler+0x2a0>
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d008      	beq.n	8001808 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f000 feae 	bl	8002558 <I2C_SlaveReceive_BTF>
 80017fc:	e004      	b.n	8001808 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80017fe:	bf00      	nop
 8001800:	e002      	b.n	8001808 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001802:	bf00      	nop
 8001804:	e000      	b.n	8001808 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001806:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001808:	3720      	adds	r7, #32
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr

08001820 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr

08001832 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr

08001844 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr

08001856 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
 800185e:	460b      	mov	r3, r1
 8001860:	70fb      	strb	r3, [r7, #3]
 8001862:	4613      	mov	r3, r2
 8001864:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr

08001870 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr

08001882 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr

08001894 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr

080018a6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr

080018b8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bc80      	pop	{r7}
 80018c8:	4770      	bx	lr

080018ca <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b084      	sub	sp, #16
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018d8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80018e0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018e6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d150      	bne.n	8001992 <I2C_MasterTransmit_TXE+0xc8>
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
 80018f2:	2b21      	cmp	r3, #33	@ 0x21
 80018f4:	d14d      	bne.n	8001992 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	d01d      	beq.n	8001938 <I2C_MasterTransmit_TXE+0x6e>
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	2b20      	cmp	r3, #32
 8001900:	d01a      	beq.n	8001938 <I2C_MasterTransmit_TXE+0x6e>
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001908:	d016      	beq.n	8001938 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	685a      	ldr	r2, [r3, #4]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001918:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2211      	movs	r2, #17
 800191e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2220      	movs	r2, #32
 800192c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff ff6c 	bl	800180e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001936:	e060      	b.n	80019fa <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001946:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001956:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2220      	movs	r2, #32
 8001962:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b40      	cmp	r3, #64	@ 0x40
 8001970:	d107      	bne.n	8001982 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff ff81 	bl	8001882 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001980:	e03b      	b.n	80019fa <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff ff3f 	bl	800180e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001990:	e033      	b.n	80019fa <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001992:	7bfb      	ldrb	r3, [r7, #15]
 8001994:	2b21      	cmp	r3, #33	@ 0x21
 8001996:	d005      	beq.n	80019a4 <I2C_MasterTransmit_TXE+0xda>
 8001998:	7bbb      	ldrb	r3, [r7, #14]
 800199a:	2b40      	cmp	r3, #64	@ 0x40
 800199c:	d12d      	bne.n	80019fa <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	2b22      	cmp	r3, #34	@ 0x22
 80019a2:	d12a      	bne.n	80019fa <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d108      	bne.n	80019c0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	685a      	ldr	r2, [r3, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019bc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80019be:	e01c      	b.n	80019fa <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b40      	cmp	r3, #64	@ 0x40
 80019ca:	d103      	bne.n	80019d4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f000 f88e 	bl	8001aee <I2C_MemoryTransmit_TXE_BTF>
}
 80019d2:	e012      	b.n	80019fa <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d8:	781a      	ldrb	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e4:	1c5a      	adds	r2, r3, #1
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	3b01      	subs	r3, #1
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80019f8:	e7ff      	b.n	80019fa <I2C_MasterTransmit_TXE+0x130>
 80019fa:	bf00      	nop
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b084      	sub	sp, #16
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a0e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b21      	cmp	r3, #33	@ 0x21
 8001a1a:	d164      	bne.n	8001ae6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d012      	beq.n	8001a4c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a2a:	781a      	ldrb	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a36:	1c5a      	adds	r2, r3, #1
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	3b01      	subs	r3, #1
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001a4a:	e04c      	b.n	8001ae6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2b08      	cmp	r3, #8
 8001a50:	d01d      	beq.n	8001a8e <I2C_MasterTransmit_BTF+0x8c>
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2b20      	cmp	r3, #32
 8001a56:	d01a      	beq.n	8001a8e <I2C_MasterTransmit_BTF+0x8c>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001a5e:	d016      	beq.n	8001a8e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001a6e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2211      	movs	r2, #17
 8001a74:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2220      	movs	r2, #32
 8001a82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff fec1 	bl	800180e <HAL_I2C_MasterTxCpltCallback>
}
 8001a8c:	e02b      	b.n	8001ae6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001a9c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001aac:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2220      	movs	r2, #32
 8001ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b40      	cmp	r3, #64	@ 0x40
 8001ac6:	d107      	bne.n	8001ad8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff fed6 	bl	8001882 <HAL_I2C_MemTxCpltCallback>
}
 8001ad6:	e006      	b.n	8001ae6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff fe94 	bl	800180e <HAL_I2C_MasterTxCpltCallback>
}
 8001ae6:	bf00      	nop
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b084      	sub	sp, #16
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001afc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d11d      	bne.n	8001b42 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d10b      	bne.n	8001b26 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b1e:	1c9a      	adds	r2, r3, #2
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8001b24:	e077      	b.n	8001c16 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	121b      	asrs	r3, r3, #8
 8001b2e:	b2da      	uxtb	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b3a:	1c5a      	adds	r2, r3, #1
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001b40:	e069      	b.n	8001c16 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d10b      	bne.n	8001b62 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001b60:	e059      	b.n	8001c16 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d152      	bne.n	8001c10 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001b6a:	7bfb      	ldrb	r3, [r7, #15]
 8001b6c:	2b22      	cmp	r3, #34	@ 0x22
 8001b6e:	d10d      	bne.n	8001b8c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b7e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b84:	1c5a      	adds	r2, r3, #1
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001b8a:	e044      	b.n	8001c16 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d015      	beq.n	8001bc2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
 8001b98:	2b21      	cmp	r3, #33	@ 0x21
 8001b9a:	d112      	bne.n	8001bc2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba0:	781a      	ldrb	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bac:	1c5a      	adds	r2, r3, #1
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001bc0:	e029      	b.n	8001c16 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d124      	bne.n	8001c16 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8001bcc:	7bfb      	ldrb	r3, [r7, #15]
 8001bce:	2b21      	cmp	r3, #33	@ 0x21
 8001bd0:	d121      	bne.n	8001c16 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001be0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bf0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2220      	movs	r2, #32
 8001bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff fe3a 	bl	8001882 <HAL_I2C_MemTxCpltCallback>
}
 8001c0e:	e002      	b.n	8001c16 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7ff fb97 	bl	8001344 <I2C_Flush_DR>
}
 8001c16:	bf00      	nop
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b084      	sub	sp, #16
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b22      	cmp	r3, #34	@ 0x22
 8001c30:	f040 80b9 	bne.w	8001da6 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c38:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	2b03      	cmp	r3, #3
 8001c46:	d921      	bls.n	8001c8c <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	691a      	ldr	r2, [r3, #16]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c5a:	1c5a      	adds	r2, r3, #1
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	3b01      	subs	r3, #1
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	2b03      	cmp	r3, #3
 8001c76:	f040 8096 	bne.w	8001da6 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c88:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8001c8a:	e08c      	b.n	8001da6 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d07f      	beq.n	8001d94 <I2C_MasterReceive_RXNE+0x176>
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d002      	beq.n	8001ca0 <I2C_MasterReceive_RXNE+0x82>
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d179      	bne.n	8001d94 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f001 f9f9 	bl	8003098 <I2C_WaitOnSTOPRequestThroughIT>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d14c      	bne.n	8001d46 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cba:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001cca:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	691a      	ldr	r2, [r3, #16]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cde:	1c5a      	adds	r2, r3, #1
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	3b01      	subs	r3, #1
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2220      	movs	r2, #32
 8001cf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b40      	cmp	r3, #64	@ 0x40
 8001d04:	d10a      	bne.n	8001d1c <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7ff fdbd 	bl	8001894 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001d1a:	e044      	b.n	8001da6 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2b08      	cmp	r3, #8
 8001d28:	d002      	beq.n	8001d30 <I2C_MasterReceive_RXNE+0x112>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2b20      	cmp	r3, #32
 8001d2e:	d103      	bne.n	8001d38 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d36:	e002      	b.n	8001d3e <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2212      	movs	r2, #18
 8001d3c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7ff fd6e 	bl	8001820 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001d44:	e02f      	b.n	8001da6 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001d54:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	691a      	ldr	r2, [r3, #16]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d68:	1c5a      	adds	r2, r3, #1
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	3b01      	subs	r3, #1
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2220      	movs	r2, #32
 8001d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7ff fd8a 	bl	80018a6 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001d92:	e008      	b.n	8001da6 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001da2:	605a      	str	r2, [r3, #4]
}
 8001da4:	e7ff      	b.n	8001da6 <I2C_MasterReceive_RXNE+0x188>
 8001da6:	bf00      	nop
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b084      	sub	sp, #16
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dba:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	d11b      	bne.n	8001dfe <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001dd4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	691a      	ldr	r2, [r3, #16]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de8:	1c5a      	adds	r2, r3, #1
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	3b01      	subs	r3, #1
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8001dfc:	e0c4      	b.n	8001f88 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	2b03      	cmp	r3, #3
 8001e06:	d129      	bne.n	8001e5c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e16:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	d00a      	beq.n	8001e34 <I2C_MasterReceive_BTF+0x86>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d007      	beq.n	8001e34 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e32:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	691a      	ldr	r2, [r3, #16]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e46:	1c5a      	adds	r2, r3, #1
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	3b01      	subs	r3, #1
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001e5a:	e095      	b.n	8001f88 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d17d      	bne.n	8001f62 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d002      	beq.n	8001e72 <I2C_MasterReceive_BTF+0xc4>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2b10      	cmp	r3, #16
 8001e70:	d108      	bne.n	8001e84 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	e016      	b.n	8001eb2 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	d002      	beq.n	8001e90 <I2C_MasterReceive_BTF+0xe2>
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d108      	bne.n	8001ea2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	e007      	b.n	8001eb2 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001eb0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	691a      	ldr	r2, [r3, #16]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec4:	1c5a      	adds	r2, r3, #1
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	691a      	ldr	r2, [r3, #16]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eea:	1c5a      	adds	r2, r3, #1
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001f0c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2220      	movs	r2, #32
 8001f12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b40      	cmp	r3, #64	@ 0x40
 8001f20:	d10a      	bne.n	8001f38 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7ff fcaf 	bl	8001894 <HAL_I2C_MemRxCpltCallback>
}
 8001f36:	e027      	b.n	8001f88 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2b08      	cmp	r3, #8
 8001f44:	d002      	beq.n	8001f4c <I2C_MasterReceive_BTF+0x19e>
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2b20      	cmp	r3, #32
 8001f4a:	d103      	bne.n	8001f54 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f52:	e002      	b.n	8001f5a <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2212      	movs	r2, #18
 8001f58:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff fc60 	bl	8001820 <HAL_I2C_MasterRxCpltCallback>
}
 8001f60:	e012      	b.n	8001f88 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	691a      	ldr	r2, [r3, #16]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f74:	1c5a      	adds	r2, r3, #1
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	3b01      	subs	r3, #1
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001f88:	bf00      	nop
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b40      	cmp	r3, #64	@ 0x40
 8001fa2:	d117      	bne.n	8001fd4 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d109      	bne.n	8001fc0 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001fbc:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8001fbe:	e067      	b.n	8002090 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	611a      	str	r2, [r3, #16]
}
 8001fd2:	e05d      	b.n	8002090 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001fdc:	d133      	bne.n	8002046 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b21      	cmp	r3, #33	@ 0x21
 8001fe8:	d109      	bne.n	8001ffe <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001ffa:	611a      	str	r2, [r3, #16]
 8001ffc:	e008      	b.n	8002010 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002002:	b2db      	uxtb	r3, r3
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	b2da      	uxtb	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002014:	2b00      	cmp	r3, #0
 8002016:	d004      	beq.n	8002022 <I2C_Master_SB+0x92>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800201c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800201e:	2b00      	cmp	r3, #0
 8002020:	d108      	bne.n	8002034 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002026:	2b00      	cmp	r3, #0
 8002028:	d032      	beq.n	8002090 <I2C_Master_SB+0x100>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800202e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002030:	2b00      	cmp	r3, #0
 8002032:	d02d      	beq.n	8002090 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002042:	605a      	str	r2, [r3, #4]
}
 8002044:	e024      	b.n	8002090 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10e      	bne.n	800206c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002052:	b29b      	uxth	r3, r3
 8002054:	11db      	asrs	r3, r3, #7
 8002056:	b2db      	uxtb	r3, r3
 8002058:	f003 0306 	and.w	r3, r3, #6
 800205c:	b2db      	uxtb	r3, r3
 800205e:	f063 030f 	orn	r3, r3, #15
 8002062:	b2da      	uxtb	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	611a      	str	r2, [r3, #16]
}
 800206a:	e011      	b.n	8002090 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002070:	2b01      	cmp	r3, #1
 8002072:	d10d      	bne.n	8002090 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002078:	b29b      	uxth	r3, r3
 800207a:	11db      	asrs	r3, r3, #7
 800207c:	b2db      	uxtb	r3, r3
 800207e:	f003 0306 	and.w	r3, r3, #6
 8002082:	b2db      	uxtb	r3, r3
 8002084:	f063 030e 	orn	r3, r3, #14
 8002088:	b2da      	uxtb	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	611a      	str	r2, [r3, #16]
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr

0800209a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d004      	beq.n	80020c0 <I2C_Master_ADD10+0x26>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d108      	bne.n	80020d2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00c      	beq.n	80020e2 <I2C_Master_ADD10+0x48>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d007      	beq.n	80020e2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020e0:	605a      	str	r2, [r3, #4]
  }
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr

080020ec <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b091      	sub	sp, #68	@ 0x44
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80020fa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002102:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002108:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b22      	cmp	r3, #34	@ 0x22
 8002114:	f040 8174 	bne.w	8002400 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800211c:	2b00      	cmp	r3, #0
 800211e:	d10f      	bne.n	8002140 <I2C_Master_ADDR+0x54>
 8002120:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002124:	2b40      	cmp	r3, #64	@ 0x40
 8002126:	d10b      	bne.n	8002140 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002128:	2300      	movs	r3, #0
 800212a:	633b      	str	r3, [r7, #48]	@ 0x30
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	633b      	str	r3, [r7, #48]	@ 0x30
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	633b      	str	r3, [r7, #48]	@ 0x30
 800213c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800213e:	e16b      	b.n	8002418 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002144:	2b00      	cmp	r3, #0
 8002146:	d11d      	bne.n	8002184 <I2C_Master_ADDR+0x98>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002150:	d118      	bne.n	8002184 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002152:	2300      	movs	r3, #0
 8002154:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002176:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800217c:	1c5a      	adds	r2, r3, #1
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	651a      	str	r2, [r3, #80]	@ 0x50
 8002182:	e149      	b.n	8002418 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002188:	b29b      	uxth	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d113      	bne.n	80021b6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800218e:	2300      	movs	r3, #0
 8002190:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	62bb      	str	r3, [r7, #40]	@ 0x28
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	e120      	b.n	80023f8 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	2b01      	cmp	r3, #1
 80021be:	f040 808a 	bne.w	80022d6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80021c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021c4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80021c8:	d137      	bne.n	800223a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021d8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80021e8:	d113      	bne.n	8002212 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021f8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021fa:	2300      	movs	r3, #0
 80021fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	627b      	str	r3, [r7, #36]	@ 0x24
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	627b      	str	r3, [r7, #36]	@ 0x24
 800220e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002210:	e0f2      	b.n	80023f8 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002212:	2300      	movs	r3, #0
 8002214:	623b      	str	r3, [r7, #32]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	623b      	str	r3, [r7, #32]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	623b      	str	r3, [r7, #32]
 8002226:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	e0de      	b.n	80023f8 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800223a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800223c:	2b08      	cmp	r3, #8
 800223e:	d02e      	beq.n	800229e <I2C_Master_ADDR+0x1b2>
 8002240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002242:	2b20      	cmp	r3, #32
 8002244:	d02b      	beq.n	800229e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002248:	2b12      	cmp	r3, #18
 800224a:	d102      	bne.n	8002252 <I2C_Master_ADDR+0x166>
 800224c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800224e:	2b01      	cmp	r3, #1
 8002250:	d125      	bne.n	800229e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002254:	2b04      	cmp	r3, #4
 8002256:	d00e      	beq.n	8002276 <I2C_Master_ADDR+0x18a>
 8002258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800225a:	2b02      	cmp	r3, #2
 800225c:	d00b      	beq.n	8002276 <I2C_Master_ADDR+0x18a>
 800225e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002260:	2b10      	cmp	r3, #16
 8002262:	d008      	beq.n	8002276 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	e007      	b.n	8002286 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002284:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002286:	2300      	movs	r3, #0
 8002288:	61fb      	str	r3, [r7, #28]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	61fb      	str	r3, [r7, #28]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	61fb      	str	r3, [r7, #28]
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	e0ac      	b.n	80023f8 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022ac:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ae:	2300      	movs	r3, #0
 80022b0:	61bb      	str	r3, [r7, #24]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	61bb      	str	r3, [r7, #24]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	61bb      	str	r3, [r7, #24]
 80022c2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	e090      	b.n	80023f8 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022da:	b29b      	uxth	r3, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d158      	bne.n	8002392 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80022e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d021      	beq.n	800232a <I2C_Master_ADDR+0x23e>
 80022e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d01e      	beq.n	800232a <I2C_Master_ADDR+0x23e>
 80022ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022ee:	2b10      	cmp	r3, #16
 80022f0:	d01b      	beq.n	800232a <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002300:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002302:	2300      	movs	r3, #0
 8002304:	617b      	str	r3, [r7, #20]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	617b      	str	r3, [r7, #20]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	617b      	str	r3, [r7, #20]
 8002316:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	e012      	b.n	8002350 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002338:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800233a:	2300      	movs	r3, #0
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	613b      	str	r3, [r7, #16]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	613b      	str	r3, [r7, #16]
 800234e:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800235a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800235e:	d14b      	bne.n	80023f8 <I2C_Master_ADDR+0x30c>
 8002360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002362:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002366:	d00b      	beq.n	8002380 <I2C_Master_ADDR+0x294>
 8002368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800236a:	2b01      	cmp	r3, #1
 800236c:	d008      	beq.n	8002380 <I2C_Master_ADDR+0x294>
 800236e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002370:	2b08      	cmp	r3, #8
 8002372:	d005      	beq.n	8002380 <I2C_Master_ADDR+0x294>
 8002374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002376:	2b10      	cmp	r3, #16
 8002378:	d002      	beq.n	8002380 <I2C_Master_ADDR+0x294>
 800237a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800237c:	2b20      	cmp	r3, #32
 800237e:	d13b      	bne.n	80023f8 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800238e:	605a      	str	r2, [r3, #4]
 8002390:	e032      	b.n	80023f8 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80023a0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80023b0:	d117      	bne.n	80023e2 <I2C_Master_ADDR+0x2f6>
 80023b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80023b8:	d00b      	beq.n	80023d2 <I2C_Master_ADDR+0x2e6>
 80023ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d008      	beq.n	80023d2 <I2C_Master_ADDR+0x2e6>
 80023c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023c2:	2b08      	cmp	r3, #8
 80023c4:	d005      	beq.n	80023d2 <I2C_Master_ADDR+0x2e6>
 80023c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023c8:	2b10      	cmp	r3, #16
 80023ca:	d002      	beq.n	80023d2 <I2C_Master_ADDR+0x2e6>
 80023cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023ce:	2b20      	cmp	r3, #32
 80023d0:	d107      	bne.n	80023e2 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	685a      	ldr	r2, [r3, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80023e0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80023fe:	e00b      	b.n	8002418 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002400:	2300      	movs	r3, #0
 8002402:	60bb      	str	r3, [r7, #8]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	60bb      	str	r3, [r7, #8]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	60bb      	str	r3, [r7, #8]
 8002414:	68bb      	ldr	r3, [r7, #8]
}
 8002416:	e7ff      	b.n	8002418 <I2C_Master_ADDR+0x32c>
 8002418:	bf00      	nop
 800241a:	3744      	adds	r7, #68	@ 0x44
 800241c:	46bd      	mov	sp, r7
 800241e:	bc80      	pop	{r7}
 8002420:	4770      	bx	lr

08002422 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b084      	sub	sp, #16
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002430:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002436:	b29b      	uxth	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	d02b      	beq.n	8002494 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002440:	781a      	ldrb	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244c:	1c5a      	adds	r2, r3, #1
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002456:	b29b      	uxth	r3, r3
 8002458:	3b01      	subs	r3, #1
 800245a:	b29a      	uxth	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002464:	b29b      	uxth	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d114      	bne.n	8002494 <I2C_SlaveTransmit_TXE+0x72>
 800246a:	7bfb      	ldrb	r3, [r7, #15]
 800246c:	2b29      	cmp	r3, #41	@ 0x29
 800246e:	d111      	bne.n	8002494 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	685a      	ldr	r2, [r3, #4]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800247e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2221      	movs	r2, #33	@ 0x21
 8002484:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2228      	movs	r2, #40	@ 0x28
 800248a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7ff f9cf 	bl	8001832 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002494:	bf00      	nop
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d011      	beq.n	80024d2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b2:	781a      	ldrb	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024be:	1c5a      	adds	r2, r3, #1
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	3b01      	subs	r3, #1
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr

080024dc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024ea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d02c      	beq.n	8002550 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002512:	b29b      	uxth	r3, r3
 8002514:	3b01      	subs	r3, #1
 8002516:	b29a      	uxth	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002520:	b29b      	uxth	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d114      	bne.n	8002550 <I2C_SlaveReceive_RXNE+0x74>
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	2b2a      	cmp	r3, #42	@ 0x2a
 800252a:	d111      	bne.n	8002550 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800253a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2222      	movs	r2, #34	@ 0x22
 8002540:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2228      	movs	r2, #40	@ 0x28
 8002546:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7ff f97a 	bl	8001844 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002550:	bf00      	nop
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002564:	b29b      	uxth	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d012      	beq.n	8002590 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	691a      	ldr	r2, [r3, #16]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257c:	1c5a      	adds	r2, r3, #1
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002586:	b29b      	uxth	r3, r3
 8002588:	3b01      	subs	r3, #1
 800258a:	b29a      	uxth	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	bc80      	pop	{r7}
 8002598:	4770      	bx	lr

0800259a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b084      	sub	sp, #16
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
 80025a2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80025a4:	2300      	movs	r3, #0
 80025a6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80025b4:	2b28      	cmp	r3, #40	@ 0x28
 80025b6:	d125      	bne.n	8002604 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025c6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	f003 0304 	and.w	r3, r3, #4
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80025d2:	2301      	movs	r3, #1
 80025d4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d103      	bne.n	80025e8 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	81bb      	strh	r3, [r7, #12]
 80025e6:	e002      	b.n	80025ee <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80025f6:	89ba      	ldrh	r2, [r7, #12]
 80025f8:	7bfb      	ldrb	r3, [r7, #15]
 80025fa:	4619      	mov	r1, r3
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7ff f92a 	bl	8001856 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002602:	e00e      	b.n	8002622 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002604:	2300      	movs	r3, #0
 8002606:	60bb      	str	r3, [r7, #8]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	60bb      	str	r3, [r7, #8]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	60bb      	str	r3, [r7, #8]
 8002618:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8002622:	bf00      	nop
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
	...

0800262c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800263a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800264a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800264c:	2300      	movs	r3, #0
 800264e:	60bb      	str	r3, [r7, #8]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	60bb      	str	r3, [r7, #8]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f042 0201 	orr.w	r2, r2, #1
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002678:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002684:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002688:	d172      	bne.n	8002770 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800268a:	7bfb      	ldrb	r3, [r7, #15]
 800268c:	2b22      	cmp	r3, #34	@ 0x22
 800268e:	d002      	beq.n	8002696 <I2C_Slave_STOPF+0x6a>
 8002690:	7bfb      	ldrb	r3, [r7, #15]
 8002692:	2b2a      	cmp	r3, #42	@ 0x2a
 8002694:	d135      	bne.n	8002702 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	b29a      	uxth	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d005      	beq.n	80026ba <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b2:	f043 0204 	orr.w	r2, r3, #4
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026c8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fe fb4a 	bl	8000d68 <HAL_DMA_GetState>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d049      	beq.n	800276e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026de:	4a69      	ldr	r2, [pc, #420]	@ (8002884 <I2C_Slave_STOPF+0x258>)
 80026e0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fe fac6 	bl	8000c78 <HAL_DMA_Abort_IT>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d03d      	beq.n	800276e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80026fc:	4610      	mov	r0, r2
 80026fe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002700:	e035      	b.n	800276e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	b29a      	uxth	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002714:	b29b      	uxth	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d005      	beq.n	8002726 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271e:	f043 0204 	orr.w	r2, r3, #4
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002734:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800273a:	4618      	mov	r0, r3
 800273c:	f7fe fb14 	bl	8000d68 <HAL_DMA_GetState>
 8002740:	4603      	mov	r3, r0
 8002742:	2b01      	cmp	r3, #1
 8002744:	d014      	beq.n	8002770 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800274a:	4a4e      	ldr	r2, [pc, #312]	@ (8002884 <I2C_Slave_STOPF+0x258>)
 800274c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002752:	4618      	mov	r0, r3
 8002754:	f7fe fa90 	bl	8000c78 <HAL_DMA_Abort_IT>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d008      	beq.n	8002770 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002762:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002768:	4610      	mov	r0, r2
 800276a:	4798      	blx	r3
 800276c:	e000      	b.n	8002770 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800276e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002774:	b29b      	uxth	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d03e      	beq.n	80027f8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b04      	cmp	r3, #4
 8002786:	d112      	bne.n	80027ae <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	691a      	ldr	r2, [r3, #16]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279a:	1c5a      	adds	r2, r3, #1
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	3b01      	subs	r3, #1
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027b8:	2b40      	cmp	r3, #64	@ 0x40
 80027ba:	d112      	bne.n	80027e2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	691a      	ldr	r2, [r3, #16]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ce:	1c5a      	adds	r2, r3, #1
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d8:	b29b      	uxth	r3, r3
 80027da:	3b01      	subs	r3, #1
 80027dc:	b29a      	uxth	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d005      	beq.n	80027f8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f0:	f043 0204 	orr.w	r2, r3, #4
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 f843 	bl	800288c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002806:	e039      	b.n	800287c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002808:	7bfb      	ldrb	r3, [r7, #15]
 800280a:	2b2a      	cmp	r3, #42	@ 0x2a
 800280c:	d109      	bne.n	8002822 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2228      	movs	r2, #40	@ 0x28
 8002818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f7ff f811 	bl	8001844 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b28      	cmp	r3, #40	@ 0x28
 800282c:	d111      	bne.n	8002852 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a15      	ldr	r2, [pc, #84]	@ (8002888 <I2C_Slave_STOPF+0x25c>)
 8002832:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2220      	movs	r2, #32
 800283e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7ff f810 	bl	8001870 <HAL_I2C_ListenCpltCallback>
}
 8002850:	e014      	b.n	800287c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002856:	2b22      	cmp	r3, #34	@ 0x22
 8002858:	d002      	beq.n	8002860 <I2C_Slave_STOPF+0x234>
 800285a:	7bfb      	ldrb	r3, [r7, #15]
 800285c:	2b22      	cmp	r3, #34	@ 0x22
 800285e:	d10d      	bne.n	800287c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2220      	movs	r2, #32
 800286a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7fe ffe4 	bl	8001844 <HAL_I2C_SlaveRxCpltCallback>
}
 800287c:	bf00      	nop
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	08002bf5 	.word	0x08002bf5
 8002888:	ffff0000 	.word	0xffff0000

0800288c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800289a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80028a2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80028a4:	7bbb      	ldrb	r3, [r7, #14]
 80028a6:	2b10      	cmp	r3, #16
 80028a8:	d002      	beq.n	80028b0 <I2C_ITError+0x24>
 80028aa:	7bbb      	ldrb	r3, [r7, #14]
 80028ac:	2b40      	cmp	r3, #64	@ 0x40
 80028ae:	d10a      	bne.n	80028c6 <I2C_ITError+0x3a>
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
 80028b2:	2b22      	cmp	r3, #34	@ 0x22
 80028b4:	d107      	bne.n	80028c6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028c4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
 80028c8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80028cc:	2b28      	cmp	r3, #40	@ 0x28
 80028ce:	d107      	bne.n	80028e0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2228      	movs	r2, #40	@ 0x28
 80028da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80028de:	e015      	b.n	800290c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80028ee:	d00a      	beq.n	8002906 <I2C_ITError+0x7a>
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
 80028f2:	2b60      	cmp	r3, #96	@ 0x60
 80028f4:	d007      	beq.n	8002906 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2220      	movs	r2, #32
 80028fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002916:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800291a:	d162      	bne.n	80029e2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800292a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002930:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b01      	cmp	r3, #1
 8002938:	d020      	beq.n	800297c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800293e:	4a6a      	ldr	r2, [pc, #424]	@ (8002ae8 <I2C_ITError+0x25c>)
 8002940:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002946:	4618      	mov	r0, r3
 8002948:	f7fe f996 	bl	8000c78 <HAL_DMA_Abort_IT>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 8089 	beq.w	8002a66 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0201 	bic.w	r2, r2, #1
 8002962:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2220      	movs	r2, #32
 8002968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002970:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002976:	4610      	mov	r0, r2
 8002978:	4798      	blx	r3
 800297a:	e074      	b.n	8002a66 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002980:	4a59      	ldr	r2, [pc, #356]	@ (8002ae8 <I2C_ITError+0x25c>)
 8002982:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002988:	4618      	mov	r0, r3
 800298a:	f7fe f975 	bl	8000c78 <HAL_DMA_Abort_IT>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d068      	beq.n	8002a66 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800299e:	2b40      	cmp	r3, #64	@ 0x40
 80029a0:	d10b      	bne.n	80029ba <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ac:	b2d2      	uxtb	r2, r2
 80029ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b4:	1c5a      	adds	r2, r3, #1
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 0201 	bic.w	r2, r2, #1
 80029c8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2220      	movs	r2, #32
 80029ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80029dc:	4610      	mov	r0, r2
 80029de:	4798      	blx	r3
 80029e0:	e041      	b.n	8002a66 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b60      	cmp	r3, #96	@ 0x60
 80029ec:	d125      	bne.n	8002a3a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2220      	movs	r2, #32
 80029f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a06:	2b40      	cmp	r3, #64	@ 0x40
 8002a08:	d10b      	bne.n	8002a22 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	691a      	ldr	r2, [r3, #16]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1c:	1c5a      	adds	r2, r3, #1
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 0201 	bic.w	r2, r2, #1
 8002a30:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7fe ff40 	bl	80018b8 <HAL_I2C_AbortCpltCallback>
 8002a38:	e015      	b.n	8002a66 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a44:	2b40      	cmp	r3, #64	@ 0x40
 8002a46:	d10b      	bne.n	8002a60 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	691a      	ldr	r2, [r3, #16]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5a:	1c5a      	adds	r2, r3, #1
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7fe ff20 	bl	80018a6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10e      	bne.n	8002a94 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d109      	bne.n	8002a94 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d104      	bne.n	8002a94 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d007      	beq.n	8002aa4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002aa2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002aaa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b04      	cmp	r3, #4
 8002ab6:	d113      	bne.n	8002ae0 <I2C_ITError+0x254>
 8002ab8:	7bfb      	ldrb	r3, [r7, #15]
 8002aba:	2b28      	cmp	r3, #40	@ 0x28
 8002abc:	d110      	bne.n	8002ae0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a0a      	ldr	r2, [pc, #40]	@ (8002aec <I2C_ITError+0x260>)
 8002ac2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2220      	movs	r2, #32
 8002ace:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7fe fec8 	bl	8001870 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002ae0:	bf00      	nop
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	08002bf5 	.word	0x08002bf5
 8002aec:	ffff0000 	.word	0xffff0000

08002af0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b088      	sub	sp, #32
 8002af4:	af02      	add	r7, sp, #8
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	607a      	str	r2, [r7, #4]
 8002afa:	603b      	str	r3, [r7, #0]
 8002afc:	460b      	mov	r3, r1
 8002afe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b04:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	2b08      	cmp	r3, #8
 8002b0a:	d006      	beq.n	8002b1a <I2C_MasterRequestWrite+0x2a>
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d003      	beq.n	8002b1a <I2C_MasterRequestWrite+0x2a>
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b18:	d108      	bne.n	8002b2c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	e00b      	b.n	8002b44 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b30:	2b12      	cmp	r3, #18
 8002b32:	d107      	bne.n	8002b44 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b42:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f000 f8f7 	bl	8002d44 <I2C_WaitOnFlagUntilTimeout>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00d      	beq.n	8002b78 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b6a:	d103      	bne.n	8002b74 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b72:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e035      	b.n	8002be4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b80:	d108      	bne.n	8002b94 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b82:	897b      	ldrh	r3, [r7, #10]
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	461a      	mov	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b90:	611a      	str	r2, [r3, #16]
 8002b92:	e01b      	b.n	8002bcc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b94:	897b      	ldrh	r3, [r7, #10]
 8002b96:	11db      	asrs	r3, r3, #7
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	f003 0306 	and.w	r3, r3, #6
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	f063 030f 	orn	r3, r3, #15
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	490e      	ldr	r1, [pc, #56]	@ (8002bec <I2C_MasterRequestWrite+0xfc>)
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f000 f940 	bl	8002e38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e010      	b.n	8002be4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002bc2:	897b      	ldrh	r3, [r7, #10]
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	4907      	ldr	r1, [pc, #28]	@ (8002bf0 <I2C_MasterRequestWrite+0x100>)
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f000 f930 	bl	8002e38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e000      	b.n	8002be4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3718      	adds	r7, #24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	00010008 	.word	0x00010008
 8002bf0:	00010002 	.word	0x00010002

08002bf4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c04:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c0c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002c0e:	4b4b      	ldr	r3, [pc, #300]	@ (8002d3c <I2C_DMAAbort+0x148>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	08db      	lsrs	r3, r3, #3
 8002c14:	4a4a      	ldr	r2, [pc, #296]	@ (8002d40 <I2C_DMAAbort+0x14c>)
 8002c16:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1a:	0a1a      	lsrs	r2, r3, #8
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4413      	add	r3, r2
 8002c22:	00da      	lsls	r2, r3, #3
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d106      	bne.n	8002c3c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c32:	f043 0220 	orr.w	r2, r3, #32
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8002c3a:	e00a      	b.n	8002c52 <I2C_DMAAbort+0x5e>
    }
    count--;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c50:	d0ea      	beq.n	8002c28 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c5e:	2200      	movs	r2, #0
 8002c60:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c6e:	2200      	movs	r2, #0
 8002c70:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c80:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	2200      	movs	r2, #0
 8002c86:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c94:	2200      	movs	r2, #0
 8002c96:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d003      	beq.n	8002ca8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 0201 	bic.w	r2, r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b60      	cmp	r3, #96	@ 0x60
 8002cc2:	d10e      	bne.n	8002ce2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002cda:	6978      	ldr	r0, [r7, #20]
 8002cdc:	f7fe fdec 	bl	80018b8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002ce0:	e027      	b.n	8002d32 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ce2:	7cfb      	ldrb	r3, [r7, #19]
 8002ce4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002ce8:	2b28      	cmp	r3, #40	@ 0x28
 8002cea:	d117      	bne.n	8002d1c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 0201 	orr.w	r2, r2, #1
 8002cfa:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d0a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	2228      	movs	r2, #40	@ 0x28
 8002d16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002d1a:	e007      	b.n	8002d2c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002d2c:	6978      	ldr	r0, [r7, #20]
 8002d2e:	f7fe fdba 	bl	80018a6 <HAL_I2C_ErrorCallback>
}
 8002d32:	bf00      	nop
 8002d34:	3718      	adds	r7, #24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	20000004 	.word	0x20000004
 8002d40:	14f8b589 	.word	0x14f8b589

08002d44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	603b      	str	r3, [r7, #0]
 8002d50:	4613      	mov	r3, r2
 8002d52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d54:	e048      	b.n	8002de8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5c:	d044      	beq.n	8002de8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d5e:	f7fd fe15 	bl	800098c <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d302      	bcc.n	8002d74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d139      	bne.n	8002de8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	0c1b      	lsrs	r3, r3, #16
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d10d      	bne.n	8002d9a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	43da      	mvns	r2, r3
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	bf0c      	ite	eq
 8002d90:	2301      	moveq	r3, #1
 8002d92:	2300      	movne	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	461a      	mov	r2, r3
 8002d98:	e00c      	b.n	8002db4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	43da      	mvns	r2, r3
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	4013      	ands	r3, r2
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	bf0c      	ite	eq
 8002dac:	2301      	moveq	r3, #1
 8002dae:	2300      	movne	r3, #0
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	461a      	mov	r2, r3
 8002db4:	79fb      	ldrb	r3, [r7, #7]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d116      	bne.n	8002de8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd4:	f043 0220 	orr.w	r2, r3, #32
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e023      	b.n	8002e30 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	0c1b      	lsrs	r3, r3, #16
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d10d      	bne.n	8002e0e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	43da      	mvns	r2, r3
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	bf0c      	ite	eq
 8002e04:	2301      	moveq	r3, #1
 8002e06:	2300      	movne	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	e00c      	b.n	8002e28 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	43da      	mvns	r2, r3
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	bf0c      	ite	eq
 8002e20:	2301      	moveq	r3, #1
 8002e22:	2300      	movne	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	461a      	mov	r2, r3
 8002e28:	79fb      	ldrb	r3, [r7, #7]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d093      	beq.n	8002d56 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3710      	adds	r7, #16
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
 8002e44:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e46:	e071      	b.n	8002f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e56:	d123      	bne.n	8002ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e66:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8c:	f043 0204 	orr.w	r2, r3, #4
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e067      	b.n	8002f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea6:	d041      	beq.n	8002f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ea8:	f7fd fd70 	bl	800098c <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d302      	bcc.n	8002ebe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d136      	bne.n	8002f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	0c1b      	lsrs	r3, r3, #16
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d10c      	bne.n	8002ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	43da      	mvns	r2, r3
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	bf14      	ite	ne
 8002eda:	2301      	movne	r3, #1
 8002edc:	2300      	moveq	r3, #0
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	e00b      	b.n	8002efa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	43da      	mvns	r2, r3
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	4013      	ands	r3, r2
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	bf14      	ite	ne
 8002ef4:	2301      	movne	r3, #1
 8002ef6:	2300      	moveq	r3, #0
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d016      	beq.n	8002f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2220      	movs	r2, #32
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f18:	f043 0220 	orr.w	r2, r3, #32
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e021      	b.n	8002f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	0c1b      	lsrs	r3, r3, #16
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d10c      	bne.n	8002f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	43da      	mvns	r2, r3
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	4013      	ands	r3, r2
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	bf14      	ite	ne
 8002f48:	2301      	movne	r3, #1
 8002f4a:	2300      	moveq	r3, #0
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	e00b      	b.n	8002f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	43da      	mvns	r2, r3
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	bf14      	ite	ne
 8002f62:	2301      	movne	r3, #1
 8002f64:	2300      	moveq	r3, #0
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f47f af6d 	bne.w	8002e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f84:	e034      	b.n	8002ff0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 f8b8 	bl	80030fc <I2C_IsAcknowledgeFailed>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e034      	b.n	8003000 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9c:	d028      	beq.n	8002ff0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f9e:	f7fd fcf5 	bl	800098c <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d302      	bcc.n	8002fb4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d11d      	bne.n	8002ff0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fbe:	2b80      	cmp	r3, #128	@ 0x80
 8002fc0:	d016      	beq.n	8002ff0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fdc:	f043 0220 	orr.w	r2, r3, #32
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e007      	b.n	8003000 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ffa:	2b80      	cmp	r3, #128	@ 0x80
 8002ffc:	d1c3      	bne.n	8002f86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003014:	e034      	b.n	8003080 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 f870 	bl	80030fc <I2C_IsAcknowledgeFailed>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e034      	b.n	8003090 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302c:	d028      	beq.n	8003080 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800302e:	f7fd fcad 	bl	800098c <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	429a      	cmp	r2, r3
 800303c:	d302      	bcc.n	8003044 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d11d      	bne.n	8003080 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	f003 0304 	and.w	r3, r3, #4
 800304e:	2b04      	cmp	r3, #4
 8003050:	d016      	beq.n	8003080 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2220      	movs	r2, #32
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306c:	f043 0220 	orr.w	r2, r3, #32
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e007      	b.n	8003090 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	f003 0304 	and.w	r3, r3, #4
 800308a:	2b04      	cmp	r3, #4
 800308c:	d1c3      	bne.n	8003016 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80030a4:	4b13      	ldr	r3, [pc, #76]	@ (80030f4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	08db      	lsrs	r3, r3, #3
 80030aa:	4a13      	ldr	r2, [pc, #76]	@ (80030f8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80030ac:	fba2 2303 	umull	r2, r3, r2, r3
 80030b0:	0a1a      	lsrs	r2, r3, #8
 80030b2:	4613      	mov	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4413      	add	r3, r2
 80030b8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	3b01      	subs	r3, #1
 80030be:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d107      	bne.n	80030d6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ca:	f043 0220 	orr.w	r2, r3, #32
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e008      	b.n	80030e8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030e4:	d0e9      	beq.n	80030ba <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3714      	adds	r7, #20
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bc80      	pop	{r7}
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	20000004 	.word	0x20000004
 80030f8:	14f8b589 	.word	0x14f8b589

080030fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800310e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003112:	d11b      	bne.n	800314c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800311c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2220      	movs	r2, #32
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003138:	f043 0204 	orr.w	r2, r3, #4
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e000      	b.n	800314e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	bc80      	pop	{r7}
 8003156:	4770      	bx	lr

08003158 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003164:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003168:	d103      	bne.n	8003172 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003170:	e007      	b.n	8003182 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003176:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800317a:	d102      	bne.n	8003182 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2208      	movs	r2, #8
 8003180:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	bc80      	pop	{r7}
 800318a:	4770      	bx	lr

0800318c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e272      	b.n	8003684 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 8087 	beq.w	80032ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031ac:	4b92      	ldr	r3, [pc, #584]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f003 030c 	and.w	r3, r3, #12
 80031b4:	2b04      	cmp	r3, #4
 80031b6:	d00c      	beq.n	80031d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031b8:	4b8f      	ldr	r3, [pc, #572]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f003 030c 	and.w	r3, r3, #12
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d112      	bne.n	80031ea <HAL_RCC_OscConfig+0x5e>
 80031c4:	4b8c      	ldr	r3, [pc, #560]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031d0:	d10b      	bne.n	80031ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d2:	4b89      	ldr	r3, [pc, #548]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d06c      	beq.n	80032b8 <HAL_RCC_OscConfig+0x12c>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d168      	bne.n	80032b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e24c      	b.n	8003684 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031f2:	d106      	bne.n	8003202 <HAL_RCC_OscConfig+0x76>
 80031f4:	4b80      	ldr	r3, [pc, #512]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a7f      	ldr	r2, [pc, #508]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 80031fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031fe:	6013      	str	r3, [r2, #0]
 8003200:	e02e      	b.n	8003260 <HAL_RCC_OscConfig+0xd4>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10c      	bne.n	8003224 <HAL_RCC_OscConfig+0x98>
 800320a:	4b7b      	ldr	r3, [pc, #492]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a7a      	ldr	r2, [pc, #488]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 8003210:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003214:	6013      	str	r3, [r2, #0]
 8003216:	4b78      	ldr	r3, [pc, #480]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a77      	ldr	r2, [pc, #476]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 800321c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003220:	6013      	str	r3, [r2, #0]
 8003222:	e01d      	b.n	8003260 <HAL_RCC_OscConfig+0xd4>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800322c:	d10c      	bne.n	8003248 <HAL_RCC_OscConfig+0xbc>
 800322e:	4b72      	ldr	r3, [pc, #456]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a71      	ldr	r2, [pc, #452]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 8003234:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003238:	6013      	str	r3, [r2, #0]
 800323a:	4b6f      	ldr	r3, [pc, #444]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a6e      	ldr	r2, [pc, #440]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 8003240:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	e00b      	b.n	8003260 <HAL_RCC_OscConfig+0xd4>
 8003248:	4b6b      	ldr	r3, [pc, #428]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a6a      	ldr	r2, [pc, #424]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 800324e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003252:	6013      	str	r3, [r2, #0]
 8003254:	4b68      	ldr	r3, [pc, #416]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a67      	ldr	r2, [pc, #412]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 800325a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800325e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d013      	beq.n	8003290 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003268:	f7fd fb90 	bl	800098c <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003270:	f7fd fb8c 	bl	800098c <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b64      	cmp	r3, #100	@ 0x64
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e200      	b.n	8003684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003282:	4b5d      	ldr	r3, [pc, #372]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0f0      	beq.n	8003270 <HAL_RCC_OscConfig+0xe4>
 800328e:	e014      	b.n	80032ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003290:	f7fd fb7c 	bl	800098c <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003298:	f7fd fb78 	bl	800098c <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b64      	cmp	r3, #100	@ 0x64
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e1ec      	b.n	8003684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032aa:	4b53      	ldr	r3, [pc, #332]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1f0      	bne.n	8003298 <HAL_RCC_OscConfig+0x10c>
 80032b6:	e000      	b.n	80032ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d063      	beq.n	800338e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032c6:	4b4c      	ldr	r3, [pc, #304]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f003 030c 	and.w	r3, r3, #12
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00b      	beq.n	80032ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032d2:	4b49      	ldr	r3, [pc, #292]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f003 030c 	and.w	r3, r3, #12
 80032da:	2b08      	cmp	r3, #8
 80032dc:	d11c      	bne.n	8003318 <HAL_RCC_OscConfig+0x18c>
 80032de:	4b46      	ldr	r3, [pc, #280]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d116      	bne.n	8003318 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ea:	4b43      	ldr	r3, [pc, #268]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d005      	beq.n	8003302 <HAL_RCC_OscConfig+0x176>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d001      	beq.n	8003302 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e1c0      	b.n	8003684 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003302:	4b3d      	ldr	r3, [pc, #244]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	4939      	ldr	r1, [pc, #228]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 8003312:	4313      	orrs	r3, r2
 8003314:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003316:	e03a      	b.n	800338e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d020      	beq.n	8003362 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003320:	4b36      	ldr	r3, [pc, #216]	@ (80033fc <HAL_RCC_OscConfig+0x270>)
 8003322:	2201      	movs	r2, #1
 8003324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003326:	f7fd fb31 	bl	800098c <HAL_GetTick>
 800332a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800332c:	e008      	b.n	8003340 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800332e:	f7fd fb2d 	bl	800098c <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e1a1      	b.n	8003684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003340:	4b2d      	ldr	r3, [pc, #180]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d0f0      	beq.n	800332e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800334c:	4b2a      	ldr	r3, [pc, #168]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	4927      	ldr	r1, [pc, #156]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 800335c:	4313      	orrs	r3, r2
 800335e:	600b      	str	r3, [r1, #0]
 8003360:	e015      	b.n	800338e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003362:	4b26      	ldr	r3, [pc, #152]	@ (80033fc <HAL_RCC_OscConfig+0x270>)
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003368:	f7fd fb10 	bl	800098c <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003370:	f7fd fb0c 	bl	800098c <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e180      	b.n	8003684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003382:	4b1d      	ldr	r3, [pc, #116]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1f0      	bne.n	8003370 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0308 	and.w	r3, r3, #8
 8003396:	2b00      	cmp	r3, #0
 8003398:	d03a      	beq.n	8003410 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d019      	beq.n	80033d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033a2:	4b17      	ldr	r3, [pc, #92]	@ (8003400 <HAL_RCC_OscConfig+0x274>)
 80033a4:	2201      	movs	r2, #1
 80033a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a8:	f7fd faf0 	bl	800098c <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033b0:	f7fd faec 	bl	800098c <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e160      	b.n	8003684 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033c2:	4b0d      	ldr	r3, [pc, #52]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 80033c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d0f0      	beq.n	80033b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033ce:	2001      	movs	r0, #1
 80033d0:	f000 face 	bl	8003970 <RCC_Delay>
 80033d4:	e01c      	b.n	8003410 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003400 <HAL_RCC_OscConfig+0x274>)
 80033d8:	2200      	movs	r2, #0
 80033da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033dc:	f7fd fad6 	bl	800098c <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033e2:	e00f      	b.n	8003404 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033e4:	f7fd fad2 	bl	800098c <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d908      	bls.n	8003404 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e146      	b.n	8003684 <HAL_RCC_OscConfig+0x4f8>
 80033f6:	bf00      	nop
 80033f8:	40021000 	.word	0x40021000
 80033fc:	42420000 	.word	0x42420000
 8003400:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003404:	4b92      	ldr	r3, [pc, #584]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 8003406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1e9      	bne.n	80033e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0304 	and.w	r3, r3, #4
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 80a6 	beq.w	800356a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800341e:	2300      	movs	r3, #0
 8003420:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003422:	4b8b      	ldr	r3, [pc, #556]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10d      	bne.n	800344a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800342e:	4b88      	ldr	r3, [pc, #544]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	4a87      	ldr	r2, [pc, #540]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 8003434:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003438:	61d3      	str	r3, [r2, #28]
 800343a:	4b85      	ldr	r3, [pc, #532]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003442:	60bb      	str	r3, [r7, #8]
 8003444:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003446:	2301      	movs	r3, #1
 8003448:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800344a:	4b82      	ldr	r3, [pc, #520]	@ (8003654 <HAL_RCC_OscConfig+0x4c8>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003452:	2b00      	cmp	r3, #0
 8003454:	d118      	bne.n	8003488 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003456:	4b7f      	ldr	r3, [pc, #508]	@ (8003654 <HAL_RCC_OscConfig+0x4c8>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a7e      	ldr	r2, [pc, #504]	@ (8003654 <HAL_RCC_OscConfig+0x4c8>)
 800345c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003460:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003462:	f7fd fa93 	bl	800098c <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003468:	e008      	b.n	800347c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800346a:	f7fd fa8f 	bl	800098c <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b64      	cmp	r3, #100	@ 0x64
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e103      	b.n	8003684 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800347c:	4b75      	ldr	r3, [pc, #468]	@ (8003654 <HAL_RCC_OscConfig+0x4c8>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0f0      	beq.n	800346a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d106      	bne.n	800349e <HAL_RCC_OscConfig+0x312>
 8003490:	4b6f      	ldr	r3, [pc, #444]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	4a6e      	ldr	r2, [pc, #440]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 8003496:	f043 0301 	orr.w	r3, r3, #1
 800349a:	6213      	str	r3, [r2, #32]
 800349c:	e02d      	b.n	80034fa <HAL_RCC_OscConfig+0x36e>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10c      	bne.n	80034c0 <HAL_RCC_OscConfig+0x334>
 80034a6:	4b6a      	ldr	r3, [pc, #424]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	4a69      	ldr	r2, [pc, #420]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 80034ac:	f023 0301 	bic.w	r3, r3, #1
 80034b0:	6213      	str	r3, [r2, #32]
 80034b2:	4b67      	ldr	r3, [pc, #412]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	4a66      	ldr	r2, [pc, #408]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 80034b8:	f023 0304 	bic.w	r3, r3, #4
 80034bc:	6213      	str	r3, [r2, #32]
 80034be:	e01c      	b.n	80034fa <HAL_RCC_OscConfig+0x36e>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	2b05      	cmp	r3, #5
 80034c6:	d10c      	bne.n	80034e2 <HAL_RCC_OscConfig+0x356>
 80034c8:	4b61      	ldr	r3, [pc, #388]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	4a60      	ldr	r2, [pc, #384]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 80034ce:	f043 0304 	orr.w	r3, r3, #4
 80034d2:	6213      	str	r3, [r2, #32]
 80034d4:	4b5e      	ldr	r3, [pc, #376]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	4a5d      	ldr	r2, [pc, #372]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 80034da:	f043 0301 	orr.w	r3, r3, #1
 80034de:	6213      	str	r3, [r2, #32]
 80034e0:	e00b      	b.n	80034fa <HAL_RCC_OscConfig+0x36e>
 80034e2:	4b5b      	ldr	r3, [pc, #364]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	4a5a      	ldr	r2, [pc, #360]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 80034e8:	f023 0301 	bic.w	r3, r3, #1
 80034ec:	6213      	str	r3, [r2, #32]
 80034ee:	4b58      	ldr	r3, [pc, #352]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	4a57      	ldr	r2, [pc, #348]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 80034f4:	f023 0304 	bic.w	r3, r3, #4
 80034f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d015      	beq.n	800352e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003502:	f7fd fa43 	bl	800098c <HAL_GetTick>
 8003506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003508:	e00a      	b.n	8003520 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800350a:	f7fd fa3f 	bl	800098c <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003518:	4293      	cmp	r3, r2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e0b1      	b.n	8003684 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003520:	4b4b      	ldr	r3, [pc, #300]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0ee      	beq.n	800350a <HAL_RCC_OscConfig+0x37e>
 800352c:	e014      	b.n	8003558 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800352e:	f7fd fa2d 	bl	800098c <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003534:	e00a      	b.n	800354c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003536:	f7fd fa29 	bl	800098c <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003544:	4293      	cmp	r3, r2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e09b      	b.n	8003684 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800354c:	4b40      	ldr	r3, [pc, #256]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1ee      	bne.n	8003536 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003558:	7dfb      	ldrb	r3, [r7, #23]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d105      	bne.n	800356a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800355e:	4b3c      	ldr	r3, [pc, #240]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	4a3b      	ldr	r2, [pc, #236]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 8003564:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003568:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 8087 	beq.w	8003682 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003574:	4b36      	ldr	r3, [pc, #216]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f003 030c 	and.w	r3, r3, #12
 800357c:	2b08      	cmp	r3, #8
 800357e:	d061      	beq.n	8003644 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	69db      	ldr	r3, [r3, #28]
 8003584:	2b02      	cmp	r3, #2
 8003586:	d146      	bne.n	8003616 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003588:	4b33      	ldr	r3, [pc, #204]	@ (8003658 <HAL_RCC_OscConfig+0x4cc>)
 800358a:	2200      	movs	r2, #0
 800358c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800358e:	f7fd f9fd 	bl	800098c <HAL_GetTick>
 8003592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003594:	e008      	b.n	80035a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003596:	f7fd f9f9 	bl	800098c <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e06d      	b.n	8003684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035a8:	4b29      	ldr	r3, [pc, #164]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1f0      	bne.n	8003596 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035bc:	d108      	bne.n	80035d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035be:	4b24      	ldr	r3, [pc, #144]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	4921      	ldr	r1, [pc, #132]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035d0:	4b1f      	ldr	r3, [pc, #124]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a19      	ldr	r1, [r3, #32]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e0:	430b      	orrs	r3, r1
 80035e2:	491b      	ldr	r1, [pc, #108]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003658 <HAL_RCC_OscConfig+0x4cc>)
 80035ea:	2201      	movs	r2, #1
 80035ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ee:	f7fd f9cd 	bl	800098c <HAL_GetTick>
 80035f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035f4:	e008      	b.n	8003608 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f6:	f7fd f9c9 	bl	800098c <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d901      	bls.n	8003608 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e03d      	b.n	8003684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003608:	4b11      	ldr	r3, [pc, #68]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0f0      	beq.n	80035f6 <HAL_RCC_OscConfig+0x46a>
 8003614:	e035      	b.n	8003682 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003616:	4b10      	ldr	r3, [pc, #64]	@ (8003658 <HAL_RCC_OscConfig+0x4cc>)
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800361c:	f7fd f9b6 	bl	800098c <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003624:	f7fd f9b2 	bl	800098c <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e026      	b.n	8003684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003636:	4b06      	ldr	r3, [pc, #24]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1f0      	bne.n	8003624 <HAL_RCC_OscConfig+0x498>
 8003642:	e01e      	b.n	8003682 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	69db      	ldr	r3, [r3, #28]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d107      	bne.n	800365c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e019      	b.n	8003684 <HAL_RCC_OscConfig+0x4f8>
 8003650:	40021000 	.word	0x40021000
 8003654:	40007000 	.word	0x40007000
 8003658:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800365c:	4b0b      	ldr	r3, [pc, #44]	@ (800368c <HAL_RCC_OscConfig+0x500>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	429a      	cmp	r2, r3
 800366e:	d106      	bne.n	800367e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800367a:	429a      	cmp	r2, r3
 800367c:	d001      	beq.n	8003682 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e000      	b.n	8003684 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3718      	adds	r7, #24
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40021000 	.word	0x40021000

08003690 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e0d0      	b.n	8003846 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036a4:	4b6a      	ldr	r3, [pc, #424]	@ (8003850 <HAL_RCC_ClockConfig+0x1c0>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d910      	bls.n	80036d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b2:	4b67      	ldr	r3, [pc, #412]	@ (8003850 <HAL_RCC_ClockConfig+0x1c0>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f023 0207 	bic.w	r2, r3, #7
 80036ba:	4965      	ldr	r1, [pc, #404]	@ (8003850 <HAL_RCC_ClockConfig+0x1c0>)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	4313      	orrs	r3, r2
 80036c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c2:	4b63      	ldr	r3, [pc, #396]	@ (8003850 <HAL_RCC_ClockConfig+0x1c0>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d001      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e0b8      	b.n	8003846 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d020      	beq.n	8003722 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d005      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036ec:	4b59      	ldr	r3, [pc, #356]	@ (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	4a58      	ldr	r2, [pc, #352]	@ (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 80036f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80036f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0308 	and.w	r3, r3, #8
 8003700:	2b00      	cmp	r3, #0
 8003702:	d005      	beq.n	8003710 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003704:	4b53      	ldr	r3, [pc, #332]	@ (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	4a52      	ldr	r2, [pc, #328]	@ (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 800370a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800370e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003710:	4b50      	ldr	r3, [pc, #320]	@ (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	494d      	ldr	r1, [pc, #308]	@ (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 800371e:	4313      	orrs	r3, r2
 8003720:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	d040      	beq.n	80037b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d107      	bne.n	8003746 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003736:	4b47      	ldr	r3, [pc, #284]	@ (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d115      	bne.n	800376e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e07f      	b.n	8003846 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2b02      	cmp	r3, #2
 800374c:	d107      	bne.n	800375e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800374e:	4b41      	ldr	r3, [pc, #260]	@ (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d109      	bne.n	800376e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e073      	b.n	8003846 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800375e:	4b3d      	ldr	r3, [pc, #244]	@ (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e06b      	b.n	8003846 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800376e:	4b39      	ldr	r3, [pc, #228]	@ (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f023 0203 	bic.w	r2, r3, #3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	4936      	ldr	r1, [pc, #216]	@ (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 800377c:	4313      	orrs	r3, r2
 800377e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003780:	f7fd f904 	bl	800098c <HAL_GetTick>
 8003784:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003786:	e00a      	b.n	800379e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003788:	f7fd f900 	bl	800098c <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003796:	4293      	cmp	r3, r2
 8003798:	d901      	bls.n	800379e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e053      	b.n	8003846 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379e:	4b2d      	ldr	r3, [pc, #180]	@ (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f003 020c 	and.w	r2, r3, #12
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d1eb      	bne.n	8003788 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037b0:	4b27      	ldr	r3, [pc, #156]	@ (8003850 <HAL_RCC_ClockConfig+0x1c0>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d210      	bcs.n	80037e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037be:	4b24      	ldr	r3, [pc, #144]	@ (8003850 <HAL_RCC_ClockConfig+0x1c0>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f023 0207 	bic.w	r2, r3, #7
 80037c6:	4922      	ldr	r1, [pc, #136]	@ (8003850 <HAL_RCC_ClockConfig+0x1c0>)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ce:	4b20      	ldr	r3, [pc, #128]	@ (8003850 <HAL_RCC_ClockConfig+0x1c0>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0307 	and.w	r3, r3, #7
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d001      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e032      	b.n	8003846 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d008      	beq.n	80037fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037ec:	4b19      	ldr	r3, [pc, #100]	@ (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	4916      	ldr	r1, [pc, #88]	@ (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0308 	and.w	r3, r3, #8
 8003806:	2b00      	cmp	r3, #0
 8003808:	d009      	beq.n	800381e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800380a:	4b12      	ldr	r3, [pc, #72]	@ (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	490e      	ldr	r1, [pc, #56]	@ (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 800381a:	4313      	orrs	r3, r2
 800381c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800381e:	f000 f821 	bl	8003864 <HAL_RCC_GetSysClockFreq>
 8003822:	4602      	mov	r2, r0
 8003824:	4b0b      	ldr	r3, [pc, #44]	@ (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	091b      	lsrs	r3, r3, #4
 800382a:	f003 030f 	and.w	r3, r3, #15
 800382e:	490a      	ldr	r1, [pc, #40]	@ (8003858 <HAL_RCC_ClockConfig+0x1c8>)
 8003830:	5ccb      	ldrb	r3, [r1, r3]
 8003832:	fa22 f303 	lsr.w	r3, r2, r3
 8003836:	4a09      	ldr	r2, [pc, #36]	@ (800385c <HAL_RCC_ClockConfig+0x1cc>)
 8003838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800383a:	4b09      	ldr	r3, [pc, #36]	@ (8003860 <HAL_RCC_ClockConfig+0x1d0>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4618      	mov	r0, r3
 8003840:	f7fd f862 	bl	8000908 <HAL_InitTick>

  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	40022000 	.word	0x40022000
 8003854:	40021000 	.word	0x40021000
 8003858:	08004dfc 	.word	0x08004dfc
 800385c:	20000004 	.word	0x20000004
 8003860:	20000008 	.word	0x20000008

08003864 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003864:	b480      	push	{r7}
 8003866:	b087      	sub	sp, #28
 8003868:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800386a:	2300      	movs	r3, #0
 800386c:	60fb      	str	r3, [r7, #12]
 800386e:	2300      	movs	r3, #0
 8003870:	60bb      	str	r3, [r7, #8]
 8003872:	2300      	movs	r3, #0
 8003874:	617b      	str	r3, [r7, #20]
 8003876:	2300      	movs	r3, #0
 8003878:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800387a:	2300      	movs	r3, #0
 800387c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800387e:	4b1e      	ldr	r3, [pc, #120]	@ (80038f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f003 030c 	and.w	r3, r3, #12
 800388a:	2b04      	cmp	r3, #4
 800388c:	d002      	beq.n	8003894 <HAL_RCC_GetSysClockFreq+0x30>
 800388e:	2b08      	cmp	r3, #8
 8003890:	d003      	beq.n	800389a <HAL_RCC_GetSysClockFreq+0x36>
 8003892:	e027      	b.n	80038e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003894:	4b19      	ldr	r3, [pc, #100]	@ (80038fc <HAL_RCC_GetSysClockFreq+0x98>)
 8003896:	613b      	str	r3, [r7, #16]
      break;
 8003898:	e027      	b.n	80038ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	0c9b      	lsrs	r3, r3, #18
 800389e:	f003 030f 	and.w	r3, r3, #15
 80038a2:	4a17      	ldr	r2, [pc, #92]	@ (8003900 <HAL_RCC_GetSysClockFreq+0x9c>)
 80038a4:	5cd3      	ldrb	r3, [r2, r3]
 80038a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d010      	beq.n	80038d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038b2:	4b11      	ldr	r3, [pc, #68]	@ (80038f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	0c5b      	lsrs	r3, r3, #17
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	4a11      	ldr	r2, [pc, #68]	@ (8003904 <HAL_RCC_GetSysClockFreq+0xa0>)
 80038be:	5cd3      	ldrb	r3, [r2, r3]
 80038c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a0d      	ldr	r2, [pc, #52]	@ (80038fc <HAL_RCC_GetSysClockFreq+0x98>)
 80038c6:	fb03 f202 	mul.w	r2, r3, r2
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d0:	617b      	str	r3, [r7, #20]
 80038d2:	e004      	b.n	80038de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a0c      	ldr	r2, [pc, #48]	@ (8003908 <HAL_RCC_GetSysClockFreq+0xa4>)
 80038d8:	fb02 f303 	mul.w	r3, r2, r3
 80038dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	613b      	str	r3, [r7, #16]
      break;
 80038e2:	e002      	b.n	80038ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038e4:	4b05      	ldr	r3, [pc, #20]	@ (80038fc <HAL_RCC_GetSysClockFreq+0x98>)
 80038e6:	613b      	str	r3, [r7, #16]
      break;
 80038e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038ea:	693b      	ldr	r3, [r7, #16]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	371c      	adds	r7, #28
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bc80      	pop	{r7}
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	40021000 	.word	0x40021000
 80038fc:	007a1200 	.word	0x007a1200
 8003900:	08004e14 	.word	0x08004e14
 8003904:	08004e24 	.word	0x08004e24
 8003908:	003d0900 	.word	0x003d0900

0800390c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003910:	4b02      	ldr	r3, [pc, #8]	@ (800391c <HAL_RCC_GetHCLKFreq+0x10>)
 8003912:	681b      	ldr	r3, [r3, #0]
}
 8003914:	4618      	mov	r0, r3
 8003916:	46bd      	mov	sp, r7
 8003918:	bc80      	pop	{r7}
 800391a:	4770      	bx	lr
 800391c:	20000004 	.word	0x20000004

08003920 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003924:	f7ff fff2 	bl	800390c <HAL_RCC_GetHCLKFreq>
 8003928:	4602      	mov	r2, r0
 800392a:	4b05      	ldr	r3, [pc, #20]	@ (8003940 <HAL_RCC_GetPCLK1Freq+0x20>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	0a1b      	lsrs	r3, r3, #8
 8003930:	f003 0307 	and.w	r3, r3, #7
 8003934:	4903      	ldr	r1, [pc, #12]	@ (8003944 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003936:	5ccb      	ldrb	r3, [r1, r3]
 8003938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800393c:	4618      	mov	r0, r3
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40021000 	.word	0x40021000
 8003944:	08004e0c 	.word	0x08004e0c

08003948 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800394c:	f7ff ffde 	bl	800390c <HAL_RCC_GetHCLKFreq>
 8003950:	4602      	mov	r2, r0
 8003952:	4b05      	ldr	r3, [pc, #20]	@ (8003968 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	0adb      	lsrs	r3, r3, #11
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	4903      	ldr	r1, [pc, #12]	@ (800396c <HAL_RCC_GetPCLK2Freq+0x24>)
 800395e:	5ccb      	ldrb	r3, [r1, r3]
 8003960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003964:	4618      	mov	r0, r3
 8003966:	bd80      	pop	{r7, pc}
 8003968:	40021000 	.word	0x40021000
 800396c:	08004e0c 	.word	0x08004e0c

08003970 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003978:	4b0a      	ldr	r3, [pc, #40]	@ (80039a4 <RCC_Delay+0x34>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a0a      	ldr	r2, [pc, #40]	@ (80039a8 <RCC_Delay+0x38>)
 800397e:	fba2 2303 	umull	r2, r3, r2, r3
 8003982:	0a5b      	lsrs	r3, r3, #9
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	fb02 f303 	mul.w	r3, r2, r3
 800398a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800398c:	bf00      	nop
  }
  while (Delay --);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	1e5a      	subs	r2, r3, #1
 8003992:	60fa      	str	r2, [r7, #12]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1f9      	bne.n	800398c <RCC_Delay+0x1c>
}
 8003998:	bf00      	nop
 800399a:	bf00      	nop
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	bc80      	pop	{r7}
 80039a2:	4770      	bx	lr
 80039a4:	20000004 	.word	0x20000004
 80039a8:	10624dd3 	.word	0x10624dd3

080039ac <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	460b      	mov	r3, r1
 80039b6:	607a      	str	r2, [r7, #4]
 80039b8:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d101      	bne.n	80039c4 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e062      	b.n	8003a8a <HAL_MultiProcessor_Init+0xde>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d106      	bne.n	80039de <HAL_MultiProcessor_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f7fc fe89 	bl	80006f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2224      	movs	r2, #36	@ 0x24
 80039e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68da      	ldr	r2, [r3, #12]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039f4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f000 fca0 	bl	800433c <UART_SetConfig>

  /* In Multi-Processor mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	691a      	ldr	r2, [r3, #16]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a0a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	695a      	ldr	r2, [r3, #20]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a1a:	615a      	str	r2, [r3, #20]

  /* Set the USART address node */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	691a      	ldr	r2, [r3, #16]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 020f 	bic.w	r2, r2, #15
 8003a2a:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, Address);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6919      	ldr	r1, [r3, #16]
 8003a32:	7afa      	ldrb	r2, [r7, #11]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	611a      	str	r2, [r3, #16]

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68da      	ldr	r2, [r3, #12]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a4a:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68d9      	ldr	r1, [r3, #12]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	60da      	str	r2, [r3, #12]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68da      	ldr	r2, [r3, #12]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a6a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2220      	movs	r2, #32
 8003a76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
	...

08003a94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b0ba      	sub	sp, #232	@ 0xe8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003aba:	2300      	movs	r3, #0
 8003abc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aca:	f003 030f 	and.w	r3, r3, #15
 8003ace:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003ad2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10f      	bne.n	8003afa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ade:	f003 0320 	and.w	r3, r3, #32
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d009      	beq.n	8003afa <HAL_UART_IRQHandler+0x66>
 8003ae6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003aea:	f003 0320 	and.w	r3, r3, #32
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 fb63 	bl	80041be <UART_Receive_IT>
      return;
 8003af8:	e25b      	b.n	8003fb2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003afa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f000 80de 	beq.w	8003cc0 <HAL_UART_IRQHandler+0x22c>
 8003b04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d106      	bne.n	8003b1e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b14:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 80d1 	beq.w	8003cc0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00b      	beq.n	8003b42 <HAL_UART_IRQHandler+0xae>
 8003b2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d005      	beq.n	8003b42 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b3a:	f043 0201 	orr.w	r2, r3, #1
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b46:	f003 0304 	and.w	r3, r3, #4
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00b      	beq.n	8003b66 <HAL_UART_IRQHandler+0xd2>
 8003b4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d005      	beq.n	8003b66 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b5e:	f043 0202 	orr.w	r2, r3, #2
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00b      	beq.n	8003b8a <HAL_UART_IRQHandler+0xf6>
 8003b72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d005      	beq.n	8003b8a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b82:	f043 0204 	orr.w	r2, r3, #4
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b8e:	f003 0308 	and.w	r3, r3, #8
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d011      	beq.n	8003bba <HAL_UART_IRQHandler+0x126>
 8003b96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b9a:	f003 0320 	and.w	r3, r3, #32
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d105      	bne.n	8003bae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ba2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d005      	beq.n	8003bba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb2:	f043 0208 	orr.w	r2, r3, #8
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 81f2 	beq.w	8003fa8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bc8:	f003 0320 	and.w	r3, r3, #32
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d008      	beq.n	8003be2 <HAL_UART_IRQHandler+0x14e>
 8003bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bd4:	f003 0320 	and.w	r3, r3, #32
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d002      	beq.n	8003be2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 faee 	bl	80041be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	bf14      	ite	ne
 8003bf0:	2301      	movne	r3, #1
 8003bf2:	2300      	moveq	r3, #0
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bfe:	f003 0308 	and.w	r3, r3, #8
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d103      	bne.n	8003c0e <HAL_UART_IRQHandler+0x17a>
 8003c06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d04f      	beq.n	8003cae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f9f8 	bl	8004004 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d041      	beq.n	8003ca6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	3314      	adds	r3, #20
 8003c28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c30:	e853 3f00 	ldrex	r3, [r3]
 8003c34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003c38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	3314      	adds	r3, #20
 8003c4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003c4e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003c52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003c5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003c5e:	e841 2300 	strex	r3, r2, [r1]
 8003c62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003c66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1d9      	bne.n	8003c22 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d013      	beq.n	8003c9e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c7a:	4a7e      	ldr	r2, [pc, #504]	@ (8003e74 <HAL_UART_IRQHandler+0x3e0>)
 8003c7c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7fc fff8 	bl	8000c78 <HAL_DMA_Abort_IT>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d016      	beq.n	8003cbc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003c98:	4610      	mov	r0, r2
 8003c9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c9c:	e00e      	b.n	8003cbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f99c 	bl	8003fdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca4:	e00a      	b.n	8003cbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f998 	bl	8003fdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cac:	e006      	b.n	8003cbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f994 	bl	8003fdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003cba:	e175      	b.n	8003fa8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cbc:	bf00      	nop
    return;
 8003cbe:	e173      	b.n	8003fa8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	f040 814f 	bne.w	8003f68 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cce:	f003 0310 	and.w	r3, r3, #16
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 8148 	beq.w	8003f68 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cdc:	f003 0310 	and.w	r3, r3, #16
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f000 8141 	beq.w	8003f68 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60bb      	str	r3, [r7, #8]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	60bb      	str	r3, [r7, #8]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	60bb      	str	r3, [r7, #8]
 8003cfa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f000 80b6 	beq.w	8003e78 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 8145 	beq.w	8003fac <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	f080 813e 	bcs.w	8003fac <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d36:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	2b20      	cmp	r3, #32
 8003d40:	f000 8088 	beq.w	8003e54 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	330c      	adds	r3, #12
 8003d4a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d52:	e853 3f00 	ldrex	r3, [r3]
 8003d56:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003d5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d5e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d62:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	330c      	adds	r3, #12
 8003d6c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003d70:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d74:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d78:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003d7c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003d80:	e841 2300 	strex	r3, r2, [r1]
 8003d84:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003d88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1d9      	bne.n	8003d44 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	3314      	adds	r3, #20
 8003d96:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d9a:	e853 3f00 	ldrex	r3, [r3]
 8003d9e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003da0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003da2:	f023 0301 	bic.w	r3, r3, #1
 8003da6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	3314      	adds	r3, #20
 8003db0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003db4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003db8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dba:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003dbc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003dc0:	e841 2300 	strex	r3, r2, [r1]
 8003dc4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003dc6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1e1      	bne.n	8003d90 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	3314      	adds	r3, #20
 8003dd2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003dd6:	e853 3f00 	ldrex	r3, [r3]
 8003dda:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003ddc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003dde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003de2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	3314      	adds	r3, #20
 8003dec:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003df0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003df2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003df6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003df8:	e841 2300 	strex	r3, r2, [r1]
 8003dfc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003dfe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1e3      	bne.n	8003dcc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	330c      	adds	r3, #12
 8003e18:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e1c:	e853 3f00 	ldrex	r3, [r3]
 8003e20:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003e22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e24:	f023 0310 	bic.w	r3, r3, #16
 8003e28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	330c      	adds	r3, #12
 8003e32:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003e36:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003e38:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003e3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e3e:	e841 2300 	strex	r3, r2, [r1]
 8003e42:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003e44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1e3      	bne.n	8003e12 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7fc fed7 	bl	8000c02 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2202      	movs	r2, #2
 8003e58:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	4619      	mov	r1, r3
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f8bf 	bl	8003fee <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e70:	e09c      	b.n	8003fac <HAL_UART_IRQHandler+0x518>
 8003e72:	bf00      	nop
 8003e74:	080040c9 	.word	0x080040c9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f000 808e 	beq.w	8003fb0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003e94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 8089 	beq.w	8003fb0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	330c      	adds	r3, #12
 8003ea4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ea8:	e853 3f00 	ldrex	r3, [r3]
 8003eac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eb0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003eb4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	330c      	adds	r3, #12
 8003ebe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003ec2:	647a      	str	r2, [r7, #68]	@ 0x44
 8003ec4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ec8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003eca:	e841 2300 	strex	r3, r2, [r1]
 8003ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ed0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1e3      	bne.n	8003e9e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	3314      	adds	r3, #20
 8003edc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee0:	e853 3f00 	ldrex	r3, [r3]
 8003ee4:	623b      	str	r3, [r7, #32]
   return(result);
 8003ee6:	6a3b      	ldr	r3, [r7, #32]
 8003ee8:	f023 0301 	bic.w	r3, r3, #1
 8003eec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	3314      	adds	r3, #20
 8003ef6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003efa:	633a      	str	r2, [r7, #48]	@ 0x30
 8003efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f02:	e841 2300 	strex	r3, r2, [r1]
 8003f06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1e3      	bne.n	8003ed6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2220      	movs	r2, #32
 8003f12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	330c      	adds	r3, #12
 8003f22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	e853 3f00 	ldrex	r3, [r3]
 8003f2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f023 0310 	bic.w	r3, r3, #16
 8003f32:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	330c      	adds	r3, #12
 8003f3c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003f40:	61fa      	str	r2, [r7, #28]
 8003f42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f44:	69b9      	ldr	r1, [r7, #24]
 8003f46:	69fa      	ldr	r2, [r7, #28]
 8003f48:	e841 2300 	strex	r3, r2, [r1]
 8003f4c:	617b      	str	r3, [r7, #20]
   return(result);
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1e3      	bne.n	8003f1c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2202      	movs	r2, #2
 8003f58:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f5a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f5e:	4619      	mov	r1, r3
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 f844 	bl	8003fee <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f66:	e023      	b.n	8003fb0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d009      	beq.n	8003f88 <HAL_UART_IRQHandler+0x4f4>
 8003f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d003      	beq.n	8003f88 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 f8b5 	bl	80040f0 <UART_Transmit_IT>
    return;
 8003f86:	e014      	b.n	8003fb2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00e      	beq.n	8003fb2 <HAL_UART_IRQHandler+0x51e>
 8003f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d008      	beq.n	8003fb2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 f8f4 	bl	800418e <UART_EndTransmit_IT>
    return;
 8003fa6:	e004      	b.n	8003fb2 <HAL_UART_IRQHandler+0x51e>
    return;
 8003fa8:	bf00      	nop
 8003faa:	e002      	b.n	8003fb2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003fac:	bf00      	nop
 8003fae:	e000      	b.n	8003fb2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003fb0:	bf00      	nop
  }
}
 8003fb2:	37e8      	adds	r7, #232	@ 0xe8
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bc80      	pop	{r7}
 8003fc8:	4770      	bx	lr

08003fca <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003fd2:	bf00      	nop
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bc80      	pop	{r7}
 8003fda:	4770      	bx	lr

08003fdc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bc80      	pop	{r7}
 8003fec:	4770      	bx	lr

08003fee <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b083      	sub	sp, #12
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ffa:	bf00      	nop
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bc80      	pop	{r7}
 8004002:	4770      	bx	lr

08004004 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004004:	b480      	push	{r7}
 8004006:	b095      	sub	sp, #84	@ 0x54
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	330c      	adds	r3, #12
 8004012:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004016:	e853 3f00 	ldrex	r3, [r3]
 800401a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800401c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800401e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004022:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	330c      	adds	r3, #12
 800402a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800402c:	643a      	str	r2, [r7, #64]	@ 0x40
 800402e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004030:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004032:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004034:	e841 2300 	strex	r3, r2, [r1]
 8004038:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800403a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1e5      	bne.n	800400c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	3314      	adds	r3, #20
 8004046:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004048:	6a3b      	ldr	r3, [r7, #32]
 800404a:	e853 3f00 	ldrex	r3, [r3]
 800404e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	f023 0301 	bic.w	r3, r3, #1
 8004056:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	3314      	adds	r3, #20
 800405e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004060:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004062:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004064:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004066:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004068:	e841 2300 	strex	r3, r2, [r1]
 800406c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800406e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1e5      	bne.n	8004040 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004078:	2b01      	cmp	r3, #1
 800407a:	d119      	bne.n	80040b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	330c      	adds	r3, #12
 8004082:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	e853 3f00 	ldrex	r3, [r3]
 800408a:	60bb      	str	r3, [r7, #8]
   return(result);
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	f023 0310 	bic.w	r3, r3, #16
 8004092:	647b      	str	r3, [r7, #68]	@ 0x44
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	330c      	adds	r3, #12
 800409a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800409c:	61ba      	str	r2, [r7, #24]
 800409e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a0:	6979      	ldr	r1, [r7, #20]
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	e841 2300 	strex	r3, r2, [r1]
 80040a8:	613b      	str	r3, [r7, #16]
   return(result);
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1e5      	bne.n	800407c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2220      	movs	r2, #32
 80040b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80040be:	bf00      	nop
 80040c0:	3754      	adds	r7, #84	@ 0x54
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bc80      	pop	{r7}
 80040c6:	4770      	bx	lr

080040c8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f7ff ff7a 	bl	8003fdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040e8:	bf00      	nop
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2b21      	cmp	r3, #33	@ 0x21
 8004102:	d13e      	bne.n	8004182 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800410c:	d114      	bne.n	8004138 <UART_Transmit_IT+0x48>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d110      	bne.n	8004138 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	881b      	ldrh	r3, [r3, #0]
 8004120:	461a      	mov	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800412a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	1c9a      	adds	r2, r3, #2
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	621a      	str	r2, [r3, #32]
 8004136:	e008      	b.n	800414a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	1c59      	adds	r1, r3, #1
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	6211      	str	r1, [r2, #32]
 8004142:	781a      	ldrb	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800414e:	b29b      	uxth	r3, r3
 8004150:	3b01      	subs	r3, #1
 8004152:	b29b      	uxth	r3, r3
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	4619      	mov	r1, r3
 8004158:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10f      	bne.n	800417e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800416c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68da      	ldr	r2, [r3, #12]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800417c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800417e:	2300      	movs	r3, #0
 8004180:	e000      	b.n	8004184 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004182:	2302      	movs	r3, #2
  }
}
 8004184:	4618      	mov	r0, r3
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	bc80      	pop	{r7}
 800418c:	4770      	bx	lr

0800418e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b082      	sub	sp, #8
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68da      	ldr	r2, [r3, #12]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2220      	movs	r2, #32
 80041aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7ff ff02 	bl	8003fb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b08c      	sub	sp, #48	@ 0x30
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b22      	cmp	r3, #34	@ 0x22
 80041d0:	f040 80ae 	bne.w	8004330 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041dc:	d117      	bne.n	800420e <UART_Receive_IT+0x50>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d113      	bne.n	800420e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80041e6:	2300      	movs	r3, #0
 80041e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004200:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004206:	1c9a      	adds	r2, r3, #2
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	629a      	str	r2, [r3, #40]	@ 0x28
 800420c:	e026      	b.n	800425c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004212:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004214:	2300      	movs	r3, #0
 8004216:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004220:	d007      	beq.n	8004232 <UART_Receive_IT+0x74>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10a      	bne.n	8004240 <UART_Receive_IT+0x82>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d106      	bne.n	8004240 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	b2da      	uxtb	r2, r3
 800423a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800423c:	701a      	strb	r2, [r3, #0]
 800423e:	e008      	b.n	8004252 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	b2db      	uxtb	r3, r3
 8004248:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800424c:	b2da      	uxtb	r2, r3
 800424e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004250:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004256:	1c5a      	adds	r2, r3, #1
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004260:	b29b      	uxth	r3, r3
 8004262:	3b01      	subs	r3, #1
 8004264:	b29b      	uxth	r3, r3
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	4619      	mov	r1, r3
 800426a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800426c:	2b00      	cmp	r3, #0
 800426e:	d15d      	bne.n	800432c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68da      	ldr	r2, [r3, #12]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 0220 	bic.w	r2, r2, #32
 800427e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68da      	ldr	r2, [r3, #12]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800428e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	695a      	ldr	r2, [r3, #20]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0201 	bic.w	r2, r2, #1
 800429e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2220      	movs	r2, #32
 80042a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d135      	bne.n	8004322 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	330c      	adds	r3, #12
 80042c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	e853 3f00 	ldrex	r3, [r3]
 80042ca:	613b      	str	r3, [r7, #16]
   return(result);
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	f023 0310 	bic.w	r3, r3, #16
 80042d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	330c      	adds	r3, #12
 80042da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042dc:	623a      	str	r2, [r7, #32]
 80042de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e0:	69f9      	ldr	r1, [r7, #28]
 80042e2:	6a3a      	ldr	r2, [r7, #32]
 80042e4:	e841 2300 	strex	r3, r2, [r1]
 80042e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1e5      	bne.n	80042bc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0310 	and.w	r3, r3, #16
 80042fa:	2b10      	cmp	r3, #16
 80042fc:	d10a      	bne.n	8004314 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042fe:	2300      	movs	r3, #0
 8004300:	60fb      	str	r3, [r7, #12]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	60fb      	str	r3, [r7, #12]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	60fb      	str	r3, [r7, #12]
 8004312:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004318:	4619      	mov	r1, r3
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f7ff fe67 	bl	8003fee <HAL_UARTEx_RxEventCallback>
 8004320:	e002      	b.n	8004328 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7ff fe51 	bl	8003fca <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004328:	2300      	movs	r3, #0
 800432a:	e002      	b.n	8004332 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800432c:	2300      	movs	r3, #0
 800432e:	e000      	b.n	8004332 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004330:	2302      	movs	r3, #2
  }
}
 8004332:	4618      	mov	r0, r3
 8004334:	3730      	adds	r7, #48	@ 0x30
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
	...

0800433c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68da      	ldr	r2, [r3, #12]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	430a      	orrs	r2, r1
 8004358:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	689a      	ldr	r2, [r3, #8]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	431a      	orrs	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	4313      	orrs	r3, r2
 800436a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004376:	f023 030c 	bic.w	r3, r3, #12
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	6812      	ldr	r2, [r2, #0]
 800437e:	68b9      	ldr	r1, [r7, #8]
 8004380:	430b      	orrs	r3, r1
 8004382:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	699a      	ldr	r2, [r3, #24]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a2c      	ldr	r2, [pc, #176]	@ (8004450 <UART_SetConfig+0x114>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d103      	bne.n	80043ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80043a4:	f7ff fad0 	bl	8003948 <HAL_RCC_GetPCLK2Freq>
 80043a8:	60f8      	str	r0, [r7, #12]
 80043aa:	e002      	b.n	80043b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80043ac:	f7ff fab8 	bl	8003920 <HAL_RCC_GetPCLK1Freq>
 80043b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	4613      	mov	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	009a      	lsls	r2, r3, #2
 80043bc:	441a      	add	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c8:	4a22      	ldr	r2, [pc, #136]	@ (8004454 <UART_SetConfig+0x118>)
 80043ca:	fba2 2303 	umull	r2, r3, r2, r3
 80043ce:	095b      	lsrs	r3, r3, #5
 80043d0:	0119      	lsls	r1, r3, #4
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	4613      	mov	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	009a      	lsls	r2, r3, #2
 80043dc:	441a      	add	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80043e8:	4b1a      	ldr	r3, [pc, #104]	@ (8004454 <UART_SetConfig+0x118>)
 80043ea:	fba3 0302 	umull	r0, r3, r3, r2
 80043ee:	095b      	lsrs	r3, r3, #5
 80043f0:	2064      	movs	r0, #100	@ 0x64
 80043f2:	fb00 f303 	mul.w	r3, r0, r3
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	011b      	lsls	r3, r3, #4
 80043fa:	3332      	adds	r3, #50	@ 0x32
 80043fc:	4a15      	ldr	r2, [pc, #84]	@ (8004454 <UART_SetConfig+0x118>)
 80043fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004402:	095b      	lsrs	r3, r3, #5
 8004404:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004408:	4419      	add	r1, r3
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	4613      	mov	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4413      	add	r3, r2
 8004412:	009a      	lsls	r2, r3, #2
 8004414:	441a      	add	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004420:	4b0c      	ldr	r3, [pc, #48]	@ (8004454 <UART_SetConfig+0x118>)
 8004422:	fba3 0302 	umull	r0, r3, r3, r2
 8004426:	095b      	lsrs	r3, r3, #5
 8004428:	2064      	movs	r0, #100	@ 0x64
 800442a:	fb00 f303 	mul.w	r3, r0, r3
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	011b      	lsls	r3, r3, #4
 8004432:	3332      	adds	r3, #50	@ 0x32
 8004434:	4a07      	ldr	r2, [pc, #28]	@ (8004454 <UART_SetConfig+0x118>)
 8004436:	fba2 2303 	umull	r2, r3, r2, r3
 800443a:	095b      	lsrs	r3, r3, #5
 800443c:	f003 020f 	and.w	r2, r3, #15
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	440a      	add	r2, r1
 8004446:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004448:	bf00      	nop
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	40013800 	.word	0x40013800
 8004454:	51eb851f 	.word	0x51eb851f

08004458 <siprintf>:
 8004458:	b40e      	push	{r1, r2, r3}
 800445a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800445e:	b500      	push	{lr}
 8004460:	b09c      	sub	sp, #112	@ 0x70
 8004462:	ab1d      	add	r3, sp, #116	@ 0x74
 8004464:	9002      	str	r0, [sp, #8]
 8004466:	9006      	str	r0, [sp, #24]
 8004468:	9107      	str	r1, [sp, #28]
 800446a:	9104      	str	r1, [sp, #16]
 800446c:	4808      	ldr	r0, [pc, #32]	@ (8004490 <siprintf+0x38>)
 800446e:	4909      	ldr	r1, [pc, #36]	@ (8004494 <siprintf+0x3c>)
 8004470:	f853 2b04 	ldr.w	r2, [r3], #4
 8004474:	9105      	str	r1, [sp, #20]
 8004476:	6800      	ldr	r0, [r0, #0]
 8004478:	a902      	add	r1, sp, #8
 800447a:	9301      	str	r3, [sp, #4]
 800447c:	f000 f992 	bl	80047a4 <_svfiprintf_r>
 8004480:	2200      	movs	r2, #0
 8004482:	9b02      	ldr	r3, [sp, #8]
 8004484:	701a      	strb	r2, [r3, #0]
 8004486:	b01c      	add	sp, #112	@ 0x70
 8004488:	f85d eb04 	ldr.w	lr, [sp], #4
 800448c:	b003      	add	sp, #12
 800448e:	4770      	bx	lr
 8004490:	20000010 	.word	0x20000010
 8004494:	ffff0208 	.word	0xffff0208

08004498 <memset>:
 8004498:	4603      	mov	r3, r0
 800449a:	4402      	add	r2, r0
 800449c:	4293      	cmp	r3, r2
 800449e:	d100      	bne.n	80044a2 <memset+0xa>
 80044a0:	4770      	bx	lr
 80044a2:	f803 1b01 	strb.w	r1, [r3], #1
 80044a6:	e7f9      	b.n	800449c <memset+0x4>

080044a8 <__errno>:
 80044a8:	4b01      	ldr	r3, [pc, #4]	@ (80044b0 <__errno+0x8>)
 80044aa:	6818      	ldr	r0, [r3, #0]
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	20000010 	.word	0x20000010

080044b4 <__libc_init_array>:
 80044b4:	b570      	push	{r4, r5, r6, lr}
 80044b6:	2600      	movs	r6, #0
 80044b8:	4d0c      	ldr	r5, [pc, #48]	@ (80044ec <__libc_init_array+0x38>)
 80044ba:	4c0d      	ldr	r4, [pc, #52]	@ (80044f0 <__libc_init_array+0x3c>)
 80044bc:	1b64      	subs	r4, r4, r5
 80044be:	10a4      	asrs	r4, r4, #2
 80044c0:	42a6      	cmp	r6, r4
 80044c2:	d109      	bne.n	80044d8 <__libc_init_array+0x24>
 80044c4:	f000 fc78 	bl	8004db8 <_init>
 80044c8:	2600      	movs	r6, #0
 80044ca:	4d0a      	ldr	r5, [pc, #40]	@ (80044f4 <__libc_init_array+0x40>)
 80044cc:	4c0a      	ldr	r4, [pc, #40]	@ (80044f8 <__libc_init_array+0x44>)
 80044ce:	1b64      	subs	r4, r4, r5
 80044d0:	10a4      	asrs	r4, r4, #2
 80044d2:	42a6      	cmp	r6, r4
 80044d4:	d105      	bne.n	80044e2 <__libc_init_array+0x2e>
 80044d6:	bd70      	pop	{r4, r5, r6, pc}
 80044d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80044dc:	4798      	blx	r3
 80044de:	3601      	adds	r6, #1
 80044e0:	e7ee      	b.n	80044c0 <__libc_init_array+0xc>
 80044e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80044e6:	4798      	blx	r3
 80044e8:	3601      	adds	r6, #1
 80044ea:	e7f2      	b.n	80044d2 <__libc_init_array+0x1e>
 80044ec:	08004e5c 	.word	0x08004e5c
 80044f0:	08004e5c 	.word	0x08004e5c
 80044f4:	08004e5c 	.word	0x08004e5c
 80044f8:	08004e60 	.word	0x08004e60

080044fc <__retarget_lock_acquire_recursive>:
 80044fc:	4770      	bx	lr

080044fe <__retarget_lock_release_recursive>:
 80044fe:	4770      	bx	lr

08004500 <_free_r>:
 8004500:	b538      	push	{r3, r4, r5, lr}
 8004502:	4605      	mov	r5, r0
 8004504:	2900      	cmp	r1, #0
 8004506:	d040      	beq.n	800458a <_free_r+0x8a>
 8004508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800450c:	1f0c      	subs	r4, r1, #4
 800450e:	2b00      	cmp	r3, #0
 8004510:	bfb8      	it	lt
 8004512:	18e4      	addlt	r4, r4, r3
 8004514:	f000 f8de 	bl	80046d4 <__malloc_lock>
 8004518:	4a1c      	ldr	r2, [pc, #112]	@ (800458c <_free_r+0x8c>)
 800451a:	6813      	ldr	r3, [r2, #0]
 800451c:	b933      	cbnz	r3, 800452c <_free_r+0x2c>
 800451e:	6063      	str	r3, [r4, #4]
 8004520:	6014      	str	r4, [r2, #0]
 8004522:	4628      	mov	r0, r5
 8004524:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004528:	f000 b8da 	b.w	80046e0 <__malloc_unlock>
 800452c:	42a3      	cmp	r3, r4
 800452e:	d908      	bls.n	8004542 <_free_r+0x42>
 8004530:	6820      	ldr	r0, [r4, #0]
 8004532:	1821      	adds	r1, r4, r0
 8004534:	428b      	cmp	r3, r1
 8004536:	bf01      	itttt	eq
 8004538:	6819      	ldreq	r1, [r3, #0]
 800453a:	685b      	ldreq	r3, [r3, #4]
 800453c:	1809      	addeq	r1, r1, r0
 800453e:	6021      	streq	r1, [r4, #0]
 8004540:	e7ed      	b.n	800451e <_free_r+0x1e>
 8004542:	461a      	mov	r2, r3
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	b10b      	cbz	r3, 800454c <_free_r+0x4c>
 8004548:	42a3      	cmp	r3, r4
 800454a:	d9fa      	bls.n	8004542 <_free_r+0x42>
 800454c:	6811      	ldr	r1, [r2, #0]
 800454e:	1850      	adds	r0, r2, r1
 8004550:	42a0      	cmp	r0, r4
 8004552:	d10b      	bne.n	800456c <_free_r+0x6c>
 8004554:	6820      	ldr	r0, [r4, #0]
 8004556:	4401      	add	r1, r0
 8004558:	1850      	adds	r0, r2, r1
 800455a:	4283      	cmp	r3, r0
 800455c:	6011      	str	r1, [r2, #0]
 800455e:	d1e0      	bne.n	8004522 <_free_r+0x22>
 8004560:	6818      	ldr	r0, [r3, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	4408      	add	r0, r1
 8004566:	6010      	str	r0, [r2, #0]
 8004568:	6053      	str	r3, [r2, #4]
 800456a:	e7da      	b.n	8004522 <_free_r+0x22>
 800456c:	d902      	bls.n	8004574 <_free_r+0x74>
 800456e:	230c      	movs	r3, #12
 8004570:	602b      	str	r3, [r5, #0]
 8004572:	e7d6      	b.n	8004522 <_free_r+0x22>
 8004574:	6820      	ldr	r0, [r4, #0]
 8004576:	1821      	adds	r1, r4, r0
 8004578:	428b      	cmp	r3, r1
 800457a:	bf01      	itttt	eq
 800457c:	6819      	ldreq	r1, [r3, #0]
 800457e:	685b      	ldreq	r3, [r3, #4]
 8004580:	1809      	addeq	r1, r1, r0
 8004582:	6021      	streq	r1, [r4, #0]
 8004584:	6063      	str	r3, [r4, #4]
 8004586:	6054      	str	r4, [r2, #4]
 8004588:	e7cb      	b.n	8004522 <_free_r+0x22>
 800458a:	bd38      	pop	{r3, r4, r5, pc}
 800458c:	20000270 	.word	0x20000270

08004590 <sbrk_aligned>:
 8004590:	b570      	push	{r4, r5, r6, lr}
 8004592:	4e0f      	ldr	r6, [pc, #60]	@ (80045d0 <sbrk_aligned+0x40>)
 8004594:	460c      	mov	r4, r1
 8004596:	6831      	ldr	r1, [r6, #0]
 8004598:	4605      	mov	r5, r0
 800459a:	b911      	cbnz	r1, 80045a2 <sbrk_aligned+0x12>
 800459c:	f000 fbaa 	bl	8004cf4 <_sbrk_r>
 80045a0:	6030      	str	r0, [r6, #0]
 80045a2:	4621      	mov	r1, r4
 80045a4:	4628      	mov	r0, r5
 80045a6:	f000 fba5 	bl	8004cf4 <_sbrk_r>
 80045aa:	1c43      	adds	r3, r0, #1
 80045ac:	d103      	bne.n	80045b6 <sbrk_aligned+0x26>
 80045ae:	f04f 34ff 	mov.w	r4, #4294967295
 80045b2:	4620      	mov	r0, r4
 80045b4:	bd70      	pop	{r4, r5, r6, pc}
 80045b6:	1cc4      	adds	r4, r0, #3
 80045b8:	f024 0403 	bic.w	r4, r4, #3
 80045bc:	42a0      	cmp	r0, r4
 80045be:	d0f8      	beq.n	80045b2 <sbrk_aligned+0x22>
 80045c0:	1a21      	subs	r1, r4, r0
 80045c2:	4628      	mov	r0, r5
 80045c4:	f000 fb96 	bl	8004cf4 <_sbrk_r>
 80045c8:	3001      	adds	r0, #1
 80045ca:	d1f2      	bne.n	80045b2 <sbrk_aligned+0x22>
 80045cc:	e7ef      	b.n	80045ae <sbrk_aligned+0x1e>
 80045ce:	bf00      	nop
 80045d0:	2000026c 	.word	0x2000026c

080045d4 <_malloc_r>:
 80045d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045d8:	1ccd      	adds	r5, r1, #3
 80045da:	f025 0503 	bic.w	r5, r5, #3
 80045de:	3508      	adds	r5, #8
 80045e0:	2d0c      	cmp	r5, #12
 80045e2:	bf38      	it	cc
 80045e4:	250c      	movcc	r5, #12
 80045e6:	2d00      	cmp	r5, #0
 80045e8:	4606      	mov	r6, r0
 80045ea:	db01      	blt.n	80045f0 <_malloc_r+0x1c>
 80045ec:	42a9      	cmp	r1, r5
 80045ee:	d904      	bls.n	80045fa <_malloc_r+0x26>
 80045f0:	230c      	movs	r3, #12
 80045f2:	6033      	str	r3, [r6, #0]
 80045f4:	2000      	movs	r0, #0
 80045f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80046d0 <_malloc_r+0xfc>
 80045fe:	f000 f869 	bl	80046d4 <__malloc_lock>
 8004602:	f8d8 3000 	ldr.w	r3, [r8]
 8004606:	461c      	mov	r4, r3
 8004608:	bb44      	cbnz	r4, 800465c <_malloc_r+0x88>
 800460a:	4629      	mov	r1, r5
 800460c:	4630      	mov	r0, r6
 800460e:	f7ff ffbf 	bl	8004590 <sbrk_aligned>
 8004612:	1c43      	adds	r3, r0, #1
 8004614:	4604      	mov	r4, r0
 8004616:	d158      	bne.n	80046ca <_malloc_r+0xf6>
 8004618:	f8d8 4000 	ldr.w	r4, [r8]
 800461c:	4627      	mov	r7, r4
 800461e:	2f00      	cmp	r7, #0
 8004620:	d143      	bne.n	80046aa <_malloc_r+0xd6>
 8004622:	2c00      	cmp	r4, #0
 8004624:	d04b      	beq.n	80046be <_malloc_r+0xea>
 8004626:	6823      	ldr	r3, [r4, #0]
 8004628:	4639      	mov	r1, r7
 800462a:	4630      	mov	r0, r6
 800462c:	eb04 0903 	add.w	r9, r4, r3
 8004630:	f000 fb60 	bl	8004cf4 <_sbrk_r>
 8004634:	4581      	cmp	r9, r0
 8004636:	d142      	bne.n	80046be <_malloc_r+0xea>
 8004638:	6821      	ldr	r1, [r4, #0]
 800463a:	4630      	mov	r0, r6
 800463c:	1a6d      	subs	r5, r5, r1
 800463e:	4629      	mov	r1, r5
 8004640:	f7ff ffa6 	bl	8004590 <sbrk_aligned>
 8004644:	3001      	adds	r0, #1
 8004646:	d03a      	beq.n	80046be <_malloc_r+0xea>
 8004648:	6823      	ldr	r3, [r4, #0]
 800464a:	442b      	add	r3, r5
 800464c:	6023      	str	r3, [r4, #0]
 800464e:	f8d8 3000 	ldr.w	r3, [r8]
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	bb62      	cbnz	r2, 80046b0 <_malloc_r+0xdc>
 8004656:	f8c8 7000 	str.w	r7, [r8]
 800465a:	e00f      	b.n	800467c <_malloc_r+0xa8>
 800465c:	6822      	ldr	r2, [r4, #0]
 800465e:	1b52      	subs	r2, r2, r5
 8004660:	d420      	bmi.n	80046a4 <_malloc_r+0xd0>
 8004662:	2a0b      	cmp	r2, #11
 8004664:	d917      	bls.n	8004696 <_malloc_r+0xc2>
 8004666:	1961      	adds	r1, r4, r5
 8004668:	42a3      	cmp	r3, r4
 800466a:	6025      	str	r5, [r4, #0]
 800466c:	bf18      	it	ne
 800466e:	6059      	strne	r1, [r3, #4]
 8004670:	6863      	ldr	r3, [r4, #4]
 8004672:	bf08      	it	eq
 8004674:	f8c8 1000 	streq.w	r1, [r8]
 8004678:	5162      	str	r2, [r4, r5]
 800467a:	604b      	str	r3, [r1, #4]
 800467c:	4630      	mov	r0, r6
 800467e:	f000 f82f 	bl	80046e0 <__malloc_unlock>
 8004682:	f104 000b 	add.w	r0, r4, #11
 8004686:	1d23      	adds	r3, r4, #4
 8004688:	f020 0007 	bic.w	r0, r0, #7
 800468c:	1ac2      	subs	r2, r0, r3
 800468e:	bf1c      	itt	ne
 8004690:	1a1b      	subne	r3, r3, r0
 8004692:	50a3      	strne	r3, [r4, r2]
 8004694:	e7af      	b.n	80045f6 <_malloc_r+0x22>
 8004696:	6862      	ldr	r2, [r4, #4]
 8004698:	42a3      	cmp	r3, r4
 800469a:	bf0c      	ite	eq
 800469c:	f8c8 2000 	streq.w	r2, [r8]
 80046a0:	605a      	strne	r2, [r3, #4]
 80046a2:	e7eb      	b.n	800467c <_malloc_r+0xa8>
 80046a4:	4623      	mov	r3, r4
 80046a6:	6864      	ldr	r4, [r4, #4]
 80046a8:	e7ae      	b.n	8004608 <_malloc_r+0x34>
 80046aa:	463c      	mov	r4, r7
 80046ac:	687f      	ldr	r7, [r7, #4]
 80046ae:	e7b6      	b.n	800461e <_malloc_r+0x4a>
 80046b0:	461a      	mov	r2, r3
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	42a3      	cmp	r3, r4
 80046b6:	d1fb      	bne.n	80046b0 <_malloc_r+0xdc>
 80046b8:	2300      	movs	r3, #0
 80046ba:	6053      	str	r3, [r2, #4]
 80046bc:	e7de      	b.n	800467c <_malloc_r+0xa8>
 80046be:	230c      	movs	r3, #12
 80046c0:	4630      	mov	r0, r6
 80046c2:	6033      	str	r3, [r6, #0]
 80046c4:	f000 f80c 	bl	80046e0 <__malloc_unlock>
 80046c8:	e794      	b.n	80045f4 <_malloc_r+0x20>
 80046ca:	6005      	str	r5, [r0, #0]
 80046cc:	e7d6      	b.n	800467c <_malloc_r+0xa8>
 80046ce:	bf00      	nop
 80046d0:	20000270 	.word	0x20000270

080046d4 <__malloc_lock>:
 80046d4:	4801      	ldr	r0, [pc, #4]	@ (80046dc <__malloc_lock+0x8>)
 80046d6:	f7ff bf11 	b.w	80044fc <__retarget_lock_acquire_recursive>
 80046da:	bf00      	nop
 80046dc:	20000268 	.word	0x20000268

080046e0 <__malloc_unlock>:
 80046e0:	4801      	ldr	r0, [pc, #4]	@ (80046e8 <__malloc_unlock+0x8>)
 80046e2:	f7ff bf0c 	b.w	80044fe <__retarget_lock_release_recursive>
 80046e6:	bf00      	nop
 80046e8:	20000268 	.word	0x20000268

080046ec <__ssputs_r>:
 80046ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046f0:	461f      	mov	r7, r3
 80046f2:	688e      	ldr	r6, [r1, #8]
 80046f4:	4682      	mov	sl, r0
 80046f6:	42be      	cmp	r6, r7
 80046f8:	460c      	mov	r4, r1
 80046fa:	4690      	mov	r8, r2
 80046fc:	680b      	ldr	r3, [r1, #0]
 80046fe:	d82d      	bhi.n	800475c <__ssputs_r+0x70>
 8004700:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004704:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004708:	d026      	beq.n	8004758 <__ssputs_r+0x6c>
 800470a:	6965      	ldr	r5, [r4, #20]
 800470c:	6909      	ldr	r1, [r1, #16]
 800470e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004712:	eba3 0901 	sub.w	r9, r3, r1
 8004716:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800471a:	1c7b      	adds	r3, r7, #1
 800471c:	444b      	add	r3, r9
 800471e:	106d      	asrs	r5, r5, #1
 8004720:	429d      	cmp	r5, r3
 8004722:	bf38      	it	cc
 8004724:	461d      	movcc	r5, r3
 8004726:	0553      	lsls	r3, r2, #21
 8004728:	d527      	bpl.n	800477a <__ssputs_r+0x8e>
 800472a:	4629      	mov	r1, r5
 800472c:	f7ff ff52 	bl	80045d4 <_malloc_r>
 8004730:	4606      	mov	r6, r0
 8004732:	b360      	cbz	r0, 800478e <__ssputs_r+0xa2>
 8004734:	464a      	mov	r2, r9
 8004736:	6921      	ldr	r1, [r4, #16]
 8004738:	f000 fafa 	bl	8004d30 <memcpy>
 800473c:	89a3      	ldrh	r3, [r4, #12]
 800473e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004742:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004746:	81a3      	strh	r3, [r4, #12]
 8004748:	6126      	str	r6, [r4, #16]
 800474a:	444e      	add	r6, r9
 800474c:	6026      	str	r6, [r4, #0]
 800474e:	463e      	mov	r6, r7
 8004750:	6165      	str	r5, [r4, #20]
 8004752:	eba5 0509 	sub.w	r5, r5, r9
 8004756:	60a5      	str	r5, [r4, #8]
 8004758:	42be      	cmp	r6, r7
 800475a:	d900      	bls.n	800475e <__ssputs_r+0x72>
 800475c:	463e      	mov	r6, r7
 800475e:	4632      	mov	r2, r6
 8004760:	4641      	mov	r1, r8
 8004762:	6820      	ldr	r0, [r4, #0]
 8004764:	f000 faac 	bl	8004cc0 <memmove>
 8004768:	2000      	movs	r0, #0
 800476a:	68a3      	ldr	r3, [r4, #8]
 800476c:	1b9b      	subs	r3, r3, r6
 800476e:	60a3      	str	r3, [r4, #8]
 8004770:	6823      	ldr	r3, [r4, #0]
 8004772:	4433      	add	r3, r6
 8004774:	6023      	str	r3, [r4, #0]
 8004776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800477a:	462a      	mov	r2, r5
 800477c:	f000 fae6 	bl	8004d4c <_realloc_r>
 8004780:	4606      	mov	r6, r0
 8004782:	2800      	cmp	r0, #0
 8004784:	d1e0      	bne.n	8004748 <__ssputs_r+0x5c>
 8004786:	4650      	mov	r0, sl
 8004788:	6921      	ldr	r1, [r4, #16]
 800478a:	f7ff feb9 	bl	8004500 <_free_r>
 800478e:	230c      	movs	r3, #12
 8004790:	f8ca 3000 	str.w	r3, [sl]
 8004794:	89a3      	ldrh	r3, [r4, #12]
 8004796:	f04f 30ff 	mov.w	r0, #4294967295
 800479a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800479e:	81a3      	strh	r3, [r4, #12]
 80047a0:	e7e9      	b.n	8004776 <__ssputs_r+0x8a>
	...

080047a4 <_svfiprintf_r>:
 80047a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047a8:	4698      	mov	r8, r3
 80047aa:	898b      	ldrh	r3, [r1, #12]
 80047ac:	4607      	mov	r7, r0
 80047ae:	061b      	lsls	r3, r3, #24
 80047b0:	460d      	mov	r5, r1
 80047b2:	4614      	mov	r4, r2
 80047b4:	b09d      	sub	sp, #116	@ 0x74
 80047b6:	d510      	bpl.n	80047da <_svfiprintf_r+0x36>
 80047b8:	690b      	ldr	r3, [r1, #16]
 80047ba:	b973      	cbnz	r3, 80047da <_svfiprintf_r+0x36>
 80047bc:	2140      	movs	r1, #64	@ 0x40
 80047be:	f7ff ff09 	bl	80045d4 <_malloc_r>
 80047c2:	6028      	str	r0, [r5, #0]
 80047c4:	6128      	str	r0, [r5, #16]
 80047c6:	b930      	cbnz	r0, 80047d6 <_svfiprintf_r+0x32>
 80047c8:	230c      	movs	r3, #12
 80047ca:	603b      	str	r3, [r7, #0]
 80047cc:	f04f 30ff 	mov.w	r0, #4294967295
 80047d0:	b01d      	add	sp, #116	@ 0x74
 80047d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047d6:	2340      	movs	r3, #64	@ 0x40
 80047d8:	616b      	str	r3, [r5, #20]
 80047da:	2300      	movs	r3, #0
 80047dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80047de:	2320      	movs	r3, #32
 80047e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80047e4:	2330      	movs	r3, #48	@ 0x30
 80047e6:	f04f 0901 	mov.w	r9, #1
 80047ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80047ee:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004988 <_svfiprintf_r+0x1e4>
 80047f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80047f6:	4623      	mov	r3, r4
 80047f8:	469a      	mov	sl, r3
 80047fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047fe:	b10a      	cbz	r2, 8004804 <_svfiprintf_r+0x60>
 8004800:	2a25      	cmp	r2, #37	@ 0x25
 8004802:	d1f9      	bne.n	80047f8 <_svfiprintf_r+0x54>
 8004804:	ebba 0b04 	subs.w	fp, sl, r4
 8004808:	d00b      	beq.n	8004822 <_svfiprintf_r+0x7e>
 800480a:	465b      	mov	r3, fp
 800480c:	4622      	mov	r2, r4
 800480e:	4629      	mov	r1, r5
 8004810:	4638      	mov	r0, r7
 8004812:	f7ff ff6b 	bl	80046ec <__ssputs_r>
 8004816:	3001      	adds	r0, #1
 8004818:	f000 80a7 	beq.w	800496a <_svfiprintf_r+0x1c6>
 800481c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800481e:	445a      	add	r2, fp
 8004820:	9209      	str	r2, [sp, #36]	@ 0x24
 8004822:	f89a 3000 	ldrb.w	r3, [sl]
 8004826:	2b00      	cmp	r3, #0
 8004828:	f000 809f 	beq.w	800496a <_svfiprintf_r+0x1c6>
 800482c:	2300      	movs	r3, #0
 800482e:	f04f 32ff 	mov.w	r2, #4294967295
 8004832:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004836:	f10a 0a01 	add.w	sl, sl, #1
 800483a:	9304      	str	r3, [sp, #16]
 800483c:	9307      	str	r3, [sp, #28]
 800483e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004842:	931a      	str	r3, [sp, #104]	@ 0x68
 8004844:	4654      	mov	r4, sl
 8004846:	2205      	movs	r2, #5
 8004848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800484c:	484e      	ldr	r0, [pc, #312]	@ (8004988 <_svfiprintf_r+0x1e4>)
 800484e:	f000 fa61 	bl	8004d14 <memchr>
 8004852:	9a04      	ldr	r2, [sp, #16]
 8004854:	b9d8      	cbnz	r0, 800488e <_svfiprintf_r+0xea>
 8004856:	06d0      	lsls	r0, r2, #27
 8004858:	bf44      	itt	mi
 800485a:	2320      	movmi	r3, #32
 800485c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004860:	0711      	lsls	r1, r2, #28
 8004862:	bf44      	itt	mi
 8004864:	232b      	movmi	r3, #43	@ 0x2b
 8004866:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800486a:	f89a 3000 	ldrb.w	r3, [sl]
 800486e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004870:	d015      	beq.n	800489e <_svfiprintf_r+0xfa>
 8004872:	4654      	mov	r4, sl
 8004874:	2000      	movs	r0, #0
 8004876:	f04f 0c0a 	mov.w	ip, #10
 800487a:	9a07      	ldr	r2, [sp, #28]
 800487c:	4621      	mov	r1, r4
 800487e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004882:	3b30      	subs	r3, #48	@ 0x30
 8004884:	2b09      	cmp	r3, #9
 8004886:	d94b      	bls.n	8004920 <_svfiprintf_r+0x17c>
 8004888:	b1b0      	cbz	r0, 80048b8 <_svfiprintf_r+0x114>
 800488a:	9207      	str	r2, [sp, #28]
 800488c:	e014      	b.n	80048b8 <_svfiprintf_r+0x114>
 800488e:	eba0 0308 	sub.w	r3, r0, r8
 8004892:	fa09 f303 	lsl.w	r3, r9, r3
 8004896:	4313      	orrs	r3, r2
 8004898:	46a2      	mov	sl, r4
 800489a:	9304      	str	r3, [sp, #16]
 800489c:	e7d2      	b.n	8004844 <_svfiprintf_r+0xa0>
 800489e:	9b03      	ldr	r3, [sp, #12]
 80048a0:	1d19      	adds	r1, r3, #4
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	9103      	str	r1, [sp, #12]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	bfbb      	ittet	lt
 80048aa:	425b      	neglt	r3, r3
 80048ac:	f042 0202 	orrlt.w	r2, r2, #2
 80048b0:	9307      	strge	r3, [sp, #28]
 80048b2:	9307      	strlt	r3, [sp, #28]
 80048b4:	bfb8      	it	lt
 80048b6:	9204      	strlt	r2, [sp, #16]
 80048b8:	7823      	ldrb	r3, [r4, #0]
 80048ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80048bc:	d10a      	bne.n	80048d4 <_svfiprintf_r+0x130>
 80048be:	7863      	ldrb	r3, [r4, #1]
 80048c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80048c2:	d132      	bne.n	800492a <_svfiprintf_r+0x186>
 80048c4:	9b03      	ldr	r3, [sp, #12]
 80048c6:	3402      	adds	r4, #2
 80048c8:	1d1a      	adds	r2, r3, #4
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	9203      	str	r2, [sp, #12]
 80048ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80048d2:	9305      	str	r3, [sp, #20]
 80048d4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800498c <_svfiprintf_r+0x1e8>
 80048d8:	2203      	movs	r2, #3
 80048da:	4650      	mov	r0, sl
 80048dc:	7821      	ldrb	r1, [r4, #0]
 80048de:	f000 fa19 	bl	8004d14 <memchr>
 80048e2:	b138      	cbz	r0, 80048f4 <_svfiprintf_r+0x150>
 80048e4:	2240      	movs	r2, #64	@ 0x40
 80048e6:	9b04      	ldr	r3, [sp, #16]
 80048e8:	eba0 000a 	sub.w	r0, r0, sl
 80048ec:	4082      	lsls	r2, r0
 80048ee:	4313      	orrs	r3, r2
 80048f0:	3401      	adds	r4, #1
 80048f2:	9304      	str	r3, [sp, #16]
 80048f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048f8:	2206      	movs	r2, #6
 80048fa:	4825      	ldr	r0, [pc, #148]	@ (8004990 <_svfiprintf_r+0x1ec>)
 80048fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004900:	f000 fa08 	bl	8004d14 <memchr>
 8004904:	2800      	cmp	r0, #0
 8004906:	d036      	beq.n	8004976 <_svfiprintf_r+0x1d2>
 8004908:	4b22      	ldr	r3, [pc, #136]	@ (8004994 <_svfiprintf_r+0x1f0>)
 800490a:	bb1b      	cbnz	r3, 8004954 <_svfiprintf_r+0x1b0>
 800490c:	9b03      	ldr	r3, [sp, #12]
 800490e:	3307      	adds	r3, #7
 8004910:	f023 0307 	bic.w	r3, r3, #7
 8004914:	3308      	adds	r3, #8
 8004916:	9303      	str	r3, [sp, #12]
 8004918:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800491a:	4433      	add	r3, r6
 800491c:	9309      	str	r3, [sp, #36]	@ 0x24
 800491e:	e76a      	b.n	80047f6 <_svfiprintf_r+0x52>
 8004920:	460c      	mov	r4, r1
 8004922:	2001      	movs	r0, #1
 8004924:	fb0c 3202 	mla	r2, ip, r2, r3
 8004928:	e7a8      	b.n	800487c <_svfiprintf_r+0xd8>
 800492a:	2300      	movs	r3, #0
 800492c:	f04f 0c0a 	mov.w	ip, #10
 8004930:	4619      	mov	r1, r3
 8004932:	3401      	adds	r4, #1
 8004934:	9305      	str	r3, [sp, #20]
 8004936:	4620      	mov	r0, r4
 8004938:	f810 2b01 	ldrb.w	r2, [r0], #1
 800493c:	3a30      	subs	r2, #48	@ 0x30
 800493e:	2a09      	cmp	r2, #9
 8004940:	d903      	bls.n	800494a <_svfiprintf_r+0x1a6>
 8004942:	2b00      	cmp	r3, #0
 8004944:	d0c6      	beq.n	80048d4 <_svfiprintf_r+0x130>
 8004946:	9105      	str	r1, [sp, #20]
 8004948:	e7c4      	b.n	80048d4 <_svfiprintf_r+0x130>
 800494a:	4604      	mov	r4, r0
 800494c:	2301      	movs	r3, #1
 800494e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004952:	e7f0      	b.n	8004936 <_svfiprintf_r+0x192>
 8004954:	ab03      	add	r3, sp, #12
 8004956:	9300      	str	r3, [sp, #0]
 8004958:	462a      	mov	r2, r5
 800495a:	4638      	mov	r0, r7
 800495c:	4b0e      	ldr	r3, [pc, #56]	@ (8004998 <_svfiprintf_r+0x1f4>)
 800495e:	a904      	add	r1, sp, #16
 8004960:	f3af 8000 	nop.w
 8004964:	1c42      	adds	r2, r0, #1
 8004966:	4606      	mov	r6, r0
 8004968:	d1d6      	bne.n	8004918 <_svfiprintf_r+0x174>
 800496a:	89ab      	ldrh	r3, [r5, #12]
 800496c:	065b      	lsls	r3, r3, #25
 800496e:	f53f af2d 	bmi.w	80047cc <_svfiprintf_r+0x28>
 8004972:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004974:	e72c      	b.n	80047d0 <_svfiprintf_r+0x2c>
 8004976:	ab03      	add	r3, sp, #12
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	462a      	mov	r2, r5
 800497c:	4638      	mov	r0, r7
 800497e:	4b06      	ldr	r3, [pc, #24]	@ (8004998 <_svfiprintf_r+0x1f4>)
 8004980:	a904      	add	r1, sp, #16
 8004982:	f000 f87d 	bl	8004a80 <_printf_i>
 8004986:	e7ed      	b.n	8004964 <_svfiprintf_r+0x1c0>
 8004988:	08004e26 	.word	0x08004e26
 800498c:	08004e2c 	.word	0x08004e2c
 8004990:	08004e30 	.word	0x08004e30
 8004994:	00000000 	.word	0x00000000
 8004998:	080046ed 	.word	0x080046ed

0800499c <_printf_common>:
 800499c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049a0:	4616      	mov	r6, r2
 80049a2:	4698      	mov	r8, r3
 80049a4:	688a      	ldr	r2, [r1, #8]
 80049a6:	690b      	ldr	r3, [r1, #16]
 80049a8:	4607      	mov	r7, r0
 80049aa:	4293      	cmp	r3, r2
 80049ac:	bfb8      	it	lt
 80049ae:	4613      	movlt	r3, r2
 80049b0:	6033      	str	r3, [r6, #0]
 80049b2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80049b6:	460c      	mov	r4, r1
 80049b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80049bc:	b10a      	cbz	r2, 80049c2 <_printf_common+0x26>
 80049be:	3301      	adds	r3, #1
 80049c0:	6033      	str	r3, [r6, #0]
 80049c2:	6823      	ldr	r3, [r4, #0]
 80049c4:	0699      	lsls	r1, r3, #26
 80049c6:	bf42      	ittt	mi
 80049c8:	6833      	ldrmi	r3, [r6, #0]
 80049ca:	3302      	addmi	r3, #2
 80049cc:	6033      	strmi	r3, [r6, #0]
 80049ce:	6825      	ldr	r5, [r4, #0]
 80049d0:	f015 0506 	ands.w	r5, r5, #6
 80049d4:	d106      	bne.n	80049e4 <_printf_common+0x48>
 80049d6:	f104 0a19 	add.w	sl, r4, #25
 80049da:	68e3      	ldr	r3, [r4, #12]
 80049dc:	6832      	ldr	r2, [r6, #0]
 80049de:	1a9b      	subs	r3, r3, r2
 80049e0:	42ab      	cmp	r3, r5
 80049e2:	dc2b      	bgt.n	8004a3c <_printf_common+0xa0>
 80049e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80049e8:	6822      	ldr	r2, [r4, #0]
 80049ea:	3b00      	subs	r3, #0
 80049ec:	bf18      	it	ne
 80049ee:	2301      	movne	r3, #1
 80049f0:	0692      	lsls	r2, r2, #26
 80049f2:	d430      	bmi.n	8004a56 <_printf_common+0xba>
 80049f4:	4641      	mov	r1, r8
 80049f6:	4638      	mov	r0, r7
 80049f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80049fc:	47c8      	blx	r9
 80049fe:	3001      	adds	r0, #1
 8004a00:	d023      	beq.n	8004a4a <_printf_common+0xae>
 8004a02:	6823      	ldr	r3, [r4, #0]
 8004a04:	6922      	ldr	r2, [r4, #16]
 8004a06:	f003 0306 	and.w	r3, r3, #6
 8004a0a:	2b04      	cmp	r3, #4
 8004a0c:	bf14      	ite	ne
 8004a0e:	2500      	movne	r5, #0
 8004a10:	6833      	ldreq	r3, [r6, #0]
 8004a12:	f04f 0600 	mov.w	r6, #0
 8004a16:	bf08      	it	eq
 8004a18:	68e5      	ldreq	r5, [r4, #12]
 8004a1a:	f104 041a 	add.w	r4, r4, #26
 8004a1e:	bf08      	it	eq
 8004a20:	1aed      	subeq	r5, r5, r3
 8004a22:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004a26:	bf08      	it	eq
 8004a28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	bfc4      	itt	gt
 8004a30:	1a9b      	subgt	r3, r3, r2
 8004a32:	18ed      	addgt	r5, r5, r3
 8004a34:	42b5      	cmp	r5, r6
 8004a36:	d11a      	bne.n	8004a6e <_printf_common+0xd2>
 8004a38:	2000      	movs	r0, #0
 8004a3a:	e008      	b.n	8004a4e <_printf_common+0xb2>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	4652      	mov	r2, sl
 8004a40:	4641      	mov	r1, r8
 8004a42:	4638      	mov	r0, r7
 8004a44:	47c8      	blx	r9
 8004a46:	3001      	adds	r0, #1
 8004a48:	d103      	bne.n	8004a52 <_printf_common+0xb6>
 8004a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a52:	3501      	adds	r5, #1
 8004a54:	e7c1      	b.n	80049da <_printf_common+0x3e>
 8004a56:	2030      	movs	r0, #48	@ 0x30
 8004a58:	18e1      	adds	r1, r4, r3
 8004a5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004a5e:	1c5a      	adds	r2, r3, #1
 8004a60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004a64:	4422      	add	r2, r4
 8004a66:	3302      	adds	r3, #2
 8004a68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004a6c:	e7c2      	b.n	80049f4 <_printf_common+0x58>
 8004a6e:	2301      	movs	r3, #1
 8004a70:	4622      	mov	r2, r4
 8004a72:	4641      	mov	r1, r8
 8004a74:	4638      	mov	r0, r7
 8004a76:	47c8      	blx	r9
 8004a78:	3001      	adds	r0, #1
 8004a7a:	d0e6      	beq.n	8004a4a <_printf_common+0xae>
 8004a7c:	3601      	adds	r6, #1
 8004a7e:	e7d9      	b.n	8004a34 <_printf_common+0x98>

08004a80 <_printf_i>:
 8004a80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a84:	7e0f      	ldrb	r7, [r1, #24]
 8004a86:	4691      	mov	r9, r2
 8004a88:	2f78      	cmp	r7, #120	@ 0x78
 8004a8a:	4680      	mov	r8, r0
 8004a8c:	460c      	mov	r4, r1
 8004a8e:	469a      	mov	sl, r3
 8004a90:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004a92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004a96:	d807      	bhi.n	8004aa8 <_printf_i+0x28>
 8004a98:	2f62      	cmp	r7, #98	@ 0x62
 8004a9a:	d80a      	bhi.n	8004ab2 <_printf_i+0x32>
 8004a9c:	2f00      	cmp	r7, #0
 8004a9e:	f000 80d3 	beq.w	8004c48 <_printf_i+0x1c8>
 8004aa2:	2f58      	cmp	r7, #88	@ 0x58
 8004aa4:	f000 80ba 	beq.w	8004c1c <_printf_i+0x19c>
 8004aa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004aac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004ab0:	e03a      	b.n	8004b28 <_printf_i+0xa8>
 8004ab2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004ab6:	2b15      	cmp	r3, #21
 8004ab8:	d8f6      	bhi.n	8004aa8 <_printf_i+0x28>
 8004aba:	a101      	add	r1, pc, #4	@ (adr r1, 8004ac0 <_printf_i+0x40>)
 8004abc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ac0:	08004b19 	.word	0x08004b19
 8004ac4:	08004b2d 	.word	0x08004b2d
 8004ac8:	08004aa9 	.word	0x08004aa9
 8004acc:	08004aa9 	.word	0x08004aa9
 8004ad0:	08004aa9 	.word	0x08004aa9
 8004ad4:	08004aa9 	.word	0x08004aa9
 8004ad8:	08004b2d 	.word	0x08004b2d
 8004adc:	08004aa9 	.word	0x08004aa9
 8004ae0:	08004aa9 	.word	0x08004aa9
 8004ae4:	08004aa9 	.word	0x08004aa9
 8004ae8:	08004aa9 	.word	0x08004aa9
 8004aec:	08004c2f 	.word	0x08004c2f
 8004af0:	08004b57 	.word	0x08004b57
 8004af4:	08004be9 	.word	0x08004be9
 8004af8:	08004aa9 	.word	0x08004aa9
 8004afc:	08004aa9 	.word	0x08004aa9
 8004b00:	08004c51 	.word	0x08004c51
 8004b04:	08004aa9 	.word	0x08004aa9
 8004b08:	08004b57 	.word	0x08004b57
 8004b0c:	08004aa9 	.word	0x08004aa9
 8004b10:	08004aa9 	.word	0x08004aa9
 8004b14:	08004bf1 	.word	0x08004bf1
 8004b18:	6833      	ldr	r3, [r6, #0]
 8004b1a:	1d1a      	adds	r2, r3, #4
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	6032      	str	r2, [r6, #0]
 8004b20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e09e      	b.n	8004c6a <_printf_i+0x1ea>
 8004b2c:	6833      	ldr	r3, [r6, #0]
 8004b2e:	6820      	ldr	r0, [r4, #0]
 8004b30:	1d19      	adds	r1, r3, #4
 8004b32:	6031      	str	r1, [r6, #0]
 8004b34:	0606      	lsls	r6, r0, #24
 8004b36:	d501      	bpl.n	8004b3c <_printf_i+0xbc>
 8004b38:	681d      	ldr	r5, [r3, #0]
 8004b3a:	e003      	b.n	8004b44 <_printf_i+0xc4>
 8004b3c:	0645      	lsls	r5, r0, #25
 8004b3e:	d5fb      	bpl.n	8004b38 <_printf_i+0xb8>
 8004b40:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004b44:	2d00      	cmp	r5, #0
 8004b46:	da03      	bge.n	8004b50 <_printf_i+0xd0>
 8004b48:	232d      	movs	r3, #45	@ 0x2d
 8004b4a:	426d      	negs	r5, r5
 8004b4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b50:	230a      	movs	r3, #10
 8004b52:	4859      	ldr	r0, [pc, #356]	@ (8004cb8 <_printf_i+0x238>)
 8004b54:	e011      	b.n	8004b7a <_printf_i+0xfa>
 8004b56:	6821      	ldr	r1, [r4, #0]
 8004b58:	6833      	ldr	r3, [r6, #0]
 8004b5a:	0608      	lsls	r0, r1, #24
 8004b5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004b60:	d402      	bmi.n	8004b68 <_printf_i+0xe8>
 8004b62:	0649      	lsls	r1, r1, #25
 8004b64:	bf48      	it	mi
 8004b66:	b2ad      	uxthmi	r5, r5
 8004b68:	2f6f      	cmp	r7, #111	@ 0x6f
 8004b6a:	6033      	str	r3, [r6, #0]
 8004b6c:	bf14      	ite	ne
 8004b6e:	230a      	movne	r3, #10
 8004b70:	2308      	moveq	r3, #8
 8004b72:	4851      	ldr	r0, [pc, #324]	@ (8004cb8 <_printf_i+0x238>)
 8004b74:	2100      	movs	r1, #0
 8004b76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004b7a:	6866      	ldr	r6, [r4, #4]
 8004b7c:	2e00      	cmp	r6, #0
 8004b7e:	bfa8      	it	ge
 8004b80:	6821      	ldrge	r1, [r4, #0]
 8004b82:	60a6      	str	r6, [r4, #8]
 8004b84:	bfa4      	itt	ge
 8004b86:	f021 0104 	bicge.w	r1, r1, #4
 8004b8a:	6021      	strge	r1, [r4, #0]
 8004b8c:	b90d      	cbnz	r5, 8004b92 <_printf_i+0x112>
 8004b8e:	2e00      	cmp	r6, #0
 8004b90:	d04b      	beq.n	8004c2a <_printf_i+0x1aa>
 8004b92:	4616      	mov	r6, r2
 8004b94:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b98:	fb03 5711 	mls	r7, r3, r1, r5
 8004b9c:	5dc7      	ldrb	r7, [r0, r7]
 8004b9e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ba2:	462f      	mov	r7, r5
 8004ba4:	42bb      	cmp	r3, r7
 8004ba6:	460d      	mov	r5, r1
 8004ba8:	d9f4      	bls.n	8004b94 <_printf_i+0x114>
 8004baa:	2b08      	cmp	r3, #8
 8004bac:	d10b      	bne.n	8004bc6 <_printf_i+0x146>
 8004bae:	6823      	ldr	r3, [r4, #0]
 8004bb0:	07df      	lsls	r7, r3, #31
 8004bb2:	d508      	bpl.n	8004bc6 <_printf_i+0x146>
 8004bb4:	6923      	ldr	r3, [r4, #16]
 8004bb6:	6861      	ldr	r1, [r4, #4]
 8004bb8:	4299      	cmp	r1, r3
 8004bba:	bfde      	ittt	le
 8004bbc:	2330      	movle	r3, #48	@ 0x30
 8004bbe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004bc2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004bc6:	1b92      	subs	r2, r2, r6
 8004bc8:	6122      	str	r2, [r4, #16]
 8004bca:	464b      	mov	r3, r9
 8004bcc:	4621      	mov	r1, r4
 8004bce:	4640      	mov	r0, r8
 8004bd0:	f8cd a000 	str.w	sl, [sp]
 8004bd4:	aa03      	add	r2, sp, #12
 8004bd6:	f7ff fee1 	bl	800499c <_printf_common>
 8004bda:	3001      	adds	r0, #1
 8004bdc:	d14a      	bne.n	8004c74 <_printf_i+0x1f4>
 8004bde:	f04f 30ff 	mov.w	r0, #4294967295
 8004be2:	b004      	add	sp, #16
 8004be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004be8:	6823      	ldr	r3, [r4, #0]
 8004bea:	f043 0320 	orr.w	r3, r3, #32
 8004bee:	6023      	str	r3, [r4, #0]
 8004bf0:	2778      	movs	r7, #120	@ 0x78
 8004bf2:	4832      	ldr	r0, [pc, #200]	@ (8004cbc <_printf_i+0x23c>)
 8004bf4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004bf8:	6823      	ldr	r3, [r4, #0]
 8004bfa:	6831      	ldr	r1, [r6, #0]
 8004bfc:	061f      	lsls	r7, r3, #24
 8004bfe:	f851 5b04 	ldr.w	r5, [r1], #4
 8004c02:	d402      	bmi.n	8004c0a <_printf_i+0x18a>
 8004c04:	065f      	lsls	r7, r3, #25
 8004c06:	bf48      	it	mi
 8004c08:	b2ad      	uxthmi	r5, r5
 8004c0a:	6031      	str	r1, [r6, #0]
 8004c0c:	07d9      	lsls	r1, r3, #31
 8004c0e:	bf44      	itt	mi
 8004c10:	f043 0320 	orrmi.w	r3, r3, #32
 8004c14:	6023      	strmi	r3, [r4, #0]
 8004c16:	b11d      	cbz	r5, 8004c20 <_printf_i+0x1a0>
 8004c18:	2310      	movs	r3, #16
 8004c1a:	e7ab      	b.n	8004b74 <_printf_i+0xf4>
 8004c1c:	4826      	ldr	r0, [pc, #152]	@ (8004cb8 <_printf_i+0x238>)
 8004c1e:	e7e9      	b.n	8004bf4 <_printf_i+0x174>
 8004c20:	6823      	ldr	r3, [r4, #0]
 8004c22:	f023 0320 	bic.w	r3, r3, #32
 8004c26:	6023      	str	r3, [r4, #0]
 8004c28:	e7f6      	b.n	8004c18 <_printf_i+0x198>
 8004c2a:	4616      	mov	r6, r2
 8004c2c:	e7bd      	b.n	8004baa <_printf_i+0x12a>
 8004c2e:	6833      	ldr	r3, [r6, #0]
 8004c30:	6825      	ldr	r5, [r4, #0]
 8004c32:	1d18      	adds	r0, r3, #4
 8004c34:	6961      	ldr	r1, [r4, #20]
 8004c36:	6030      	str	r0, [r6, #0]
 8004c38:	062e      	lsls	r6, r5, #24
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	d501      	bpl.n	8004c42 <_printf_i+0x1c2>
 8004c3e:	6019      	str	r1, [r3, #0]
 8004c40:	e002      	b.n	8004c48 <_printf_i+0x1c8>
 8004c42:	0668      	lsls	r0, r5, #25
 8004c44:	d5fb      	bpl.n	8004c3e <_printf_i+0x1be>
 8004c46:	8019      	strh	r1, [r3, #0]
 8004c48:	2300      	movs	r3, #0
 8004c4a:	4616      	mov	r6, r2
 8004c4c:	6123      	str	r3, [r4, #16]
 8004c4e:	e7bc      	b.n	8004bca <_printf_i+0x14a>
 8004c50:	6833      	ldr	r3, [r6, #0]
 8004c52:	2100      	movs	r1, #0
 8004c54:	1d1a      	adds	r2, r3, #4
 8004c56:	6032      	str	r2, [r6, #0]
 8004c58:	681e      	ldr	r6, [r3, #0]
 8004c5a:	6862      	ldr	r2, [r4, #4]
 8004c5c:	4630      	mov	r0, r6
 8004c5e:	f000 f859 	bl	8004d14 <memchr>
 8004c62:	b108      	cbz	r0, 8004c68 <_printf_i+0x1e8>
 8004c64:	1b80      	subs	r0, r0, r6
 8004c66:	6060      	str	r0, [r4, #4]
 8004c68:	6863      	ldr	r3, [r4, #4]
 8004c6a:	6123      	str	r3, [r4, #16]
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c72:	e7aa      	b.n	8004bca <_printf_i+0x14a>
 8004c74:	4632      	mov	r2, r6
 8004c76:	4649      	mov	r1, r9
 8004c78:	4640      	mov	r0, r8
 8004c7a:	6923      	ldr	r3, [r4, #16]
 8004c7c:	47d0      	blx	sl
 8004c7e:	3001      	adds	r0, #1
 8004c80:	d0ad      	beq.n	8004bde <_printf_i+0x15e>
 8004c82:	6823      	ldr	r3, [r4, #0]
 8004c84:	079b      	lsls	r3, r3, #30
 8004c86:	d413      	bmi.n	8004cb0 <_printf_i+0x230>
 8004c88:	68e0      	ldr	r0, [r4, #12]
 8004c8a:	9b03      	ldr	r3, [sp, #12]
 8004c8c:	4298      	cmp	r0, r3
 8004c8e:	bfb8      	it	lt
 8004c90:	4618      	movlt	r0, r3
 8004c92:	e7a6      	b.n	8004be2 <_printf_i+0x162>
 8004c94:	2301      	movs	r3, #1
 8004c96:	4632      	mov	r2, r6
 8004c98:	4649      	mov	r1, r9
 8004c9a:	4640      	mov	r0, r8
 8004c9c:	47d0      	blx	sl
 8004c9e:	3001      	adds	r0, #1
 8004ca0:	d09d      	beq.n	8004bde <_printf_i+0x15e>
 8004ca2:	3501      	adds	r5, #1
 8004ca4:	68e3      	ldr	r3, [r4, #12]
 8004ca6:	9903      	ldr	r1, [sp, #12]
 8004ca8:	1a5b      	subs	r3, r3, r1
 8004caa:	42ab      	cmp	r3, r5
 8004cac:	dcf2      	bgt.n	8004c94 <_printf_i+0x214>
 8004cae:	e7eb      	b.n	8004c88 <_printf_i+0x208>
 8004cb0:	2500      	movs	r5, #0
 8004cb2:	f104 0619 	add.w	r6, r4, #25
 8004cb6:	e7f5      	b.n	8004ca4 <_printf_i+0x224>
 8004cb8:	08004e37 	.word	0x08004e37
 8004cbc:	08004e48 	.word	0x08004e48

08004cc0 <memmove>:
 8004cc0:	4288      	cmp	r0, r1
 8004cc2:	b510      	push	{r4, lr}
 8004cc4:	eb01 0402 	add.w	r4, r1, r2
 8004cc8:	d902      	bls.n	8004cd0 <memmove+0x10>
 8004cca:	4284      	cmp	r4, r0
 8004ccc:	4623      	mov	r3, r4
 8004cce:	d807      	bhi.n	8004ce0 <memmove+0x20>
 8004cd0:	1e43      	subs	r3, r0, #1
 8004cd2:	42a1      	cmp	r1, r4
 8004cd4:	d008      	beq.n	8004ce8 <memmove+0x28>
 8004cd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004cda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004cde:	e7f8      	b.n	8004cd2 <memmove+0x12>
 8004ce0:	4601      	mov	r1, r0
 8004ce2:	4402      	add	r2, r0
 8004ce4:	428a      	cmp	r2, r1
 8004ce6:	d100      	bne.n	8004cea <memmove+0x2a>
 8004ce8:	bd10      	pop	{r4, pc}
 8004cea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004cee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004cf2:	e7f7      	b.n	8004ce4 <memmove+0x24>

08004cf4 <_sbrk_r>:
 8004cf4:	b538      	push	{r3, r4, r5, lr}
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	4d05      	ldr	r5, [pc, #20]	@ (8004d10 <_sbrk_r+0x1c>)
 8004cfa:	4604      	mov	r4, r0
 8004cfc:	4608      	mov	r0, r1
 8004cfe:	602b      	str	r3, [r5, #0]
 8004d00:	f7fb fd8a 	bl	8000818 <_sbrk>
 8004d04:	1c43      	adds	r3, r0, #1
 8004d06:	d102      	bne.n	8004d0e <_sbrk_r+0x1a>
 8004d08:	682b      	ldr	r3, [r5, #0]
 8004d0a:	b103      	cbz	r3, 8004d0e <_sbrk_r+0x1a>
 8004d0c:	6023      	str	r3, [r4, #0]
 8004d0e:	bd38      	pop	{r3, r4, r5, pc}
 8004d10:	20000264 	.word	0x20000264

08004d14 <memchr>:
 8004d14:	4603      	mov	r3, r0
 8004d16:	b510      	push	{r4, lr}
 8004d18:	b2c9      	uxtb	r1, r1
 8004d1a:	4402      	add	r2, r0
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	4618      	mov	r0, r3
 8004d20:	d101      	bne.n	8004d26 <memchr+0x12>
 8004d22:	2000      	movs	r0, #0
 8004d24:	e003      	b.n	8004d2e <memchr+0x1a>
 8004d26:	7804      	ldrb	r4, [r0, #0]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	428c      	cmp	r4, r1
 8004d2c:	d1f6      	bne.n	8004d1c <memchr+0x8>
 8004d2e:	bd10      	pop	{r4, pc}

08004d30 <memcpy>:
 8004d30:	440a      	add	r2, r1
 8004d32:	4291      	cmp	r1, r2
 8004d34:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d38:	d100      	bne.n	8004d3c <memcpy+0xc>
 8004d3a:	4770      	bx	lr
 8004d3c:	b510      	push	{r4, lr}
 8004d3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d42:	4291      	cmp	r1, r2
 8004d44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d48:	d1f9      	bne.n	8004d3e <memcpy+0xe>
 8004d4a:	bd10      	pop	{r4, pc}

08004d4c <_realloc_r>:
 8004d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d50:	4680      	mov	r8, r0
 8004d52:	4615      	mov	r5, r2
 8004d54:	460c      	mov	r4, r1
 8004d56:	b921      	cbnz	r1, 8004d62 <_realloc_r+0x16>
 8004d58:	4611      	mov	r1, r2
 8004d5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d5e:	f7ff bc39 	b.w	80045d4 <_malloc_r>
 8004d62:	b92a      	cbnz	r2, 8004d70 <_realloc_r+0x24>
 8004d64:	f7ff fbcc 	bl	8004500 <_free_r>
 8004d68:	2400      	movs	r4, #0
 8004d6a:	4620      	mov	r0, r4
 8004d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d70:	f000 f81a 	bl	8004da8 <_malloc_usable_size_r>
 8004d74:	4285      	cmp	r5, r0
 8004d76:	4606      	mov	r6, r0
 8004d78:	d802      	bhi.n	8004d80 <_realloc_r+0x34>
 8004d7a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004d7e:	d8f4      	bhi.n	8004d6a <_realloc_r+0x1e>
 8004d80:	4629      	mov	r1, r5
 8004d82:	4640      	mov	r0, r8
 8004d84:	f7ff fc26 	bl	80045d4 <_malloc_r>
 8004d88:	4607      	mov	r7, r0
 8004d8a:	2800      	cmp	r0, #0
 8004d8c:	d0ec      	beq.n	8004d68 <_realloc_r+0x1c>
 8004d8e:	42b5      	cmp	r5, r6
 8004d90:	462a      	mov	r2, r5
 8004d92:	4621      	mov	r1, r4
 8004d94:	bf28      	it	cs
 8004d96:	4632      	movcs	r2, r6
 8004d98:	f7ff ffca 	bl	8004d30 <memcpy>
 8004d9c:	4621      	mov	r1, r4
 8004d9e:	4640      	mov	r0, r8
 8004da0:	f7ff fbae 	bl	8004500 <_free_r>
 8004da4:	463c      	mov	r4, r7
 8004da6:	e7e0      	b.n	8004d6a <_realloc_r+0x1e>

08004da8 <_malloc_usable_size_r>:
 8004da8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dac:	1f18      	subs	r0, r3, #4
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	bfbc      	itt	lt
 8004db2:	580b      	ldrlt	r3, [r1, r0]
 8004db4:	18c0      	addlt	r0, r0, r3
 8004db6:	4770      	bx	lr

08004db8 <_init>:
 8004db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dba:	bf00      	nop
 8004dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dbe:	bc08      	pop	{r3}
 8004dc0:	469e      	mov	lr, r3
 8004dc2:	4770      	bx	lr

08004dc4 <_fini>:
 8004dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dc6:	bf00      	nop
 8004dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dca:	bc08      	pop	{r3}
 8004dcc:	469e      	mov	lr, r3
 8004dce:	4770      	bx	lr
